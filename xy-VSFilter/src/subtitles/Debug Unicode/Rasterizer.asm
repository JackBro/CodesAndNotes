; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	E:\GitHub\codesandnotes\xy-vsfilter\src\subtitles\Rasterizer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_1BA@JIHHIEDE@?$AAT?$AAy?$AAp?$AAe?$AAL?$AAi?$AAb?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@EAHCMADO@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@GBFINDKL@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@IBECJAAI@?$AAS?$AAE?$AAC?$AAU?$AAR?$AAI?$AAT?$AAY?$AA?$AA@ ; `string'
PUBLIC	??_C@_17OMAOINJK@?$AAS?$AAA?$AAM?$AA?$AA@	; `string'
PUBLIC	??_C@_19HLLLM@?$AAM?$AAi?$AAm?$AAe?$AA?$AA@	; `string'
PUBLIC	??_C@_1BC@MAICEHGI@?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@EKPAFMCP@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@NKMMNMGL@?$AAF?$AAi?$AAl?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@OEKPKBNA@?$AAC?$AAo?$AAm?$AAp?$AAo?$AAn?$AAe?$AAn?$AAt?$AA?5?$AAC?$AAa?$AAt?$AAe?$AAg?$AAo?$AAr?$AAi?$AAe?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@KANJNLFF@?$AAC?$AAL?$AAS?$AAI?$AAD?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@EJNEECMJ@?$AAA?$AAp?$AAp?$AAI?$AAD?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl?$AA?$AA@	; `string'
PUBLIC	??_C@_13OPKGLAFF@?$AAB?$AA?$AA@			; `string'
PUBLIC	??_C@_13MKMNOPIJ@?$AAD?$AA?$AA@			; `string'
PUBLIC	??_C@_13LHMFKAAD@?$AAM?$AA?$AA@			; `string'
PUBLIC	??_C@_13HADIAKP@?$AAS?$AA?$AA@			; `string'
PUBLIC	?_AfxInitManaged@@YAHXZ				; _AfxInitManaged
PUBLIC	??_C@_1CK@NMKILLLB@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAt?$AAe?$AAT?$AAi?$AAm?$AAe?$AAS?$AAp?$AAa?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@FFBCNGIJ@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAt?$AAe?$AAT?$AAi?$AAm?$AAe?$AA?$AA@ ; `string'
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	?s_pfnPrevHook@CNoUIAssertHook@ATL@@0P6AHHPADPAH@ZA ; ATL::CNoUIAssertHook::s_pfnPrevHook
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?s_pLog@CFixedStringMgr@ATL@@2PAVIFixedStringLog@2@A ; ATL::CFixedStringMgr::s_pLog
PUBLIC	?generic@CArchiveException@@2HB			; CArchiveException::generic
PUBLIC	?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::c_bIsMFCDLLTraits
PUBLIC	?generic@CFileException@@2HB			; CFileException::generic
PUBLIC	?Millisecond@CFileTime@ATL@@2_KB		; ATL::CFileTime::Millisecond
PUBLIC	?Second@CFileTime@ATL@@2_KB			; ATL::CFileTime::Second
PUBLIC	?Minute@CFileTime@ATL@@2_KB			; ATL::CFileTime::Minute
PUBLIC	?Hour@CFileTime@ATL@@2_KB			; ATL::CFileTime::Hour
PUBLIC	?Day@CFileTime@ATL@@2_KB			; ATL::CFileTime::Day
PUBLIC	?Week@CFileTime@ATL@@2_KB			; ATL::CFileTime::Week
PUBLIC	?szInvalidDateTime@ATL@@3QB_WB			; ATL::szInvalidDateTime
PUBLIC	?szInvalidDateTimeSpan@ATL@@3QB_WB		; ATL::szInvalidDateTimeSpan
PUBLIC	__pIncludeInitManaged
PUBLIC	_LIBID_ATLLib
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_IID_IInternalConnection
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQB_WB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::c_bIsMFCDLLTraits
PUBLIC	?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitATL@_WV?$ChTraitsCRT@_W@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<wchar_t,ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::c_bIsMFCDLLTraits
PUBLIC	?sc_redShift@ColorF@D2D1@@0IB			; D2D1::ColorF::sc_redShift
PUBLIC	?sc_greenShift@ColorF@D2D1@@0IB			; D2D1::ColorF::sc_greenShift
PUBLIC	?sc_blueShift@ColorF@D2D1@@0IB			; D2D1::ColorF::sc_blueShift
PUBLIC	?sc_redMask@ColorF@D2D1@@0IB			; D2D1::ColorF::sc_redMask
PUBLIC	?sc_greenMask@ColorF@D2D1@@0IB			; D2D1::ColorF::sc_greenMask
PUBLIC	?sc_blueMask@ColorF@D2D1@@0IB			; D2D1::ColorF::sc_blueMask
PUBLIC	_IID_IAMFilterGraphCallback
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@D@std@@2HB	; std::numeric_limits<char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_W@std@@2HB	; std::numeric_limits<wchar_t>::max_digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_N@std@@2HB	; std::numeric_limits<bool>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@C@std@@2HB	; std::numeric_limits<signed char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@E@std@@2HB	; std::numeric_limits<unsigned char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@F@std@@2HB	; std::numeric_limits<short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@G@std@@2HB	; std::numeric_limits<unsigned short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@H@std@@2HB	; std::numeric_limits<int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@I@std@@2HB	; std::numeric_limits<unsigned int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@J@std@@2HB	; std::numeric_limits<long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@K@std@@2HB	; std::numeric_limits<unsigned long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_J@std@@2HB	; std::numeric_limits<__int64>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_K@std@@2HB	; std::numeric_limits<unsigned __int64>::max_digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@integral_c_tag@mpl@boost@@2HB		; boost::mpl::integral_c_tag::value
PUBLIC	?value@?$bool_@$00@mpl@boost@@2_NB		; boost::mpl::bool_<1>::value
PUBLIC	?value@?$bool_@$0A@@mpl@boost@@2_NB		; boost::mpl::bool_<0>::value
PUBLIC	?value@?$arg@$0?0@mpl@boost@@2HB		; boost::mpl::arg<-1>::value
PUBLIC	?value@?$arg@$00@mpl@boost@@2HB			; boost::mpl::arg<1>::value
PUBLIC	?value@?$arg@$01@mpl@boost@@2HB			; boost::mpl::arg<2>::value
PUBLIC	?value@?$arg@$02@mpl@boost@@2HB			; boost::mpl::arg<3>::value
PUBLIC	?value@?$arg@$03@mpl@boost@@2HB			; boost::mpl::arg<4>::value
PUBLIC	?value@?$arg@$04@mpl@boost@@2HB			; boost::mpl::arg<5>::value
PUBLIC	?value@?$ice_or@$0A@$0A@$0A@$0A@$0A@$0A@$0A@@type_traits@boost@@2_NB ; boost::type_traits::ice_or<0,0,0,0,0,0,0>::value
PUBLIC	?value@?$ice_and@$00$00$00$00$00$00$00@type_traits@boost@@2_NB ; boost::type_traits::ice_and<1,1,1,1,1,1,1>::value
PUBLIC	?value@?$ice_not@$00@type_traits@boost@@2_NB	; boost::type_traits::ice_not<1>::value
PUBLIC	?value@?$is_member_function_pointer_impl@X@detail@boost@@2_NB ; boost::detail::is_member_function_pointer_impl<void>::value
PUBLIC	?value@?$is_member_function_pointer_impl@$$CBX@detail@boost@@2_NB ; boost::detail::is_member_function_pointer_impl<void const >::value
PUBLIC	?value@?$is_member_function_pointer_impl@$$CCX@detail@boost@@2_NB ; boost::detail::is_member_function_pointer_impl<void volatile >::value
PUBLIC	?value@?$is_member_function_pointer_impl@$$CDX@detail@boost@@2_NB ; boost::detail::is_member_function_pointer_impl<void const volatile >::value
PUBLIC	?value@?$int_@$0A@@mpl@boost@@2HB		; boost::mpl::int_<0>::value
PUBLIC	?value@?$int_@$00@mpl@boost@@2HB		; boost::mpl::int_<1>::value
PUBLIC	?value@?$int_@$01@mpl@boost@@2HB		; boost::mpl::int_<2>::value
PUBLIC	?value@?$int_@$02@mpl@boost@@2HB		; boost::mpl::int_<3>::value
PUBLIC	?value@?$int_@$03@mpl@boost@@2HB		; boost::mpl::int_<4>::value
PUBLIC	?value@?$int_@$04@mpl@boost@@2HB		; boost::mpl::int_<5>::value
PUBLIC	?value@?$int_@$05@mpl@boost@@2HB		; boost::mpl::int_<6>::value
PUBLIC	?value@?$int_@$06@mpl@boost@@2HB		; boost::mpl::int_<7>::value
PUBLIC	?value@?$int_@$07@mpl@boost@@2HB		; boost::mpl::int_<8>::value
PUBLIC	?value@?$int_@$08@mpl@boost@@2HB		; boost::mpl::int_<9>::value
PUBLIC	?value@?$int_@$09@mpl@boost@@2HB		; boost::mpl::int_<10>::value
PUBLIC	?value@?$int_@$0L@@mpl@boost@@2HB		; boost::mpl::int_<11>::value
PUBLIC	?value@?$int_@$0M@@mpl@boost@@2HB		; boost::mpl::int_<12>::value
PUBLIC	?value@?$int_@$0N@@mpl@boost@@2HB		; boost::mpl::int_<13>::value
PUBLIC	?value@?$integral_c@I$0A@@mpl@boost@@2IB	; boost::mpl::integral_c<unsigned int,0>::value
PUBLIC	?value@?$is_scalar_impl@X@detail@boost@@2_NB	; boost::detail::is_scalar_impl<void>::value
PUBLIC	?value@?$is_scalar_impl@$$CBX@detail@boost@@2_NB ; boost::detail::is_scalar_impl<void const >::value
PUBLIC	?value@?$is_scalar_impl@$$CCX@detail@boost@@2_NB ; boost::detail::is_scalar_impl<void volatile >::value
PUBLIC	?value@?$is_scalar_impl@$$CDX@detail@boost@@2_NB ; boost::detail::is_scalar_impl<void const volatile >::value
PUBLIC	?value@?$is_pod_impl@X@detail@boost@@2_NB	; boost::detail::is_pod_impl<void>::value
PUBLIC	?value@?$is_pod_impl@$$CBX@detail@boost@@2_NB	; boost::detail::is_pod_impl<void const >::value
PUBLIC	?value@?$is_pod_impl@$$CCX@detail@boost@@2_NB	; boost::detail::is_pod_impl<void volatile >::value
PUBLIC	?value@?$is_pod_impl@$$CDX@detail@boost@@2_NB	; boost::detail::is_pod_impl<void const volatile >::value
PUBLIC	?value@?$alignment_logic@$07$07@detail@boost@@2IB ; boost::detail::alignment_logic<8,8>::value
PUBLIC	?value@?$alignment_of_impl@Tmax_align@detail@boost@@@detail@boost@@2IB ; boost::detail::alignment_of_impl<boost::detail::max_align>::value
PUBLIC	?value@?$integral_c@I$07@mpl@boost@@2IB		; boost::mpl::integral_c<unsigned int,8>::value
PUBLIC	?value@?$alignment_logic@$00$00@detail@boost@@2IB ; boost::detail::alignment_logic<1,1>::value
PUBLIC	?value@?$alignment_of_impl@D@detail@boost@@2IB	; boost::detail::alignment_of_impl<char>::value
PUBLIC	?value@?$integral_c@I$00@mpl@boost@@2IB		; boost::mpl::integral_c<unsigned int,1>::value
PUBLIC	?value@?$alignment_logic@$01$01@detail@boost@@2IB ; boost::detail::alignment_logic<2,2>::value
PUBLIC	?value@?$alignment_of_impl@F@detail@boost@@2IB	; boost::detail::alignment_of_impl<short>::value
PUBLIC	?value@?$integral_c@I$01@mpl@boost@@2IB		; boost::mpl::integral_c<unsigned int,2>::value
PUBLIC	?value@?$alignment_logic@$03$03@detail@boost@@2IB ; boost::detail::alignment_logic<4,4>::value
PUBLIC	?value@?$alignment_of_impl@H@detail@boost@@2IB	; boost::detail::alignment_of_impl<int>::value
PUBLIC	?value@?$integral_c@I$03@mpl@boost@@2IB		; boost::mpl::integral_c<unsigned int,4>::value
PUBLIC	?value@?$alignment_of_impl@J@detail@boost@@2IB	; boost::detail::alignment_of_impl<long>::value
PUBLIC	?value@?$alignment_of_impl@_J@detail@boost@@2IB	; boost::detail::alignment_of_impl<__int64>::value
PUBLIC	?value@?$alignment_of_impl@T?$lower_alignment@$07@detail@boost@@@detail@boost@@2IB ; boost::detail::alignment_of_impl<boost::detail::lower_alignment<8> >::value
PUBLIC	?value@?$is_aligned@$07$07@detail@boost@@2_NB	; boost::detail::is_aligned<8,8>::value
PUBLIC	?found@?$type_with_alignment_imp@$07@detail@boost@@0IB ; boost::detail::type_with_alignment_imp<8>::found
PUBLIC	?value@?$is_pod_impl@Ua8@align@boost@@@detail@boost@@2_NB ; boost::detail::is_pod_impl<boost::align::a8>::value
PUBLIC	?value@?$is_pod_impl@Ua16@align@boost@@@detail@boost@@2_NB ; boost::detail::is_pod_impl<boost::align::a16>::value
PUBLIC	?value@?$is_pod_impl@Ua32@align@boost@@@detail@boost@@2_NB ; boost::detail::is_pod_impl<boost::align::a32>::value
PUBLIC	?value@?$is_pod_impl@Ua64@align@boost@@@detail@boost@@2_NB ; boost::detail::is_pod_impl<boost::align::a64>::value
PUBLIC	?value@?$is_pod_impl@Ua128@align@boost@@@detail@boost@@2_NB ; boost::detail::is_pod_impl<boost::align::a128>::value
PUBLIC	?value@?$length@V?$tuple@Unull_type@tuples@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@@tuples@boost@@@tuples@boost@@2HB ; boost::tuples::length<boost::tuples::tuple<boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> >::value
PUBLIC	?value@?$length@$$CBV?$tuple@Unull_type@tuples@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@@tuples@boost@@@tuples@boost@@2HB ; boost::tuples::length<boost::tuples::tuple<boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> const >::value
PUBLIC	?value@?$length@Unull_type@tuples@boost@@@tuples@boost@@2HB ; boost::tuples::length<boost::tuples::null_type>::value
PUBLIC	?value@?$length@$$CBUnull_type@tuples@boost@@@tuples@boost@@2HB ; boost::tuples::length<boost::tuples::null_type const >::value
PUBLIC	?value@?$implementation_level_impl@$$CBVcollection_size_type@serialization@boost@@@serialization@boost@@2HB ; boost::serialization::implementation_level_impl<boost::serialization::collection_size_type const >::value
PUBLIC	?cpp@check@ldexpf_detect@hash_detail@boost@@2_NB ; boost::hash_detail::ldexpf_detect::check::cpp
PUBLIC	?c99@check@ldexpf_detect@hash_detail@boost@@2_NB ; boost::hash_detail::ldexpf_detect::check::c99
PUBLIC	?cpp@check@ldexpl_detect@hash_detail@boost@@2_NB ; boost::hash_detail::ldexpl_detect::check::cpp
PUBLIC	?c99@check@ldexpl_detect@hash_detail@boost@@2_NB ; boost::hash_detail::ldexpl_detect::check::c99
PUBLIC	?cpp@check@frexpf_detect@hash_detail@boost@@2_NB ; boost::hash_detail::frexpf_detect::check::cpp
PUBLIC	?c99@check@frexpf_detect@hash_detail@boost@@2_NB ; boost::hash_detail::frexpf_detect::check::c99
PUBLIC	?cpp@check@frexpl_detect@hash_detail@boost@@2_NB ; boost::hash_detail::frexpl_detect::check::cpp
PUBLIC	?c99@check@frexpl_detect@hash_detail@boost@@2_NB ; boost::hash_detail::frexpl_detect::check::c99
PUBLIC	?value@?$choose_initial_n@$0A@@static_log2_impl@detail@boost@@2HB ; boost::detail::static_log2_impl::choose_initial_n<0>::value
PUBLIC	?value@?$choose_initial_n@$0BA@@static_log2_impl@detail@boost@@2HB ; boost::detail::static_log2_impl::choose_initial_n<16>::value
PUBLIC	?value@?$choose_initial_n@$0CA@@static_log2_impl@detail@boost@@2HB ; boost::detail::static_log2_impl::choose_initial_n<32>::value
PUBLIC	?c@?$choose_initial_n@$0CA@@static_log2_impl@detail@boost@@2_NB ; boost::detail::static_log2_impl::choose_initial_n<32>::c
PUBLIC	?c@?$choose_initial_n@$0BA@@static_log2_impl@detail@boost@@2_NB ; boost::detail::static_log2_impl::choose_initial_n<16>::c
PUBLIC	?value@?$static_log2_impl@$00$0A@@static_log2_impl@detail@boost@@2HB ; boost::detail::static_log2_impl::static_log2_impl<1,0>::value
PUBLIC	?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::c_bIsMFCDLLTraits
PUBLIC	?is_const@?$cv_traits_imp@PAUvalue_marker@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::detail::value_marker *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUvalue_marker@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::detail::value_marker *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAVCRect@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<CRect *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAVCRect@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<CRect *>::is_volatile
PUBLIC	?value@?$is_base_and_derived_impl@Uvalue_marker@detail@flyweights@boost@@VCRect@@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::flyweights::detail::value_marker,CRect>::value
PUBLIC	?value@?$is_reference_impl@Uno_locking@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_reference_impl<boost::flyweights::no_locking>::value
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@Uno_locking@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::flyweights::no_locking> >::p
PUBLIC	?mpl_assertion_in_line_1@?$apply@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@Una@mpl@3@U783@U783@@?$arg@$00@mpl@boost@@2IB ; boost::mpl::arg<1>::apply<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
PUBLIC	?is_const@?$cv_traits_imp@PAUtag_marker@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::detail::tag_marker *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUtag_marker@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::detail::tag_marker *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAUno_locking@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::no_locking *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUno_locking@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::no_locking *>::is_volatile
PUBLIC	?value@?$is_base_and_derived_impl@Utag_marker@detail@flyweights@boost@@Uno_locking@34@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::flyweights::detail::tag_marker,boost::flyweights::no_locking>::value
PUBLIC	?value@?$has_type_impl_@U?$is_tag@Uno_locking@flyweights@boost@@@detail@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_type_impl_<boost::flyweights::detail::is_tag<boost::flyweights::no_locking>,void>::value
PUBLIC	?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$0A@@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$tag@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::not_<boost::mpl::and_<boost::integral_constant<bool,0>,boost::parameter::aux::has_key_<boost::mpl::set0<boost::mpl::na>,boost::flyweights::tag<boost::parameter::void_> >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > > >::p
PUBLIC	?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$tag@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_tag@U?$arg@$0?0@mpl@boost@@@detail@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$tracking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_tracking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$factory@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_factory@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@aux@23@@aux@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB ; boost::parameter::aux::deduce_tag0<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::tag<boost::parameter::void_> >,boost::flyweights::detail::is_tag<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::tracking<boost::parameter::void_> >,boost::flyweights::is_tracking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::factory<boost::parameter::void_> >,boost::flyweights::is_factory<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::locking<boost::parameter::void_> >,boost::flyweights::is_locking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::holder<boost::parameter::void_> >,boost::flyweights::is_holder<boost::mpl::arg<-1> > >,boost::parameter::void_> > > > >,boost::mpl::set0<boost::mpl::na>,boost::parameter::aux::tag_template_keyword_arg>::mpl_assertion_in_line_10
PUBLIC	?is_const@?$cv_traits_imp@PAUtracking_marker@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::tracking_marker *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUtracking_marker@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::tracking_marker *>::is_volatile
PUBLIC	?value@?$is_base_and_derived_impl@Utracking_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::flyweights::tracking_marker,boost::flyweights::no_locking>::value
PUBLIC	?value@?$has_type_impl_@U?$is_tracking@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_type_impl_<boost::flyweights::is_tracking<boost::flyweights::no_locking>,void>::value
PUBLIC	?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$0A@@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$tracking@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::not_<boost::mpl::and_<boost::integral_constant<bool,0>,boost::parameter::aux::has_key_<boost::mpl::set0<boost::mpl::na>,boost::flyweights::tracking<boost::parameter::void_> >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > > >::p
PUBLIC	?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$tracking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_tracking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$factory@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_factory@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@aux@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB ; boost::parameter::aux::deduce_tag0<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::tracking<boost::parameter::void_> >,boost::flyweights::is_tracking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::factory<boost::parameter::void_> >,boost::flyweights::is_factory<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::locking<boost::parameter::void_> >,boost::flyweights::is_locking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::holder<boost::parameter::void_> >,boost::flyweights::is_holder<boost::mpl::arg<-1> > >,boost::parameter::void_> > > >,boost::mpl::set0<boost::mpl::na>,boost::parameter::aux::tag_template_keyword_arg>::mpl_assertion_in_line_10
PUBLIC	?is_const@?$cv_traits_imp@PAUfactory_marker@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::factory_marker *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUfactory_marker@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::factory_marker *>::is_volatile
PUBLIC	?value@?$is_base_and_derived_impl@Ufactory_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::flyweights::factory_marker,boost::flyweights::no_locking>::value
PUBLIC	?value@?$has_type_impl_@U?$is_factory@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_type_impl_<boost::flyweights::is_factory<boost::flyweights::no_locking>,void>::value
PUBLIC	?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$0A@@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$factory@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::not_<boost::mpl::and_<boost::integral_constant<bool,0>,boost::parameter::aux::has_key_<boost::mpl::set0<boost::mpl::na>,boost::flyweights::factory<boost::parameter::void_> >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > > >::p
PUBLIC	?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$factory@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_factory@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB ; boost::parameter::aux::deduce_tag0<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::factory<boost::parameter::void_> >,boost::flyweights::is_factory<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::locking<boost::parameter::void_> >,boost::flyweights::is_locking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::holder<boost::parameter::void_> >,boost::flyweights::is_holder<boost::mpl::arg<-1> > >,boost::parameter::void_> > >,boost::mpl::set0<boost::mpl::na>,boost::parameter::aux::tag_template_keyword_arg>::mpl_assertion_in_line_10
PUBLIC	?is_const@?$cv_traits_imp@PAUlocking_marker@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::locking_marker *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUlocking_marker@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::locking_marker *>::is_volatile
PUBLIC	?value@?$is_base_and_derived_impl@Ulocking_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::flyweights::locking_marker,boost::flyweights::no_locking>::value
PUBLIC	?value@?$has_type_impl_@U?$is_locking@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_type_impl_<boost::flyweights::is_locking<boost::flyweights::no_locking>,void>::value
PUBLIC	?value@?$has_tag_impl_@U?$set0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_tag_impl_<boost::mpl::set0<boost::mpl::na>,void>::value
PUBLIC	?value@?$has_begin_impl_@U?$set0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_begin_impl_<boost::mpl::set0<boost::mpl::na>,void>::value
PUBLIC	?value@?$apply@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$locking@Uvoid_@parameter@boost@@@flyweights@3@@?$has_key_impl@Uset_tag@aux@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::has_key_impl<boost::mpl::aux::set_tag>::apply<boost::mpl::set0<boost::mpl::na>,boost::flyweights::locking<boost::parameter::void_> >::value
PUBLIC	?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$00@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$locking@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::not_<boost::mpl::and_<boost::integral_constant<bool,1>,boost::parameter::aux::has_key_<boost::mpl::set0<boost::mpl::na>,boost::flyweights::locking<boost::parameter::void_> >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > > >::p
PUBLIC	?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB ; boost::parameter::aux::deduce_tag0<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::locking<boost::parameter::void_> >,boost::flyweights::is_locking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::holder<boost::parameter::void_> >,boost::flyweights::is_holder<boost::mpl::arg<-1> > >,boost::parameter::void_> >,boost::mpl::set0<boost::mpl::na>,boost::parameter::aux::tag_template_keyword_arg>::mpl_assertion_in_line_10
PUBLIC	?is_const@?$cv_traits_imp@PAUmaybe_base@aux@parameter@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::parameter::aux::maybe_base *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUmaybe_base@aux@parameter@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::parameter::aux::maybe_base *>::is_volatile
PUBLIC	?value@?$is_base_and_derived_impl@Umaybe_base@aux@parameter@boost@@Uno_locking@flyweights@4@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::parameter::aux::maybe_base,boost::flyweights::no_locking>::value
PUBLIC	?mpl_assertion_in_line_6@?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@2IB ; boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>::mpl_assertion_in_line_6
PUBLIC	?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Una@mpl@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::mpl::na,boost::parameter::void_>,boost::is_same<boost::mpl::na,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
PUBLIC	?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$tag@Uvoid_@parameter@boost@@@flyweights@4@Una@mpl@4@@parameter@boost@@2IB ; boost::parameter::binding<boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>,boost::flyweights::tag<boost::parameter::void_>,boost::mpl::na>::mpl_assertion_in_line_11
PUBLIC	?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Urefcounted@flyweights@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::flyweights::refcounted,boost::parameter::void_>,boost::is_same<boost::flyweights::refcounted,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
PUBLIC	?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$tracking@Uvoid_@parameter@boost@@@flyweights@4@Urefcounted@64@@parameter@boost@@2IB ; boost::parameter::binding<boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>,boost::flyweights::tracking<boost::parameter::void_>,boost::flyweights::refcounted>::mpl_assertion_in_line_11
PUBLIC	?p@?$assert_arg_pred_not@U?$and_@U?$is_same@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@flyweights@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::parameter::void_>,boost::is_same<boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
PUBLIC	?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$factory@Uvoid_@parameter@boost@@@flyweights@4@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@64@@parameter@boost@@2IB ; boost::parameter::binding<boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>,boost::flyweights::factory<boost::parameter::void_>,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0> >::mpl_assertion_in_line_11
PUBLIC	?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Usimple_locking@flyweights@boost@@Uvoid_@parameter@3@@boost@@U?$is_same@Uno_locking@flyweights@boost@@Uvoid_@parameter@3@@2@U?$bool_@$00@mpl@2@U452@U452@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::flyweights::simple_locking,boost::parameter::void_>,boost::is_same<boost::flyweights::no_locking,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
PUBLIC	?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$locking@Uvoid_@parameter@boost@@@flyweights@4@Usimple_locking@64@@parameter@boost@@2IB ; boost::parameter::binding<boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>,boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::simple_locking>::mpl_assertion_in_line_11
PUBLIC	?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Ustatic_holder@flyweights@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::flyweights::static_holder,boost::parameter::void_>,boost::is_same<boost::flyweights::static_holder,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
PUBLIC	?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$holder@Uvoid_@parameter@boost@@@flyweights@4@Ustatic_holder@64@@parameter@boost@@2IB ; boost::parameter::binding<boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>,boost::flyweights::holder<boost::parameter::void_>,boost::flyweights::static_holder>::mpl_assertion_in_line_11
PUBLIC	?is_const@?$cv_traits_imp@PAUholder_marker@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::holder_marker *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUholder_marker@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::holder_marker *>::is_volatile
PUBLIC	?value@?$is_base_and_derived_impl@Uholder_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::flyweights::holder_marker,boost::flyweights::no_locking>::value
PUBLIC	?value@?$has_type_impl_@U?$is_holder@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_type_impl_<boost::flyweights::is_holder<boost::flyweights::no_locking>,void>::value
PUBLIC	?value@?$has_type_impl_@U?$or_@U?$integral_constant@_N$0A@@boost@@U12@U12@U?$integral_constant@_N$00@2@U12@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_type_impl_<boost::mpl::or_<boost::integral_constant<bool,0>,boost::integral_constant<bool,0>,boost::integral_constant<bool,0>,boost::integral_constant<bool,1>,boost::integral_constant<bool,0> >,void>::value
PUBLIC	?value@?$has_type_impl_@U?$not_@U?$bool_@$00@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_type_impl_<boost::mpl::not_<boost::mpl::bool_<1> >,void>::value
PUBLIC	?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$bool_@$0A@@mpl@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@Uunmatched_arg@detail@flyweights@3@@aux@parameter@3@U?$bool_@$00@23@U723@U723@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::not_<boost::mpl::and_<boost::mpl::bool_<0>,boost::parameter::aux::has_key_<boost::mpl::set0<boost::mpl::na>,boost::flyweights::detail::unmatched_arg>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > > >::p
PUBLIC	?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@Uunmatched_arg@detail@flyweights@boost@@@parameter@boost@@U?$not_@U?$or_@U?$is_tag@U?$arg@$0?0@mpl@boost@@@detail@flyweights@boost@@U?$is_tracking@U?$arg@$0?0@mpl@boost@@@34@U?$is_factory@U?$arg@$0?0@mpl@boost@@@34@U?$is_locking@U?$arg@$0?0@mpl@boost@@@34@U?$is_holder@U?$arg@$0?0@mpl@boost@@@34@@mpl@boost@@@mpl@3@@parameter@boost@@Uvoid_@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB ; boost::parameter::aux::deduce_tag0<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::detail::unmatched_arg>,boost::mpl::not_<boost::mpl::or_<boost::flyweights::detail::is_tag<boost::mpl::arg<-1> >,boost::flyweights::is_tracking<boost::mpl::arg<-1> >,boost::flyweights::is_factory<boost::mpl::arg<-1> >,boost::flyweights::is_locking<boost::mpl::arg<-1> >,boost::flyweights::is_holder<boost::mpl::arg<-1> > > > >,boost::parameter::void_>,boost::mpl::set0<boost::mpl::na>,boost::parameter::aux::tag_template_keyword_arg>::mpl_assertion_in_line_10
PUBLIC	?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Uunmatched_arg@detail@flyweights@boost@@Uvoid_@parameter@4@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::flyweights::detail::unmatched_arg,boost::parameter::void_>,boost::is_same<boost::flyweights::detail::unmatched_arg,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
PUBLIC	?mpl_assertion_in_line_11@?$binding@Uempty_arg_list@aux@parameter@boost@@Uunmatched_arg@detail@flyweights@4@U5674@@parameter@boost@@2IB ; boost::parameter::binding<boost::parameter::aux::empty_arg_list,boost::flyweights::detail::unmatched_arg,boost::flyweights::detail::unmatched_arg>::mpl_assertion_in_line_11
PUBLIC	?mpl_assertion_in_line_12@?$flyweight@VCRect@@Uno_locking@flyweights@boost@@Uvoid_@parameter@4@U564@U564@U564@@flyweights@boost@@0IB ; boost::flyweights::flyweight<CRect,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::mpl_assertion_in_line_12
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::p
PUBLIC	?mpl_assertion_in_line_1@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@?$arg@$00@mpl@boost@@2IB ; boost::mpl::arg<1>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@VCRect@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<CRect> >::p
PUBLIC	?mpl_assertion_in_line_2@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@?$arg@$01@mpl@boost@@2IB ; boost::mpl::arg<2>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
PUBLIC	?value@?$has_tag_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_tag_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
PUBLIC	?value@?$has_begin_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_begin_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
PUBLIC	?mpl_sequence@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::mpl_sequence
PUBLIC	?non_empty@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::non_empty
PUBLIC	?value@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::value
PUBLIC	?value@?$long_@$00@mpl@boost@@2JB		; boost::mpl::long_<1>::value
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > > > >::p
PUBLIC	?mpl_assertion_in_line_1@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$00@mpl@boost@@2IB ; boost::mpl::arg<1>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::mpl::na> >,0> > >::p
PUBLIC	?mpl_assertion_in_line_2@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$01@mpl@boost@@2IB ; boost::mpl::arg<2>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
PUBLIC	?is_const@?$cv_traits_imp@PAUtag_marker@detail@multi_index@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::multi_index::detail::tag_marker *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUtag_marker@detail@multi_index@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::multi_index::detail::tag_marker *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> *>::is_volatile
PUBLIC	?value@?$is_const_rvalue_filter@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_const_rvalue_filter<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
PUBLIC	?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@34@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::multi_index::detail::tag_marker,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::value
PUBLIC	?value@?$is_tag@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_tag<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::value
PUBLIC	?is_const@?$cv_traits_imp@PAU?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@multi_index@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::multi_index::tag<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na> *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAU?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@multi_index@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::multi_index::tag<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na> *>::is_volatile
PUBLIC	?value@?$has_tag_impl_@U?$vector@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_tag_impl_<boost::mpl::vector<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,void>::value
PUBLIC	?value@?$has_begin_impl_@U?$vector@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_begin_impl_<boost::mpl::vector<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,void>::value
PUBLIC	?value@?$has_tag_impl_@U?$vector0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_tag_impl_<boost::mpl::vector0<boost::mpl::na>,void>::value
PUBLIC	?value@?$has_begin_impl_@U?$vector0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_begin_impl_<boost::mpl::vector0<boost::mpl::na>,void>::value
PUBLIC	?value@?$has_type_impl_@U?$push_back@U?$vector0@Una@mpl@boost@@@mpl@boost@@Uhas_push_back_arg@23@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_type_impl_<boost::mpl::push_back<boost::mpl::vector0<boost::mpl::na>,boost::mpl::has_push_back_arg>,void>::value
PUBLIC	?value@?$long_@$0A@@mpl@boost@@2JB		; boost::mpl::long_<0>::value
PUBLIC	?value@?$apply@U?$set0@Una@mpl@boost@@@mpl@boost@@Uduplicate_tag_mark@detail@multi_index@3@@?$has_key_impl@Uset_tag@aux@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::has_key_impl<boost::mpl::aux::set_tag>::apply<boost::mpl::set0<boost::mpl::na>,boost::multi_index::detail::duplicate_tag_mark>::value
PUBLIC	?value@?$no_duplicate_tags@U?$vector0@Una@mpl@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::no_duplicate_tags<boost::mpl::vector0<boost::mpl::na> >::value
PUBLIC	?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@34@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::multi_index::detail::tag_marker,boost::multi_index::tag<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na> >::value
PUBLIC	?value@?$is_tag@U?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@multi_index@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_tag<boost::multi_index::tag<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na> >::value
PUBLIC	?value@?$is_partial_std_allocator@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@allocator@detail@boost@@2_NB ; boost::detail::allocator::is_partial_std_allocator<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::value
PUBLIC	?length@?$nth_layer@$0A@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB ; boost::multi_index::detail::nth_layer<0,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::length
PUBLIC	?length@?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB ; boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::length
PUBLIC	?value@?$is_pointer_helper@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_helper<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
PUBLIC	?value@?$is_reference_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_reference_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
PUBLIC	?value@?$result_@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
PUBLIC	?value@?$ice_not@$0A@@type_traits@boost@@2_NB	; boost::type_traits::ice_not<0>::value
PUBLIC	?value@?$ice_and@$0A@$00$00$00$00$00$00@type_traits@boost@@2_NB ; boost::type_traits::ice_and<0,1,1,1,1,1,1>::value
PUBLIC	?value@?$is_pointer_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
PUBLIC	?value@?$is_arithmetic_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_arithmetic_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
PUBLIC	?value@?$alignment_of_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2IB ; boost::detail::alignment_of_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
PUBLIC	?value@?$alignment_of_impl@T?$lower_alignment@$03@detail@boost@@@detail@boost@@2IB ; boost::detail::alignment_of_impl<boost::detail::lower_alignment<4> >::value
PUBLIC	?value@?$is_aligned@$03$03@detail@boost@@2_NB	; boost::detail::is_aligned<4,4>::value
PUBLIC	?found@?$type_with_alignment_imp@$03@detail@boost@@0IB ; boost::detail::type_with_alignment_imp<4>::found
PUBLIC	?size@?$aligned_storage@$0BI@$03@boost@@2IB	; boost::aligned_storage<24,4>::size
PUBLIC	?alignment@?$aligned_storage@$0BI@$03@boost@@2IB ; boost::aligned_storage<24,4>::alignment
PUBLIC	?value@?$is_partial_std_allocator@V?$allocator@D@std@@@allocator@detail@boost@@2_NB ; boost::detail::allocator::is_partial_std_allocator<std::allocator<char> >::value
PUBLIC	?value@?$has_tag_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_tag_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
PUBLIC	?value@?$has_begin_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_begin_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
PUBLIC	?value@?$no_duplicate_tags_in_index_list@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::no_duplicate_tags_in_index_list<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> > >::value
PUBLIC	?value@?$has_type_impl_@V?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_type_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>,void>::value
PUBLIC	?is_const@?$cv_traits_imp@PAUSTSStyle@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<STSStyle *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUSTSStyle@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<STSStyle *>::is_volatile
PUBLIC	?value@?$is_base_and_derived_impl@Uvalue_marker@detail@flyweights@boost@@USTSStyle@@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::flyweights::detail::value_marker,STSStyle>::value
PUBLIC	?mpl_assertion_in_line_12@?$flyweight@USTSStyle@@Uno_locking@flyweights@boost@@Uvoid_@parameter@4@U564@U564@U564@@flyweights@boost@@0IB ; boost::flyweights::flyweight<STSStyle,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::mpl_assertion_in_line_12
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::p
PUBLIC	?mpl_assertion_in_line_1@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@?$arg@$00@mpl@boost@@2IB ; boost::mpl::arg<1>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@USTSStyle@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<STSStyle> >::p
PUBLIC	?mpl_assertion_in_line_2@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@?$arg@$01@mpl@boost@@2IB ; boost::mpl::arg<2>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
PUBLIC	?value@?$has_tag_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_tag_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
PUBLIC	?value@?$has_begin_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_begin_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
PUBLIC	?mpl_sequence@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::mpl_sequence
PUBLIC	?non_empty@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::non_empty
PUBLIC	?value@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::value
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > > > >::p
PUBLIC	?mpl_assertion_in_line_1@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$00@mpl@boost@@2IB ; boost::mpl::arg<1>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::mpl::na> >,0> > >::p
PUBLIC	?mpl_assertion_in_line_2@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$01@mpl@boost@@2IB ; boost::mpl::arg<2>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
PUBLIC	?is_const@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> *>::is_volatile
PUBLIC	?value@?$is_const_rvalue_filter@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_const_rvalue_filter<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
PUBLIC	?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@34@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::multi_index::detail::tag_marker,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::value
PUBLIC	?value@?$is_tag@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_tag<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::value
PUBLIC	?value@?$is_partial_std_allocator@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@allocator@detail@boost@@2_NB ; boost::detail::allocator::is_partial_std_allocator<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::value
PUBLIC	?length@?$nth_layer@$0A@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB ; boost::multi_index::detail::nth_layer<0,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::length
PUBLIC	?length@?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB ; boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::length
PUBLIC	?value@?$is_pointer_helper@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_helper<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
PUBLIC	?value@?$is_reference_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_reference_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
PUBLIC	?value@?$result_@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
PUBLIC	?value@?$is_pointer_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
PUBLIC	?value@?$is_arithmetic_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_arithmetic_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
PUBLIC	?value@?$alignment_of_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2IB ; boost::detail::alignment_of_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
PUBLIC	?size@?$aligned_storage@$0MA@$07@boost@@2IB	; boost::aligned_storage<192,8>::size
PUBLIC	?alignment@?$aligned_storage@$0MA@$07@boost@@2IB ; boost::aligned_storage<192,8>::alignment
PUBLIC	?value@?$has_tag_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_tag_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
PUBLIC	?value@?$has_begin_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_begin_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
PUBLIC	?value@?$no_duplicate_tags_in_index_list@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::no_duplicate_tags_in_index_list<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> > >::value
PUBLIC	?value@?$has_type_impl_@V?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_type_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>,void>::value
PUBLIC	?MIN_CMD_LENGTH@CRenderedTextSubtitle@@2HB	; CRenderedTextSubtitle::MIN_CMD_LENGTH
PUBLIC	?MAX_CMD_LENGTH@CRenderedTextSubtitle@@2HB	; CRenderedTextSubtitle::MAX_CMD_LENGTH
PUBLIC	?CLIPPER_ALPHA_MASK_MRU_CACHE@CacheManager@@2HB	; CacheManager::CLIPPER_ALPHA_MASK_MRU_CACHE
PUBLIC	?TEXT_INFO_CACHE_ITEM_NUM@CacheManager@@2HB	; CacheManager::TEXT_INFO_CACHE_ITEM_NUM
PUBLIC	?ASS_TAG_LIST_CACHE_ITEM_NUM@CacheManager@@2HB	; CacheManager::ASS_TAG_LIST_CACHE_ITEM_NUM
PUBLIC	?SUBPIXEL_VARIANCE_CACHE_ITEM_NUM@CacheManager@@2HB ; CacheManager::SUBPIXEL_VARIANCE_CACHE_ITEM_NUM
PUBLIC	?OVERLAY_CACHE_ITEM_NUM@CacheManager@@2HB	; CacheManager::OVERLAY_CACHE_ITEM_NUM
PUBLIC	?OVERLAY_NO_BLUR_CACHE_ITEM_NUM@CacheManager@@2HB ; CacheManager::OVERLAY_NO_BLUR_CACHE_ITEM_NUM
PUBLIC	?SCAN_LINE_DATA_CACHE_ITEM_NUM@CacheManager@@2HB ; CacheManager::SCAN_LINE_DATA_CACHE_ITEM_NUM
PUBLIC	?PATH_CACHE_ITEM_NUM@CacheManager@@2HB		; CacheManager::PATH_CACHE_ITEM_NUM
PUBLIC	?WORD_CACHE_ITEM_NUM@CacheManager@@2HB		; CacheManager::WORD_CACHE_ITEM_NUM
PUBLIC	?VOLUME_BITS@ass_synth_priv@@2HB		; ass_synth_priv::VOLUME_BITS
PUBLIC	?is_const@?$cv_traits_imp@PAU?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key> *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAU?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key> *>::is_volatile
PUBLIC	?value@?$is_base_and_derived_impl@Uvalue_marker@detail@flyweights@boost@@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@34@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::flyweights::detail::value_marker,boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key> >::value
PUBLIC	?mpl_assertion_in_line_12@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@0IB ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::mpl_assertion_in_line_12
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::p
PUBLIC	?mpl_assertion_in_line_1@?$apply@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@?$arg@$00@mpl@boost@@2IB ; boost::mpl::arg<1>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@N@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<double> >::p
PUBLIC	?mpl_assertion_in_line_2@?$apply@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@?$arg@$01@mpl@boost@@2IB ; boost::mpl::arg<2>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
PUBLIC	?value@?$has_tag_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_tag_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
PUBLIC	?value@?$has_begin_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_begin_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
PUBLIC	?mpl_sequence@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::mpl_sequence
PUBLIC	?non_empty@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::non_empty
PUBLIC	?value@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::value
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::p
PUBLIC	?mpl_assertion_in_line_1@?$apply@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$00@mpl@boost@@2IB ; boost::mpl::arg<1>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
PUBLIC	?p@?$assert_arg_pred_not@U?$is_na@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::mpl::na> >,0> > >::p
PUBLIC	?mpl_assertion_in_line_2@?$apply@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$01@mpl@boost@@2IB ; boost::mpl::arg<2>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
PUBLIC	?is_const@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> *>::is_volatile
PUBLIC	?value@?$is_const_rvalue_filter@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_const_rvalue_filter<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
PUBLIC	?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@34@@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::multi_index::detail::tag_marker,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
PUBLIC	?value@?$is_tag@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::is_tag<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
PUBLIC	?value@?$is_partial_std_allocator@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@allocator@detail@boost@@2_NB ; boost::detail::allocator::is_partial_std_allocator<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
PUBLIC	?length@?$nth_layer@$0A@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB ; boost::multi_index::detail::nth_layer<0,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::length
PUBLIC	?length@?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB ; boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::length
PUBLIC	?value@?$is_pointer_helper@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_helper<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
PUBLIC	?value@?$is_reference_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_reference_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
PUBLIC	?value@?$result_@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
PUBLIC	?value@?$is_pointer_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
PUBLIC	?value@?$is_arithmetic_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB ; boost::detail::is_arithmetic_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
PUBLIC	?value@?$alignment_of_impl@N@detail@boost@@2IB	; boost::detail::alignment_of_impl<double>::value
PUBLIC	?value@?$alignment_of_impl@Vass_synth_priv@@@detail@boost@@2IB ; boost::detail::alignment_of_impl<ass_synth_priv>::value
PUBLIC	?size@?$aligned_storage@$0BI@$07@boost@@2IB	; boost::aligned_storage<24,8>::size
PUBLIC	?alignment@?$aligned_storage@$0BI@$07@boost@@2IB ; boost::aligned_storage<24,8>::alignment
PUBLIC	?value@?$alignment_of_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2IB ; boost::detail::alignment_of_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
PUBLIC	?size@?$aligned_storage@$0CI@$07@boost@@2IB	; boost::aligned_storage<40,8>::size
PUBLIC	?alignment@?$aligned_storage@$0CI@$07@boost@@2IB ; boost::aligned_storage<40,8>::alignment
PUBLIC	?value@?$has_tag_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_tag_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
PUBLIC	?value@?$has_begin_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_begin_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
PUBLIC	?value@?$no_duplicate_tags_in_index_list@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB ; boost::multi_index::detail::no_duplicate_tags_in_index_list<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> > >::value
PUBLIC	?value@?$has_type_impl_@V?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@X@aux@mpl@boost@@2_NB ; boost::mpl::aux::has_type_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>,void>::value
PUBLIC	?value@?$is_function_impl@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@@detail@boost@@2_NB ; boost::detail::is_function_impl<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> >::value
PUBLIC	?value@?$is_function_impl@I@detail@boost@@2_NB	; boost::detail::is_function_impl<unsigned int>::value
PUBLIC	?value@?$is_function_impl@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB ; boost::detail::is_function_impl<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
PUBLIC	?value@?$is_function_impl@U?$hash@N@boost@@@detail@boost@@2_NB ; boost::detail::is_function_impl<boost::hash<double> >::value
PUBLIC	?value@?$is_function_impl@U?$equal_to@N@std@@@detail@boost@@2_NB ; boost::detail::is_function_impl<std::equal_to<double> >::value
PUBLIC	?is_const@?$cv_traits_imp@PAU?$equal_to@N@std@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<std::equal_to<double> *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAU?$equal_to@N@std@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<std::equal_to<double> *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAU?$hash@N@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::hash<double> *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAU?$hash@N@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::hash<double> *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAI@detail@boost@@2_NB ; boost::detail::cv_traits_imp<unsigned int *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAI@detail@boost@@2_NB ; boost::detail::cv_traits_imp<unsigned int *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAUnull_type@tuples@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::tuples::null_type *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUnull_type@tuples@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::tuples::null_type *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> *>::is_volatile
PUBLIC	?value@?$static_log2@$01@boost@@2HB		; boost::static_log2<2>::value
PUBLIC	?value@?$static_log2_impl@$01$0CA@@static_log2_impl@detail@boost@@2HB ; boost::detail::static_log2_impl::static_log2_impl<2,32>::value
PUBLIC	?value@?$static_log2_impl@$01$0BA@@static_log2_impl@detail@boost@@2HB ; boost::detail::static_log2_impl::static_log2_impl<2,16>::value
PUBLIC	?value@?$static_log2_impl@$01$07@static_log2_impl@detail@boost@@2HB ; boost::detail::static_log2_impl::static_log2_impl<2,8>::value
PUBLIC	?value@?$static_log2_impl@$01$03@static_log2_impl@detail@boost@@2HB ; boost::detail::static_log2_impl::static_log2_impl<2,4>::value
PUBLIC	?value@?$static_log2_impl@$01$01@static_log2_impl@detail@boost@@2HB ; boost::detail::static_log2_impl::static_log2_impl<2,2>::value
PUBLIC	?value@?$static_log2_impl@$01$00@static_log2_impl@detail@boost@@2HB ; boost::detail::static_log2_impl::static_log2_impl<2,1>::value
PUBLIC	?c@?$static_log2_impl@$01$00@static_log2_impl@detail@boost@@2_NB ; boost::detail::static_log2_impl::static_log2_impl<2,1>::c
PUBLIC	?c@?$static_log2_impl@$01$01@static_log2_impl@detail@boost@@2_NB ; boost::detail::static_log2_impl::static_log2_impl<2,2>::c
PUBLIC	?c@?$static_log2_impl@$01$03@static_log2_impl@detail@boost@@2_NB ; boost::detail::static_log2_impl::static_log2_impl<2,4>::c
PUBLIC	?c@?$static_log2_impl@$01$07@static_log2_impl@detail@boost@@2_NB ; boost::detail::static_log2_impl::static_log2_impl<2,8>::c
PUBLIC	?c@?$static_log2_impl@$01$0BA@@static_log2_impl@detail@boost@@2_NB ; boost::detail::static_log2_impl::static_log2_impl<2,16>::c
PUBLIC	?c@?$static_log2_impl@$01$0CA@@static_log2_impl@detail@boost@@2_NB ; boost::detail::static_log2_impl::static_log2_impl<2,32>::c
EXTRN	?wcerr@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A:BYTE ; std::wcerr
EXTRN	?wcout@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A:BYTE ; std::wcout
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?s_pfnPrevHook@CNoUIAssertHook@ATL@@0P6AHHPADPAH@ZA
_BSS	SEGMENT
?s_pfnPrevHook@CNoUIAssertHook@ATL@@0P6AHHPADPAH@ZA DD 01H DUP (?) ; ATL::CNoUIAssertHook::s_pfnPrevHook
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?s_pLog@CFixedStringMgr@ATL@@2PAVIFixedStringLog@2@A
_BSS	SEGMENT
?s_pLog@CFixedStringMgr@ATL@@2PAVIFixedStringLog@2@A DD 01H DUP (?) ; ATL::CFixedStringMgr::s_pLog
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?c@?$static_log2_impl@$01$0CA@@static_log2_impl@detail@boost@@2_NB
CONST	SEGMENT
?c@?$static_log2_impl@$01$0CA@@static_log2_impl@detail@boost@@2_NB DB 00H ; boost::detail::static_log2_impl::static_log2_impl<2,32>::c
CONST	ENDS
;	COMDAT ?c@?$static_log2_impl@$01$0BA@@static_log2_impl@detail@boost@@2_NB
CONST	SEGMENT
?c@?$static_log2_impl@$01$0BA@@static_log2_impl@detail@boost@@2_NB DB 00H ; boost::detail::static_log2_impl::static_log2_impl<2,16>::c
CONST	ENDS
;	COMDAT ?c@?$static_log2_impl@$01$07@static_log2_impl@detail@boost@@2_NB
CONST	SEGMENT
?c@?$static_log2_impl@$01$07@static_log2_impl@detail@boost@@2_NB DB 00H ; boost::detail::static_log2_impl::static_log2_impl<2,8>::c
CONST	ENDS
;	COMDAT ?c@?$static_log2_impl@$01$03@static_log2_impl@detail@boost@@2_NB
CONST	SEGMENT
?c@?$static_log2_impl@$01$03@static_log2_impl@detail@boost@@2_NB DB 00H ; boost::detail::static_log2_impl::static_log2_impl<2,4>::c
CONST	ENDS
;	COMDAT ?c@?$static_log2_impl@$01$01@static_log2_impl@detail@boost@@2_NB
CONST	SEGMENT
?c@?$static_log2_impl@$01$01@static_log2_impl@detail@boost@@2_NB DB 00H ; boost::detail::static_log2_impl::static_log2_impl<2,2>::c
CONST	ENDS
;	COMDAT ?c@?$static_log2_impl@$01$00@static_log2_impl@detail@boost@@2_NB
CONST	SEGMENT
?c@?$static_log2_impl@$01$00@static_log2_impl@detail@boost@@2_NB DB 01H ; boost::detail::static_log2_impl::static_log2_impl<2,1>::c
CONST	ENDS
;	COMDAT ?value@?$static_log2_impl@$01$00@static_log2_impl@detail@boost@@2HB
CONST	SEGMENT
?value@?$static_log2_impl@$01$00@static_log2_impl@detail@boost@@2HB DD 01H ; boost::detail::static_log2_impl::static_log2_impl<2,1>::value
CONST	ENDS
;	COMDAT ?value@?$static_log2_impl@$01$01@static_log2_impl@detail@boost@@2HB
CONST	SEGMENT
?value@?$static_log2_impl@$01$01@static_log2_impl@detail@boost@@2HB DD 01H ; boost::detail::static_log2_impl::static_log2_impl<2,2>::value
CONST	ENDS
;	COMDAT ?value@?$static_log2_impl@$01$03@static_log2_impl@detail@boost@@2HB
CONST	SEGMENT
?value@?$static_log2_impl@$01$03@static_log2_impl@detail@boost@@2HB DD 01H ; boost::detail::static_log2_impl::static_log2_impl<2,4>::value
CONST	ENDS
;	COMDAT ?value@?$static_log2_impl@$01$07@static_log2_impl@detail@boost@@2HB
CONST	SEGMENT
?value@?$static_log2_impl@$01$07@static_log2_impl@detail@boost@@2HB DD 01H ; boost::detail::static_log2_impl::static_log2_impl<2,8>::value
CONST	ENDS
;	COMDAT ?value@?$static_log2_impl@$01$0BA@@static_log2_impl@detail@boost@@2HB
CONST	SEGMENT
?value@?$static_log2_impl@$01$0BA@@static_log2_impl@detail@boost@@2HB DD 01H ; boost::detail::static_log2_impl::static_log2_impl<2,16>::value
CONST	ENDS
;	COMDAT ?value@?$static_log2_impl@$01$0CA@@static_log2_impl@detail@boost@@2HB
CONST	SEGMENT
?value@?$static_log2_impl@$01$0CA@@static_log2_impl@detail@boost@@2HB DD 01H ; boost::detail::static_log2_impl::static_log2_impl<2,32>::value
CONST	ENDS
;	COMDAT ?value@?$static_log2@$01@boost@@2HB
CONST	SEGMENT
?value@?$static_log2@$01@boost@@2HB DD 01H		; boost::static_log2<2>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUnull_type@tuples@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUnull_type@tuples@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::tuples::null_type *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUnull_type@tuples@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUnull_type@tuples@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::tuples::null_type *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAI@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAI@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<unsigned int *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAI@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAI@detail@boost@@2_NB DB 00H	; boost::detail::cv_traits_imp<unsigned int *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAU?$hash@N@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAU?$hash@N@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::hash<double> *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAU?$hash@N@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAU?$hash@N@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::hash<double> *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAU?$equal_to@N@std@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAU?$equal_to@N@std@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<std::equal_to<double> *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAU?$equal_to@N@std@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAU?$equal_to@N@std@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<std::equal_to<double> *>::is_const
CONST	ENDS
;	COMDAT ?value@?$is_function_impl@U?$equal_to@N@std@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_function_impl@U?$equal_to@N@std@@@detail@boost@@2_NB DB 00H ; boost::detail::is_function_impl<std::equal_to<double> >::value
CONST	ENDS
;	COMDAT ?value@?$is_function_impl@U?$hash@N@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_function_impl@U?$hash@N@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_function_impl<boost::hash<double> >::value
CONST	ENDS
;	COMDAT ?value@?$is_function_impl@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_function_impl@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_function_impl<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
CONST	ENDS
;	COMDAT ?value@?$is_function_impl@I@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_function_impl@I@detail@boost@@2_NB DB 00H	; boost::detail::is_function_impl<unsigned int>::value
CONST	ENDS
;	COMDAT ?value@?$is_function_impl@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_function_impl@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_function_impl<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> >::value
CONST	ENDS
;	COMDAT ?value@?$has_type_impl_@V?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_type_impl_@V?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_type_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>,void>::value
CONST	ENDS
;	COMDAT ?value@?$no_duplicate_tags_in_index_list@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?value@?$no_duplicate_tags_in_index_list@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::no_duplicate_tags_in_index_list<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> > >::value
CONST	ENDS
;	COMDAT ?value@?$has_begin_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_begin_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_begin_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_tag_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_tag_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_tag_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
CONST	ENDS
;	COMDAT ?alignment@?$aligned_storage@$0CI@$07@boost@@2IB
CONST	SEGMENT
?alignment@?$aligned_storage@$0CI@$07@boost@@2IB DD 08H	; boost::aligned_storage<40,8>::alignment
CONST	ENDS
;	COMDAT ?size@?$aligned_storage@$0CI@$07@boost@@2IB
CONST	SEGMENT
?size@?$aligned_storage@$0CI@$07@boost@@2IB DD 028H	; boost::aligned_storage<40,8>::size
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2IB DD 08H ; boost::detail::alignment_of_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
CONST	ENDS
;	COMDAT ?alignment@?$aligned_storage@$0BI@$07@boost@@2IB
CONST	SEGMENT
?alignment@?$aligned_storage@$0BI@$07@boost@@2IB DD 08H	; boost::aligned_storage<24,8>::alignment
CONST	ENDS
;	COMDAT ?size@?$aligned_storage@$0BI@$07@boost@@2IB
CONST	SEGMENT
?size@?$aligned_storage@$0BI@$07@boost@@2IB DD 018H	; boost::aligned_storage<24,8>::size
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@Vass_synth_priv@@@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@Vass_synth_priv@@@detail@boost@@2IB DD 08H ; boost::detail::alignment_of_impl<ass_synth_priv>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@N@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@N@detail@boost@@2IB DD 08H	; boost::detail::alignment_of_impl<double>::value
CONST	ENDS
;	COMDAT ?value@?$is_arithmetic_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_arithmetic_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_arithmetic_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
CONST	ENDS
;	COMDAT ?value@?$result_@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$result_@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB DB 00H ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
CONST	ENDS
;	COMDAT ?value@?$is_reference_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_reference_impl@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_reference_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_helper@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_helper@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_helper<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
CONST	ENDS
;	COMDAT ?length@?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB
CONST	SEGMENT
?length@?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB DD 01H ; boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::length
CONST	ENDS
;	COMDAT ?length@?$nth_layer@$0A@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB
CONST	SEGMENT
?length@?$nth_layer@$0A@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB DD 01H ; boost::multi_index::detail::nth_layer<0,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::length
CONST	ENDS
;	COMDAT ?value@?$is_partial_std_allocator@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@allocator@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_partial_std_allocator@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@allocator@detail@boost@@2_NB DB 00H ; boost::detail::allocator::is_partial_std_allocator<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
CONST	ENDS
;	COMDAT ?value@?$is_tag@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?value@?$is_tag@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@multi_index@boost@@2_NB DB 00H ; boost::multi_index::detail::is_tag<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@34@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@34@@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::multi_index::detail::tag_marker,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
CONST	ENDS
;	COMDAT ?value@?$is_const_rvalue_filter@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_const_rvalue_filter@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_const_rvalue_filter<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > *>::is_const
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_2@?$apply@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$01@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_2@?$apply@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$01@mpl@boost@@2IB DD 04H ; boost::mpl::arg<2>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::mpl::na> >,0> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_1@?$apply@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$00@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_1@?$apply@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$00@mpl@boost@@2IB DD 04H ; boost::mpl::arg<1>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::p
CONST	ENDS
;	COMDAT ?value@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?value@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::value
CONST	ENDS
;	COMDAT ?non_empty@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?non_empty@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::non_empty
CONST	ENDS
;	COMDAT ?mpl_sequence@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?mpl_sequence@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::mpl_sequence
CONST	ENDS
;	COMDAT ?value@?$has_begin_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_begin_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_begin_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_tag_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_tag_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_tag_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_2@?$apply@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@?$arg@$01@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_2@?$apply@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@?$arg@$01@mpl@boost@@2IB DD 04H ; boost::mpl::arg<2>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@N@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@N@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<double> >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_1@?$apply@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@?$arg@$00@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_1@?$apply@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@?$arg@$00@mpl@boost@@2IB DD 04H ; boost::mpl::arg<1>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_12@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@0IB
CONST	SEGMENT
?mpl_assertion_in_line_12@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@0IB DD 04H ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::mpl_assertion_in_line_12
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Uvalue_marker@detail@flyweights@boost@@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@34@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Uvalue_marker@detail@flyweights@boost@@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@34@@detail@boost@@2_NB DB 01H ; boost::detail::is_base_and_derived_impl<boost::flyweights::detail::value_marker,boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key> >::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAU?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAU?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key> *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAU?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAU?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key> *>::is_const
CONST	ENDS
;	COMDAT ?VOLUME_BITS@ass_synth_priv@@2HB
CONST	SEGMENT
?VOLUME_BITS@ass_synth_priv@@2HB DD 016H		; ass_synth_priv::VOLUME_BITS
CONST	ENDS
;	COMDAT ?WORD_CACHE_ITEM_NUM@CacheManager@@2HB
CONST	SEGMENT
?WORD_CACHE_ITEM_NUM@CacheManager@@2HB DD 0200H		; CacheManager::WORD_CACHE_ITEM_NUM
CONST	ENDS
;	COMDAT ?PATH_CACHE_ITEM_NUM@CacheManager@@2HB
CONST	SEGMENT
?PATH_CACHE_ITEM_NUM@CacheManager@@2HB DD 0200H		; CacheManager::PATH_CACHE_ITEM_NUM
CONST	ENDS
;	COMDAT ?SCAN_LINE_DATA_CACHE_ITEM_NUM@CacheManager@@2HB
CONST	SEGMENT
?SCAN_LINE_DATA_CACHE_ITEM_NUM@CacheManager@@2HB DD 0200H ; CacheManager::SCAN_LINE_DATA_CACHE_ITEM_NUM
CONST	ENDS
;	COMDAT ?OVERLAY_NO_BLUR_CACHE_ITEM_NUM@CacheManager@@2HB
CONST	SEGMENT
?OVERLAY_NO_BLUR_CACHE_ITEM_NUM@CacheManager@@2HB DD 0100H ; CacheManager::OVERLAY_NO_BLUR_CACHE_ITEM_NUM
CONST	ENDS
;	COMDAT ?OVERLAY_CACHE_ITEM_NUM@CacheManager@@2HB
CONST	SEGMENT
?OVERLAY_CACHE_ITEM_NUM@CacheManager@@2HB DD 0100H	; CacheManager::OVERLAY_CACHE_ITEM_NUM
CONST	ENDS
;	COMDAT ?SUBPIXEL_VARIANCE_CACHE_ITEM_NUM@CacheManager@@2HB
CONST	SEGMENT
?SUBPIXEL_VARIANCE_CACHE_ITEM_NUM@CacheManager@@2HB DD 0100H ; CacheManager::SUBPIXEL_VARIANCE_CACHE_ITEM_NUM
CONST	ENDS
;	COMDAT ?ASS_TAG_LIST_CACHE_ITEM_NUM@CacheManager@@2HB
CONST	SEGMENT
?ASS_TAG_LIST_CACHE_ITEM_NUM@CacheManager@@2HB DD 0100H	; CacheManager::ASS_TAG_LIST_CACHE_ITEM_NUM
CONST	ENDS
;	COMDAT ?TEXT_INFO_CACHE_ITEM_NUM@CacheManager@@2HB
CONST	SEGMENT
?TEXT_INFO_CACHE_ITEM_NUM@CacheManager@@2HB DD 0800H	; CacheManager::TEXT_INFO_CACHE_ITEM_NUM
CONST	ENDS
;	COMDAT ?CLIPPER_ALPHA_MASK_MRU_CACHE@CacheManager@@2HB
CONST	SEGMENT
?CLIPPER_ALPHA_MASK_MRU_CACHE@CacheManager@@2HB DD 030H	; CacheManager::CLIPPER_ALPHA_MASK_MRU_CACHE
CONST	ENDS
;	COMDAT ?MAX_CMD_LENGTH@CRenderedTextSubtitle@@2HB
CONST	SEGMENT
?MAX_CMD_LENGTH@CRenderedTextSubtitle@@2HB DD 05H	; CRenderedTextSubtitle::MAX_CMD_LENGTH
CONST	ENDS
;	COMDAT ?MIN_CMD_LENGTH@CRenderedTextSubtitle@@2HB
CONST	SEGMENT
?MIN_CMD_LENGTH@CRenderedTextSubtitle@@2HB DD 01H	; CRenderedTextSubtitle::MIN_CMD_LENGTH
CONST	ENDS
;	COMDAT ?value@?$has_type_impl_@V?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_type_impl_@V?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_type_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>,void>::value
CONST	ENDS
;	COMDAT ?value@?$no_duplicate_tags_in_index_list@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?value@?$no_duplicate_tags_in_index_list@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::no_duplicate_tags_in_index_list<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> > >::value
CONST	ENDS
;	COMDAT ?value@?$has_begin_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_begin_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_begin_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_tag_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_tag_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_tag_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
CONST	ENDS
;	COMDAT ?alignment@?$aligned_storage@$0MA@$07@boost@@2IB
CONST	SEGMENT
?alignment@?$aligned_storage@$0MA@$07@boost@@2IB DD 08H	; boost::aligned_storage<192,8>::alignment
CONST	ENDS
;	COMDAT ?size@?$aligned_storage@$0MA@$07@boost@@2IB
CONST	SEGMENT
?size@?$aligned_storage@$0MA@$07@boost@@2IB DD 0c0H	; boost::aligned_storage<192,8>::size
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2IB DD 08H ; boost::detail::alignment_of_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
CONST	ENDS
;	COMDAT ?value@?$is_arithmetic_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_arithmetic_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_arithmetic_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
CONST	ENDS
;	COMDAT ?value@?$result_@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$result_@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB DB 00H ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
CONST	ENDS
;	COMDAT ?value@?$is_reference_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_reference_impl@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_reference_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_helper@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_helper@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_helper<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
CONST	ENDS
;	COMDAT ?length@?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB
CONST	SEGMENT
?length@?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB DD 01H ; boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::length
CONST	ENDS
;	COMDAT ?length@?$nth_layer@$0A@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB
CONST	SEGMENT
?length@?$nth_layer@$0A@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB DD 01H ; boost::multi_index::detail::nth_layer<0,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::length
CONST	ENDS
;	COMDAT ?value@?$is_partial_std_allocator@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@allocator@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_partial_std_allocator@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@allocator@detail@boost@@2_NB DB 00H ; boost::detail::allocator::is_partial_std_allocator<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::value
CONST	ENDS
;	COMDAT ?value@?$is_tag@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?value@?$is_tag@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@@detail@multi_index@boost@@2_NB DB 00H ; boost::multi_index::detail::is_tag<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@34@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@34@@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::multi_index::detail::tag_marker,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::value
CONST	ENDS
;	COMDAT ?value@?$is_const_rvalue_filter@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_const_rvalue_filter@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_const_rvalue_filter<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > *>::is_const
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_2@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$01@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_2@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$01@mpl@boost@@2IB DD 04H ; boost::mpl::arg<2>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::mpl::na> >,0> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_1@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$00@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_1@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@USTSStyle@@@3@U?$equal_to@USTSStyle@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$00@mpl@boost@@2IB DD 04H ; boost::mpl::arg<1>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> >,boost::hash<STSStyle>,std::equal_to<STSStyle>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > > > >::p
CONST	ENDS
;	COMDAT ?value@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?value@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::value
CONST	ENDS
;	COMDAT ?non_empty@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?non_empty@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::non_empty
CONST	ENDS
;	COMDAT ?mpl_sequence@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?mpl_sequence@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::mpl_sequence
CONST	ENDS
;	COMDAT ?value@?$has_begin_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_begin_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_begin_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_tag_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_tag_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_tag_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_2@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@?$arg@$01@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_2@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@?$arg@$01@mpl@boost@@2IB DD 04H ; boost::mpl::arg<2>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@USTSStyle@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@USTSStyle@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<STSStyle> >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_1@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@?$arg@$00@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_1@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@Una@mpl@4@U674@U674@@?$arg@$00@mpl@boost@@2IB DD 04H ; boost::mpl::arg<1>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle>,STSStyle,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@V?$refcounted_value@Urep_type@?$default_value_policy@USTSStyle@@@detail@flyweights@boost@@USTSStyle@@@detail@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<STSStyle>::rep_type,STSStyle> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_12@?$flyweight@USTSStyle@@Uno_locking@flyweights@boost@@Uvoid_@parameter@4@U564@U564@U564@@flyweights@boost@@0IB
CONST	SEGMENT
?mpl_assertion_in_line_12@?$flyweight@USTSStyle@@Uno_locking@flyweights@boost@@Uvoid_@parameter@4@U564@U564@U564@@flyweights@boost@@0IB DD 04H ; boost::flyweights::flyweight<STSStyle,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::mpl_assertion_in_line_12
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Uvalue_marker@detail@flyweights@boost@@USTSStyle@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Uvalue_marker@detail@flyweights@boost@@USTSStyle@@@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::flyweights::detail::value_marker,STSStyle>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUSTSStyle@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUSTSStyle@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<STSStyle *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUSTSStyle@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUSTSStyle@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<STSStyle *>::is_const
CONST	ENDS
;	COMDAT ?value@?$has_type_impl_@V?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_type_impl_@V?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_type_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>,void>::value
CONST	ENDS
;	COMDAT ?value@?$no_duplicate_tags_in_index_list@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?value@?$no_duplicate_tags_in_index_list@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::no_duplicate_tags_in_index_list<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> > >::value
CONST	ENDS
;	COMDAT ?value@?$has_begin_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_begin_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_begin_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_tag_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_tag_impl_@U?$vector1@V?$hashed_index@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@U?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_tag_impl_<boost::mpl::vector1<boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag> >,void>::value
CONST	ENDS
;	COMDAT ?value@?$is_partial_std_allocator@V?$allocator@D@std@@@allocator@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_partial_std_allocator@V?$allocator@D@std@@@allocator@detail@boost@@2_NB DB 00H ; boost::detail::allocator::is_partial_std_allocator<std::allocator<char> >::value
CONST	ENDS
;	COMDAT ?alignment@?$aligned_storage@$0BI@$03@boost@@2IB
CONST	SEGMENT
?alignment@?$aligned_storage@$0BI@$03@boost@@2IB DD 04H	; boost::aligned_storage<24,4>::alignment
CONST	ENDS
;	COMDAT ?size@?$aligned_storage@$0BI@$03@boost@@2IB
CONST	SEGMENT
?size@?$aligned_storage@$0BI@$03@boost@@2IB DD 018H	; boost::aligned_storage<24,4>::size
CONST	ENDS
;	COMDAT ?found@?$type_with_alignment_imp@$03@detail@boost@@0IB
CONST	SEGMENT
?found@?$type_with_alignment_imp@$03@detail@boost@@0IB DD 04H ; boost::detail::type_with_alignment_imp<4>::found
CONST	ENDS
;	COMDAT ?value@?$is_aligned@$03$03@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_aligned@$03$03@detail@boost@@2_NB DB 01H	; boost::detail::is_aligned<4,4>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@T?$lower_alignment@$03@detail@boost@@@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@T?$lower_alignment@$03@detail@boost@@@detail@boost@@2IB DD 04H ; boost::detail::alignment_of_impl<boost::detail::lower_alignment<4> >::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2IB DD 04H ; boost::detail::alignment_of_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
CONST	ENDS
;	COMDAT ?value@?$is_arithmetic_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_arithmetic_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_arithmetic_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
CONST	ENDS
;	COMDAT ?value@?$ice_and@$0A@$00$00$00$00$00$00@type_traits@boost@@2_NB
CONST	SEGMENT
?value@?$ice_and@$0A@$00$00$00$00$00$00@type_traits@boost@@2_NB DB 00H ; boost::type_traits::ice_and<0,1,1,1,1,1,1>::value
CONST	ENDS
;	COMDAT ?value@?$ice_not@$0A@@type_traits@boost@@2_NB
CONST	SEGMENT
?value@?$ice_not@$0A@@type_traits@boost@@2_NB DB 01H	; boost::type_traits::ice_not<0>::value
CONST	ENDS
;	COMDAT ?value@?$result_@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$result_@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB DB 00H ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
CONST	ENDS
;	COMDAT ?value@?$is_reference_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_reference_impl@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_reference_impl<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_helper@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_helper@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_helper<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
CONST	ENDS
;	COMDAT ?length@?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB
CONST	SEGMENT
?length@?$nth_layer@$00V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB DD 01H ; boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::length
CONST	ENDS
;	COMDAT ?length@?$nth_layer@$0A@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB
CONST	SEGMENT
?length@?$nth_layer@$0A@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@34@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@2HB DD 01H ; boost::multi_index::detail::nth_layer<0,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::length
CONST	ENDS
;	COMDAT ?value@?$is_partial_std_allocator@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@allocator@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_partial_std_allocator@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@allocator@detail@boost@@2_NB DB 00H ; boost::detail::allocator::is_partial_std_allocator<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::value
CONST	ENDS
;	COMDAT ?value@?$is_tag@U?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@multi_index@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?value@?$is_tag@U?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@multi_index@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::is_tag<boost::multi_index::tag<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na> >::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@34@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@34@@detail@boost@@2_NB DB 01H ; boost::detail::is_base_and_derived_impl<boost::multi_index::detail::tag_marker,boost::multi_index::tag<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na> >::value
CONST	ENDS
;	COMDAT ?value@?$no_duplicate_tags@U?$vector0@Una@mpl@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?value@?$no_duplicate_tags@U?$vector0@Una@mpl@boost@@@mpl@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::no_duplicate_tags<boost::mpl::vector0<boost::mpl::na> >::value
CONST	ENDS
;	COMDAT ?value@?$apply@U?$set0@Una@mpl@boost@@@mpl@boost@@Uduplicate_tag_mark@detail@multi_index@3@@?$has_key_impl@Uset_tag@aux@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$apply@U?$set0@Una@mpl@boost@@@mpl@boost@@Uduplicate_tag_mark@detail@multi_index@3@@?$has_key_impl@Uset_tag@aux@mpl@boost@@@mpl@boost@@2_NB DB 00H ; boost::mpl::has_key_impl<boost::mpl::aux::set_tag>::apply<boost::mpl::set0<boost::mpl::na>,boost::multi_index::detail::duplicate_tag_mark>::value
CONST	ENDS
;	COMDAT ?value@?$long_@$0A@@mpl@boost@@2JB
CONST	SEGMENT
?value@?$long_@$0A@@mpl@boost@@2JB DD 00H		; boost::mpl::long_<0>::value
CONST	ENDS
;	COMDAT ?value@?$has_type_impl_@U?$push_back@U?$vector0@Una@mpl@boost@@@mpl@boost@@Uhas_push_back_arg@23@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_type_impl_@U?$push_back@U?$vector0@Una@mpl@boost@@@mpl@boost@@Uhas_push_back_arg@23@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_type_impl_<boost::mpl::push_back<boost::mpl::vector0<boost::mpl::na>,boost::mpl::has_push_back_arg>,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_begin_impl_@U?$vector0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_begin_impl_@U?$vector0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_begin_impl_<boost::mpl::vector0<boost::mpl::na>,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_tag_impl_@U?$vector0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_tag_impl_@U?$vector0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_tag_impl_<boost::mpl::vector0<boost::mpl::na>,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_begin_impl_@U?$vector@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_begin_impl_@U?$vector@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_begin_impl_<boost::mpl::vector<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_tag_impl_@U?$vector@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_tag_impl_@U?$vector@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_tag_impl_<boost::mpl::vector<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,void>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAU?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@multi_index@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAU?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@multi_index@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::multi_index::tag<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na> *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAU?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@multi_index@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAU?$tag@Una@mpl@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@U123@@multi_index@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::multi_index::tag<boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na> *>::is_const
CONST	ENDS
;	COMDAT ?value@?$is_tag@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?value@?$is_tag@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@@detail@multi_index@boost@@2_NB DB 00H ; boost::multi_index::detail::is_tag<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@34@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Utag_marker@detail@multi_index@boost@@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@34@@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::multi_index::detail::tag_marker,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::value
CONST	ENDS
;	COMDAT ?value@?$is_const_rvalue_filter@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_const_rvalue_filter@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_const_rvalue_filter<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAV?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAU?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUtag_marker@detail@multi_index@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUtag_marker@detail@multi_index@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::multi_index::detail::tag_marker *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUtag_marker@detail@multi_index@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUtag_marker@detail@multi_index@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::multi_index::detail::tag_marker *>::is_const
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_2@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$01@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_2@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$01@mpl@boost@@2IB DD 04H ; boost::mpl::arg<2>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::mpl::na> >,0> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_1@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$00@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_1@?$apply@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@U?$v_iter@U?$vector1@U?$hashed_unique@U?$identity@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@multi_index@boost@@U?$hash@VCRect@@@3@U?$equal_to@VCRect@@@std@@Una@mpl@3@@multi_index@boost@@@mpl@boost@@$0A@@mpl@4@Una@64@U764@U764@@?$arg@$00@mpl@boost@@2IB DD 04H ; boost::mpl::arg<1>::apply<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >,boost::mpl::v_iter<boost::mpl::vector1<boost::multi_index::hashed_unique<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> >,boost::hash<CRect>,std::equal_to<CRect>,boost::mpl::na> >,0>,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@U?$index_node_base@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > > > >::p
CONST	ENDS
;	COMDAT ?value@?$long_@$00@mpl@boost@@2JB
CONST	SEGMENT
?value@?$long_@$00@mpl@boost@@2JB DD 01H		; boost::mpl::long_<1>::value
CONST	ENDS
;	COMDAT ?value@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?value@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::value
CONST	ENDS
;	COMDAT ?non_empty@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?non_empty@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::non_empty
CONST	ENDS
;	COMDAT ?mpl_sequence@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB
CONST	SEGMENT
?mpl_sequence@?$is_index_list@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@@detail@multi_index@boost@@2_NB DB 01H ; boost::multi_index::detail::is_index_list<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list>::mpl_sequence
CONST	ENDS
;	COMDAT ?value@?$has_begin_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_begin_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_begin_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_tag_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_tag_impl_@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_tag_impl_<boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,void>::value
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_2@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@?$arg@$01@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_2@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@?$arg@$01@mpl@boost@@2IB DD 04H ; boost::mpl::arg<2>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_2
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@VCRect@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@VCRect@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<CRect> >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_1@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@?$arg@$00@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_1@?$apply@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@VCRect@@Una@mpl@4@U674@U674@@?$arg@$00@mpl@boost@@2IB DD 04H ; boost::mpl::arg<1>::apply<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect>,CRect,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@V?$refcounted_value@Urep_type@?$default_value_policy@VCRect@@@detail@flyweights@boost@@VCRect@@@detail@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::default_value_policy<CRect>::rep_type,CRect> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_12@?$flyweight@VCRect@@Uno_locking@flyweights@boost@@Uvoid_@parameter@4@U564@U564@U564@@flyweights@boost@@0IB
CONST	SEGMENT
?mpl_assertion_in_line_12@?$flyweight@VCRect@@Uno_locking@flyweights@boost@@Uvoid_@parameter@4@U564@U564@U564@@flyweights@boost@@0IB DD 04H ; boost::flyweights::flyweight<CRect,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::mpl_assertion_in_line_12
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_11@?$binding@Uempty_arg_list@aux@parameter@boost@@Uunmatched_arg@detail@flyweights@4@U5674@@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_11@?$binding@Uempty_arg_list@aux@parameter@boost@@Uunmatched_arg@detail@flyweights@4@U5674@@parameter@boost@@2IB DD 04H ; boost::parameter::binding<boost::parameter::aux::empty_arg_list,boost::flyweights::detail::unmatched_arg,boost::flyweights::detail::unmatched_arg>::mpl_assertion_in_line_11
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Uunmatched_arg@detail@flyweights@boost@@Uvoid_@parameter@4@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Uunmatched_arg@detail@flyweights@boost@@Uvoid_@parameter@4@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::flyweights::detail::unmatched_arg,boost::parameter::void_>,boost::is_same<boost::flyweights::detail::unmatched_arg,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@Uunmatched_arg@detail@flyweights@boost@@@parameter@boost@@U?$not_@U?$or_@U?$is_tag@U?$arg@$0?0@mpl@boost@@@detail@flyweights@boost@@U?$is_tracking@U?$arg@$0?0@mpl@boost@@@34@U?$is_factory@U?$arg@$0?0@mpl@boost@@@34@U?$is_locking@U?$arg@$0?0@mpl@boost@@@34@U?$is_holder@U?$arg@$0?0@mpl@boost@@@34@@mpl@boost@@@mpl@3@@parameter@boost@@Uvoid_@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@Uunmatched_arg@detail@flyweights@boost@@@parameter@boost@@U?$not_@U?$or_@U?$is_tag@U?$arg@$0?0@mpl@boost@@@detail@flyweights@boost@@U?$is_tracking@U?$arg@$0?0@mpl@boost@@@34@U?$is_factory@U?$arg@$0?0@mpl@boost@@@34@U?$is_locking@U?$arg@$0?0@mpl@boost@@@34@U?$is_holder@U?$arg@$0?0@mpl@boost@@@34@@mpl@boost@@@mpl@3@@parameter@boost@@Uvoid_@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB DD 04H ; boost::parameter::aux::deduce_tag0<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::detail::unmatched_arg>,boost::mpl::not_<boost::mpl::or_<boost::flyweights::detail::is_tag<boost::mpl::arg<-1> >,boost::flyweights::is_tracking<boost::mpl::arg<-1> >,boost::flyweights::is_factory<boost::mpl::arg<-1> >,boost::flyweights::is_locking<boost::mpl::arg<-1> >,boost::flyweights::is_holder<boost::mpl::arg<-1> > > > >,boost::parameter::void_>,boost::mpl::set0<boost::mpl::na>,boost::parameter::aux::tag_template_keyword_arg>::mpl_assertion_in_line_10
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$bool_@$0A@@mpl@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@Uunmatched_arg@detail@flyweights@3@@aux@parameter@3@U?$bool_@$00@23@U723@U723@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$bool_@$0A@@mpl@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@Uunmatched_arg@detail@flyweights@3@@aux@parameter@3@U?$bool_@$00@23@U723@U723@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 00H ; boost::mpl::assert_arg_pred_not<boost::mpl::not_<boost::mpl::and_<boost::mpl::bool_<0>,boost::parameter::aux::has_key_<boost::mpl::set0<boost::mpl::na>,boost::flyweights::detail::unmatched_arg>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > > >::p
CONST	ENDS
;	COMDAT ?value@?$has_type_impl_@U?$not_@U?$bool_@$00@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_type_impl_@U?$not_@U?$bool_@$00@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_type_impl_<boost::mpl::not_<boost::mpl::bool_<1> >,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_type_impl_@U?$or_@U?$integral_constant@_N$0A@@boost@@U12@U12@U?$integral_constant@_N$00@2@U12@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_type_impl_@U?$or_@U?$integral_constant@_N$0A@@boost@@U12@U12@U?$integral_constant@_N$00@2@U12@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_type_impl_<boost::mpl::or_<boost::integral_constant<bool,0>,boost::integral_constant<bool,0>,boost::integral_constant<bool,0>,boost::integral_constant<bool,1>,boost::integral_constant<bool,0> >,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_type_impl_@U?$is_holder@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_type_impl_@U?$is_holder@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_type_impl_<boost::flyweights::is_holder<boost::flyweights::no_locking>,void>::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Uholder_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Uholder_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::flyweights::holder_marker,boost::flyweights::no_locking>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUholder_marker@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUholder_marker@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::holder_marker *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUholder_marker@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUholder_marker@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::holder_marker *>::is_const
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$holder@Uvoid_@parameter@boost@@@flyweights@4@Ustatic_holder@64@@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$holder@Uvoid_@parameter@boost@@@flyweights@4@Ustatic_holder@64@@parameter@boost@@2IB DD 04H ; boost::parameter::binding<boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>,boost::flyweights::holder<boost::parameter::void_>,boost::flyweights::static_holder>::mpl_assertion_in_line_11
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Ustatic_holder@flyweights@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Ustatic_holder@flyweights@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::flyweights::static_holder,boost::parameter::void_>,boost::is_same<boost::flyweights::static_holder,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$locking@Uvoid_@parameter@boost@@@flyweights@4@Usimple_locking@64@@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$locking@Uvoid_@parameter@boost@@@flyweights@4@Usimple_locking@64@@parameter@boost@@2IB DD 04H ; boost::parameter::binding<boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>,boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::simple_locking>::mpl_assertion_in_line_11
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Usimple_locking@flyweights@boost@@Uvoid_@parameter@3@@boost@@U?$is_same@Uno_locking@flyweights@boost@@Uvoid_@parameter@3@@2@U?$bool_@$00@mpl@2@U452@U452@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Usimple_locking@flyweights@boost@@Uvoid_@parameter@3@@boost@@U?$is_same@Uno_locking@flyweights@boost@@Uvoid_@parameter@3@@2@U?$bool_@$00@mpl@2@U452@U452@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::flyweights::simple_locking,boost::parameter::void_>,boost::is_same<boost::flyweights::no_locking,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$factory@Uvoid_@parameter@boost@@@flyweights@4@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@64@@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$factory@Uvoid_@parameter@boost@@@flyweights@4@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@64@@parameter@boost@@2IB DD 04H ; boost::parameter::binding<boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>,boost::flyweights::factory<boost::parameter::void_>,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0> >::mpl_assertion_in_line_11
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$and_@U?$is_same@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@flyweights@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$and_@U?$is_same@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@flyweights@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::parameter::void_>,boost::is_same<boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$tracking@Uvoid_@parameter@boost@@@flyweights@4@Urefcounted@64@@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$tracking@Uvoid_@parameter@boost@@@flyweights@4@Urefcounted@64@@parameter@boost@@2IB DD 04H ; boost::parameter::binding<boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>,boost::flyweights::tracking<boost::parameter::void_>,boost::flyweights::refcounted>::mpl_assertion_in_line_11
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Urefcounted@flyweights@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Urefcounted@flyweights@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::flyweights::refcounted,boost::parameter::void_>,boost::is_same<boost::flyweights::refcounted,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$tag@Uvoid_@parameter@boost@@@flyweights@4@Una@mpl@4@@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_11@?$binding@U?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@U?$tag@Uvoid_@parameter@boost@@@flyweights@4@Una@mpl@4@@parameter@boost@@2IB DD 04H ; boost::parameter::binding<boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>,boost::flyweights::tag<boost::parameter::void_>,boost::mpl::na>::mpl_assertion_in_line_11
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Una@mpl@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$and_@U?$is_same@Una@mpl@boost@@Uvoid_@parameter@3@@boost@@U12@U?$bool_@$00@mpl@2@U342@U342@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::and_<boost::is_same<boost::mpl::na,boost::parameter::void_>,boost::is_same<boost::mpl::na,boost::parameter::void_>,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >::p
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_6@?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_6@?$arg_list@U?$template_keyword@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@Uno_locking@23@@parameter@boost@@Uempty_arg_list@aux@23@@aux@parameter@boost@@2IB DD 04H ; boost::parameter::aux::arg_list<boost::parameter::template_keyword<boost::flyweights::locking<boost::parameter::void_>,boost::flyweights::no_locking>,boost::parameter::aux::empty_arg_list>::mpl_assertion_in_line_6
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Umaybe_base@aux@parameter@boost@@Uno_locking@flyweights@4@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Umaybe_base@aux@parameter@boost@@Uno_locking@flyweights@4@@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::parameter::aux::maybe_base,boost::flyweights::no_locking>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUmaybe_base@aux@parameter@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUmaybe_base@aux@parameter@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::parameter::aux::maybe_base *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUmaybe_base@aux@parameter@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUmaybe_base@aux@parameter@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::parameter::aux::maybe_base *>::is_const
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB DD 04H ; boost::parameter::aux::deduce_tag0<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::locking<boost::parameter::void_> >,boost::flyweights::is_locking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::holder<boost::parameter::void_> >,boost::flyweights::is_holder<boost::mpl::arg<-1> > >,boost::parameter::void_> >,boost::mpl::set0<boost::mpl::na>,boost::parameter::aux::tag_template_keyword_arg>::mpl_assertion_in_line_10
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$00@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$locking@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$00@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$locking@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 00H ; boost::mpl::assert_arg_pred_not<boost::mpl::not_<boost::mpl::and_<boost::integral_constant<bool,1>,boost::parameter::aux::has_key_<boost::mpl::set0<boost::mpl::na>,boost::flyweights::locking<boost::parameter::void_> >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > > >::p
CONST	ENDS
;	COMDAT ?value@?$apply@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$locking@Uvoid_@parameter@boost@@@flyweights@3@@?$has_key_impl@Uset_tag@aux@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$apply@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$locking@Uvoid_@parameter@boost@@@flyweights@3@@?$has_key_impl@Uset_tag@aux@mpl@boost@@@mpl@boost@@2_NB DB 00H ; boost::mpl::has_key_impl<boost::mpl::aux::set_tag>::apply<boost::mpl::set0<boost::mpl::na>,boost::flyweights::locking<boost::parameter::void_> >::value
CONST	ENDS
;	COMDAT ?value@?$has_begin_impl_@U?$set0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_begin_impl_@U?$set0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 00H ; boost::mpl::aux::has_begin_impl_<boost::mpl::set0<boost::mpl::na>,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_tag_impl_@U?$set0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_tag_impl_@U?$set0@Una@mpl@boost@@@mpl@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_tag_impl_<boost::mpl::set0<boost::mpl::na>,void>::value
CONST	ENDS
;	COMDAT ?value@?$has_type_impl_@U?$is_locking@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_type_impl_@U?$is_locking@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_type_impl_<boost::flyweights::is_locking<boost::flyweights::no_locking>,void>::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Ulocking_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Ulocking_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB DB 01H ; boost::detail::is_base_and_derived_impl<boost::flyweights::locking_marker,boost::flyweights::no_locking>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUlocking_marker@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUlocking_marker@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::locking_marker *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUlocking_marker@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUlocking_marker@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::locking_marker *>::is_const
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$factory@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_factory@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$factory@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_factory@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB DD 04H ; boost::parameter::aux::deduce_tag0<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::factory<boost::parameter::void_> >,boost::flyweights::is_factory<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::locking<boost::parameter::void_> >,boost::flyweights::is_locking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::holder<boost::parameter::void_> >,boost::flyweights::is_holder<boost::mpl::arg<-1> > >,boost::parameter::void_> > >,boost::mpl::set0<boost::mpl::na>,boost::parameter::aux::tag_template_keyword_arg>::mpl_assertion_in_line_10
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$0A@@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$factory@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$0A@@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$factory@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 00H ; boost::mpl::assert_arg_pred_not<boost::mpl::not_<boost::mpl::and_<boost::integral_constant<bool,0>,boost::parameter::aux::has_key_<boost::mpl::set0<boost::mpl::na>,boost::flyweights::factory<boost::parameter::void_> >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > > >::p
CONST	ENDS
;	COMDAT ?value@?$has_type_impl_@U?$is_factory@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_type_impl_@U?$is_factory@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_type_impl_<boost::flyweights::is_factory<boost::flyweights::no_locking>,void>::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Ufactory_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Ufactory_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::flyweights::factory_marker,boost::flyweights::no_locking>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUfactory_marker@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUfactory_marker@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::factory_marker *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUfactory_marker@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUfactory_marker@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::factory_marker *>::is_const
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$tracking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_tracking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$factory@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_factory@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@aux@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$tracking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_tracking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$factory@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_factory@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@aux@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB DD 04H ; boost::parameter::aux::deduce_tag0<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::tracking<boost::parameter::void_> >,boost::flyweights::is_tracking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::factory<boost::parameter::void_> >,boost::flyweights::is_factory<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::locking<boost::parameter::void_> >,boost::flyweights::is_locking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::holder<boost::parameter::void_> >,boost::flyweights::is_holder<boost::mpl::arg<-1> > >,boost::parameter::void_> > > >,boost::mpl::set0<boost::mpl::na>,boost::parameter::aux::tag_template_keyword_arg>::mpl_assertion_in_line_10
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$0A@@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$tracking@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$0A@@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$tracking@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 00H ; boost::mpl::assert_arg_pred_not<boost::mpl::not_<boost::mpl::and_<boost::integral_constant<bool,0>,boost::parameter::aux::has_key_<boost::mpl::set0<boost::mpl::na>,boost::flyweights::tracking<boost::parameter::void_> >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > > >::p
CONST	ENDS
;	COMDAT ?value@?$has_type_impl_@U?$is_tracking@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_type_impl_@U?$is_tracking@Uno_locking@flyweights@boost@@@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_type_impl_<boost::flyweights::is_tracking<boost::flyweights::no_locking>,void>::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Utracking_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Utracking_marker@flyweights@boost@@Uno_locking@23@@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::flyweights::tracking_marker,boost::flyweights::no_locking>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUtracking_marker@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUtracking_marker@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::tracking_marker *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUtracking_marker@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUtracking_marker@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::tracking_marker *>::is_const
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$tag@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_tag@U?$arg@$0?0@mpl@boost@@@detail@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$tracking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_tracking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$factory@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_factory@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@aux@23@@aux@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_10@?$deduce_tag0@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@U?$deduced_item@U?$optional@U?$deduced@U?$tag@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_tag@U?$arg@$0?0@mpl@boost@@@detail@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$tracking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_tracking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$factory@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_factory@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$locking@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_locking@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@U?$deduced_item@U?$optional@U?$deduced@U?$holder@Uvoid_@parameter@boost@@@flyweights@boost@@@parameter@boost@@U?$is_holder@U?$arg@$0?0@mpl@boost@@@flyweights@3@@parameter@boost@@Uvoid_@23@@aux@23@@aux@23@@aux@23@@aux@23@@563@U?$set0@Una@mpl@boost@@@mpl@3@Utag_template_keyword_arg@563@@aux@parameter@boost@@2IB DD 04H ; boost::parameter::aux::deduce_tag0<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::tag<boost::parameter::void_> >,boost::flyweights::detail::is_tag<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::tracking<boost::parameter::void_> >,boost::flyweights::is_tracking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::factory<boost::parameter::void_> >,boost::flyweights::is_factory<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::locking<boost::parameter::void_> >,boost::flyweights::is_locking<boost::mpl::arg<-1> > >,boost::parameter::aux::deduced_item<boost::parameter::optional<boost::parameter::deduced<boost::flyweights::holder<boost::parameter::void_> >,boost::flyweights::is_holder<boost::mpl::arg<-1> > >,boost::parameter::void_> > > > >,boost::mpl::set0<boost::mpl::na>,boost::parameter::aux::tag_template_keyword_arg>::mpl_assertion_in_line_10
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$0A@@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$tag@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$not_@U?$and_@U?$integral_constant@_N$0A@@boost@@U?$has_key_@U?$set0@Una@mpl@boost@@@mpl@boost@@U?$tag@Uvoid_@parameter@boost@@@flyweights@3@@aux@parameter@2@U?$bool_@$00@mpl@2@U672@U672@@mpl@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 00H ; boost::mpl::assert_arg_pred_not<boost::mpl::not_<boost::mpl::and_<boost::integral_constant<bool,0>,boost::parameter::aux::has_key_<boost::mpl::set0<boost::mpl::na>,boost::flyweights::tag<boost::parameter::void_> >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > > >::p
CONST	ENDS
;	COMDAT ?value@?$has_type_impl_@U?$is_tag@Uno_locking@flyweights@boost@@@detail@flyweights@boost@@X@aux@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$has_type_impl_@U?$is_tag@Uno_locking@flyweights@boost@@@detail@flyweights@boost@@X@aux@mpl@boost@@2_NB DB 01H ; boost::mpl::aux::has_type_impl_<boost::flyweights::detail::is_tag<boost::flyweights::no_locking>,void>::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Utag_marker@detail@flyweights@boost@@Uno_locking@34@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Utag_marker@detail@flyweights@boost@@Uno_locking@34@@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::flyweights::detail::tag_marker,boost::flyweights::no_locking>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUno_locking@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUno_locking@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::no_locking *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUno_locking@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUno_locking@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::no_locking *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUtag_marker@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUtag_marker@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::detail::tag_marker *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUtag_marker@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUtag_marker@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::detail::tag_marker *>::is_const
CONST	ENDS
;	COMDAT ?mpl_assertion_in_line_1@?$apply@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@Una@mpl@3@U783@U783@@?$arg@$00@mpl@boost@@2IB
CONST	SEGMENT
?mpl_assertion_in_line_1@?$apply@Uno_locking@flyweights@boost@@Uempty_arg_list@aux@parameter@3@Una@mpl@3@U783@U783@@?$arg@$00@mpl@boost@@2IB DD 04H ; boost::mpl::arg<1>::apply<boost::flyweights::no_locking,boost::parameter::aux::empty_arg_list,boost::mpl::na,boost::mpl::na,boost::mpl::na>::mpl_assertion_in_line_1
CONST	ENDS
;	COMDAT ?p@?$assert_arg_pred_not@U?$is_na@Uno_locking@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB
CONST	SEGMENT
?p@?$assert_arg_pred_not@U?$is_na@Uno_locking@flyweights@boost@@@mpl@boost@@@mpl@boost@@2_NB DB 01H ; boost::mpl::assert_arg_pred_not<boost::mpl::is_na<boost::flyweights::no_locking> >::p
CONST	ENDS
;	COMDAT ?value@?$is_reference_impl@Uno_locking@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_reference_impl@Uno_locking@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_reference_impl<boost::flyweights::no_locking>::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Uvalue_marker@detail@flyweights@boost@@VCRect@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Uvalue_marker@detail@flyweights@boost@@VCRect@@@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::flyweights::detail::value_marker,CRect>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAVCRect@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAVCRect@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<CRect *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAVCRect@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAVCRect@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<CRect *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUvalue_marker@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUvalue_marker@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::detail::value_marker *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUvalue_marker@detail@flyweights@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUvalue_marker@detail@flyweights@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::flyweights::detail::value_marker *>::is_const
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT
?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB DB 00H ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::c_bIsMFCDLLTraits
CONST	ENDS
;	COMDAT ?value@?$static_log2_impl@$00$0A@@static_log2_impl@detail@boost@@2HB
CONST	SEGMENT
?value@?$static_log2_impl@$00$0A@@static_log2_impl@detail@boost@@2HB DD 00H ; boost::detail::static_log2_impl::static_log2_impl<1,0>::value
CONST	ENDS
;	COMDAT ?c@?$choose_initial_n@$0BA@@static_log2_impl@detail@boost@@2_NB
CONST	SEGMENT
?c@?$choose_initial_n@$0BA@@static_log2_impl@detail@boost@@2_NB DB 01H ; boost::detail::static_log2_impl::choose_initial_n<16>::c
CONST	ENDS
;	COMDAT ?c@?$choose_initial_n@$0CA@@static_log2_impl@detail@boost@@2_NB
CONST	SEGMENT
?c@?$choose_initial_n@$0CA@@static_log2_impl@detail@boost@@2_NB DB 00H ; boost::detail::static_log2_impl::choose_initial_n<32>::c
CONST	ENDS
;	COMDAT ?value@?$choose_initial_n@$0CA@@static_log2_impl@detail@boost@@2HB
CONST	SEGMENT
?value@?$choose_initial_n@$0CA@@static_log2_impl@detail@boost@@2HB DD 020H ; boost::detail::static_log2_impl::choose_initial_n<32>::value
CONST	ENDS
;	COMDAT ?value@?$choose_initial_n@$0BA@@static_log2_impl@detail@boost@@2HB
CONST	SEGMENT
?value@?$choose_initial_n@$0BA@@static_log2_impl@detail@boost@@2HB DD 020H ; boost::detail::static_log2_impl::choose_initial_n<16>::value
CONST	ENDS
;	COMDAT ?value@?$choose_initial_n@$0A@@static_log2_impl@detail@boost@@2HB
CONST	SEGMENT
?value@?$choose_initial_n@$0A@@static_log2_impl@detail@boost@@2HB DD 00H ; boost::detail::static_log2_impl::choose_initial_n<0>::value
CONST	ENDS
;	COMDAT ?c99@check@frexpl_detect@hash_detail@boost@@2_NB
CONST	SEGMENT
?c99@check@frexpl_detect@hash_detail@boost@@2_NB DB 01H	; boost::hash_detail::frexpl_detect::check::c99
CONST	ENDS
;	COMDAT ?cpp@check@frexpl_detect@hash_detail@boost@@2_NB
CONST	SEGMENT
?cpp@check@frexpl_detect@hash_detail@boost@@2_NB DB 01H	; boost::hash_detail::frexpl_detect::check::cpp
CONST	ENDS
;	COMDAT ?c99@check@frexpf_detect@hash_detail@boost@@2_NB
CONST	SEGMENT
?c99@check@frexpf_detect@hash_detail@boost@@2_NB DB 01H	; boost::hash_detail::frexpf_detect::check::c99
CONST	ENDS
;	COMDAT ?cpp@check@frexpf_detect@hash_detail@boost@@2_NB
CONST	SEGMENT
?cpp@check@frexpf_detect@hash_detail@boost@@2_NB DB 01H	; boost::hash_detail::frexpf_detect::check::cpp
CONST	ENDS
;	COMDAT ?c99@check@ldexpl_detect@hash_detail@boost@@2_NB
CONST	SEGMENT
?c99@check@ldexpl_detect@hash_detail@boost@@2_NB DB 01H	; boost::hash_detail::ldexpl_detect::check::c99
CONST	ENDS
;	COMDAT ?cpp@check@ldexpl_detect@hash_detail@boost@@2_NB
CONST	SEGMENT
?cpp@check@ldexpl_detect@hash_detail@boost@@2_NB DB 01H	; boost::hash_detail::ldexpl_detect::check::cpp
CONST	ENDS
;	COMDAT ?c99@check@ldexpf_detect@hash_detail@boost@@2_NB
CONST	SEGMENT
?c99@check@ldexpf_detect@hash_detail@boost@@2_NB DB 01H	; boost::hash_detail::ldexpf_detect::check::c99
CONST	ENDS
;	COMDAT ?cpp@check@ldexpf_detect@hash_detail@boost@@2_NB
CONST	SEGMENT
?cpp@check@ldexpf_detect@hash_detail@boost@@2_NB DB 01H	; boost::hash_detail::ldexpf_detect::check::cpp
CONST	ENDS
;	COMDAT ?value@?$implementation_level_impl@$$CBVcollection_size_type@serialization@boost@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level_impl@$$CBVcollection_size_type@serialization@boost@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level_impl<boost::serialization::collection_size_type const >::value
CONST	ENDS
;	COMDAT ?value@?$length@$$CBUnull_type@tuples@boost@@@tuples@boost@@2HB
CONST	SEGMENT
?value@?$length@$$CBUnull_type@tuples@boost@@@tuples@boost@@2HB DD 00H ; boost::tuples::length<boost::tuples::null_type const >::value
CONST	ENDS
;	COMDAT ?value@?$length@Unull_type@tuples@boost@@@tuples@boost@@2HB
CONST	SEGMENT
?value@?$length@Unull_type@tuples@boost@@@tuples@boost@@2HB DD 00H ; boost::tuples::length<boost::tuples::null_type>::value
CONST	ENDS
;	COMDAT ?value@?$length@$$CBV?$tuple@Unull_type@tuples@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@@tuples@boost@@@tuples@boost@@2HB
CONST	SEGMENT
?value@?$length@$$CBV?$tuple@Unull_type@tuples@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@@tuples@boost@@@tuples@boost@@2HB DD 00H ; boost::tuples::length<boost::tuples::tuple<boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> const >::value
CONST	ENDS
;	COMDAT ?value@?$length@V?$tuple@Unull_type@tuples@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@@tuples@boost@@@tuples@boost@@2HB
CONST	SEGMENT
?value@?$length@V?$tuple@Unull_type@tuples@boost@@U123@U123@U123@U123@U123@U123@U123@U123@U123@@tuples@boost@@@tuples@boost@@2HB DD 00H ; boost::tuples::length<boost::tuples::tuple<boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> >::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@Ua128@align@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@Ua128@align@boost@@@detail@boost@@2_NB DB 01H ; boost::detail::is_pod_impl<boost::align::a128>::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@Ua64@align@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@Ua64@align@boost@@@detail@boost@@2_NB DB 01H ; boost::detail::is_pod_impl<boost::align::a64>::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@Ua32@align@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@Ua32@align@boost@@@detail@boost@@2_NB DB 01H ; boost::detail::is_pod_impl<boost::align::a32>::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@Ua16@align@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@Ua16@align@boost@@@detail@boost@@2_NB DB 01H ; boost::detail::is_pod_impl<boost::align::a16>::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@Ua8@align@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@Ua8@align@boost@@@detail@boost@@2_NB DB 01H ; boost::detail::is_pod_impl<boost::align::a8>::value
CONST	ENDS
;	COMDAT ?found@?$type_with_alignment_imp@$07@detail@boost@@0IB
CONST	SEGMENT
?found@?$type_with_alignment_imp@$07@detail@boost@@0IB DD 08H ; boost::detail::type_with_alignment_imp<8>::found
CONST	ENDS
;	COMDAT ?value@?$is_aligned@$07$07@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_aligned@$07$07@detail@boost@@2_NB DB 01H	; boost::detail::is_aligned<8,8>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@T?$lower_alignment@$07@detail@boost@@@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@T?$lower_alignment@$07@detail@boost@@@detail@boost@@2IB DD 08H ; boost::detail::alignment_of_impl<boost::detail::lower_alignment<8> >::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@_J@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@_J@detail@boost@@2IB DD 08H	; boost::detail::alignment_of_impl<__int64>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@J@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@J@detail@boost@@2IB DD 04H	; boost::detail::alignment_of_impl<long>::value
CONST	ENDS
;	COMDAT ?value@?$integral_c@I$03@mpl@boost@@2IB
CONST	SEGMENT
?value@?$integral_c@I$03@mpl@boost@@2IB DD 04H		; boost::mpl::integral_c<unsigned int,4>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@H@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@H@detail@boost@@2IB DD 04H	; boost::detail::alignment_of_impl<int>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_logic@$03$03@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_logic@$03$03@detail@boost@@2IB DD 04H ; boost::detail::alignment_logic<4,4>::value
CONST	ENDS
;	COMDAT ?value@?$integral_c@I$01@mpl@boost@@2IB
CONST	SEGMENT
?value@?$integral_c@I$01@mpl@boost@@2IB DD 02H		; boost::mpl::integral_c<unsigned int,2>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@F@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@F@detail@boost@@2IB DD 02H	; boost::detail::alignment_of_impl<short>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_logic@$01$01@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_logic@$01$01@detail@boost@@2IB DD 02H ; boost::detail::alignment_logic<2,2>::value
CONST	ENDS
;	COMDAT ?value@?$integral_c@I$00@mpl@boost@@2IB
CONST	SEGMENT
?value@?$integral_c@I$00@mpl@boost@@2IB DD 01H		; boost::mpl::integral_c<unsigned int,1>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@D@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@D@detail@boost@@2IB DD 01H	; boost::detail::alignment_of_impl<char>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_logic@$00$00@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_logic@$00$00@detail@boost@@2IB DD 01H ; boost::detail::alignment_logic<1,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_c@I$07@mpl@boost@@2IB
CONST	SEGMENT
?value@?$integral_c@I$07@mpl@boost@@2IB DD 08H		; boost::mpl::integral_c<unsigned int,8>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@Tmax_align@detail@boost@@@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@Tmax_align@detail@boost@@@detail@boost@@2IB DD 08H ; boost::detail::alignment_of_impl<boost::detail::max_align>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_logic@$07$07@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_logic@$07$07@detail@boost@@2IB DD 08H ; boost::detail::alignment_logic<8,8>::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@$$CDX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@$$CDX@detail@boost@@2_NB DB 01H	; boost::detail::is_pod_impl<void const volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@$$CCX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@$$CCX@detail@boost@@2_NB DB 01H	; boost::detail::is_pod_impl<void volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@$$CBX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@$$CBX@detail@boost@@2_NB DB 01H	; boost::detail::is_pod_impl<void const >::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@X@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@X@detail@boost@@2_NB DB 01H	; boost::detail::is_pod_impl<void>::value
CONST	ENDS
;	COMDAT ?value@?$is_scalar_impl@$$CDX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_scalar_impl@$$CDX@detail@boost@@2_NB DB 00H	; boost::detail::is_scalar_impl<void const volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_scalar_impl@$$CCX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_scalar_impl@$$CCX@detail@boost@@2_NB DB 00H	; boost::detail::is_scalar_impl<void volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_scalar_impl@$$CBX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_scalar_impl@$$CBX@detail@boost@@2_NB DB 00H	; boost::detail::is_scalar_impl<void const >::value
CONST	ENDS
;	COMDAT ?value@?$is_scalar_impl@X@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_scalar_impl@X@detail@boost@@2_NB DB 00H	; boost::detail::is_scalar_impl<void>::value
CONST	ENDS
;	COMDAT ?value@?$integral_c@I$0A@@mpl@boost@@2IB
CONST	SEGMENT
?value@?$integral_c@I$0A@@mpl@boost@@2IB DD 00H		; boost::mpl::integral_c<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$0N@@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$0N@@mpl@boost@@2HB DD 0dH		; boost::mpl::int_<13>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$0M@@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$0M@@mpl@boost@@2HB DD 0cH		; boost::mpl::int_<12>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$0L@@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$0L@@mpl@boost@@2HB DD 0bH		; boost::mpl::int_<11>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$09@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$09@mpl@boost@@2HB DD 0aH			; boost::mpl::int_<10>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$08@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$08@mpl@boost@@2HB DD 09H			; boost::mpl::int_<9>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$07@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$07@mpl@boost@@2HB DD 08H			; boost::mpl::int_<8>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$06@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$06@mpl@boost@@2HB DD 07H			; boost::mpl::int_<7>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$05@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$05@mpl@boost@@2HB DD 06H			; boost::mpl::int_<6>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$04@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$04@mpl@boost@@2HB DD 05H			; boost::mpl::int_<5>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$03@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$03@mpl@boost@@2HB DD 04H			; boost::mpl::int_<4>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$02@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$02@mpl@boost@@2HB DD 03H			; boost::mpl::int_<3>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$01@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$01@mpl@boost@@2HB DD 02H			; boost::mpl::int_<2>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$00@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$00@mpl@boost@@2HB DD 01H			; boost::mpl::int_<1>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$0A@@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$0A@@mpl@boost@@2HB DD 00H		; boost::mpl::int_<0>::value
CONST	ENDS
;	COMDAT ?value@?$is_member_function_pointer_impl@$$CDX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_member_function_pointer_impl@$$CDX@detail@boost@@2_NB DB 00H ; boost::detail::is_member_function_pointer_impl<void const volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_member_function_pointer_impl@$$CCX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_member_function_pointer_impl@$$CCX@detail@boost@@2_NB DB 00H ; boost::detail::is_member_function_pointer_impl<void volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_member_function_pointer_impl@$$CBX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_member_function_pointer_impl@$$CBX@detail@boost@@2_NB DB 00H ; boost::detail::is_member_function_pointer_impl<void const >::value
CONST	ENDS
;	COMDAT ?value@?$is_member_function_pointer_impl@X@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_member_function_pointer_impl@X@detail@boost@@2_NB DB 00H ; boost::detail::is_member_function_pointer_impl<void>::value
CONST	ENDS
;	COMDAT ?value@?$ice_not@$00@type_traits@boost@@2_NB
CONST	SEGMENT
?value@?$ice_not@$00@type_traits@boost@@2_NB DB 00H	; boost::type_traits::ice_not<1>::value
CONST	ENDS
;	COMDAT ?value@?$ice_and@$00$00$00$00$00$00$00@type_traits@boost@@2_NB
CONST	SEGMENT
?value@?$ice_and@$00$00$00$00$00$00$00@type_traits@boost@@2_NB DB 01H ; boost::type_traits::ice_and<1,1,1,1,1,1,1>::value
CONST	ENDS
;	COMDAT ?value@?$ice_or@$0A@$0A@$0A@$0A@$0A@$0A@$0A@@type_traits@boost@@2_NB
CONST	SEGMENT
?value@?$ice_or@$0A@$0A@$0A@$0A@$0A@$0A@$0A@@type_traits@boost@@2_NB DB 00H ; boost::type_traits::ice_or<0,0,0,0,0,0,0>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$04@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$04@mpl@boost@@2HB DD 05H			; boost::mpl::arg<5>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$03@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$03@mpl@boost@@2HB DD 04H			; boost::mpl::arg<4>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$02@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$02@mpl@boost@@2HB DD 03H			; boost::mpl::arg<3>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$01@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$01@mpl@boost@@2HB DD 02H			; boost::mpl::arg<2>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$00@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$00@mpl@boost@@2HB DD 01H			; boost::mpl::arg<1>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$0?0@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$0?0@mpl@boost@@2HB DD 0ffffffffH		; boost::mpl::arg<-1>::value
CONST	ENDS
;	COMDAT ?value@?$bool_@$0A@@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$bool_@$0A@@mpl@boost@@2_NB DB 00H		; boost::mpl::bool_<0>::value
CONST	ENDS
;	COMDAT ?value@?$bool_@$00@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$bool_@$00@mpl@boost@@2_NB DB 01H		; boost::mpl::bool_<1>::value
CONST	ENDS
;	COMDAT ?value@integral_c_tag@mpl@boost@@2HB
CONST	SEGMENT
?value@integral_c_tag@mpl@boost@@2HB DD 00H		; boost::mpl::integral_c_tag::value
CONST	ENDS
_DATA	SEGMENT
_tcout	DD	FLAT:?wcout@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A
_tcerr	DD	FLAT:?wcerr@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A
_DATA	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 08H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_K@std@@2HB DD 015H	; std::numeric_limits<unsigned __int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_J@std@@2HB DD 014H	; std::numeric_limits<__int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@K@std@@2HB DD 0bH	; std::numeric_limits<unsigned long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@J@std@@2HB DD 0bH	; std::numeric_limits<long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@I@std@@2HB DD 0bH	; std::numeric_limits<unsigned int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@H@std@@2HB DD 0bH	; std::numeric_limits<int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@G@std@@2HB DD 06H	; std::numeric_limits<unsigned short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@F@std@@2HB DD 06H	; std::numeric_limits<short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@E@std@@2HB DD 04H	; std::numeric_limits<unsigned char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@C@std@@2HB DD 04H	; std::numeric_limits<signed char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_N@std@@2HB DD 00H	; std::numeric_limits<bool>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_W@std@@2HB DD 06H	; std::numeric_limits<wchar_t>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@D@std@@2HB DD 04H	; std::numeric_limits<char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 01H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT _IID_IAMFilterGraphCallback
CONST	SEGMENT
_IID_IAMFilterGraphCallback DD 056a868fdH
	DW	0ad4H
	DW	011ceH
	DB	0b0H
	DB	0a3H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0a7H
	DB	070H
CONST	ENDS
;	COMDAT ?sc_blueMask@ColorF@D2D1@@0IB
CONST	SEGMENT
?sc_blueMask@ColorF@D2D1@@0IB DD 0ffH			; D2D1::ColorF::sc_blueMask
CONST	ENDS
;	COMDAT ?sc_greenMask@ColorF@D2D1@@0IB
CONST	SEGMENT
?sc_greenMask@ColorF@D2D1@@0IB DD 0ff00H		; D2D1::ColorF::sc_greenMask
CONST	ENDS
;	COMDAT ?sc_redMask@ColorF@D2D1@@0IB
CONST	SEGMENT
?sc_redMask@ColorF@D2D1@@0IB DD 0ff0000H		; D2D1::ColorF::sc_redMask
CONST	ENDS
;	COMDAT ?sc_blueShift@ColorF@D2D1@@0IB
CONST	SEGMENT
?sc_blueShift@ColorF@D2D1@@0IB DD 00H			; D2D1::ColorF::sc_blueShift
CONST	ENDS
;	COMDAT ?sc_greenShift@ColorF@D2D1@@0IB
CONST	SEGMENT
?sc_greenShift@ColorF@D2D1@@0IB DD 08H			; D2D1::ColorF::sc_greenShift
CONST	ENDS
;	COMDAT ?sc_redShift@ColorF@D2D1@@0IB
CONST	SEGMENT
?sc_redShift@ColorF@D2D1@@0IB DD 010H			; D2D1::ColorF::sc_redShift
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitATL@_WV?$ChTraitsCRT@_W@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT
?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitATL@_WV?$ChTraitsCRT@_W@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB DB 00H ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<wchar_t,ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::c_bIsMFCDLLTraits
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT
?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB DB 00H ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::c_bIsMFCDLLTraits
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQB_WB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQB_WB DD FLAT:??_C@_1M@EJNEECMJ@?$AAA?$AAp?$AAp?$AAI?$AAD?$AA?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_1M@KANJNLFF@?$AAC?$AAL?$AAS?$AAI?$AAD?$AA?$AA@
	DD	FLAT:??_C@_1CK@OEKPKBNA@?$AAC?$AAo?$AAm?$AAp?$AAo?$AAn?$AAe?$AAn?$AAt?$AA?5?$AAC?$AAa?$AAt?$AAe?$AAg?$AAo?$AAr?$AAi?$AAe?$AAs?$AA?$AA@
	DD	FLAT:??_C@_1BC@NKMMNMGL@?$AAF?$AAi?$AAl?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?$AA@
	DD	FLAT:??_C@_1BE@EKPAFMCP@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$AA@
	DD	FLAT:??_C@_1BC@MAICEHGI@?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AA@
	DD	FLAT:??_C@_19HLLLM@?$AAM?$AAi?$AAm?$AAe?$AA?$AA@
	DD	FLAT:??_C@_17OMAOINJK@?$AAS?$AAA?$AAM?$AA?$AA@
	DD	FLAT:??_C@_1BC@IBECJAAI@?$AAS?$AAE?$AAC?$AAU?$AAR?$AAI?$AAT?$AAY?$AA?$AA@
	DD	FLAT:??_C@_1O@GBFINDKL@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?$AA@
	DD	FLAT:??_C@_1BC@EAHCMADO@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?$AA@
	DD	FLAT:??_C@_1BA@JIHHIEDE@?$AAT?$AAy?$AAp?$AAe?$AAL?$AAi?$AAb?$AA?$AA@
CONST	ENDS
;	COMDAT ??_C@_1BA@JIHHIEDE@?$AAT?$AAy?$AAp?$AAe?$AAL?$AAi?$AAb?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@JIHHIEDE@?$AAT?$AAy?$AAp?$AAe?$AAL?$AAi?$AAb?$AA?$AA@ DB 'T', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 'L', 00H, 'i', 00H, 'b', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@EAHCMADO@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@EAHCMADO@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?$AA@ DB 'S'
	DB	00H, 'o', 00H, 'f', 00H, 't', 00H, 'w', 00H, 'a', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@GBFINDKL@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?$AA@
CONST	SEGMENT
??_C@_1O@GBFINDKL@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?$AA@ DB 'S', 00H, 'Y'
	DB	00H, 'S', 00H, 'T', 00H, 'E', 00H, 'M', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@IBECJAAI@?$AAS?$AAE?$AAC?$AAU?$AAR?$AAI?$AAT?$AAY?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@IBECJAAI@?$AAS?$AAE?$AAC?$AAU?$AAR?$AAI?$AAT?$AAY?$AA?$AA@ DB 'S'
	DB	00H, 'E', 00H, 'C', 00H, 'U', 00H, 'R', 00H, 'I', 00H, 'T', 00H
	DB	'Y', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17OMAOINJK@?$AAS?$AAA?$AAM?$AA?$AA@
CONST	SEGMENT
??_C@_17OMAOINJK@?$AAS?$AAA?$AAM?$AA?$AA@ DB 'S', 00H, 'A', 00H, 'M', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_19HLLLM@?$AAM?$AAi?$AAm?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_19HLLLM@?$AAM?$AAi?$AAm?$AAe?$AA?$AA@ DB 'M', 00H, 'i', 00H, 'm', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@MAICEHGI@?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@MAICEHGI@?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AA@ DB 'H'
	DB	00H, 'a', 00H, 'r', 00H, 'd', 00H, 'w', 00H, 'a', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@EKPAFMCP@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@EKPAFMCP@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$AA@ DB 'I'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@NKMMNMGL@?$AAF?$AAi?$AAl?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@NKMMNMGL@?$AAF?$AAi?$AAl?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?$AA@ DB 'F'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, 'T', 00H, 'y', 00H, 'p', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@OEKPKBNA@?$AAC?$AAo?$AAm?$AAp?$AAo?$AAn?$AAe?$AAn?$AAt?$AA?5?$AAC?$AAa?$AAt?$AAe?$AAg?$AAo?$AAr?$AAi?$AAe?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@OEKPKBNA@?$AAC?$AAo?$AAm?$AAp?$AAo?$AAn?$AAe?$AAn?$AAt?$AA?5?$AAC?$AAa?$AAt?$AAe?$AAg?$AAo?$AAr?$AAi?$AAe?$AAs?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'o', 00H, 'n', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, 'C', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@KANJNLFF@?$AAC?$AAL?$AAS?$AAI?$AAD?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KANJNLFF@?$AAC?$AAL?$AAS?$AAI?$AAD?$AA?$AA@ DB 'C', 00H, 'L', 00H
	DB	'S', 00H, 'I', 00H, 'D', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@EJNEECMJ@?$AAA?$AAp?$AAp?$AAI?$AAD?$AA?$AA@
CONST	SEGMENT
??_C@_1M@EJNEECMJ@?$AAA?$AAp?$AAp?$AAI?$AAD?$AA?$AA@ DB 'A', 00H, 'p', 00H
	DB	'p', 00H, 'I', 00H, 'D', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?$AA@ DB 'D', 00H, 'e', 00H
	DB	'l', 00H, 'e', 00H, 't', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?$AA@ DB 'N'
	DB	00H, 'o', 00H, 'R', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?$AA@ DB 'F'
	DB	00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl?$AA?$AA@ DB 'V', 00H, 'a', 00H, 'l', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13OPKGLAFF@?$AAB?$AA?$AA@
CONST	SEGMENT
??_C@_13OPKGLAFF@?$AAB?$AA?$AA@ DB 'B', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13MKMNOPIJ@?$AAD?$AA?$AA@
CONST	SEGMENT
??_C@_13MKMNOPIJ@?$AAD?$AA?$AA@ DB 'D', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13LHMFKAAD@?$AAM?$AA?$AA@
CONST	SEGMENT
??_C@_13LHMFKAAD@?$AAM?$AA?$AA@ DB 'M', 00H, 00H, 00H	; `string'
CONST	ENDS
CONST	SEGMENT
_szStringVal DD	FLAT:??_C@_13HADIAKP@?$AAS?$AA?$AA@
_multiszStringVal DD FLAT:??_C@_13LHMFKAAD@?$AAM?$AA?$AA@
_szDwordVal DD	FLAT:??_C@_13MKMNOPIJ@?$AAD?$AA?$AA@
_szBinaryVal DD	FLAT:??_C@_13OPKGLAFF@?$AAB?$AA?$AA@
_szValToken DD	FLAT:??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl?$AA?$AA@
_szForceRemove DD FLAT:??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?$AA@
_szNoRemove DD	FLAT:??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?$AA@
_szDelete DD	FLAT:??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?$AA@
CONST	ENDS
;	COMDAT ??_C@_13HADIAKP@?$AAS?$AA?$AA@
CONST	SEGMENT
??_C@_13HADIAKP@?$AAS?$AA?$AA@ DB 'S', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT __pIncludeInitManaged
_DATA	SEGMENT
__pIncludeInitManaged DD FLAT:?_AfxInitManaged@@YAHXZ
_DATA	ENDS
;	COMDAT ?szInvalidDateTimeSpan@ATL@@3QB_WB
CONST	SEGMENT
?szInvalidDateTimeSpan@ATL@@3QB_WB DD FLAT:??_C@_1CK@NMKILLLB@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAt?$AAe?$AAT?$AAi?$AAm?$AAe?$AAS?$AAp?$AAa?$AAn?$AA?$AA@ ; ATL::szInvalidDateTimeSpan
CONST	ENDS
;	COMDAT ??_C@_1CK@NMKILLLB@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAt?$AAe?$AAT?$AAi?$AAm?$AAe?$AAS?$AAp?$AAa?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@NMKILLLB@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAt?$AAe?$AAT?$AAi?$AAm?$AAe?$AAS?$AAp?$AAa?$AAn?$AA?$AA@ DB 'I'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'T', 00H, 'i'
	DB	00H, 'm', 00H, 'e', 00H, 'S', 00H, 'p', 00H, 'a', 00H, 'n', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?szInvalidDateTime@ATL@@3QB_WB
CONST	SEGMENT
?szInvalidDateTime@ATL@@3QB_WB DD FLAT:??_C@_1CC@FFBCNGIJ@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAt?$AAe?$AAT?$AAi?$AAm?$AAe?$AA?$AA@ ; ATL::szInvalidDateTime
CONST	ENDS
;	COMDAT ??_C@_1CC@FFBCNGIJ@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAt?$AAe?$AAT?$AAi?$AAm?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@FFBCNGIJ@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAt?$AAe?$AAT?$AAi?$AAm?$AAe?$AA?$AA@ DB 'I'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'T', 00H, 'i'
	DB	00H, 'm', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?Week@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Week@CFileTime@ATL@@2_KB DQ 0000058028e44000H		; ATL::CFileTime::Week
CONST	ENDS
;	COMDAT ?Day@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Day@CFileTime@ATL@@2_KB DQ 000000c92a69c000H		; ATL::CFileTime::Day
CONST	ENDS
;	COMDAT ?Hour@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Hour@CFileTime@ATL@@2_KB DQ 0000000861c46800H		; ATL::CFileTime::Hour
CONST	ENDS
;	COMDAT ?Minute@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Minute@CFileTime@ATL@@2_KB DQ 0000000023c34600H	; ATL::CFileTime::Minute
CONST	ENDS
;	COMDAT ?Second@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Second@CFileTime@ATL@@2_KB DQ 0000000000989680H	; ATL::CFileTime::Second
CONST	ENDS
;	COMDAT ?Millisecond@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Millisecond@CFileTime@ATL@@2_KB DQ 0000000000002710H	; ATL::CFileTime::Millisecond
CONST	ENDS
;	COMDAT ?generic@CFileException@@2HB
CONST	SEGMENT
?generic@CFileException@@2HB DD 01H			; CFileException::generic
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT
?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB DB 00H ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::c_bIsMFCDLLTraits
CONST	ENDS
;	COMDAT ?generic@CArchiveException@@2HB
CONST	SEGMENT
?generic@CArchiveException@@2HB DD 01H			; CArchiveException::generic
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\afx.inl
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?_AfxInitManaged@@YAHXZ
_TEXT	SEGMENT
?_AfxInitManaged@@YAHXZ PROC				; _AfxInitManaged, COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 77   : 	return 0;

	xor	eax, eax

; 78   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_AfxInitManaged@@YAHXZ ENDP				; _AfxInitManaged
_TEXT	ENDS
PUBLIC	?generate_tables@ass_synth_priv@@QAEHN@Z	; ass_synth_priv::generate_tables
PUBLIC	__real@0000000000000000
PUBLIC	??0ass_synth_priv@@QAE@N@Z			; ass_synth_priv::ass_synth_priv
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
;	COMDAT __real@0000000000000000
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0ass_synth_priv@@QAE@N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_sigma$ = 8						; size = 8
??0ass_synth_priv@@QAE@N@Z PROC				; ass_synth_priv::ass_synth_priv, COMDAT
; _this$ = ecx

; 103  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 104  :     g_r = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 105  :     g_w = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 106  : 
; 107  :     g = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 108  :     gt2 = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 109  : 
; 110  :     this->sigma = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	QWORD PTR [eax+16]

; 111  :     generate_tables(sigma);

	sub	esp, 8
	fld	QWORD PTR _sigma$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?generate_tables@ass_synth_priv@@QAEHN@Z ; ass_synth_priv::generate_tables

; 112  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0ass_synth_priv@@QAE@N@Z ENDP				; ass_synth_priv::ass_synth_priv
_TEXT	ENDS
PUBLIC	??0ass_synth_priv@@QAE@ABV0@@Z			; ass_synth_priv::ass_synth_priv
EXTRN	_memcpy:PROC
EXTRN	_realloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ass_synth_priv@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_priv$ = 8						; size = 4
??0ass_synth_priv@@QAE@ABV0@@Z PROC			; ass_synth_priv::ass_synth_priv, COMDAT
; _this$ = ecx

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _priv$[ebp]
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]

; 116  :     if (this->g_w > 0 && this != &priv) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	$LN1@ass_synth_
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _priv$[ebp]
	je	$LN1@ass_synth_

; 117  :         this->g = (unsigned*)realloc(this->g, this->g_w * sizeof(unsigned));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_realloc
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 118  :         this->gt2 = (unsigned*)realloc(this->gt2, 256 * this->g_w * sizeof(unsigned));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 8
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_realloc
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 119  :         //if (this->g == null || this->gt2 == null) {
; 120  :         //    return -1;
; 121  :         //}
; 122  :         memcpy(g, priv.g, this->g_w * sizeof(unsigned));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _priv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 123  :         memcpy(gt2, priv.gt2, 256 * this->g_w * sizeof(unsigned));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 8
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _priv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ass_synth_:

; 124  :     }
; 125  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0ass_synth_priv@@QAE@ABV0@@Z ENDP			; ass_synth_priv::ass_synth_priv
_TEXT	ENDS
PUBLIC	??1ass_synth_priv@@QAE@XZ			; ass_synth_priv::~ass_synth_priv
EXTRN	_free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ass_synth_priv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1ass_synth_priv@@QAE@XZ PROC				; ass_synth_priv::~ass_synth_priv, COMDAT
; _this$ = ecx

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  :     free(g); g=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_free
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 130  :     free(gt2); gt2=NULL;    

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_free
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 131  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1ass_synth_priv@@QAE@XZ ENDP				; ass_synth_priv::~ass_synth_priv
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3eb0c6f7a0b5ed8d
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@bff0000000000000
EXTRN	_ceil:PROC
EXTRN	_exp:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-006
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?generate_tables@ass_synth_priv@@QAEHN@Z
_TEXT	SEGMENT
tv312 = -504						; size = 4
tv309 = -504						; size = 4
_i$298324 = -304					; size = 4
_p_gt2$298323 = -292					; size = 4
_last_mul$298322 = -280					; size = 4
_mx$298318 = -268					; size = 4
_i$298313 = -256					; size = 4
_p_right$298312 = -244					; size = 4
_p_left$298311 = -232					; size = 4
_i$298299 = -220					; size = 4
_p_right$298298 = -208					; size = 4
_p_left$298297 = -196					; size = 4
_i$298289 = -184					; size = 4
_exp_2$298288 = -172					; size = 8
_exp_1$298287 = -156					; size = 8
_exp_0$298286 = -140					; size = 8
_volume$ = -124						; size = 4
_volume_end$ = -112					; size = 8
_volume_start$ = -96					; size = 8
_volume_factor$ = -80					; size = 8
_exp_a$ = -64						; size = 8
_a$ = -48						; size = 8
_MAX_VOLUME_ERROR$ = -32				; size = 4
_TARGET_VOLUME$ = -20					; size = 4
_this$ = -8						; size = 4
_sigma$ = 8						; size = 8
?generate_tables@ass_synth_priv@@QAEHN@Z PROC		; ass_synth_priv::generate_tables, COMDAT
; _this$ = ecx

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-504]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 135  :     const int TARGET_VOLUME = 1<<VOLUME_BITS;

	mov	DWORD PTR _TARGET_VOLUME$[ebp], 4194304	; 00400000H

; 136  :     const int MAX_VOLUME_ERROR = VOLUME_BITS>=22 ? 16 : 1;

	mov	DWORD PTR _MAX_VOLUME_ERROR$[ebp], 16	; 00000010H

; 137  : 
; 138  :     double a = -1 / (sigma * sigma * 2);

	fld	QWORD PTR _sigma$[ebp]
	fmul	QWORD PTR _sigma$[ebp]
	fadd	ST(0), ST(0)
	fdivr	QWORD PTR __real@bff0000000000000
	fstp	QWORD PTR _a$[ebp]

; 139  :     double exp_a = exp(a);

	sub	esp, 8
	fld	QWORD PTR _a$[ebp]
	fstp	QWORD PTR [esp]
	call	_exp
	add	esp, 8
	fstp	QWORD PTR _exp_a$[ebp]

; 140  :     
; 141  :     double volume_factor = 0;

	fldz
	fstp	QWORD PTR _volume_factor$[ebp]

; 142  :     double volume_start =  0, volume_end = 0;

	fldz
	fstp	QWORD PTR _volume_start$[ebp]
	fldz
	fstp	QWORD PTR _volume_end$[ebp]

; 143  :     unsigned volume;
; 144  : 
; 145  :     if (this->sigma == sigma)

	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR [eax+16]
	fld	QWORD PTR _sigma$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN29@generate_t

; 146  :         return 0;

	xor	eax, eax
	jmp	$LN30@generate_t

; 147  :     else

	jmp	SHORT $LN28@generate_t
$LN29@generate_t:

; 148  :         this->sigma = sigma;

	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR _sigma$[ebp]
	fstp	QWORD PTR [eax+16]
$LN28@generate_t:

; 149  : 
; 150  :     this->g_w = (int)ceil(sigma*3) | 1;

	fld	QWORD PTR _sigma$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_ceil
	add	esp, 8
	call	__ftol2_sse
	or	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 151  :     this->g_r = this->g_w / 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 152  : 
; 153  :     if (this->g_w > 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN26@generate_t

; 154  :         this->g = (unsigned*)realloc(this->g, this->g_w * sizeof(unsigned));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_realloc
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 155  :         this->gt2 = (unsigned*)realloc(this->gt2, 256 * this->g_w * sizeof(unsigned));        

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 8
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_realloc
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 156  :         if (this->g == NULL || this->gt2 == NULL) {                      

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN25@generate_t
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN26@generate_t
$LN25@generate_t:

; 157  :             return -1;

	or	eax, -1
	jmp	$LN30@generate_t
$LN26@generate_t:

; 158  :         }        
; 159  :     }
; 160  : 
; 161  :     if (this->g_w > 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	$LN4@generate_t

; 162  :         volume_start = 0;        

	fldz
	fstp	QWORD PTR _volume_start$[ebp]

; 163  : 
; 164  :         double exp_0 = 1.0;

	fld1
	fstp	QWORD PTR _exp_0$298286[ebp]

; 165  :         double exp_1 = exp_a;

	fld	QWORD PTR _exp_a$[ebp]
	fstp	QWORD PTR _exp_1$298287[ebp]

; 166  :         double exp_2 = exp_1 * exp_1;

	fld	QWORD PTR _exp_1$298287[ebp]
	fmul	QWORD PTR _exp_1$298287[ebp]
	fstp	QWORD PTR _exp_2$298288[ebp]

; 167  :         volume_start += exp_0;

	fld	QWORD PTR _volume_start$[ebp]
	fadd	QWORD PTR _exp_0$298286[ebp]
	fstp	QWORD PTR _volume_start$[ebp]

; 168  :         for(int i=0;i<this->g_r;++i)

	mov	DWORD PTR _i$298289[ebp], 0
	jmp	SHORT $LN23@generate_t
$LN22@generate_t:
	mov	eax, DWORD PTR _i$298289[ebp]
	add	eax, 1
	mov	DWORD PTR _i$298289[ebp], eax
$LN23@generate_t:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$298289[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN21@generate_t

; 169  :         {
; 170  :             exp_0 *= exp_1;

	fld	QWORD PTR _exp_0$298286[ebp]
	fmul	QWORD PTR _exp_1$298287[ebp]
	fstp	QWORD PTR _exp_0$298286[ebp]

; 171  :             exp_1 *= exp_2;

	fld	QWORD PTR _exp_1$298287[ebp]
	fmul	QWORD PTR _exp_2$298288[ebp]
	fstp	QWORD PTR _exp_1$298287[ebp]

; 172  :             volume_start += exp_0;

	fld	QWORD PTR _volume_start$[ebp]
	fadd	QWORD PTR _exp_0$298286[ebp]
	fstp	QWORD PTR _volume_start$[ebp]

; 173  :             volume_start += exp_0;

	fld	QWORD PTR _volume_start$[ebp]
	fadd	QWORD PTR _exp_0$298286[ebp]
	fstp	QWORD PTR _volume_start$[ebp]

; 174  :         }

	jmp	SHORT $LN22@generate_t
$LN21@generate_t:

; 175  :         //euqivalent:
; 176  :         //  for (i = 0; i < this->g_w; ++i) {
; 177  :         //      volume_start += exp(a * (i - this->g_r) * (i - this->g_r));
; 178  :         //  }
; 179  :         
; 180  :         volume_end = (TARGET_VOLUME+g_w)/volume_start; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4194304				; 00400000H
	mov	DWORD PTR tv309[ebp], ecx
	fild	DWORD PTR tv309[ebp]
	fdiv	QWORD PTR _volume_start$[ebp]
	fstp	QWORD PTR _volume_end$[ebp]

; 181  :         volume_start = (TARGET_VOLUME-g_w)/volume_start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4194304				; 00400000H
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv312[ebp], ecx
	fild	DWORD PTR tv312[ebp]
	fdiv	QWORD PTR _volume_start$[ebp]
	fstp	QWORD PTR _volume_start$[ebp]

; 182  : 
; 183  :         volume = 0;

	mov	DWORD PTR _volume$[ebp], 0
$LN20@generate_t:

; 184  :         while( volume_start+0.000001<volume_end )

	fld	QWORD PTR _volume_start$[ebp]
	fadd	QWORD PTR __real@3eb0c6f7a0b5ed8d
	fcomp	QWORD PTR _volume_end$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN19@generate_t

; 185  :         {
; 186  :             volume_factor = (volume_start+volume_end)*0.5;  

	fld	QWORD PTR _volume_start$[ebp]
	fadd	QWORD PTR _volume_end$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _volume_factor$[ebp]

; 187  :             volume = 0;

	mov	DWORD PTR _volume$[ebp], 0

; 188  : 
; 189  :             exp_0 = volume_factor;

	fld	QWORD PTR _volume_factor$[ebp]
	fstp	QWORD PTR _exp_0$298286[ebp]

; 190  :             exp_1 = exp_a;

	fld	QWORD PTR _exp_a$[ebp]
	fstp	QWORD PTR _exp_1$298287[ebp]

; 191  :             exp_2 = exp_1 * exp_1;

	fld	QWORD PTR _exp_1$298287[ebp]
	fmul	QWORD PTR _exp_1$298287[ebp]
	fstp	QWORD PTR _exp_2$298288[ebp]

; 192  : 
; 193  :             volume = static_cast<int>(exp_0+.5);

	fld	QWORD PTR _exp_0$298286[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	DWORD PTR _volume$[ebp], eax

; 194  :             this->g[this->g_r] = volume;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _volume$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 195  : 
; 196  :             unsigned* p_left = this->g+this->g_r-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*4-4]
	mov	DWORD PTR _p_left$298297[ebp], ecx

; 197  :             unsigned* p_right= this->g+this->g_r+1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*4+4]
	mov	DWORD PTR _p_right$298298[ebp], ecx

; 198  :             for(int i=0; i<this->g_r;++i,p_left--,p_right++)

	mov	DWORD PTR _i$298299[ebp], 0
	jmp	SHORT $LN18@generate_t
$LN17@generate_t:
	mov	eax, DWORD PTR _i$298299[ebp]
	add	eax, 1
	mov	DWORD PTR _i$298299[ebp], eax
	mov	ecx, DWORD PTR _p_left$298297[ebp]
	sub	ecx, 4
	mov	DWORD PTR _p_left$298297[ebp], ecx
	mov	edx, DWORD PTR _p_right$298298[ebp]
	add	edx, 4
	mov	DWORD PTR _p_right$298298[ebp], edx
$LN18@generate_t:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$298299[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN16@generate_t

; 199  :             {
; 200  :                 exp_0 *= exp_1;

	fld	QWORD PTR _exp_0$298286[ebp]
	fmul	QWORD PTR _exp_1$298287[ebp]
	fstp	QWORD PTR _exp_0$298286[ebp]

; 201  :                 exp_1 *= exp_2;

	fld	QWORD PTR _exp_1$298287[ebp]
	fmul	QWORD PTR _exp_2$298288[ebp]
	fstp	QWORD PTR _exp_1$298287[ebp]

; 202  :                 *p_left = static_cast<int>(exp_0+.5);

	fld	QWORD PTR _exp_0$298286[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _p_left$298297[ebp]
	mov	DWORD PTR [ecx], eax

; 203  :                 *p_right = *p_left;

	mov	eax, DWORD PTR _p_right$298298[ebp]
	mov	ecx, DWORD PTR _p_left$298297[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 204  :                 volume += (*p_left<<1);

	mov	eax, DWORD PTR _p_left$298297[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _volume$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _volume$[ebp], eax

; 205  :             }

	jmp	$LN17@generate_t
$LN16@generate_t:

; 206  :             //equivalent:
; 207  :             //    for (i = 0; i < this->g_w; ++i) {    
; 208  :             //        this->g[i] = (unsigned) ( exp(a * (i - this->g_r) * (i - this->g_r))* volume_factor + .5 );
; 209  :             //        volume += this->g[i];
; 210  :             //    }
; 211  : 
; 212  :             // volume don't have to be equal to TARGET_VOLUME,
; 213  :             // even if volume=TARGET_VOLUME+MAX_VOLUME_ERROR,
; 214  :             // max error introducing in later blur operation,
; 215  :             // which is (dot_product(g_w, pixel))/TARGET_VOLUME with pixel<256,
; 216  :             // would not exceed (MAX_VOLUME_ERROR*256)/TARGET_VOLUME,
; 217  :             // as long as MAX_VOLUME_ERROR/TARGET_VOLUME is small enough, error introduced would be kept in safe range
; 218  :             // 
; 219  :             // NOTE: when it comes to rounding, no matter how small the error is, 
; 220  :             // it may result a different rounding output
; 221  :             if( volume>=TARGET_VOLUME && volume< (TARGET_VOLUME+MAX_VOLUME_ERROR) )

	cmp	DWORD PTR _volume$[ebp], 4194304	; 00400000H
	jb	SHORT $LN15@generate_t
	cmp	DWORD PTR _volume$[ebp], 4194320	; 00400010H
	jae	SHORT $LN15@generate_t

; 222  :                 break;

	jmp	SHORT $LN19@generate_t
	jmp	SHORT $LN11@generate_t
$LN15@generate_t:

; 223  :             else if(volume < TARGET_VOLUME)

	cmp	DWORD PTR _volume$[ebp], 4194304	; 00400000H
	jae	SHORT $LN13@generate_t

; 224  :             {
; 225  :                 volume_start = volume_factor;                

	fld	QWORD PTR _volume_factor$[ebp]
	fstp	QWORD PTR _volume_start$[ebp]
	jmp	SHORT $LN11@generate_t
$LN13@generate_t:

; 226  :             }
; 227  :             else if(volume >= TARGET_VOLUME+MAX_VOLUME_ERROR)

	cmp	DWORD PTR _volume$[ebp], 4194320	; 00400010H
	jb	SHORT $LN11@generate_t

; 228  :             {
; 229  :                 volume_end = volume_factor;

	fld	QWORD PTR _volume_factor$[ebp]
	fstp	QWORD PTR _volume_end$[ebp]
$LN11@generate_t:

; 230  :             }
; 231  :         }

	jmp	$LN20@generate_t
$LN19@generate_t:

; 232  :         if(volume==0)

	cmp	DWORD PTR _volume$[ebp], 0
	jne	$LN7@generate_t

; 233  :         {
; 234  :             volume_factor = volume_end;

	fld	QWORD PTR _volume_end$[ebp]
	fstp	QWORD PTR _volume_factor$[ebp]

; 235  : 
; 236  :             exp_0 = volume_factor;

	fld	QWORD PTR _volume_factor$[ebp]
	fstp	QWORD PTR _exp_0$298286[ebp]

; 237  :             exp_1 = exp_a;

	fld	QWORD PTR _exp_a$[ebp]
	fstp	QWORD PTR _exp_1$298287[ebp]

; 238  :             exp_2 = exp_1 * exp_1;

	fld	QWORD PTR _exp_1$298287[ebp]
	fmul	QWORD PTR _exp_1$298287[ebp]
	fstp	QWORD PTR _exp_2$298288[ebp]

; 239  : 
; 240  :             volume = static_cast<int>(exp_0+.5);

	fld	QWORD PTR _exp_0$298286[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	DWORD PTR _volume$[ebp], eax

; 241  :             this->g[this->g_r] = volume;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _volume$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 242  : 
; 243  :             unsigned* p_left = this->g+this->g_r-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*4-4]
	mov	DWORD PTR _p_left$298311[ebp], ecx

; 244  :             unsigned* p_right= this->g+this->g_r+1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*4+4]
	mov	DWORD PTR _p_right$298312[ebp], ecx

; 245  :             for(int i=0; i<this->g_r;++i,p_left--,p_right++)

	mov	DWORD PTR _i$298313[ebp], 0
	jmp	SHORT $LN9@generate_t
$LN8@generate_t:
	mov	eax, DWORD PTR _i$298313[ebp]
	add	eax, 1
	mov	DWORD PTR _i$298313[ebp], eax
	mov	ecx, DWORD PTR _p_left$298311[ebp]
	sub	ecx, 4
	mov	DWORD PTR _p_left$298311[ebp], ecx
	mov	edx, DWORD PTR _p_right$298312[ebp]
	add	edx, 4
	mov	DWORD PTR _p_right$298312[ebp], edx
$LN9@generate_t:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$298313[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN7@generate_t

; 246  :             {
; 247  :                 exp_0 *= exp_1;

	fld	QWORD PTR _exp_0$298286[ebp]
	fmul	QWORD PTR _exp_1$298287[ebp]
	fstp	QWORD PTR _exp_0$298286[ebp]

; 248  :                 exp_1 *= exp_2;

	fld	QWORD PTR _exp_1$298287[ebp]
	fmul	QWORD PTR _exp_2$298288[ebp]
	fstp	QWORD PTR _exp_1$298287[ebp]

; 249  :                 *p_left = static_cast<int>(exp_0+.5);

	fld	QWORD PTR _exp_0$298286[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _p_left$298311[ebp]
	mov	DWORD PTR [ecx], eax

; 250  :                 *p_right = *p_left;

	mov	eax, DWORD PTR _p_right$298312[ebp]
	mov	ecx, DWORD PTR _p_left$298311[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 251  :                 volume += (*p_left<<1);

	mov	eax, DWORD PTR _p_left$298311[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _volume$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _volume$[ebp], eax

; 252  :             }

	jmp	$LN8@generate_t
$LN7@generate_t:

; 253  :             //equivalent:
; 254  :             //    for (i = 0; i < this->g_w; ++i) {    
; 255  :             //        this->g[i] = (unsigned) ( exp(a * (i - this->g_r) * (i - this->g_r))* volume_factor + .5 );
; 256  :             //        volume += this->g[i];
; 257  :             //    }
; 258  :         }
; 259  : 
; 260  :         // gauss table:
; 261  :         for (int mx = 0; mx < this->g_w; mx++) {

	mov	DWORD PTR _mx$298318[ebp], 0
	jmp	SHORT $LN6@generate_t
$LN5@generate_t:
	mov	eax, DWORD PTR _mx$298318[ebp]
	add	eax, 1
	mov	DWORD PTR _mx$298318[ebp], eax
$LN6@generate_t:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mx$298318[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	$LN4@generate_t

; 262  :             int last_mul = 0;

	mov	DWORD PTR _last_mul$298322[ebp], 0

; 263  :             unsigned *p_gt2 = this->gt2 + mx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _mx$298318[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _p_gt2$298323[ebp], eax

; 264  :             *p_gt2 = 0;

	mov	eax, DWORD PTR _p_gt2$298323[ebp]
	mov	DWORD PTR [eax], 0

; 265  :             for (int i = 1; i < 256; i++) {                

	mov	DWORD PTR _i$298324[ebp], 1
	jmp	SHORT $LN3@generate_t
$LN2@generate_t:
	mov	eax, DWORD PTR _i$298324[ebp]
	add	eax, 1
	mov	DWORD PTR _i$298324[ebp], eax
$LN3@generate_t:
	cmp	DWORD PTR _i$298324[ebp], 256		; 00000100H
	jge	SHORT $LN1@generate_t

; 266  :                 last_mul = last_mul+this->g[mx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _mx$298318[ebp]
	mov	eax, DWORD PTR _last_mul$298322[ebp]
	add	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _last_mul$298322[ebp], eax

; 267  :                 p_gt2 += this->g_w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p_gt2$298323[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _p_gt2$298323[ebp], eax

; 268  :                 *p_gt2 = last_mul;                

	mov	eax, DWORD PTR _p_gt2$298323[ebp]
	mov	ecx, DWORD PTR _last_mul$298322[ebp]
	mov	DWORD PTR [eax], ecx

; 269  :                 //equivalent:
; 270  :                 //    this->gt2[this->g_w * i+ mx] = this->g[mx] * i;
; 271  :             }

	jmp	SHORT $LN2@generate_t
$LN1@generate_t:

; 272  :         }        

	jmp	$LN5@generate_t
$LN4@generate_t:

; 273  :     }
; 274  :     return 0;

	xor	eax, eax
$LN30@generate_t:

; 275  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 504				; 000001f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?generate_tables@ass_synth_priv@@QAEHN@Z ENDP		; ass_synth_priv::generate_tables
_TEXT	ENDS
PUBLIC	??0ass_tmp_buf@@QAE@I@Z				; ass_tmp_buf::ass_tmp_buf
EXTRN	_malloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ass_tmp_buf@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_size$ = 8						; size = 4
??0ass_tmp_buf@@QAE@I@Z PROC				; ass_tmp_buf::ass_tmp_buf, COMDAT
; _this$ = ecx

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 279  :     tmp = (unsigned *)malloc(size * sizeof(unsigned));

	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 2
	push	eax
	call	_malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 280  :     this->size = size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], ecx

; 281  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0ass_tmp_buf@@QAE@I@Z ENDP				; ass_tmp_buf::ass_tmp_buf
_TEXT	ENDS
PUBLIC	??0ass_tmp_buf@@QAE@ABU0@@Z			; ass_tmp_buf::ass_tmp_buf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ass_tmp_buf@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_buf$ = 8						; size = 4
??0ass_tmp_buf@@QAE@ABU0@@Z PROC			; ass_tmp_buf::ass_tmp_buf, COMDAT
; _this$ = ecx

; 285  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 286  :     tmp = (unsigned *)malloc(size * sizeof(unsigned));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 2
	push	ecx
	call	_malloc
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 287  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0ass_tmp_buf@@QAE@ABU0@@Z ENDP			; ass_tmp_buf::ass_tmp_buf
_TEXT	ENDS
PUBLIC	??1ass_tmp_buf@@QAE@XZ				; ass_tmp_buf::~ass_tmp_buf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ass_tmp_buf@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1ass_tmp_buf@@QAE@XZ PROC				; ass_tmp_buf::~ass_tmp_buf, COMDAT
; _this$ = ecx

; 290  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 291  :     free(tmp);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_free
	add	esp, 4

; 292  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1ass_tmp_buf@@QAE@XZ ENDP				; ass_tmp_buf::~ass_tmp_buf
_TEXT	ENDS
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::~_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
PUBLIC	?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
PUBLIC	?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
PUBLIC	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>
PUBLIC	?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::empty
PUBLIC	??D?$shared_ptr@$$CBVScanLineData@@@boost@@QBEABVScanLineData@@XZ ; boost::shared_ptr<ScanLineData const >::operator*
PUBLIC	?CleanUp@Overlay@@QAEXXZ			; Overlay::CleanUp
PUBLIC	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
PUBLIC	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ	; boost::shared_ptr<Overlay>::~shared_ptr<Overlay>
PUBLIC	??7?$shared_ptr@UOverlay@@@boost@@QBE_NXZ	; boost::shared_ptr<Overlay>::operator!
PUBLIC	?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z ; Rasterizer::Rasterize
EXTRN	_memset:PROC
EXTRN	?xy_free@@YAXPAX@Z:PROC				; xy_free
EXTRN	?xy_malloc@@YAPAXH@Z:PROC			; xy_malloc
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__aullshr:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z$2
__ehfuncinfo$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z
_TEXT	SEGMENT
tv245 = -504						; size = 4
$T328901 = -493						; size = 1
$T328902 = -481						; size = 1
$T328903 = -469						; size = 1
$T328904 = -457						; size = 1
$T328907 = -445						; size = 1
_dst$299088 = -244					; size = 4
_last$299087 = -232					; size = 4
_first$299086 = -220					; size = 4
_x2$299083 = -208					; size = 4
_x1$299081 = -196					; size = 4
_y$298957 = -184					; size = 4
_pitch$298937 = -172					; size = 4
_plan_selected$298936 = -160				; size = 4
_itEnd$298934 = -148					; size = 12
_it$298932 = -128					; size = 12
_i$298838 = -108					; size = 4
_pOutline$ = -96					; size = 8
_border$ = -80						; size = 4
_body$ = -68						; size = 4
_wide_border$298822 = -56				; size = 4
_height$ = -44						; size = 4
_width$ = -32						; size = 4
_scan_line_data$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_scan_line_data2$ = 8					; size = 4
_xsub$ = 12						; size = 4
_ysub$ = 16						; size = 4
_overlay$ = 20						; size = 8
?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z PROC ; Rasterizer::Rasterize, COMDAT

; 703  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-504]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 704  :     using namespace ::boost::flyweights;
; 705  : 
; 706  :     if(!overlay)

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??7?$shared_ptr@UOverlay@@@boost@@QBE_NXZ ; boost::shared_ptr<Overlay>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@Rasterize

; 707  :     {
; 708  :         return false;

	mov	BYTE PTR $T328901[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	mov	al, BYTE PTR $T328901[ebp]
	jmp	$LN19@Rasterize
$LN18@Rasterize:

; 709  :     }
; 710  :     overlay->CleanUp();

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, eax
	call	?CleanUp@Overlay@@QAEXXZ		; Overlay::CleanUp

; 711  :     const ScanLineData& scan_line_data = *scan_line_data2.m_scan_line_data;

	mov	ecx, DWORD PTR _scan_line_data2$[ebp]
	call	??D?$shared_ptr@$$CBVScanLineData@@@boost@@QBEABVScanLineData@@XZ ; boost::shared_ptr<ScanLineData const >::operator*
	mov	DWORD PTR _scan_line_data$[ebp], eax

; 712  :     if(!scan_line_data.mWidth || !scan_line_data.mHeight)

	mov	eax, DWORD PTR _scan_line_data$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN16@Rasterize
	mov	eax, DWORD PTR _scan_line_data$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN17@Rasterize
$LN16@Rasterize:

; 713  :     {
; 714  :         return true;

	mov	BYTE PTR $T328902[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	mov	al, BYTE PTR $T328902[ebp]
	jmp	$LN19@Rasterize
$LN17@Rasterize:

; 715  :     }
; 716  :     xsub &= 7;

	mov	eax, DWORD PTR _xsub$[ebp]
	and	eax, 7
	mov	DWORD PTR _xsub$[ebp], eax

; 717  :     ysub &= 7;

	mov	eax, DWORD PTR _ysub$[ebp]
	and	eax, 7
	mov	DWORD PTR _ysub$[ebp], eax

; 718  :     //xsub = ysub = 0;
; 719  :     int width = scan_line_data.mWidth + xsub;

	mov	eax, DWORD PTR _scan_line_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _xsub$[ebp]
	mov	DWORD PTR _width$[ebp], ecx

; 720  :     int height = scan_line_data.mHeight + ysub;

	mov	eax, DWORD PTR _scan_line_data$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, DWORD PTR _ysub$[ebp]
	mov	DWORD PTR _height$[ebp], ecx

; 721  :     overlay->mfWideOutlineEmpty = scan_line_data2.mWideOutline.empty();

	mov	ecx, DWORD PTR _scan_line_data2$[ebp]
	add	ecx, 16					; 00000010H
	call	?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::empty
	mov	bl, al
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	BYTE PTR [eax+44], bl

; 722  :     if(!overlay->mfWideOutlineEmpty)

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	movzx	eax, BYTE PTR [eax+44]
	test	eax, eax
	jne	SHORT $LN15@Rasterize

; 723  :     {
; 724  :         int wide_border = (scan_line_data2.mWideBorder+7)&~7;

	mov	eax, DWORD PTR _scan_line_data2$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 7
	and	ecx, -8					; fffffff8H
	mov	DWORD PTR _wide_border$298822[ebp], ecx

; 725  : 
; 726  :         width += 2*wide_border ;

	mov	eax, DWORD PTR _wide_border$298822[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _width$[ebp], edx

; 727  :         height += 2*wide_border ;

	mov	eax, DWORD PTR _wide_border$298822[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _height$[ebp], edx

; 728  :         xsub += wide_border ;

	mov	eax, DWORD PTR _xsub$[ebp]
	add	eax, DWORD PTR _wide_border$298822[ebp]
	mov	DWORD PTR _xsub$[ebp], eax

; 729  :         ysub += wide_border ;

	mov	eax, DWORD PTR _ysub$[ebp]
	add	eax, DWORD PTR _wide_border$298822[ebp]
	mov	DWORD PTR _ysub$[ebp], eax
$LN15@Rasterize:

; 730  :     }
; 731  :     overlay->mOffsetX = scan_line_data2.mPathOffsetX - xsub;

	mov	eax, DWORD PTR _scan_line_data2$[ebp]
	mov	esi, DWORD PTR [eax+8]
	sub	esi, DWORD PTR _xsub$[ebp]
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	DWORD PTR [eax+16], esi

; 732  :     overlay->mOffsetY = scan_line_data2.mPathOffsetY - ysub;

	mov	eax, DWORD PTR _scan_line_data2$[ebp]
	mov	esi, DWORD PTR [eax+12]
	sub	esi, DWORD PTR _ysub$[ebp]
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	DWORD PTR [eax+20], esi

; 733  : 
; 734  :     overlay->mWidth = width;

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 735  :     overlay->mHeight = height;

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 736  :     overlay->mOverlayWidth = ((width+7)>>3) + 1;

	mov	esi, DWORD PTR _width$[ebp]
	add	esi, 7
	sar	esi, 3
	add	esi, 1
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	DWORD PTR [eax+32], esi

; 737  :     overlay->mOverlayHeight = ((height+7)>>3) + 1;

	mov	esi, DWORD PTR _height$[ebp]
	add	esi, 7
	sar	esi, 3
	add	esi, 1
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	DWORD PTR [eax+36], esi

; 738  :     overlay->mOverlayPitch = (overlay->mOverlayWidth+15)&~15;

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, DWORD PTR [eax+32]
	add	esi, 15					; 0000000fH
	and	esi, -16				; fffffff0H
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	DWORD PTR [eax+40], esi

; 739  : 
; 740  :     BYTE* body = reinterpret_cast<BYTE*>(xy_malloc(overlay->mOverlayPitch * overlay->mOverlayHeight));

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, eax
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [esi+40]
	imul	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _body$[ebp], eax

; 741  :     if( body==NULL )

	cmp	DWORD PTR _body$[ebp], 0
	jne	SHORT $LN14@Rasterize

; 742  :     {
; 743  :         return false;

	mov	BYTE PTR $T328903[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	mov	al, BYTE PTR $T328903[ebp]
	jmp	$LN19@Rasterize
$LN14@Rasterize:

; 744  :     }
; 745  :     overlay->mBody.reset(body, xy_free);

	push	OFFSET ?xy_free@@YAXPAX@Z		; xy_free
	mov	eax, DWORD PTR _body$[ebp]
	push	eax
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, eax
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 746  :     memset(body, 0, overlay->mOverlayPitch * overlay->mOverlayHeight);

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, eax
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [esi+40]
	imul	ecx, DWORD PTR [eax+36]
	push	ecx
	push	0
	mov	edx, DWORD PTR _body$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 747  :     BYTE* border = NULL;

	mov	DWORD PTR _border$[ebp], 0

; 748  :     if (!overlay->mfWideOutlineEmpty)

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	movzx	eax, BYTE PTR [eax+44]
	test	eax, eax
	jne	$LN13@Rasterize

; 749  :     {
; 750  :         border = reinterpret_cast<BYTE*>(xy_malloc(overlay->mOverlayPitch * overlay->mOverlayHeight));

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, eax
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [esi+40]
	imul	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _border$[ebp], eax

; 751  :         if (border==NULL)

	cmp	DWORD PTR _border$[ebp], 0
	jne	SHORT $LN12@Rasterize

; 752  :         {
; 753  :             return false;

	mov	BYTE PTR $T328904[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	mov	al, BYTE PTR $T328904[ebp]
	jmp	$LN19@Rasterize
$LN12@Rasterize:

; 754  :         }
; 755  :         overlay->mBorder.reset(border, xy_free);

	push	OFFSET ?xy_free@@YAXPAX@Z		; xy_free
	mov	eax, DWORD PTR _border$[ebp]
	push	eax
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	add	eax, 8
	mov	ecx, eax
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 756  :         memset(border, 0, overlay->mOverlayPitch * overlay->mOverlayHeight);

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, eax
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [esi+40]
	imul	ecx, DWORD PTR [eax+36]
	push	ecx
	push	0
	mov	edx, DWORD PTR _border$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN13@Rasterize:

; 757  :     }
; 758  : 
; 759  :     // Are we doing a border?
; 760  :     const ScanLineData::tSpanBuffer* pOutline[2] = {&(scan_line_data.mOutline), &(scan_line_data2.mWideOutline)};

	mov	eax, DWORD PTR _scan_line_data$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pOutline$[ebp], eax
	mov	eax, DWORD PTR _scan_line_data2$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pOutline$[ebp+4], eax

; 761  :     for(int i = countof(pOutline)-1; i >= 0; i--)

	mov	DWORD PTR _i$298838[ebp], 1
	jmp	SHORT $LN11@Rasterize
$LN10@Rasterize:
	mov	eax, DWORD PTR _i$298838[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$298838[ebp], eax
$LN11@Rasterize:
	cmp	DWORD PTR _i$298838[ebp], 0
	jl	$LN9@Rasterize

; 762  :     {
; 763  :         ScanLineData::tSpanBuffer::const_iterator it = pOutline[i]->begin();

	lea	eax, DWORD PTR _it$298932[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$298838[ebp]
	mov	ecx, DWORD PTR _pOutline$[ebp+ecx*4]
	call	?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 764  :         ScanLineData::tSpanBuffer::const_iterator itEnd = pOutline[i]->end();

	lea	eax, DWORD PTR _itEnd$298934[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$298838[ebp]
	mov	ecx, DWORD PTR _pOutline$[ebp+ecx*4]
	call	?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 765  :         byte* plan_selected = i==0 ? body : border;

	cmp	DWORD PTR _i$298838[ebp], 0
	jne	SHORT $LN21@Rasterize
	mov	eax, DWORD PTR _body$[ebp]
	mov	DWORD PTR tv245[ebp], eax
	jmp	SHORT $LN22@Rasterize
$LN21@Rasterize:
	mov	ecx, DWORD PTR _border$[ebp]
	mov	DWORD PTR tv245[ebp], ecx
$LN22@Rasterize:
	mov	edx, DWORD PTR tv245[ebp]
	mov	DWORD PTR _plan_selected$298936[ebp], edx

; 766  :         int pitch = overlay->mOverlayPitch;

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+40]
	mov	DWORD PTR _pitch$298937[ebp], eax
	jmp	SHORT $LN8@Rasterize
$LN7@Rasterize:

; 767  :         for(; it!=itEnd; ++it)

	lea	ecx, DWORD PTR _it$298932[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
$LN8@Rasterize:
	lea	eax, DWORD PTR _itEnd$298934[ebp]
	push	eax
	lea	ecx, DWORD PTR _it$298932[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN6@Rasterize

; 768  :         {
; 769  :             int y = (int)(((*it).first >> 32) - 0x40000000 + ysub);

	lea	ecx, DWORD PTR _it$298932[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, eax
	mov	esi, edx
	sub	ecx, 1073741824				; 40000000H
	sbb	esi, 0
	mov	eax, DWORD PTR _ysub$[ebp]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	DWORD PTR _y$298957[ebp], ecx

; 770  :             int x1 = (int)(((*it).first & 0xffffffff) - 0x40000000 + xsub);

	lea	ecx, DWORD PTR _it$298932[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax+4]
	and	esi, 0
	sub	ecx, 1073741824				; 40000000H
	sbb	esi, 0
	mov	eax, DWORD PTR _xsub$[ebp]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	DWORD PTR _x1$299081[ebp], ecx

; 771  :             int x2 = (int)(((*it).second & 0xffffffff) - 0x40000000 + xsub);

	lea	ecx, DWORD PTR _it$298932[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, DWORD PTR [eax+12]
	and	esi, 0
	sub	ecx, 1073741824				; 40000000H
	sbb	esi, 0
	mov	eax, DWORD PTR _xsub$[ebp]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	DWORD PTR _x2$299083[ebp], ecx

; 772  :             if(x2 > x1)

	mov	eax, DWORD PTR _x2$299083[ebp]
	cmp	eax, DWORD PTR _x1$299081[ebp]
	jle	$LN5@Rasterize

; 773  :             {
; 774  :                 int first = x1>>3;

	mov	eax, DWORD PTR _x1$299081[ebp]
	sar	eax, 3
	mov	DWORD PTR _first$299086[ebp], eax

; 775  :                 int last = (x2-1)>>3;

	mov	eax, DWORD PTR _x2$299083[ebp]
	sub	eax, 1
	sar	eax, 3
	mov	DWORD PTR _last$299087[ebp], eax

; 776  :                 byte* dst = plan_selected + (pitch*(y>>3) + first);

	mov	eax, DWORD PTR _y$298957[ebp]
	sar	eax, 3
	imul	eax, DWORD PTR _pitch$298937[ebp]
	add	eax, DWORD PTR _first$299086[ebp]
	add	eax, DWORD PTR _plan_selected$298936[ebp]
	mov	DWORD PTR _dst$299088[ebp], eax

; 777  :                 if(first == last)

	mov	eax, DWORD PTR _first$299086[ebp]
	cmp	eax, DWORD PTR _last$299087[ebp]
	jne	SHORT $LN4@Rasterize

; 778  :                     *dst += x2-x1;

	mov	eax, DWORD PTR _x2$299083[ebp]
	sub	eax, DWORD PTR _x1$299081[ebp]
	mov	ecx, DWORD PTR _dst$299088[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _dst$299088[ebp]
	mov	BYTE PTR [eax], dl

; 779  :                 else

	jmp	$LN5@Rasterize
$LN4@Rasterize:

; 780  :                 {
; 781  :                     *dst += ((first+1)<<3) - x1;

	mov	eax, DWORD PTR _first$299086[ebp]
	lea	ecx, DWORD PTR [eax*8+8]
	sub	ecx, DWORD PTR _x1$299081[ebp]
	mov	edx, DWORD PTR _dst$299088[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _dst$299088[ebp]
	mov	BYTE PTR [ecx], al

; 782  :                     dst += 1;

	mov	eax, DWORD PTR _dst$299088[ebp]
	add	eax, 1
	mov	DWORD PTR _dst$299088[ebp], eax
$LN2@Rasterize:

; 783  :                     while(++first < last)

	mov	eax, DWORD PTR _first$299086[ebp]
	add	eax, 1
	mov	DWORD PTR _first$299086[ebp], eax
	mov	ecx, DWORD PTR _first$299086[ebp]
	cmp	ecx, DWORD PTR _last$299087[ebp]
	jge	SHORT $LN1@Rasterize

; 784  :                     {
; 785  :                         *dst += 0x08;

	mov	eax, DWORD PTR _dst$299088[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _dst$299088[ebp]
	mov	BYTE PTR [edx], cl

; 786  :                         dst += 1;

	mov	eax, DWORD PTR _dst$299088[ebp]
	add	eax, 1
	mov	DWORD PTR _dst$299088[ebp], eax

; 787  :                     }

	jmp	SHORT $LN2@Rasterize
$LN1@Rasterize:

; 788  :                     *dst += x2 - (last<<3);

	mov	eax, DWORD PTR _last$299087[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _x2$299083[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _dst$299088[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _dst$299088[ebp]
	mov	BYTE PTR [ecx], al
$LN5@Rasterize:

; 789  :                 }
; 790  :             }
; 791  :         }

	jmp	$LN7@Rasterize
$LN6@Rasterize:

; 792  :     }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _itEnd$298934[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _it$298932[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	jmp	$LN10@Rasterize
$LN9@Rasterize:

; 793  : 
; 794  :     return true;

	mov	BYTE PTR $T328907[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	mov	al, BYTE PTR $T328907[ebp]
$LN19@Rasterize:

; 795  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@Rasterize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 504				; 000001f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN31@Rasterize:
	DD	3
	DD	$LN30@Rasterize
$LN30@Rasterize:
	DD	-96					; ffffffa0H
	DD	8
	DD	$LN26@Rasterize
	DD	-128					; ffffff80H
	DD	12					; 0000000cH
	DD	$LN27@Rasterize
	DD	-148					; ffffff6cH
	DD	12					; 0000000cH
	DD	$LN28@Rasterize
$LN28@Rasterize:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN27@Rasterize:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN26@Rasterize:
	DB	112					; 00000070H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z$0:
	lea	ecx, DWORD PTR _overlay$[ebp]
	jmp	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
__unwindfunclet$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z$1:
	lea	ecx, DWORD PTR _it$298932[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z$2:
	lea	ecx, DWORD PTR _itEnd$298934[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__ehhandler$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-508]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z ENDP ; Rasterizer::Rasterize
PUBLIC	??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z	; boost::shared_ptr<unsigned char>::reset<unsigned char>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.h
;	COMDAT ?CleanUp@Overlay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CleanUp@Overlay@@QAEXXZ PROC				; Overlay::CleanUp, COMDAT
; _this$ = ecx

; 164  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 165  :         mBody.reset((BYTE*)NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char>

; 166  :         mBorder.reset((BYTE*)NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char>

; 167  :         mOffsetX=mOffsetY=mWidth=mHeight=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 168  :         mOverlayWidth=mOverlayHeight=mOverlayPitch=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0

; 169  :         mfWideOutlineEmpty = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 170  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CleanUp@Overlay@@QAEXXZ ENDP				; Overlay::CleanUp
_TEXT	ENDS
PUBLIC	??1shared_count@detail@boost@@QAE@XZ		; boost::detail::shared_count::~shared_count
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ PROC		; boost::shared_ptr<Overlay>::~shared_ptr<Overlay>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1shared_count@detail@boost@@QAE@XZ	; boost::detail::shared_count::~shared_count
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ ENDP		; boost::shared_ptr<Overlay>::~shared_ptr<Overlay>
_TEXT	ENDS
PUBLIC	?release@sp_counted_base@detail@boost@@QAEXXZ	; boost::detail::sp_counted_base::release
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\shared_count.hpp
;	COMDAT ??1shared_count@detail@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1shared_count@detail@boost@@QAE@XZ PROC		; boost::detail::shared_count::~shared_count, COMDAT
; _this$ = ecx

; 304  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 305  :         if( pi_ != 0 ) pi_->release();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@shared_cou
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?release@sp_counted_base@detail@boost@@QAEXXZ ; boost::detail::sp_counted_base::release
$LN2@shared_cou:

; 306  : #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
; 307  :         id_ = 0;
; 308  : #endif
; 309  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1shared_count@detail@boost@@QAE@XZ ENDP		; boost::detail::shared_count::~shared_count
_TEXT	ENDS
PUBLIC	?weak_release@sp_counted_base@detail@boost@@QAEXXZ ; boost::detail::sp_counted_base::weak_release
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\sp_counted_base_w32.hpp
;	COMDAT ?release@sp_counted_base@detail@boost@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?release@sp_counted_base@detail@boost@@QAEXXZ PROC	; boost::detail::sp_counted_base::release, COMDAT
; _this$ = ecx

; 99   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  :         if( BOOST_INTERLOCKED_DECREMENT( &use_count_ ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	jne	SHORT $LN2@release

; 101  :         {
; 102  :             dispose();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 103  :             weak_release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?weak_release@sp_counted_base@detail@boost@@QAEXXZ ; boost::detail::sp_counted_base::weak_release
$LN2@release:

; 104  :         }
; 105  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?release@sp_counted_base@detail@boost@@QAEXXZ ENDP	; boost::detail::sp_counted_base::release
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?weak_release@sp_counted_base@detail@boost@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?weak_release@sp_counted_base@detail@boost@@QAEXXZ PROC	; boost::detail::sp_counted_base::weak_release, COMDAT
; _this$ = ecx

; 113  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  :         if( BOOST_INTERLOCKED_DECREMENT( &weak_count_ ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	jne	SHORT $LN2@weak_relea

; 115  :         {
; 116  :             destroy();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@weak_relea:

; 117  :         }
; 118  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?weak_release@sp_counted_base@detail@boost@@QAEXXZ ENDP	; boost::detail::sp_counted_base::weak_release
_TEXT	ENDS
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::~_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::~_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
_TEXT	ENDS
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>
_TEXT	ENDS
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base12@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base12@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 128  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 129  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 130  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 131  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 132  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 133  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Iterator_b:
	DD	1
	DD	$LN6@Iterator_b
$LN6@Iterator_b:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@Iterator_b
$LN4@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JA@MAMBAKEI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JA@MAMBAKEI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JA@MAMBAKEI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H, 't'
	DB	00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$146142 = -20					; size = 4
_this$ = -8						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 172  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 173  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 174  : 		if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_me

; 175  : 			{	// adopted, remove self from list
; 176  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$146142[ebp], ecx
$LN3@Orphan_me:

; 177  : 			while (*_Pnext != 0 && *_Pnext != this)

	mov	eax, DWORD PTR __Pnext$146142[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Orphan_me
	mov	eax, DWORD PTR __Pnext$146142[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Orphan_me

; 178  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$146142[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$146142[ebp], ecx
	jmp	SHORT $LN3@Orphan_me
$LN2@Orphan_me:

; 179  : 
; 180  : 			if (*_Pnext == 0)

	mov	eax, DWORD PTR __Pnext$146142[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@Orphan_me

; 181  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

	push	181					; 000000b5H
	push	OFFSET ??_C@_1JA@MAMBAKEI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN1@Orphan_me:

; 182  : 			*_Pnext = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$146142[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 183  : 			_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Orphan_me:

; 184  : 			}
; 185  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 186  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
PUBLIC	??1?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@XZ ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>
PUBLIC	?get@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QBEABVass_synth_priv@@XZ ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::get
PUBLIC	??$?0N@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@AAN@Z ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_><double>
PUBLIC	?get@?$shared_ptr@E@boost@@QBEPAEXZ		; boost::shared_ptr<unsigned char>::get
PUBLIC	__real@4020000000000000
PUBLIC	__real@3fb999999999999a
PUBLIC	?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z ; Rasterizer::Blur
EXTRN	?g_cpuid@@3VCCpuID@@A:DWORD			; g_cpuid
;	COMDAT __real@4020000000000000
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z$2
__ehfuncinfo$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z
_TEXT	SEGMENT
tv362 = -440						; size = 4
tv308 = -440						; size = 4
tv299 = -440						; size = 4
tv254 = -440						; size = 4
tv247 = -440						; size = 4
tv178 = -440						; size = 4
tv172 = -440						; size = 4
tv166 = -440						; size = 4
tv160 = -440						; size = 4
tv154 = -440						; size = 4
tv149 = -440						; size = 4
$T328962 = -429						; size = 1
$T328963 = -417						; size = 1
$T328964 = -405						; size = 1
$T328965 = -393						; size = 1
$T328976 = -381						; size = 1
_plan_selected$305317 = -180				; size = 4
_pitch$305316 = -168					; size = 4
_pass$305312 = -156					; size = 4
_priv_blur$305309 = -144				; size = 4
_fw_priv_blur$305302 = -132				; size = 4
_plan_selected$299139 = -120				; size = 4
_tmp_buf$ = -108					; size = 8
_j$299133 = -92						; size = 4
_plan_input$299131 = -80				; size = 4
_plan_selected$299130 = -68				; size = 4
_i$299126 = -56						; size = 4
_border$ = -44						; size = 4
_body$ = -32						; size = 4
_bluradjust$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_input_overlay$ = 8					; size = 4
_fBlur$ = 12						; size = 4
_fGaussianBlur$ = 16					; size = 8
_output_overlay$ = 24					; size = 8
?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z PROC ; Rasterizer::Blur, COMDAT

; 800  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 428				; 000001acH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-440]
	mov	ecx, 107				; 0000006bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 801  :     using namespace ::boost::flyweights;
; 802  : 
; 803  :     if(!output_overlay)

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??7?$shared_ptr@UOverlay@@@boost@@QBE_NXZ ; boost::shared_ptr<Overlay>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN24@Blur

; 804  :     {
; 805  :         return false;

	mov	BYTE PTR $T328962[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	mov	al, BYTE PTR $T328962[ebp]
	jmp	$LN25@Blur
$LN24@Blur:

; 806  :     }
; 807  :     output_overlay->CleanUp();

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, eax
	call	?CleanUp@Overlay@@QAEXXZ		; Overlay::CleanUp

; 808  : 
; 809  :     output_overlay->mOffsetX = input_overlay.mOffsetX;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _input_overlay$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 810  :     output_overlay->mOffsetY = input_overlay.mOffsetY;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _input_overlay$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 811  :     output_overlay->mWidth = input_overlay.mWidth;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _input_overlay$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 812  :     output_overlay->mHeight = input_overlay.mHeight;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _input_overlay$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx

; 813  :     output_overlay->mOverlayWidth = input_overlay.mOverlayWidth;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _input_overlay$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 814  :     output_overlay->mOverlayHeight = input_overlay.mOverlayHeight;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _input_overlay$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx

; 815  :     output_overlay->mfWideOutlineEmpty = input_overlay.mfWideOutlineEmpty;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _input_overlay$[ebp]
	mov	dl, BYTE PTR [ecx+44]
	mov	BYTE PTR [eax+44], dl

; 816  : 
; 817  :     int bluradjust = 0;

	mov	DWORD PTR _bluradjust$[ebp], 0

; 818  :     if(fBlur || fGaussianBlur > 0.1)

	cmp	DWORD PTR _fBlur$[ebp], 0
	jne	SHORT $LN22@Blur
	fld	QWORD PTR __real@3fb999999999999a
	fcomp	QWORD PTR _fGaussianBlur$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN23@Blur
$LN22@Blur:

; 819  :     {
; 820  :         if (fGaussianBlur > 0)

	fldz
	fcomp	QWORD PTR _fGaussianBlur$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN21@Blur

; 821  :             bluradjust += (int)(fGaussianBlur*3*8 + 0.5) | 1;

	fld	QWORD PTR _fGaussianBlur$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR __real@4020000000000000
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	or	eax, 1
	add	eax, DWORD PTR _bluradjust$[ebp]
	mov	DWORD PTR _bluradjust$[ebp], eax
$LN21@Blur:

; 822  :         if (fBlur)

	cmp	DWORD PTR _fBlur$[ebp], 0
	je	SHORT $LN20@Blur

; 823  :             bluradjust += 8;

	mov	eax, DWORD PTR _bluradjust$[ebp]
	add	eax, 8
	mov	DWORD PTR _bluradjust$[ebp], eax
$LN20@Blur:

; 824  :         // Expand the buffer a bit when we're blurring, since that can also widen the borders a bit
; 825  :         bluradjust = (bluradjust+7)&~7;

	mov	eax, DWORD PTR _bluradjust$[ebp]
	add	eax, 7
	and	eax, -8					; fffffff8H
	mov	DWORD PTR _bluradjust$[ebp], eax

; 826  : 
; 827  :         output_overlay->mOffsetX -= bluradjust;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	add	eax, 16					; 00000010H
	mov	DWORD PTR tv149[ebp], eax
	mov	eax, DWORD PTR tv149[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _bluradjust$[ebp]
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR [edx], ecx

; 828  :         output_overlay->mOffsetY -= bluradjust;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	add	eax, 20					; 00000014H
	mov	DWORD PTR tv154[ebp], eax
	mov	eax, DWORD PTR tv154[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _bluradjust$[ebp]
	mov	edx, DWORD PTR tv154[ebp]
	mov	DWORD PTR [edx], ecx

; 829  :         output_overlay->mWidth += (bluradjust<<1);

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	add	eax, 24					; 00000018H
	mov	DWORD PTR tv160[ebp], eax
	mov	eax, DWORD PTR tv160[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _bluradjust$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR tv160[ebp]
	mov	DWORD PTR [ecx], eax

; 830  :         output_overlay->mHeight += (bluradjust<<1);

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	add	eax, 28					; 0000001cH
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _bluradjust$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR tv166[ebp]
	mov	DWORD PTR [ecx], eax

; 831  :         output_overlay->mOverlayWidth += (bluradjust>>2);

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv172[ebp], eax
	mov	eax, DWORD PTR _bluradjust$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR tv172[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv172[ebp]
	mov	DWORD PTR [edx], eax

; 832  :         output_overlay->mOverlayHeight += (bluradjust>>2);

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv178[ebp], eax
	mov	eax, DWORD PTR _bluradjust$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR tv178[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv178[ebp]
	mov	DWORD PTR [edx], eax

; 833  :     }
; 834  :     else

	jmp	SHORT $LN19@Blur
$LN23@Blur:

; 835  :     {
; 836  :         return false;

	mov	BYTE PTR $T328963[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	mov	al, BYTE PTR $T328963[ebp]
	jmp	$LN25@Blur
$LN19@Blur:

; 837  :     }
; 838  : 
; 839  :     output_overlay->mOverlayPitch = (output_overlay->mOverlayWidth+15)&~15;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, DWORD PTR [eax+32]
	add	esi, 15					; 0000000fH
	and	esi, -16				; fffffff0H
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	DWORD PTR [eax+40], esi

; 840  : 
; 841  :     BYTE* body = reinterpret_cast<BYTE*>(xy_malloc(output_overlay->mOverlayPitch * output_overlay->mOverlayHeight));

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, eax
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [esi+40]
	imul	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _body$[ebp], eax

; 842  :     if( body==NULL )

	cmp	DWORD PTR _body$[ebp], 0
	jne	SHORT $LN18@Blur

; 843  :     {
; 844  :         return false;

	mov	BYTE PTR $T328964[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	mov	al, BYTE PTR $T328964[ebp]
	jmp	$LN25@Blur
$LN18@Blur:

; 845  :     }
; 846  :     output_overlay->mBody.reset(body, xy_free);

	push	OFFSET ?xy_free@@YAXPAX@Z		; xy_free
	mov	eax, DWORD PTR _body$[ebp]
	push	eax
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, eax
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 847  :     memset(body, 0, output_overlay->mOverlayPitch * output_overlay->mOverlayHeight);

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, eax
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [esi+40]
	imul	ecx, DWORD PTR [eax+36]
	push	ecx
	push	0
	mov	edx, DWORD PTR _body$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 848  :     BYTE* border = NULL;

	mov	DWORD PTR _border$[ebp], 0

; 849  :     if (!output_overlay->mfWideOutlineEmpty)

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	movzx	eax, BYTE PTR [eax+44]
	test	eax, eax
	jne	$LN17@Blur

; 850  :     {
; 851  :         border = reinterpret_cast<BYTE*>(xy_malloc(output_overlay->mOverlayPitch * output_overlay->mOverlayHeight));

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, eax
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [esi+40]
	imul	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _border$[ebp], eax

; 852  :         if (border==NULL)

	cmp	DWORD PTR _border$[ebp], 0
	jne	SHORT $LN16@Blur

; 853  :         {
; 854  :             return false;

	mov	BYTE PTR $T328965[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	mov	al, BYTE PTR $T328965[ebp]
	jmp	$LN25@Blur
$LN16@Blur:

; 855  :         }
; 856  :         output_overlay->mBorder.reset(border, xy_free);

	push	OFFSET ?xy_free@@YAXPAX@Z		; xy_free
	mov	eax, DWORD PTR _border$[ebp]
	push	eax
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	add	eax, 8
	mov	ecx, eax
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 857  :         memset(border, 0, output_overlay->mOverlayPitch * output_overlay->mOverlayHeight);

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, eax
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [esi+40]
	imul	ecx, DWORD PTR [eax+36]
	push	ecx
	push	0
	mov	edx, DWORD PTR _border$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN17@Blur:

; 858  :     }
; 859  : 
; 860  :     //copy buffer
; 861  :     for(int i = 1; i >= 0; i--)

	mov	DWORD PTR _i$299126[ebp], 1
	jmp	SHORT $LN15@Blur
$LN14@Blur:
	mov	eax, DWORD PTR _i$299126[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$299126[ebp], eax
$LN15@Blur:
	cmp	DWORD PTR _i$299126[ebp], 0
	jl	$LN13@Blur

; 862  :     {
; 863  :         byte* plan_selected = i==0 ? body : border;

	cmp	DWORD PTR _i$299126[ebp], 0
	jne	SHORT $LN27@Blur
	mov	eax, DWORD PTR _body$[ebp]
	mov	DWORD PTR tv247[ebp], eax
	jmp	SHORT $LN28@Blur
$LN27@Blur:
	mov	ecx, DWORD PTR _border$[ebp]
	mov	DWORD PTR tv247[ebp], ecx
$LN28@Blur:
	mov	edx, DWORD PTR tv247[ebp]
	mov	DWORD PTR _plan_selected$299130[ebp], edx

; 864  :         const byte* plan_input = i==0 ? input_overlay.mBody.get() : input_overlay.mBorder.get();

	cmp	DWORD PTR _i$299126[ebp], 0
	jne	SHORT $LN29@Blur
	mov	ecx, DWORD PTR _input_overlay$[ebp]
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	mov	DWORD PTR tv254[ebp], eax
	jmp	SHORT $LN30@Blur
$LN29@Blur:
	mov	ecx, DWORD PTR _input_overlay$[ebp]
	add	ecx, 8
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	mov	DWORD PTR tv254[ebp], eax
$LN30@Blur:
	mov	eax, DWORD PTR tv254[ebp]
	mov	DWORD PTR _plan_input$299131[ebp], eax

; 865  : 
; 866  :         plan_selected += (bluradjust>>3) + (bluradjust>>3)*output_overlay->mOverlayPitch;

	mov	esi, DWORD PTR _bluradjust$[ebp]
	sar	esi, 3
	mov	edi, DWORD PTR _bluradjust$[ebp]
	sar	edi, 3
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	imul	edi, DWORD PTR [eax+40]
	add	edi, DWORD PTR _plan_selected$299130[ebp]
	add	edi, esi
	mov	DWORD PTR _plan_selected$299130[ebp], edi

; 867  :         if ( plan_selected!=NULL && plan_input!=NULL )

	je	SHORT $LN9@Blur
	cmp	DWORD PTR _plan_input$299131[ebp], 0
	je	SHORT $LN9@Blur

; 868  :         {
; 869  :             for (int j=0;j<input_overlay.mOverlayHeight;j++)

	mov	DWORD PTR _j$299133[ebp], 0
	jmp	SHORT $LN11@Blur
$LN10@Blur:
	mov	eax, DWORD PTR _j$299133[ebp]
	add	eax, 1
	mov	DWORD PTR _j$299133[ebp], eax
$LN11@Blur:
	mov	eax, DWORD PTR _input_overlay$[ebp]
	mov	ecx, DWORD PTR _j$299133[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jge	SHORT $LN9@Blur

; 870  :             {
; 871  :                 memcpy(plan_selected, plan_input, input_overlay.mOverlayPitch);

	mov	eax, DWORD PTR _input_overlay$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _plan_input$299131[ebp]
	push	edx
	mov	eax, DWORD PTR _plan_selected$299130[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 872  :                 plan_selected += output_overlay->mOverlayPitch;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _plan_selected$299130[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _plan_selected$299130[ebp], ecx

; 873  :                 plan_input += input_overlay.mOverlayPitch;

	mov	eax, DWORD PTR _input_overlay$[ebp]
	mov	ecx, DWORD PTR _plan_input$299131[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _plan_input$299131[ebp], ecx

; 874  :             }

	jmp	SHORT $LN10@Blur
$LN9@Blur:

; 875  :         }
; 876  :     }

	jmp	$LN14@Blur
$LN13@Blur:

; 877  : 
; 878  :     ass_tmp_buf tmp_buf( max((output_overlay->mOverlayPitch+1)*(output_overlay->mOverlayHeight+1),0) );        

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, DWORD PTR [eax+40]
	add	esi, 1
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+36]
	add	eax, 1
	imul	esi, eax
	test	esi, esi
	jle	SHORT $LN31@Blur
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, DWORD PTR [eax+40]
	add	esi, 1
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	imul	esi, ecx
	mov	DWORD PTR tv299[ebp], esi
	jmp	SHORT $LN32@Blur
$LN31@Blur:
	mov	DWORD PTR tv299[ebp], 0
$LN32@Blur:
	mov	edx, DWORD PTR tv299[ebp]
	push	edx
	lea	ecx, DWORD PTR _tmp_buf$[ebp]
	call	??0ass_tmp_buf@@QAE@I@Z			; ass_tmp_buf::ass_tmp_buf
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 879  :     //flyweight<key_value<int, ass_tmp_buf, ass_tmp_buf_get_size>, no_locking> tmp_buf((overlay->mOverlayWidth+1)*(overlay->mOverlayPitch+1));
; 880  :     // Do some gaussian blur magic    
; 881  :     if (fGaussianBlur > 0.1)//(fGaussianBlur > 0) return true even if fGaussianBlur very small

	fld	QWORD PTR __real@3fb999999999999a
	fcomp	QWORD PTR _fGaussianBlur$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN8@Blur

; 882  :     {
; 883  :         byte* plan_selected= output_overlay->mfWideOutlineEmpty ? body : border;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	movzx	eax, BYTE PTR [eax+44]
	test	eax, eax
	je	SHORT $LN33@Blur
	mov	ecx, DWORD PTR _body$[ebp]
	mov	DWORD PTR tv308[ebp], ecx
	jmp	SHORT $LN34@Blur
$LN33@Blur:
	mov	edx, DWORD PTR _border$[ebp]
	mov	DWORD PTR tv308[ebp], edx
$LN34@Blur:
	mov	eax, DWORD PTR tv308[ebp]
	mov	DWORD PTR _plan_selected$299139[ebp], eax

; 884  :         flyweight<key_value<double, ass_synth_priv, ass_synth_priv_key>, no_locking> fw_priv_blur(fGaussianBlur);

	lea	eax, DWORD PTR _fGaussianBlur$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fw_priv_blur$305302[ebp]
	call	??$?0N@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@AAN@Z ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_><double>
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 885  :         const ass_synth_priv& priv_blur = fw_priv_blur.get();

	lea	ecx, DWORD PTR _fw_priv_blur$305302[ebp]
	call	?get@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QBEABVass_synth_priv@@XZ ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::get
	mov	DWORD PTR _priv_blur$305309[ebp], eax

; 886  :         if (output_overlay->mOverlayWidth>=priv_blur.g_w && output_overlay->mOverlayHeight>=priv_blur.g_w)

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _priv_blur$305309[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+4]
	jl	SHORT $LN7@Blur
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR _priv_blur$305309[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx+4]
	jl	SHORT $LN7@Blur

; 887  :         {   
; 888  :             ass_gauss_blur(plan_selected, tmp_buf.tmp, output_overlay->mOverlayWidth, output_overlay->mOverlayHeight, output_overlay->mOverlayPitch, 
; 889  :                 priv_blur.gt2, priv_blur.g_r, priv_blur.g_w);

	mov	eax, DWORD PTR _priv_blur$305309[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _priv_blur$305309[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _priv_blur$305309[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+40]
	push	eax
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	edx, DWORD PTR [eax+32]
	push	edx
	mov	eax, DWORD PTR _tmp_buf$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _plan_selected$299139[ebp]
	push	ecx
	call	?ass_gauss_blur@@YAXPAEPAIHHHPBIHH@Z	; ass_gauss_blur
	add	esp, 32					; 00000020H
$LN7@Blur:

; 890  :         }
; 891  :     }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fw_priv_blur$305302[ebp]
	call	??1?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@XZ
$LN8@Blur:

; 892  : 
; 893  :     if(output_overlay->mOverlayWidth >= 3 && output_overlay->mOverlayHeight >= 3)

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	cmp	DWORD PTR [eax+32], 3
	jl	$LN3@Blur
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	cmp	DWORD PTR [eax+36], 3
	jl	$LN3@Blur

; 894  :     {
; 895  :         for (int pass = 0; pass < fBlur; pass++)

	mov	DWORD PTR _pass$305312[ebp], 0
	jmp	SHORT $LN5@Blur
$LN4@Blur:
	mov	eax, DWORD PTR _pass$305312[ebp]
	add	eax, 1
	mov	DWORD PTR _pass$305312[ebp], eax
$LN5@Blur:
	mov	eax, DWORD PTR _pass$305312[ebp]
	cmp	eax, DWORD PTR _fBlur$[ebp]
	jge	$LN3@Blur

; 896  :         {
; 897  :             int pitch = output_overlay->mOverlayPitch;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+40]
	mov	DWORD PTR _pitch$305316[ebp], eax

; 898  :             byte* plan_selected= output_overlay->mfWideOutlineEmpty ? body : border;

	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	movzx	eax, BYTE PTR [eax+44]
	test	eax, eax
	je	SHORT $LN35@Blur
	mov	ecx, DWORD PTR _body$[ebp]
	mov	DWORD PTR tv362[ebp], ecx
	jmp	SHORT $LN36@Blur
$LN35@Blur:
	mov	edx, DWORD PTR _border$[ebp]
	mov	DWORD PTR tv362[ebp], edx
$LN36@Blur:
	mov	eax, DWORD PTR tv362[ebp]
	mov	DWORD PTR _plan_selected$305317[ebp], eax

; 899  :             if (g_cpuid.m_flags & CCpuID::sse2)

	mov	eax, DWORD PTR ?g_cpuid@@3VCCpuID@@A	; g_cpuid
	and	eax, 8
	je	SHORT $LN2@Blur

; 900  :             {
; 901  :                 be_blur(plan_selected, tmp_buf.tmp, output_overlay->mOverlayWidth, output_overlay->mOverlayHeight, pitch);

	mov	eax, DWORD PTR _pitch$305316[ebp]
	push	eax
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	edx, DWORD PTR [eax+32]
	push	edx
	mov	eax, DWORD PTR _tmp_buf$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _plan_selected$305317[ebp]
	push	ecx
	call	?be_blur@@YAXPAEPAIHHH@Z		; be_blur
	add	esp, 20					; 00000014H

; 902  :             }
; 903  :             else

	jmp	SHORT $LN1@Blur
$LN2@Blur:

; 904  :             {
; 905  :                 be_blur_c(plan_selected, tmp_buf.tmp, output_overlay->mOverlayWidth, output_overlay->mOverlayHeight, pitch);

	mov	eax, DWORD PTR _pitch$305316[ebp]
	push	eax
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	edx, DWORD PTR [eax+32]
	push	edx
	mov	eax, DWORD PTR _tmp_buf$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _plan_selected$305317[ebp]
	push	ecx
	call	?be_blur_c@@YAXPAEPAIHHH@Z		; be_blur_c
	add	esp, 20					; 00000014H
$LN1@Blur:

; 906  :             }
; 907  :         }

	jmp	$LN4@Blur
$LN3@Blur:

; 908  :     }
; 909  :     return true;

	mov	BYTE PTR $T328976[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _tmp_buf$[ebp]
	call	??1ass_tmp_buf@@QAE@XZ			; ass_tmp_buf::~ass_tmp_buf
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	mov	al, BYTE PTR $T328976[ebp]
$LN25@Blur:

; 910  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@Blur
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 440				; 000001b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN44@Blur:
	DD	2
	DD	$LN43@Blur
$LN43@Blur:
	DD	-108					; ffffff94H
	DD	8
	DD	$LN40@Blur
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN41@Blur
$LN41@Blur:
	DB	102					; 00000066H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
$LN40@Blur:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z$0:
	lea	ecx, DWORD PTR _output_overlay$[ebp]
	jmp	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
__unwindfunclet$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z$1:
	lea	ecx, DWORD PTR _tmp_buf$[ebp]
	jmp	??1ass_tmp_buf@@QAE@XZ			; ass_tmp_buf::~ass_tmp_buf
__unwindfunclet$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z$2:
	lea	ecx, DWORD PTR _fw_priv_blur$305302[ebp]
	jmp	??1?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@XZ
__ehhandler$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-444]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z ENDP ; Rasterizer::Blur
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ass_gauss_blur@@YAXPAEPAIHHHPBIHH@Z
_TEXT	SEGMENT
_mx$298479 = -740					; size = 4
_sum$298478 = -728					; size = 4
_m3$298477 = -716					; size = 4
_src2$298476 = -704					; size = 4
_dstp$298475 = -692					; size = 4
_y2$298474 = -680					; size = 4
_src$298472 = -668					; size = 4
_srcp$298471 = -656					; size = 4
_mx$298466 = -644					; size = 4
_m3$298465 = -632					; size = 4
_src2$298464 = -620					; size = 4
_dstp$298463 = -608					; size = 4
_y2$298462 = -596					; size = 4
_src$298460 = -584					; size = 4
_srcp$298459 = -572					; size = 4
_mx$298452 = -560					; size = 4
_m3$298451 = -548					; size = 4
_src2$298450 = -536					; size = 4
_dstp$298449 = -524					; size = 4
_src$298447 = -512					; size = 4
_srcp$298446 = -500					; size = 4
_mx$298439 = -488					; size = 4
_m3$298438 = -476					; size = 4
_src2$298437 = -464					; size = 4
_dstp$298436 = -452					; size = 4
_src$298434 = -440					; size = 4
_srcp$298433 = -428					; size = 4
_mx$298426 = -416					; size = 4
_sum$298425 = -404					; size = 4
_m3$298424 = -392					; size = 4
_src2$298423 = -380					; size = 4
_dstp$298422 = -368					; size = 4
_src$298420 = -356					; size = 4
_srcp$298419 = -344					; size = 4
_sum$298411 = -332					; size = 4
_m3$298410 = -320					; size = 4
_x2$298409 = -308					; size = 4
_mx$298408 = -296					; size = 4
_dstp$298407 = -284					; size = 4
_src$298405 = -272					; size = 4
_m3$298400 = -260					; size = 4
_x2$298399 = -248					; size = 4
_mx$298398 = -236					; size = 4
_dstp$298397 = -224					; size = 4
_src$298395 = -212					; size = 4
_m3$298388 = -200					; size = 4
_mx$298387 = -188					; size = 4
_dstp$298386 = -176					; size = 4
_src$298384 = -164					; size = 4
_m3$298377 = -152					; size = 4
_mx$298376 = -140					; size = 4
_dstp$298375 = -128					; size = 4
_src$298373 = -116					; size = 4
_sum$298366 = -104					; size = 4
_m3$298365 = -92					; size = 4
_mx$298364 = -80					; size = 4
_dstp$298363 = -68					; size = 4
_src$298361 = -56					; size = 4
_t$ = -44						; size = 4
_s$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_buffer$ = 8						; size = 4
_tmp2$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_stride$ = 24						; size = 4
_m2$ = 28						; size = 4
_r$ = 32						; size = 4
_mwidth$ = 36						; size = 4
?ass_gauss_blur@@YAXPAEPAIHHHPBIHH@Z PROC		; ass_gauss_blur, COMDAT

; 300  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 936				; 000003a8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-936]
	mov	ecx, 234				; 000000eaH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 301  : 
; 302  :     int x, y;
; 303  : 
; 304  :     unsigned char *s = buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 305  :     unsigned *t = tmp2 + 1;

	mov	eax, DWORD PTR _tmp2$[ebp]
	add	eax, 4
	mov	DWORD PTR _t$[ebp], eax

; 306  :     for (y = 0; y < height; y++) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN74@ass_gauss_
$LN73@ass_gauss_:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN74@ass_gauss_:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN72@ass_gauss_

; 307  :         memset(t - 1, 0, (width + 1) * sizeof(*t));

	mov	eax, DWORD PTR _width$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	push	ecx
	push	0
	mov	edx, DWORD PTR _t$[ebp]
	sub	edx, 4
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 308  :         x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 309  :         if(x < r)//in case that r < 0

	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _r$[ebp]
	jge	$LN71@ass_gauss_

; 310  :         {            
; 311  :             const int src = s[x];

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _src$298361[ebp], ecx

; 312  :             if (src) {

	cmp	DWORD PTR _src$298361[ebp], 0
	je	SHORT $LN71@ass_gauss_

; 313  :                 register unsigned *dstp = t + x - r;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 2
	sub	edx, eax
	mov	DWORD PTR _dstp$298363[ebp], edx

; 314  :                 int mx;
; 315  :                 const unsigned *m3 = m2 + src * mwidth;

	mov	eax, DWORD PTR _src$298361[ebp]
	imul	eax, DWORD PTR _mwidth$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _m3$298365[ebp], edx

; 316  :                 unsigned sum = 0;

	mov	DWORD PTR _sum$298366[ebp], 0

; 317  :                 for (mx = mwidth-1; mx >= r - x ; mx--) {                

	mov	eax, DWORD PTR _mwidth$[ebp]
	sub	eax, 1
	mov	DWORD PTR _mx$298364[ebp], eax
	jmp	SHORT $LN69@ass_gauss_
$LN68@ass_gauss_:
	mov	eax, DWORD PTR _mx$298364[ebp]
	sub	eax, 1
	mov	DWORD PTR _mx$298364[ebp], eax
$LN69@ass_gauss_:
	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	cmp	DWORD PTR _mx$298364[ebp], eax
	jl	SHORT $LN71@ass_gauss_

; 318  :                     sum += m3[mx];

	mov	eax, DWORD PTR _mx$298364[ebp]
	mov	ecx, DWORD PTR _m3$298365[ebp]
	mov	edx, DWORD PTR _sum$298366[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _sum$298366[ebp], edx

; 319  :                     dstp[mx] += sum;

	mov	eax, DWORD PTR _mx$298364[ebp]
	mov	ecx, DWORD PTR _dstp$298363[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, DWORD PTR _sum$298366[ebp]
	mov	eax, DWORD PTR _mx$298364[ebp]
	mov	ecx, DWORD PTR _dstp$298363[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 320  :                 }

	jmp	SHORT $LN68@ass_gauss_
$LN71@ass_gauss_:

; 321  :             }
; 322  :         }
; 323  : 
; 324  :         for (x = 1; x < r; x++) {

	mov	DWORD PTR _x$[ebp], 1
	jmp	SHORT $LN66@ass_gauss_
$LN65@ass_gauss_:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN66@ass_gauss_:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _r$[ebp]
	jge	$LN64@ass_gauss_

; 325  :             const int src = s[x];

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _src$298373[ebp], ecx

; 326  :             if (src) {

	cmp	DWORD PTR _src$298373[ebp], 0
	je	SHORT $LN63@ass_gauss_

; 327  :                 register unsigned *dstp = t + x - r;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 2
	sub	edx, eax
	mov	DWORD PTR _dstp$298375[ebp], edx

; 328  :                 int mx;
; 329  :                 const unsigned *m3 = m2 + src * mwidth;

	mov	eax, DWORD PTR _src$298373[ebp]
	imul	eax, DWORD PTR _mwidth$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _m3$298377[ebp], edx

; 330  :                 for (mx = r - x; mx < mwidth; mx++) {

	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _mx$298376[ebp], eax
	jmp	SHORT $LN62@ass_gauss_
$LN61@ass_gauss_:
	mov	eax, DWORD PTR _mx$298376[ebp]
	add	eax, 1
	mov	DWORD PTR _mx$298376[ebp], eax
$LN62@ass_gauss_:
	mov	eax, DWORD PTR _mx$298376[ebp]
	cmp	eax, DWORD PTR _mwidth$[ebp]
	jge	SHORT $LN63@ass_gauss_

; 331  :                     dstp[mx] += m3[mx];

	mov	eax, DWORD PTR _mx$298376[ebp]
	mov	ecx, DWORD PTR _dstp$298375[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mx$298376[ebp]
	mov	ecx, DWORD PTR _m3$298377[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mx$298376[ebp]
	mov	ecx, DWORD PTR _dstp$298375[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 332  :                 }

	jmp	SHORT $LN61@ass_gauss_
$LN63@ass_gauss_:

; 333  :             }
; 334  :         }

	jmp	$LN65@ass_gauss_
$LN64@ass_gauss_:

; 335  : 
; 336  :         for (; x < width - r; x++) {

	jmp	SHORT $LN59@ass_gauss_
$LN58@ass_gauss_:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN59@ass_gauss_:
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, DWORD PTR _r$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	jge	$LN57@ass_gauss_

; 337  :             const int src = s[x];

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _src$298384[ebp], ecx

; 338  :             if (src) {

	cmp	DWORD PTR _src$298384[ebp], 0
	je	$LN56@ass_gauss_

; 339  :                 register unsigned *dstp = t + x - r;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 2
	sub	edx, eax
	mov	DWORD PTR _dstp$298386[ebp], edx

; 340  :                 int mx;
; 341  :                 const unsigned *m3 = m2 + src * mwidth;

	mov	eax, DWORD PTR _src$298384[ebp]
	imul	eax, DWORD PTR _mwidth$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _m3$298388[ebp], edx

; 342  :                 for (mx = 0; mx < mwidth; mx++) {

	mov	DWORD PTR _mx$298387[ebp], 0
	jmp	SHORT $LN55@ass_gauss_
$LN54@ass_gauss_:
	mov	eax, DWORD PTR _mx$298387[ebp]
	add	eax, 1
	mov	DWORD PTR _mx$298387[ebp], eax
$LN55@ass_gauss_:
	mov	eax, DWORD PTR _mx$298387[ebp]
	cmp	eax, DWORD PTR _mwidth$[ebp]
	jge	SHORT $LN56@ass_gauss_

; 343  :                     dstp[mx] += m3[mx];

	mov	eax, DWORD PTR _mx$298387[ebp]
	mov	ecx, DWORD PTR _dstp$298386[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mx$298387[ebp]
	mov	ecx, DWORD PTR _m3$298388[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mx$298387[ebp]
	mov	ecx, DWORD PTR _dstp$298386[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 344  :                 }

	jmp	SHORT $LN54@ass_gauss_
$LN56@ass_gauss_:

; 345  :             }
; 346  :         }

	jmp	$LN58@ass_gauss_
$LN57@ass_gauss_:

; 347  : 
; 348  :         for (; x < width-1; x++) {

	jmp	SHORT $LN52@ass_gauss_
$LN51@ass_gauss_:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN52@ass_gauss_:
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _x$[ebp], eax
	jge	$LN50@ass_gauss_

; 349  :             const int src = s[x];

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _src$298395[ebp], ecx

; 350  :             if (src) {

	cmp	DWORD PTR _src$298395[ebp], 0
	je	$LN49@ass_gauss_

; 351  :                 register unsigned *dstp = t + x - r;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 2
	sub	edx, eax
	mov	DWORD PTR _dstp$298397[ebp], edx

; 352  :                 int mx;
; 353  :                 const int x2 = r + width - x;

	mov	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x2$298399[ebp], eax

; 354  :                 const unsigned *m3 = m2 + src * mwidth;

	mov	eax, DWORD PTR _src$298395[ebp]
	imul	eax, DWORD PTR _mwidth$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _m3$298400[ebp], edx

; 355  :                 for (mx = 0; mx < x2; mx++) {

	mov	DWORD PTR _mx$298398[ebp], 0
	jmp	SHORT $LN48@ass_gauss_
$LN47@ass_gauss_:
	mov	eax, DWORD PTR _mx$298398[ebp]
	add	eax, 1
	mov	DWORD PTR _mx$298398[ebp], eax
$LN48@ass_gauss_:
	mov	eax, DWORD PTR _mx$298398[ebp]
	cmp	eax, DWORD PTR _x2$298399[ebp]
	jge	SHORT $LN49@ass_gauss_

; 356  :                     dstp[mx] += m3[mx];

	mov	eax, DWORD PTR _mx$298398[ebp]
	mov	ecx, DWORD PTR _dstp$298397[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mx$298398[ebp]
	mov	ecx, DWORD PTR _m3$298400[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mx$298398[ebp]
	mov	ecx, DWORD PTR _dstp$298397[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 357  :                 }

	jmp	SHORT $LN47@ass_gauss_
$LN49@ass_gauss_:

; 358  :             }
; 359  :         }

	jmp	$LN51@ass_gauss_
$LN50@ass_gauss_:

; 360  :         if(x==width-1) //important: x==width-1 failed, if r==0

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _x$[ebp], eax
	jne	$LN45@ass_gauss_

; 361  :         {
; 362  :             const int src = s[x];

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _src$298405[ebp], ecx

; 363  :             if (src) {

	cmp	DWORD PTR _src$298405[ebp], 0
	je	$LN45@ass_gauss_

; 364  :                 register unsigned *dstp = t + x - r;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 2
	sub	edx, eax
	mov	DWORD PTR _dstp$298407[ebp], edx

; 365  :                 int mx;
; 366  :                 const int x2 = r + width - x;

	mov	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x2$298409[ebp], eax

; 367  :                 const unsigned *m3 = m2 + src * mwidth;

	mov	eax, DWORD PTR _src$298405[ebp]
	imul	eax, DWORD PTR _mwidth$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _m3$298410[ebp], edx

; 368  :                 unsigned sum = 0;

	mov	DWORD PTR _sum$298411[ebp], 0

; 369  :                 for (mx = 0; mx < x2; mx++) {

	mov	DWORD PTR _mx$298408[ebp], 0
	jmp	SHORT $LN43@ass_gauss_
$LN42@ass_gauss_:
	mov	eax, DWORD PTR _mx$298408[ebp]
	add	eax, 1
	mov	DWORD PTR _mx$298408[ebp], eax
$LN43@ass_gauss_:
	mov	eax, DWORD PTR _mx$298408[ebp]
	cmp	eax, DWORD PTR _x2$298409[ebp]
	jge	SHORT $LN45@ass_gauss_

; 370  :                     sum += m3[mx];

	mov	eax, DWORD PTR _mx$298408[ebp]
	mov	ecx, DWORD PTR _m3$298410[ebp]
	mov	edx, DWORD PTR _sum$298411[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _sum$298411[ebp], edx

; 371  :                     dstp[mx] += sum;

	mov	eax, DWORD PTR _mx$298408[ebp]
	mov	ecx, DWORD PTR _dstp$298407[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, DWORD PTR _sum$298411[ebp]
	mov	eax, DWORD PTR _mx$298408[ebp]
	mov	ecx, DWORD PTR _dstp$298407[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 372  :                 }

	jmp	SHORT $LN42@ass_gauss_
$LN45@ass_gauss_:

; 373  :             }
; 374  :         }
; 375  : 
; 376  :         s += stride;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _stride$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 377  :         t += width + 1;

	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _t$[ebp], edx

; 378  :     }

	jmp	$LN73@ass_gauss_
$LN72@ass_gauss_:

; 379  : 
; 380  :     t = tmp2;

	mov	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 381  :     for (x = 0; x < width; x++) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN40@ass_gauss_
$LN39@ass_gauss_:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN40@ass_gauss_:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN38@ass_gauss_

; 382  :         y = 0;

	mov	DWORD PTR _y$[ebp], 0

; 383  :         if(y < r)//in case that r<0

	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _r$[ebp]
	jge	$LN37@ass_gauss_

; 384  :         {            
; 385  :             unsigned *srcp = t + y * (width + 1) + 1;

	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _srcp$298419[ebp], edx

; 386  :             int src = *srcp;

	mov	eax, DWORD PTR _srcp$298419[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _src$298420[ebp], ecx

; 387  :             if (src) {

	cmp	DWORD PTR _src$298420[ebp], 0
	je	$LN37@ass_gauss_

; 388  :                 register unsigned *dstp = srcp - 1 + (mwidth -r +y)*(width + 1);

	mov	eax, DWORD PTR _mwidth$[ebp]
	sub	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	add	ecx, 1
	imul	eax, ecx
	mov	edx, DWORD PTR _srcp$298419[ebp]
	lea	eax, DWORD PTR [edx+eax*4-4]
	mov	DWORD PTR _dstp$298422[ebp], eax

; 389  :                 const int src2 = (src + (1<<(ass_synth_priv::VOLUME_BITS-1))) >> ass_synth_priv::VOLUME_BITS;

	mov	eax, DWORD PTR _src$298420[ebp]
	add	eax, 2097152				; 00200000H
	sar	eax, 22					; 00000016H
	mov	DWORD PTR _src2$298423[ebp], eax

; 390  :                 const unsigned *m3 = m2 + src2 * mwidth;

	mov	eax, DWORD PTR _src2$298423[ebp]
	imul	eax, DWORD PTR _mwidth$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _m3$298424[ebp], edx

; 391  :                 unsigned sum = 0;

	mov	DWORD PTR _sum$298425[ebp], 0

; 392  :                 int mx;
; 393  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));

	mov	eax, DWORD PTR _srcp$298419[ebp]
	mov	DWORD PTR [eax], 2097152		; 00200000H

; 394  :                 for (mx = mwidth-1; mx >=r - y ; mx--) {

	mov	eax, DWORD PTR _mwidth$[ebp]
	sub	eax, 1
	mov	DWORD PTR _mx$298426[ebp], eax
	jmp	SHORT $LN35@ass_gauss_
$LN34@ass_gauss_:
	mov	eax, DWORD PTR _mx$298426[ebp]
	sub	eax, 1
	mov	DWORD PTR _mx$298426[ebp], eax
$LN35@ass_gauss_:
	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _mx$298426[ebp], eax
	jl	SHORT $LN37@ass_gauss_

; 395  :                     sum += m3[mx];

	mov	eax, DWORD PTR _mx$298426[ebp]
	mov	ecx, DWORD PTR _m3$298424[ebp]
	mov	edx, DWORD PTR _sum$298425[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _sum$298425[ebp], edx

; 396  :                     *dstp += sum;

	mov	eax, DWORD PTR _dstp$298422[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _sum$298425[ebp]
	mov	edx, DWORD PTR _dstp$298422[ebp]
	mov	DWORD PTR [edx], ecx

; 397  :                     dstp -= width + 1;

	mov	eax, DWORD PTR _width$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	mov	edx, DWORD PTR _dstp$298422[ebp]
	sub	edx, ecx
	mov	DWORD PTR _dstp$298422[ebp], edx

; 398  :                 }

	jmp	SHORT $LN34@ass_gauss_
$LN37@ass_gauss_:

; 399  :             }
; 400  :         }
; 401  :         for (y = 1; y < r; y++) {

	mov	DWORD PTR _y$[ebp], 1
	jmp	SHORT $LN32@ass_gauss_
$LN31@ass_gauss_:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN32@ass_gauss_:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _r$[ebp]
	jge	$LN30@ass_gauss_

; 402  :             unsigned *srcp = t + y * (width + 1) + 1;

	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _srcp$298433[ebp], edx

; 403  :             int src = *srcp;

	mov	eax, DWORD PTR _srcp$298433[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _src$298434[ebp], ecx

; 404  :             if (src) {

	cmp	DWORD PTR _src$298434[ebp], 0
	je	$LN29@ass_gauss_

; 405  :                 register unsigned *dstp = srcp - 1 + width + 1;

	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _srcp$298433[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _dstp$298436[ebp], edx

; 406  :                 const int src2 = (src + (1<<(ass_synth_priv::VOLUME_BITS-1))) >> ass_synth_priv::VOLUME_BITS;

	mov	eax, DWORD PTR _src$298434[ebp]
	add	eax, 2097152				; 00200000H
	sar	eax, 22					; 00000016H
	mov	DWORD PTR _src2$298437[ebp], eax

; 407  :                 const unsigned *m3 = m2 + src2 * mwidth;

	mov	eax, DWORD PTR _src2$298437[ebp]
	imul	eax, DWORD PTR _mwidth$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _m3$298438[ebp], edx

; 408  : 
; 409  :                 int mx;
; 410  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));

	mov	eax, DWORD PTR _srcp$298433[ebp]
	mov	DWORD PTR [eax], 2097152		; 00200000H

; 411  :                 for (mx = r - y; mx < mwidth; mx++) {

	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _mx$298439[ebp], eax
	jmp	SHORT $LN28@ass_gauss_
$LN27@ass_gauss_:
	mov	eax, DWORD PTR _mx$298439[ebp]
	add	eax, 1
	mov	DWORD PTR _mx$298439[ebp], eax
$LN28@ass_gauss_:
	mov	eax, DWORD PTR _mx$298439[ebp]
	cmp	eax, DWORD PTR _mwidth$[ebp]
	jge	SHORT $LN29@ass_gauss_

; 412  :                     *dstp += m3[mx];

	mov	eax, DWORD PTR _dstp$298436[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _mx$298439[ebp]
	mov	eax, DWORD PTR _m3$298438[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dstp$298436[ebp]
	mov	DWORD PTR [edx], ecx

; 413  :                     dstp += width + 1;

	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _dstp$298436[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _dstp$298436[ebp], edx

; 414  :                 }

	jmp	SHORT $LN27@ass_gauss_
$LN29@ass_gauss_:

; 415  :             }
; 416  :         }

	jmp	$LN31@ass_gauss_
$LN30@ass_gauss_:

; 417  :         for (; y < height - r; y++) {

	jmp	SHORT $LN25@ass_gauss_
$LN24@ass_gauss_:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN25@ass_gauss_:
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, DWORD PTR _r$[ebp]
	cmp	DWORD PTR _y$[ebp], eax
	jge	$LN23@ass_gauss_

; 418  :             unsigned *srcp = t + y * (width + 1) + 1;

	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _srcp$298446[ebp], edx

; 419  :             int src = *srcp;

	mov	eax, DWORD PTR _srcp$298446[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _src$298447[ebp], ecx

; 420  :             if (src) {

	cmp	DWORD PTR _src$298447[ebp], 0
	je	$LN22@ass_gauss_

; 421  :                 register unsigned *dstp = srcp - 1 - r * (width + 1);

	mov	eax, DWORD PTR _srcp$298446[ebp]
	sub	eax, 4
	mov	ecx, DWORD PTR _width$[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _r$[ebp]
	shl	ecx, 2
	sub	eax, ecx
	mov	DWORD PTR _dstp$298449[ebp], eax

; 422  :                 const int src2 = (src + (1<<(ass_synth_priv::VOLUME_BITS-1))) >> ass_synth_priv::VOLUME_BITS;

	mov	eax, DWORD PTR _src$298447[ebp]
	add	eax, 2097152				; 00200000H
	sar	eax, 22					; 00000016H
	mov	DWORD PTR _src2$298450[ebp], eax

; 423  :                 const unsigned *m3 = m2 + src2 * mwidth;

	mov	eax, DWORD PTR _src2$298450[ebp]
	imul	eax, DWORD PTR _mwidth$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _m3$298451[ebp], edx

; 424  : 
; 425  :                 int mx;
; 426  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));

	mov	eax, DWORD PTR _srcp$298446[ebp]
	mov	DWORD PTR [eax], 2097152		; 00200000H

; 427  :                 for (mx = 0; mx < mwidth; mx++) {

	mov	DWORD PTR _mx$298452[ebp], 0
	jmp	SHORT $LN21@ass_gauss_
$LN20@ass_gauss_:
	mov	eax, DWORD PTR _mx$298452[ebp]
	add	eax, 1
	mov	DWORD PTR _mx$298452[ebp], eax
$LN21@ass_gauss_:
	mov	eax, DWORD PTR _mx$298452[ebp]
	cmp	eax, DWORD PTR _mwidth$[ebp]
	jge	SHORT $LN22@ass_gauss_

; 428  :                     *dstp += m3[mx];

	mov	eax, DWORD PTR _dstp$298449[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _mx$298452[ebp]
	mov	eax, DWORD PTR _m3$298451[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dstp$298449[ebp]
	mov	DWORD PTR [edx], ecx

; 429  :                     dstp += width + 1;

	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _dstp$298449[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _dstp$298449[ebp], edx

; 430  :                 }

	jmp	SHORT $LN20@ass_gauss_
$LN22@ass_gauss_:

; 431  :             }
; 432  :         }

	jmp	$LN24@ass_gauss_
$LN23@ass_gauss_:

; 433  :         for (; y < height-1; y++) {

	jmp	SHORT $LN18@ass_gauss_
$LN17@ass_gauss_:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN18@ass_gauss_:
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _y$[ebp], eax
	jge	$LN16@ass_gauss_

; 434  :             unsigned *srcp = t + y * (width + 1) + 1;

	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _srcp$298459[ebp], edx

; 435  :             int src = *srcp;

	mov	eax, DWORD PTR _srcp$298459[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _src$298460[ebp], ecx

; 436  :             if (src) {

	cmp	DWORD PTR _src$298460[ebp], 0
	je	$LN15@ass_gauss_

; 437  :                 const int y2 = r + height - y;

	mov	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	sub	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y2$298462[ebp], eax

; 438  :                 register unsigned *dstp = srcp - 1 - r * (width + 1);

	mov	eax, DWORD PTR _srcp$298459[ebp]
	sub	eax, 4
	mov	ecx, DWORD PTR _width$[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _r$[ebp]
	shl	ecx, 2
	sub	eax, ecx
	mov	DWORD PTR _dstp$298463[ebp], eax

; 439  :                 const int src2 = (src + (1<<(ass_synth_priv::VOLUME_BITS-1))) >> ass_synth_priv::VOLUME_BITS;

	mov	eax, DWORD PTR _src$298460[ebp]
	add	eax, 2097152				; 00200000H
	sar	eax, 22					; 00000016H
	mov	DWORD PTR _src2$298464[ebp], eax

; 440  :                 const unsigned *m3 = m2 + src2 * mwidth;

	mov	eax, DWORD PTR _src2$298464[ebp]
	imul	eax, DWORD PTR _mwidth$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _m3$298465[ebp], edx

; 441  : 
; 442  :                 int mx;
; 443  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));

	mov	eax, DWORD PTR _srcp$298459[ebp]
	mov	DWORD PTR [eax], 2097152		; 00200000H

; 444  :                 for (mx = 0; mx < y2; mx++) {

	mov	DWORD PTR _mx$298466[ebp], 0
	jmp	SHORT $LN14@ass_gauss_
$LN13@ass_gauss_:
	mov	eax, DWORD PTR _mx$298466[ebp]
	add	eax, 1
	mov	DWORD PTR _mx$298466[ebp], eax
$LN14@ass_gauss_:
	mov	eax, DWORD PTR _mx$298466[ebp]
	cmp	eax, DWORD PTR _y2$298462[ebp]
	jge	SHORT $LN15@ass_gauss_

; 445  :                     *dstp += m3[mx];

	mov	eax, DWORD PTR _dstp$298463[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _mx$298466[ebp]
	mov	eax, DWORD PTR _m3$298465[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dstp$298463[ebp]
	mov	DWORD PTR [edx], ecx

; 446  :                     dstp += width + 1;

	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _dstp$298463[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _dstp$298463[ebp], edx

; 447  :                 }

	jmp	SHORT $LN13@ass_gauss_
$LN15@ass_gauss_:

; 448  :             }
; 449  :         }

	jmp	$LN17@ass_gauss_
$LN16@ass_gauss_:

; 450  :         if(y == height - 1)//important: y == height - 1 failed if r==0

	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _y$[ebp], eax
	jne	$LN11@ass_gauss_

; 451  :         {
; 452  :             unsigned *srcp = t + y * (width + 1) + 1;

	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _srcp$298471[ebp], edx

; 453  :             int src = *srcp;

	mov	eax, DWORD PTR _srcp$298471[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _src$298472[ebp], ecx

; 454  :             if (src) {

	cmp	DWORD PTR _src$298472[ebp], 0
	je	$LN11@ass_gauss_

; 455  :                 const int y2 = r + height - y;

	mov	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	sub	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y2$298474[ebp], eax

; 456  :                 register unsigned *dstp = srcp - 1 - r * (width + 1);

	mov	eax, DWORD PTR _srcp$298471[ebp]
	sub	eax, 4
	mov	ecx, DWORD PTR _width$[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _r$[ebp]
	shl	ecx, 2
	sub	eax, ecx
	mov	DWORD PTR _dstp$298475[ebp], eax

; 457  :                 const int src2 = (src + (1<<(ass_synth_priv::VOLUME_BITS-1))) >> ass_synth_priv::VOLUME_BITS;

	mov	eax, DWORD PTR _src$298472[ebp]
	add	eax, 2097152				; 00200000H
	sar	eax, 22					; 00000016H
	mov	DWORD PTR _src2$298476[ebp], eax

; 458  :                 const unsigned *m3 = m2 + src2 * mwidth;

	mov	eax, DWORD PTR _src2$298476[ebp]
	imul	eax, DWORD PTR _mwidth$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _m3$298477[ebp], edx

; 459  :                 unsigned sum = 0;

	mov	DWORD PTR _sum$298478[ebp], 0

; 460  :                 int mx;
; 461  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));

	mov	eax, DWORD PTR _srcp$298471[ebp]
	mov	DWORD PTR [eax], 2097152		; 00200000H

; 462  :                 for (mx = 0; mx < y2; mx++) {

	mov	DWORD PTR _mx$298479[ebp], 0
	jmp	SHORT $LN9@ass_gauss_
$LN8@ass_gauss_:
	mov	eax, DWORD PTR _mx$298479[ebp]
	add	eax, 1
	mov	DWORD PTR _mx$298479[ebp], eax
$LN9@ass_gauss_:
	mov	eax, DWORD PTR _mx$298479[ebp]
	cmp	eax, DWORD PTR _y2$298474[ebp]
	jge	SHORT $LN11@ass_gauss_

; 463  :                     sum += m3[mx];

	mov	eax, DWORD PTR _mx$298479[ebp]
	mov	ecx, DWORD PTR _m3$298477[ebp]
	mov	edx, DWORD PTR _sum$298478[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _sum$298478[ebp], edx

; 464  :                     *dstp += sum;

	mov	eax, DWORD PTR _dstp$298475[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _sum$298478[ebp]
	mov	edx, DWORD PTR _dstp$298475[ebp]
	mov	DWORD PTR [edx], ecx

; 465  :                     dstp += width + 1;

	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _dstp$298475[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _dstp$298475[ebp], edx

; 466  :                 }

	jmp	SHORT $LN8@ass_gauss_
$LN11@ass_gauss_:

; 467  :             }
; 468  :         }
; 469  :         t++;

	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 4
	mov	DWORD PTR _t$[ebp], eax

; 470  :     }

	jmp	$LN39@ass_gauss_
$LN38@ass_gauss_:

; 471  : 
; 472  :     t = tmp2;

	mov	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 473  :     s = buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 474  :     for (y = 0; y < height; y++) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN6@ass_gauss_
$LN5@ass_gauss_:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN6@ass_gauss_:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN75@ass_gauss_

; 475  :         for (x = 0; x < width; x++) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN3@ass_gauss_
$LN2@ass_gauss_:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN3@ass_gauss_:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN1@ass_gauss_

; 476  :             s[x] = t[x] >> ass_synth_priv::VOLUME_BITS;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	shr	edx, 22					; 00000016H
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	BYTE PTR [eax], dl

; 477  :         }

	jmp	SHORT $LN2@ass_gauss_
$LN1@ass_gauss_:

; 478  :         s += stride;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _stride$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 479  :         t += width + 1;

	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _t$[ebp], edx

; 480  :     }

	jmp	SHORT $LN5@ass_gauss_
$LN75@ass_gauss_:

; 481  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 936				; 000003a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ass_gauss_blur@@YAXPAEPAIHHHPBIHH@Z ENDP		; ass_gauss_blur
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?be_blur@@YAXPAEPAIHHH@Z
_TEXT	SEGMENT
$T298536 = -1296					; size = 16
$T298538 = -1264					; size = 16
$T298544 = -1232					; size = 16
$T298545 = -1200					; size = 16
$T298546 = -1168					; size = 16
$T298548 = -1136					; size = 16
$T298549 = -1104					; size = 16
$T298550 = -1072					; size = 16
$T298551 = -1040					; size = 16
$T298552 = -1008					; size = 16
$T298553 = -976						; size = 16
$T298554 = -944						; size = 16
$T298555 = -912						; size = 16
$T298558 = -880						; size = 16
$T298561 = -848						; size = 16
$T298563 = -816						; size = 16
$T298565 = -784						; size = 16
$T298566 = -752						; size = 16
$T298567 = -720						; size = 16
_temp2$298575 = -496					; size = 4
_temp1$298574 = -484					; size = 4
_old_sum$298570 = -472					; size = 4
_old_pix$298569 = -460					; size = 4
_old_col_sum$298559 = -448				; size = 16
_old_col_pix$298556 = -416				; size = 16
_temp$298547 = -384					; size = 16
_new_pix$298542 = -352					; size = 16
_old_sum_128$298537 = -320				; size = 16
_old_pix_128$298535 = -288				; size = 16
_x$298534 = -260					; size = 4
_dst$298533 = -248					; size = 4
_src$298532 = -236					; size = 4
_y$298528 = -224					; size = 4
_temp2$298527 = -212					; size = 4
_temp1$298526 = -200					; size = 4
_old_sum$298522 = -188					; size = 4
_old_pix$298521 = -176					; size = 4
_x$298520 = -164					; size = 4
_src$298519 = -152					; size = 4
_y$298518 = -140					; size = 4
_temp2$298517 = -128					; size = 4
_temp1$298516 = -116					; size = 4
_old_sum$298512 = -104					; size = 4
_old_pix$298511 = -92					; size = 4
_x$298510 = -80						; size = 4
_src$298509 = -68					; size = 4
_y$298508 = -56						; size = 4
_col_sum_buf$ = -44					; size = 4
_col_pix_buf$ = -32					; size = 4
_col_sum_buf_base$ = -20				; size = 4
_col_pix_buf_base$ = -8					; size = 4
_buf$ = 8						; size = 4
_tmp_base$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_stride$ = 24						; size = 4
?be_blur@@YAXPAEPAIHHH@Z PROC				; be_blur, COMDAT

; 487  : {   

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1304				; 00000518H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1304]
	mov	ecx, 326				; 00000146H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 488  :     WORD *col_pix_buf_base = reinterpret_cast<WORD*>(xy_malloc(w*sizeof(WORD)));

	mov	eax, DWORD PTR _w$[ebx]
	shl	eax, 1
	push	eax
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _col_pix_buf_base$[ebp], eax

; 489  :     WORD *col_sum_buf_base = reinterpret_cast<WORD*>(xy_malloc(w*sizeof(WORD)));

	mov	eax, DWORD PTR _w$[ebx]
	shl	eax, 1
	push	eax
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _col_sum_buf_base$[ebp], eax

; 490  :     if(!col_sum_buf_base || !col_pix_buf_base)

	cmp	DWORD PTR _col_sum_buf_base$[ebp], 0
	je	SHORT $LN16@be_blur
	cmp	DWORD PTR _col_pix_buf_base$[ebp], 0
	jne	SHORT $LN17@be_blur
$LN16@be_blur:

; 491  :     {
; 492  :         //ToDo: error handling
; 493  :         return;

	jmp	$LN18@be_blur
$LN17@be_blur:

; 494  :     }
; 495  :     memset(col_pix_buf_base, 0, w*sizeof(WORD));

	mov	eax, DWORD PTR _w$[ebx]
	shl	eax, 1
	push	eax
	push	0
	mov	ecx, DWORD PTR _col_pix_buf_base$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 496  :     memset(col_sum_buf_base, 0, w*sizeof(WORD));

	mov	eax, DWORD PTR _w$[ebx]
	shl	eax, 1
	push	eax
	push	0
	mov	ecx, DWORD PTR _col_sum_buf_base$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 497  :     WORD *col_pix_buf = col_pix_buf_base-2;//for aligment;

	mov	eax, DWORD PTR _col_pix_buf_base$[ebp]
	sub	eax, 4
	mov	DWORD PTR _col_pix_buf$[ebp], eax

; 498  :     WORD *col_sum_buf = col_sum_buf_base-2;//for aligment;

	mov	eax, DWORD PTR _col_sum_buf_base$[ebp]
	sub	eax, 4
	mov	DWORD PTR _col_sum_buf$[ebp], eax

; 499  :     {
; 500  :         int y = 0;

	mov	DWORD PTR _y$298508[ebp], 0

; 501  :         unsigned char *src=buf+y*stride;

	mov	eax, DWORD PTR _y$298508[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _buf$[ebx]
	mov	DWORD PTR _src$298509[ebp], eax

; 502  : 
; 503  :         int x = 2;

	mov	DWORD PTR _x$298510[ebp], 2

; 504  :         int old_pix = src[x-1];

	mov	eax, DWORD PTR _src$298509[ebp]
	add	eax, DWORD PTR _x$298510[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	mov	DWORD PTR _old_pix$298511[ebp], ecx

; 505  :         int old_sum = old_pix + src[x-2];

	mov	eax, DWORD PTR _src$298509[ebp]
	add	eax, DWORD PTR _x$298510[ebp]
	movzx	ecx, BYTE PTR [eax-2]
	add	ecx, DWORD PTR _old_pix$298511[ebp]
	mov	DWORD PTR _old_sum$298512[ebp], ecx
	jmp	SHORT $LN15@be_blur
$LN14@be_blur:

; 506  :         for ( ; x < w; x++) {

	mov	eax, DWORD PTR _x$298510[ebp]
	add	eax, 1
	mov	DWORD PTR _x$298510[ebp], eax
$LN15@be_blur:
	mov	eax, DWORD PTR _x$298510[ebp]
	cmp	eax, DWORD PTR _w$[ebx]
	jge	SHORT $LN13@be_blur

; 507  :             int temp1 = src[x];

	mov	eax, DWORD PTR _src$298509[ebp]
	add	eax, DWORD PTR _x$298510[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _temp1$298516[ebp], ecx

; 508  :             int temp2 = old_pix + temp1;

	mov	eax, DWORD PTR _old_pix$298511[ebp]
	add	eax, DWORD PTR _temp1$298516[ebp]
	mov	DWORD PTR _temp2$298517[ebp], eax

; 509  :             old_pix = temp1;

	mov	eax, DWORD PTR _temp1$298516[ebp]
	mov	DWORD PTR _old_pix$298511[ebp], eax

; 510  :             temp1 = old_sum + temp2;

	mov	eax, DWORD PTR _old_sum$298512[ebp]
	add	eax, DWORD PTR _temp2$298517[ebp]
	mov	DWORD PTR _temp1$298516[ebp], eax

; 511  :             old_sum = temp2;

	mov	eax, DWORD PTR _temp2$298517[ebp]
	mov	DWORD PTR _old_sum$298512[ebp], eax

; 512  :             col_pix_buf[x] = temp1;

	mov	eax, DWORD PTR _x$298510[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	mov	dx, WORD PTR _temp1$298516[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 513  :         }

	jmp	SHORT $LN14@be_blur
$LN13@be_blur:

; 514  :     }
; 515  :     {
; 516  :         int y = 1;

	mov	DWORD PTR _y$298518[ebp], 1

; 517  :         unsigned char *src=buf+y*stride;

	mov	eax, DWORD PTR _y$298518[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _buf$[ebx]
	mov	DWORD PTR _src$298519[ebp], eax

; 518  : 
; 519  : 
; 520  :         int x = 2;

	mov	DWORD PTR _x$298520[ebp], 2

; 521  :         int old_pix = src[x-1];

	mov	eax, DWORD PTR _src$298519[ebp]
	add	eax, DWORD PTR _x$298520[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	mov	DWORD PTR _old_pix$298521[ebp], ecx

; 522  :         int old_sum = old_pix + src[x-2];

	mov	eax, DWORD PTR _src$298519[ebp]
	add	eax, DWORD PTR _x$298520[ebp]
	movzx	ecx, BYTE PTR [eax-2]
	add	ecx, DWORD PTR _old_pix$298521[ebp]
	mov	DWORD PTR _old_sum$298522[ebp], ecx
	jmp	SHORT $LN12@be_blur
$LN11@be_blur:

; 523  :         for ( ; x < w; x++) {

	mov	eax, DWORD PTR _x$298520[ebp]
	add	eax, 1
	mov	DWORD PTR _x$298520[ebp], eax
$LN12@be_blur:
	mov	eax, DWORD PTR _x$298520[ebp]
	cmp	eax, DWORD PTR _w$[ebx]
	jge	$LN10@be_blur

; 524  :             int temp1 = src[x];

	mov	eax, DWORD PTR _src$298519[ebp]
	add	eax, DWORD PTR _x$298520[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _temp1$298526[ebp], ecx

; 525  :             int temp2 = old_pix + temp1;

	mov	eax, DWORD PTR _old_pix$298521[ebp]
	add	eax, DWORD PTR _temp1$298526[ebp]
	mov	DWORD PTR _temp2$298527[ebp], eax

; 526  :             old_pix = temp1;

	mov	eax, DWORD PTR _temp1$298526[ebp]
	mov	DWORD PTR _old_pix$298521[ebp], eax

; 527  :             temp1 = old_sum + temp2;

	mov	eax, DWORD PTR _old_sum$298522[ebp]
	add	eax, DWORD PTR _temp2$298527[ebp]
	mov	DWORD PTR _temp1$298526[ebp], eax

; 528  :             old_sum = temp2;

	mov	eax, DWORD PTR _temp2$298527[ebp]
	mov	DWORD PTR _old_sum$298522[ebp], eax

; 529  : 
; 530  :             temp2 = col_pix_buf[x] + temp1;

	mov	eax, DWORD PTR _x$298520[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _temp1$298526[ebp]
	mov	DWORD PTR _temp2$298527[ebp], edx

; 531  :             col_pix_buf[x] = temp1;

	mov	eax, DWORD PTR _x$298520[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	mov	dx, WORD PTR _temp1$298526[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 532  :             //dst[x-1] = (col_sum_buf[x] + temp2) >> 4;
; 533  :             col_sum_buf[x] = temp2;

	mov	eax, DWORD PTR _x$298520[ebp]
	mov	ecx, DWORD PTR _col_sum_buf$[ebp]
	mov	dx, WORD PTR _temp2$298527[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 534  :         }

	jmp	$LN11@be_blur
$LN10@be_blur:

; 535  :     }
; 536  : 
; 537  :     //__m128i round = _mm_set1_epi16(8);
; 538  :     for (int y = 2; y < h; y++) {

	mov	DWORD PTR _y$298528[ebp], 2
	jmp	SHORT $LN9@be_blur
$LN8@be_blur:
	mov	eax, DWORD PTR _y$298528[ebp]
	add	eax, 1
	mov	DWORD PTR _y$298528[ebp], eax
$LN9@be_blur:
	mov	eax, DWORD PTR _y$298528[ebp]
	cmp	eax, DWORD PTR _h$[ebx]
	jge	$LN7@be_blur

; 539  :         unsigned char *src=buf+y*stride;

	mov	eax, DWORD PTR _y$298528[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _buf$[ebx]
	mov	DWORD PTR _src$298532[ebp], eax

; 540  :         unsigned char *dst=buf+(y-1)*stride;

	mov	eax, DWORD PTR _y$298528[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _buf$[ebx]
	mov	DWORD PTR _dst$298533[ebp], eax

; 541  : 
; 542  :                 
; 543  :         int x = 2;

	mov	DWORD PTR _x$298534[ebp], 2

; 544  :         __m128i old_pix_128 = _mm_cvtsi32_si128(src[1]);

	mov	eax, DWORD PTR _src$298532[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	movd	xmm0, ecx
	movdqa	XMMWORD PTR $T298536[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298536[ebp]
	movdqa	XMMWORD PTR _old_pix_128$298535[ebp], xmm0

; 545  :         __m128i old_sum_128 = _mm_cvtsi32_si128(src[0]+src[1]);

	mov	eax, DWORD PTR _src$298532[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _src$298532[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	ecx, eax
	movd	xmm0, ecx
	movdqa	XMMWORD PTR $T298538[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298538[ebp]
	movdqa	XMMWORD PTR _old_sum_128$298537[ebp], xmm0
	jmp	SHORT $LN6@be_blur
$LN5@be_blur:

; 546  :         for ( ; x < ((w-2)&(~7)); x+=8) {

	mov	eax, DWORD PTR _x$298534[ebp]
	add	eax, 8
	mov	DWORD PTR _x$298534[ebp], eax
$LN6@be_blur:
	mov	eax, DWORD PTR _w$[ebx]
	sub	eax, 2
	and	eax, -8					; fffffff8H
	cmp	DWORD PTR _x$298534[ebp], eax
	jge	$LN4@be_blur

; 547  :             __m128i new_pix = _mm_loadl_epi64(reinterpret_cast<const __m128i*>(src+x));

	mov	eax, DWORD PTR _src$298532[ebp]
	add	eax, DWORD PTR _x$298534[ebp]
	movq	xmm0, QWORD PTR [eax]
	movdqa	XMMWORD PTR $T298544[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298544[ebp]
	movdqa	XMMWORD PTR _new_pix$298542[ebp], xmm0

; 548  :             new_pix = _mm_unpacklo_epi8(new_pix, _mm_setzero_si128());

	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T298545[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298545[ebp]
	movdqa	xmm1, XMMWORD PTR _new_pix$298542[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T298546[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T298546[ebp]
	movdqa	XMMWORD PTR _new_pix$298542[ebp], xmm0

; 549  :             __m128i temp = _mm_slli_si128(new_pix,2);

	movdqa	xmm0, XMMWORD PTR _new_pix$298542[ebp]
	pslldq	xmm0, 2
	movdqa	XMMWORD PTR $T298548[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298548[ebp]
	movdqa	XMMWORD PTR _temp$298547[ebp], xmm0

; 550  :             temp = _mm_add_epi16(temp, old_pix_128);

	movdqa	xmm0, XMMWORD PTR _old_pix_128$298535[ebp]
	movdqa	xmm1, XMMWORD PTR _temp$298547[ebp]
	paddw	xmm1, xmm0
	movdqa	XMMWORD PTR $T298549[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T298549[ebp]
	movdqa	XMMWORD PTR _temp$298547[ebp], xmm0

; 551  :             temp = _mm_add_epi16(temp, new_pix);

	movdqa	xmm0, XMMWORD PTR _new_pix$298542[ebp]
	movdqa	xmm1, XMMWORD PTR _temp$298547[ebp]
	paddw	xmm1, xmm0
	movdqa	XMMWORD PTR $T298550[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T298550[ebp]
	movdqa	XMMWORD PTR _temp$298547[ebp], xmm0

; 552  :             old_pix_128 = _mm_srli_si128(new_pix,14);

	movdqa	xmm0, XMMWORD PTR _new_pix$298542[ebp]
	psrldq	xmm0, 14				; 0000000eH
	movdqa	XMMWORD PTR $T298551[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298551[ebp]
	movdqa	XMMWORD PTR _old_pix_128$298535[ebp], xmm0

; 553  : 
; 554  :             new_pix = _mm_slli_si128(temp,2);

	movdqa	xmm0, XMMWORD PTR _temp$298547[ebp]
	pslldq	xmm0, 2
	movdqa	XMMWORD PTR $T298552[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298552[ebp]
	movdqa	XMMWORD PTR _new_pix$298542[ebp], xmm0

; 555  :             new_pix = _mm_add_epi16(new_pix, old_sum_128);

	movdqa	xmm0, XMMWORD PTR _old_sum_128$298537[ebp]
	movdqa	xmm1, XMMWORD PTR _new_pix$298542[ebp]
	paddw	xmm1, xmm0
	movdqa	XMMWORD PTR $T298553[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T298553[ebp]
	movdqa	XMMWORD PTR _new_pix$298542[ebp], xmm0

; 556  :             new_pix = _mm_add_epi16(new_pix, temp);

	movdqa	xmm0, XMMWORD PTR _temp$298547[ebp]
	movdqa	xmm1, XMMWORD PTR _new_pix$298542[ebp]
	paddw	xmm1, xmm0
	movdqa	XMMWORD PTR $T298554[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T298554[ebp]
	movdqa	XMMWORD PTR _new_pix$298542[ebp], xmm0

; 557  :             old_sum_128 = _mm_srli_si128(temp, 14);

	movdqa	xmm0, XMMWORD PTR _temp$298547[ebp]
	psrldq	xmm0, 14				; 0000000eH
	movdqa	XMMWORD PTR $T298555[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298555[ebp]
	movdqa	XMMWORD PTR _old_sum_128$298537[ebp], xmm0

; 558  : 
; 559  :             __m128i old_col_pix = _mm_loadu_si128( reinterpret_cast<const __m128i*>(col_pix_buf+x) );

	mov	eax, DWORD PTR _x$298534[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	movdqu	xmm0, XMMWORD PTR [ecx+eax*2]
	movdqa	XMMWORD PTR $T298558[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298558[ebp]
	movdqa	XMMWORD PTR _old_col_pix$298556[ebp], xmm0

; 560  :             __m128i old_col_sum = _mm_loadu_si128( reinterpret_cast<const __m128i*>(col_sum_buf+x) );

	mov	eax, DWORD PTR _x$298534[ebp]
	mov	ecx, DWORD PTR _col_sum_buf$[ebp]
	movdqu	xmm0, XMMWORD PTR [ecx+eax*2]
	movdqa	XMMWORD PTR $T298561[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298561[ebp]
	movdqa	XMMWORD PTR _old_col_sum$298559[ebp], xmm0

; 561  :             _mm_storeu_si128( reinterpret_cast<__m128i*>(col_pix_buf+x), new_pix );

	movdqa	xmm0, XMMWORD PTR _new_pix$298542[ebp]
	mov	eax, DWORD PTR _x$298534[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	movdqu	XMMWORD PTR [ecx+eax*2], xmm0

; 562  :             temp = _mm_add_epi16(new_pix, old_col_pix);

	movdqa	xmm0, XMMWORD PTR _old_col_pix$298556[ebp]
	movdqa	xmm1, XMMWORD PTR _new_pix$298542[ebp]
	paddw	xmm1, xmm0
	movdqa	XMMWORD PTR $T298563[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T298563[ebp]
	movdqa	XMMWORD PTR _temp$298547[ebp], xmm0

; 563  :             _mm_storeu_si128( reinterpret_cast<__m128i*>(col_sum_buf+x), temp );

	movdqa	xmm0, XMMWORD PTR _temp$298547[ebp]
	mov	eax, DWORD PTR _x$298534[ebp]
	mov	ecx, DWORD PTR _col_sum_buf$[ebp]
	movdqu	XMMWORD PTR [ecx+eax*2], xmm0

; 564  : 
; 565  :             old_col_sum = _mm_add_epi16(old_col_sum, temp);

	movdqa	xmm0, XMMWORD PTR _temp$298547[ebp]
	movdqa	xmm1, XMMWORD PTR _old_col_sum$298559[ebp]
	paddw	xmm1, xmm0
	movdqa	XMMWORD PTR $T298565[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T298565[ebp]
	movdqa	XMMWORD PTR _old_col_sum$298559[ebp], xmm0

; 566  :             //old_col_sum = _mm_add_epi16(old_col_sum, round);
; 567  :             old_col_sum = _mm_srli_epi16(old_col_sum, 4);

	movdqa	xmm0, XMMWORD PTR _old_col_sum$298559[ebp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR $T298566[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298566[ebp]
	movdqa	XMMWORD PTR _old_col_sum$298559[ebp], xmm0

; 568  :             old_col_sum = _mm_packus_epi16(old_col_sum, old_col_sum);

	movdqa	xmm0, XMMWORD PTR _old_col_sum$298559[ebp]
	movdqa	xmm1, XMMWORD PTR _old_col_sum$298559[ebp]
	packuswb xmm1, xmm0
	movdqa	XMMWORD PTR $T298567[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T298567[ebp]
	movdqa	XMMWORD PTR _old_col_sum$298559[ebp], xmm0

; 569  :             _mm_storel_epi64( reinterpret_cast<__m128i*>(dst+x-1), old_col_sum );

	movdqa	xmm0, XMMWORD PTR _old_col_sum$298559[ebp]
	mov	eax, DWORD PTR _x$298534[ebp]
	mov	ecx, DWORD PTR _dst$298533[ebp]
	movq	QWORD PTR [ecx+eax-1], xmm0

; 570  :         }

	jmp	$LN5@be_blur
$LN4@be_blur:

; 571  :         int old_pix = src[x-1];

	mov	eax, DWORD PTR _src$298532[ebp]
	add	eax, DWORD PTR _x$298534[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	mov	DWORD PTR _old_pix$298569[ebp], ecx

; 572  :         int old_sum = old_pix + src[x-2];

	mov	eax, DWORD PTR _src$298532[ebp]
	add	eax, DWORD PTR _x$298534[ebp]
	movzx	ecx, BYTE PTR [eax-2]
	add	ecx, DWORD PTR _old_pix$298569[ebp]
	mov	DWORD PTR _old_sum$298570[ebp], ecx
	jmp	SHORT $LN3@be_blur
$LN2@be_blur:

; 573  :         for ( ; x < w; x++) {

	mov	eax, DWORD PTR _x$298534[ebp]
	add	eax, 1
	mov	DWORD PTR _x$298534[ebp], eax
$LN3@be_blur:
	mov	eax, DWORD PTR _x$298534[ebp]
	cmp	eax, DWORD PTR _w$[ebx]
	jge	$LN1@be_blur

; 574  :             int temp1 = src[x];

	mov	eax, DWORD PTR _src$298532[ebp]
	add	eax, DWORD PTR _x$298534[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _temp1$298574[ebp], ecx

; 575  :             int temp2 = old_pix + temp1;

	mov	eax, DWORD PTR _old_pix$298569[ebp]
	add	eax, DWORD PTR _temp1$298574[ebp]
	mov	DWORD PTR _temp2$298575[ebp], eax

; 576  :             old_pix = temp1;

	mov	eax, DWORD PTR _temp1$298574[ebp]
	mov	DWORD PTR _old_pix$298569[ebp], eax

; 577  :             temp1 = old_sum + temp2;

	mov	eax, DWORD PTR _old_sum$298570[ebp]
	add	eax, DWORD PTR _temp2$298575[ebp]
	mov	DWORD PTR _temp1$298574[ebp], eax

; 578  :             old_sum = temp2;

	mov	eax, DWORD PTR _temp2$298575[ebp]
	mov	DWORD PTR _old_sum$298570[ebp], eax

; 579  : 
; 580  :             temp2 = col_pix_buf[x] + temp1;

	mov	eax, DWORD PTR _x$298534[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _temp1$298574[ebp]
	mov	DWORD PTR _temp2$298575[ebp], edx

; 581  :             col_pix_buf[x] = temp1;

	mov	eax, DWORD PTR _x$298534[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	mov	dx, WORD PTR _temp1$298574[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 582  :             dst[x-1] = (col_sum_buf[x] + temp2) >> 4;

	mov	eax, DWORD PTR _x$298534[ebp]
	mov	ecx, DWORD PTR _col_sum_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _temp2$298575[ebp]
	sar	edx, 4
	mov	eax, DWORD PTR _dst$298533[ebp]
	add	eax, DWORD PTR _x$298534[ebp]
	mov	BYTE PTR [eax-1], dl

; 583  :             col_sum_buf[x] = temp2;

	mov	eax, DWORD PTR _x$298534[ebp]
	mov	ecx, DWORD PTR _col_sum_buf$[ebp]
	mov	dx, WORD PTR _temp2$298575[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 584  :         }

	jmp	$LN2@be_blur
$LN1@be_blur:

; 585  :     }

	jmp	$LN8@be_blur
$LN7@be_blur:

; 586  : 
; 587  :     xy_free(col_sum_buf_base);

	mov	eax, DWORD PTR _col_sum_buf_base$[ebp]
	push	eax
	call	?xy_free@@YAXPAX@Z			; xy_free
	add	esp, 4

; 588  :     xy_free(col_pix_buf_base);

	mov	eax, DWORD PTR _col_pix_buf_base$[ebp]
	push	eax
	call	?xy_free@@YAXPAX@Z			; xy_free
	add	esp, 4
$LN18@be_blur:

; 589  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?be_blur@@YAXPAEPAIHHH@Z ENDP				; be_blur
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?be_blur_c@@YAXPAEPAIHHH@Z
_TEXT	SEGMENT
_temp2$298628 = -308					; size = 4
_temp1$298627 = -296					; size = 4
_old_sum$298623 = -284					; size = 4
_old_pix$298622 = -272					; size = 4
_x$298621 = -260					; size = 4
_dst$298620 = -248					; size = 4
_src$298619 = -236					; size = 4
_y$298615 = -224					; size = 4
_temp2$298614 = -212					; size = 4
_temp1$298613 = -200					; size = 4
_old_sum$298609 = -188					; size = 4
_old_pix$298608 = -176					; size = 4
_x$298607 = -164					; size = 4
_src$298606 = -152					; size = 4
_y$298605 = -140					; size = 4
_temp2$298604 = -128					; size = 4
_temp1$298603 = -116					; size = 4
_old_sum$298599 = -104					; size = 4
_old_pix$298598 = -92					; size = 4
_x$298597 = -80						; size = 4
_src$298596 = -68					; size = 4
_y$298595 = -56						; size = 4
_col_sum_buf$ = -44					; size = 4
_col_pix_buf$ = -32					; size = 4
_col_sum_buf_base$ = -20				; size = 4
_col_pix_buf_base$ = -8					; size = 4
_buf$ = 8						; size = 4
_tmp_base$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_stride$ = 24						; size = 4
?be_blur_c@@YAXPAEPAIHHH@Z PROC				; be_blur_c, COMDAT

; 592  : {   

	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-504]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 593  :     WORD *col_pix_buf_base = reinterpret_cast<WORD*>(xy_malloc(w*sizeof(WORD)));

	mov	eax, DWORD PTR _w$[ebp]
	shl	eax, 1
	push	eax
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _col_pix_buf_base$[ebp], eax

; 594  :     WORD *col_sum_buf_base = reinterpret_cast<WORD*>(xy_malloc(w*sizeof(WORD)));

	mov	eax, DWORD PTR _w$[ebp]
	shl	eax, 1
	push	eax
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _col_sum_buf_base$[ebp], eax

; 595  :     if(!col_sum_buf_base || !col_pix_buf_base)

	cmp	DWORD PTR _col_sum_buf_base$[ebp], 0
	je	SHORT $LN13@be_blur_c
	cmp	DWORD PTR _col_pix_buf_base$[ebp], 0
	jne	SHORT $LN14@be_blur_c
$LN13@be_blur_c:

; 596  :     {
; 597  :         //ToDo: error handling
; 598  :         return;

	jmp	$LN15@be_blur_c
$LN14@be_blur_c:

; 599  :     }
; 600  :     memset(col_pix_buf_base, 0, w*sizeof(WORD));

	mov	eax, DWORD PTR _w$[ebp]
	shl	eax, 1
	push	eax
	push	0
	mov	ecx, DWORD PTR _col_pix_buf_base$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 601  :     memset(col_sum_buf_base, 0, w*sizeof(WORD));

	mov	eax, DWORD PTR _w$[ebp]
	shl	eax, 1
	push	eax
	push	0
	mov	ecx, DWORD PTR _col_sum_buf_base$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 602  :     WORD *col_pix_buf = col_pix_buf_base-2;//for aligment;

	mov	eax, DWORD PTR _col_pix_buf_base$[ebp]
	sub	eax, 4
	mov	DWORD PTR _col_pix_buf$[ebp], eax

; 603  :     WORD *col_sum_buf = col_sum_buf_base-2;//for aligment;

	mov	eax, DWORD PTR _col_sum_buf_base$[ebp]
	sub	eax, 4
	mov	DWORD PTR _col_sum_buf$[ebp], eax

; 604  :     {
; 605  :         int y = 0;

	mov	DWORD PTR _y$298595[ebp], 0

; 606  :         unsigned char *src=buf+y*stride;

	mov	eax, DWORD PTR _y$298595[ebp]
	imul	eax, DWORD PTR _stride$[ebp]
	add	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _src$298596[ebp], eax

; 607  : 
; 608  :         int x = 2;

	mov	DWORD PTR _x$298597[ebp], 2

; 609  :         int old_pix = src[x-1];

	mov	eax, DWORD PTR _src$298596[ebp]
	add	eax, DWORD PTR _x$298597[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	mov	DWORD PTR _old_pix$298598[ebp], ecx

; 610  :         int old_sum = old_pix + src[x-2];

	mov	eax, DWORD PTR _src$298596[ebp]
	add	eax, DWORD PTR _x$298597[ebp]
	movzx	ecx, BYTE PTR [eax-2]
	add	ecx, DWORD PTR _old_pix$298598[ebp]
	mov	DWORD PTR _old_sum$298599[ebp], ecx
	jmp	SHORT $LN12@be_blur_c
$LN11@be_blur_c:

; 611  :         for ( ; x < w; x++) {

	mov	eax, DWORD PTR _x$298597[ebp]
	add	eax, 1
	mov	DWORD PTR _x$298597[ebp], eax
$LN12@be_blur_c:
	mov	eax, DWORD PTR _x$298597[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN10@be_blur_c

; 612  :             int temp1 = src[x];

	mov	eax, DWORD PTR _src$298596[ebp]
	add	eax, DWORD PTR _x$298597[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _temp1$298603[ebp], ecx

; 613  :             int temp2 = old_pix + temp1;

	mov	eax, DWORD PTR _old_pix$298598[ebp]
	add	eax, DWORD PTR _temp1$298603[ebp]
	mov	DWORD PTR _temp2$298604[ebp], eax

; 614  :             old_pix = temp1;

	mov	eax, DWORD PTR _temp1$298603[ebp]
	mov	DWORD PTR _old_pix$298598[ebp], eax

; 615  :             temp1 = old_sum + temp2;

	mov	eax, DWORD PTR _old_sum$298599[ebp]
	add	eax, DWORD PTR _temp2$298604[ebp]
	mov	DWORD PTR _temp1$298603[ebp], eax

; 616  :             old_sum = temp2;

	mov	eax, DWORD PTR _temp2$298604[ebp]
	mov	DWORD PTR _old_sum$298599[ebp], eax

; 617  :             col_pix_buf[x] = temp1;

	mov	eax, DWORD PTR _x$298597[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	mov	dx, WORD PTR _temp1$298603[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 618  :         }

	jmp	SHORT $LN11@be_blur_c
$LN10@be_blur_c:

; 619  :     }
; 620  :     {
; 621  :         int y = 1;

	mov	DWORD PTR _y$298605[ebp], 1

; 622  :         unsigned char *src=buf+y*stride;

	mov	eax, DWORD PTR _y$298605[ebp]
	imul	eax, DWORD PTR _stride$[ebp]
	add	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _src$298606[ebp], eax

; 623  : 
; 624  : 
; 625  :         int x = 2;

	mov	DWORD PTR _x$298607[ebp], 2

; 626  :         int old_pix = src[x-1];

	mov	eax, DWORD PTR _src$298606[ebp]
	add	eax, DWORD PTR _x$298607[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	mov	DWORD PTR _old_pix$298608[ebp], ecx

; 627  :         int old_sum = old_pix + src[x-2];

	mov	eax, DWORD PTR _src$298606[ebp]
	add	eax, DWORD PTR _x$298607[ebp]
	movzx	ecx, BYTE PTR [eax-2]
	add	ecx, DWORD PTR _old_pix$298608[ebp]
	mov	DWORD PTR _old_sum$298609[ebp], ecx
	jmp	SHORT $LN9@be_blur_c
$LN8@be_blur_c:

; 628  :         for ( ; x < w; x++) {

	mov	eax, DWORD PTR _x$298607[ebp]
	add	eax, 1
	mov	DWORD PTR _x$298607[ebp], eax
$LN9@be_blur_c:
	mov	eax, DWORD PTR _x$298607[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	$LN7@be_blur_c

; 629  :             int temp1 = src[x];

	mov	eax, DWORD PTR _src$298606[ebp]
	add	eax, DWORD PTR _x$298607[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _temp1$298613[ebp], ecx

; 630  :             int temp2 = old_pix + temp1;

	mov	eax, DWORD PTR _old_pix$298608[ebp]
	add	eax, DWORD PTR _temp1$298613[ebp]
	mov	DWORD PTR _temp2$298614[ebp], eax

; 631  :             old_pix = temp1;

	mov	eax, DWORD PTR _temp1$298613[ebp]
	mov	DWORD PTR _old_pix$298608[ebp], eax

; 632  :             temp1 = old_sum + temp2;

	mov	eax, DWORD PTR _old_sum$298609[ebp]
	add	eax, DWORD PTR _temp2$298614[ebp]
	mov	DWORD PTR _temp1$298613[ebp], eax

; 633  :             old_sum = temp2;

	mov	eax, DWORD PTR _temp2$298614[ebp]
	mov	DWORD PTR _old_sum$298609[ebp], eax

; 634  : 
; 635  :             temp2 = col_pix_buf[x] + temp1;

	mov	eax, DWORD PTR _x$298607[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _temp1$298613[ebp]
	mov	DWORD PTR _temp2$298614[ebp], edx

; 636  :             col_pix_buf[x] = temp1;

	mov	eax, DWORD PTR _x$298607[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	mov	dx, WORD PTR _temp1$298613[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 637  :             //dst[x-1] = (col_sum_buf[x] + temp2) >> 4;
; 638  :             col_sum_buf[x] = temp2;

	mov	eax, DWORD PTR _x$298607[ebp]
	mov	ecx, DWORD PTR _col_sum_buf$[ebp]
	mov	dx, WORD PTR _temp2$298614[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 639  :         }

	jmp	$LN8@be_blur_c
$LN7@be_blur_c:

; 640  :     }
; 641  : 
; 642  :     for (int y = 2; y < h; y++) {

	mov	DWORD PTR _y$298615[ebp], 2
	jmp	SHORT $LN6@be_blur_c
$LN5@be_blur_c:
	mov	eax, DWORD PTR _y$298615[ebp]
	add	eax, 1
	mov	DWORD PTR _y$298615[ebp], eax
$LN6@be_blur_c:
	mov	eax, DWORD PTR _y$298615[ebp]
	cmp	eax, DWORD PTR _h$[ebp]
	jge	$LN4@be_blur_c

; 643  :         unsigned char *src=buf+y*stride;

	mov	eax, DWORD PTR _y$298615[ebp]
	imul	eax, DWORD PTR _stride$[ebp]
	add	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _src$298619[ebp], eax

; 644  :         unsigned char *dst=buf+(y-1)*stride;

	mov	eax, DWORD PTR _y$298615[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _stride$[ebp]
	add	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _dst$298620[ebp], eax

; 645  : 
; 646  :         int x = 2;

	mov	DWORD PTR _x$298621[ebp], 2

; 647  :         int old_pix = src[x-1];

	mov	eax, DWORD PTR _src$298619[ebp]
	add	eax, DWORD PTR _x$298621[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	mov	DWORD PTR _old_pix$298622[ebp], ecx

; 648  :         int old_sum = old_pix + src[x-2];

	mov	eax, DWORD PTR _src$298619[ebp]
	add	eax, DWORD PTR _x$298621[ebp]
	movzx	ecx, BYTE PTR [eax-2]
	add	ecx, DWORD PTR _old_pix$298622[ebp]
	mov	DWORD PTR _old_sum$298623[ebp], ecx
	jmp	SHORT $LN3@be_blur_c
$LN2@be_blur_c:

; 649  :         for ( ; x < w; x++) {

	mov	eax, DWORD PTR _x$298621[ebp]
	add	eax, 1
	mov	DWORD PTR _x$298621[ebp], eax
$LN3@be_blur_c:
	mov	eax, DWORD PTR _x$298621[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	$LN1@be_blur_c

; 650  :             int temp1 = src[x];

	mov	eax, DWORD PTR _src$298619[ebp]
	add	eax, DWORD PTR _x$298621[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _temp1$298627[ebp], ecx

; 651  :             int temp2 = old_pix + temp1;

	mov	eax, DWORD PTR _old_pix$298622[ebp]
	add	eax, DWORD PTR _temp1$298627[ebp]
	mov	DWORD PTR _temp2$298628[ebp], eax

; 652  :             old_pix = temp1;

	mov	eax, DWORD PTR _temp1$298627[ebp]
	mov	DWORD PTR _old_pix$298622[ebp], eax

; 653  :             temp1 = old_sum + temp2;

	mov	eax, DWORD PTR _old_sum$298623[ebp]
	add	eax, DWORD PTR _temp2$298628[ebp]
	mov	DWORD PTR _temp1$298627[ebp], eax

; 654  :             old_sum = temp2;

	mov	eax, DWORD PTR _temp2$298628[ebp]
	mov	DWORD PTR _old_sum$298623[ebp], eax

; 655  : 
; 656  :             temp2 = col_pix_buf[x] + temp1;

	mov	eax, DWORD PTR _x$298621[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _temp1$298627[ebp]
	mov	DWORD PTR _temp2$298628[ebp], edx

; 657  :             col_pix_buf[x] = temp1;

	mov	eax, DWORD PTR _x$298621[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$[ebp]
	mov	dx, WORD PTR _temp1$298627[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 658  :             dst[x-1] = (col_sum_buf[x] + temp2) >> 4;

	mov	eax, DWORD PTR _x$298621[ebp]
	mov	ecx, DWORD PTR _col_sum_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _temp2$298628[ebp]
	sar	edx, 4
	mov	eax, DWORD PTR _dst$298620[ebp]
	add	eax, DWORD PTR _x$298621[ebp]
	mov	BYTE PTR [eax-1], dl

; 659  :             col_sum_buf[x] = temp2;

	mov	eax, DWORD PTR _x$298621[ebp]
	mov	ecx, DWORD PTR _col_sum_buf$[ebp]
	mov	dx, WORD PTR _temp2$298628[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 660  :         }

	jmp	$LN2@be_blur_c
$LN1@be_blur_c:

; 661  :     }

	jmp	$LN5@be_blur_c
$LN4@be_blur_c:

; 662  : 
; 663  :     xy_free(col_sum_buf_base);

	mov	eax, DWORD PTR _col_sum_buf_base$[ebp]
	push	eax
	call	?xy_free@@YAXPAX@Z			; xy_free
	add	esp, 4

; 664  :     xy_free(col_pix_buf_base);

	mov	eax, DWORD PTR _col_pix_buf_base$[ebp]
	push	eax
	call	?xy_free@@YAXPAX@Z			; xy_free
	add	esp, 4
$LN15@be_blur_c:

; 665  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 504				; 000001f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?be_blur_c@@YAXPAEPAIHHH@Z ENDP				; be_blur_c
_TEXT	ENDS
PUBLIC	??1?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::~refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::~refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>
_TEXT	ENDS
PUBLIC	?AlphaBlt@@YAXPAEPBEEHHHH@Z			; AlphaBlt
CONST	SEGMENT
__xmm@0	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?AlphaBlt@@YAXPAEPBEEHHHH@Z
_TEXT	SEGMENT
$T305406 = -1376					; size = 16
$T305408 = -1344					; size = 16
$T305430 = -1312					; size = 16
$T305433 = -1280					; size = 16
$T305434 = -1248					; size = 16
$T305436 = -1216					; size = 16
$T305438 = -1184					; size = 16
$T305439 = -1152					; size = 16
$T305440 = -1120					; size = 16
$T305442 = -1088					; size = 16
$T305444 = -1056					; size = 16
$T305445 = -1024					; size = 16
$T305446 = -992						; size = 16
$T305447 = -960						; size = 16
$T305449 = -928						; size = 16
$T305450 = -896						; size = 16
$T305451 = -864						; size = 16
$T305452 = -832						; size = 16
$T305453 = -800						; size = 16
$T305454 = -768						; size = 16
$T305455 = -736						; size = 16
$T305456 = -704						; size = 16
$T305457 = -672						; size = 16
$T305458 = -640						; size = 16
$T305459 = -608						; size = 16
$T305460 = -576						; size = 16
_dy_end$305471 = -356					; size = 4
_dy$305470 = -344					; size = 4
_sa$305469 = -332					; size = 4
_sl$305443 = -320					; size = 16
_dl$305441 = -288					; size = 16
_ia$305437 = -256					; size = 16
_ones$305435 = -224					; size = 16
_d$305431 = -192					; size = 16
_a$305428 = -160					; size = 16
_dy_end$305421 = -124					; size = 4
_dy_end_mod16$305418 = -112				; size = 4
_dy_first_mod16$305415 = -100				; size = 4
_dy$305414 = -88					; size = 4
_sa$305413 = -76					; size = 4
_s$ = -64						; size = 16
_zero$ = -32						; size = 16
_pY$ = 8						; size = 4
_pAlphaMask$ = 12					; size = 4
_Y$ = 16						; size = 1
_h$ = 20						; size = 4
_w$ = 24						; size = 4
_src_stride$ = 28					; size = 4
_dst_stride$ = 32					; size = 4
?AlphaBlt@@YAXPAEPBEEHHHH@Z PROC			; AlphaBlt, COMDAT

; 992  : {   

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1384				; 00000568H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1384]
	mov	ecx, 346				; 0000015aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 993  :     __m128i zero = _mm_setzero_si128();

	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T305406[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305406[ebp]
	movdqa	XMMWORD PTR _zero$[ebp], xmm0

; 994  :     __m128i s = _mm_set1_epi16(Y);               //s = c  0  c  0  c  0  c  0  c  0  c  0  c  0  c  0    

	movzx	ax, BYTE PTR _Y$[ebx]
	movsx	ecx, ax
	movd	xmm0, ecx
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movdqa	XMMWORD PTR $T305408[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305408[ebp]
	movdqa	XMMWORD PTR _s$[ebp], xmm0

; 995  : 
; 996  :     if( w>16 )//IMPORTANT! The result of the following code is undefined with w<15.

	cmp	DWORD PTR _w$[ebx], 16			; 00000010H
	jle	$LN20@AlphaBlt
	jmp	SHORT $LN19@AlphaBlt
$LN18@AlphaBlt:

; 997  :     {
; 998  :         for( ; h>0; h--, pAlphaMask += src_stride, pY += dst_stride )

	mov	eax, DWORD PTR _h$[ebx]
	sub	eax, 1
	mov	DWORD PTR _h$[ebx], eax
	mov	ecx, DWORD PTR _pAlphaMask$[ebx]
	add	ecx, DWORD PTR _src_stride$[ebx]
	mov	DWORD PTR _pAlphaMask$[ebx], ecx
	mov	edx, DWORD PTR _pY$[ebx]
	add	edx, DWORD PTR _dst_stride$[ebx]
	mov	DWORD PTR _pY$[ebx], edx
$LN19@AlphaBlt:
	cmp	DWORD PTR _h$[ebx], 0
	jle	$LN17@AlphaBlt

; 999  :         {
; 1000 :             const BYTE* sa = pAlphaMask;      

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	mov	DWORD PTR _sa$305413[ebp], eax

; 1001 :             BYTE* dy = pY;

	mov	eax, DWORD PTR _pY$[ebx]
	mov	DWORD PTR _dy$305414[ebp], eax

; 1002 :             const BYTE* dy_first_mod16 = reinterpret_cast<BYTE*>((reinterpret_cast<int>(pY)+15)&~15);  //IMPORTANT! w must >= 15

	mov	eax, DWORD PTR _pY$[ebx]
	add	eax, 15					; 0000000fH
	and	eax, -16				; fffffff0H
	mov	DWORD PTR _dy_first_mod16$305415[ebp], eax

; 1003 :             const BYTE* dy_end_mod16 = reinterpret_cast<BYTE*>(reinterpret_cast<int>(pY+w)&~15);

	mov	eax, DWORD PTR _pY$[ebx]
	add	eax, DWORD PTR _w$[ebx]
	and	eax, -16				; fffffff0H
	mov	DWORD PTR _dy_end_mod16$305418[ebp], eax

; 1004 :             const BYTE* dy_end = pY + w;   

	mov	eax, DWORD PTR _pY$[ebx]
	add	eax, DWORD PTR _w$[ebx]
	mov	DWORD PTR _dy_end$305421[ebp], eax
	jmp	SHORT $LN16@AlphaBlt
$LN15@AlphaBlt:

; 1005 : 
; 1006 :             for(;dy < dy_first_mod16; sa++, dy++)

	mov	eax, DWORD PTR _sa$305413[ebp]
	add	eax, 1
	mov	DWORD PTR _sa$305413[ebp], eax
	mov	ecx, DWORD PTR _dy$305414[ebp]
	add	ecx, 1
	mov	DWORD PTR _dy$305414[ebp], ecx
$LN16@AlphaBlt:
	mov	eax, DWORD PTR _dy$305414[ebp]
	cmp	eax, DWORD PTR _dy_first_mod16$305415[ebp]
	jae	SHORT $LN14@AlphaBlt

; 1007 :             {
; 1008 :                 *dy = (*dy * (256 - *sa)+ Y*(*sa+1))>>8;

	mov	eax, DWORD PTR _dy$305414[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _sa$305413[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	edx, 256				; 00000100H
	sub	edx, eax
	imul	ecx, edx
	movzx	eax, BYTE PTR _Y$[ebx]
	mov	edx, DWORD PTR _sa$305413[ebp]
	movzx	edx, BYTE PTR [edx]
	add	edx, 1
	imul	eax, edx
	add	ecx, eax
	sar	ecx, 8
	mov	eax, DWORD PTR _dy$305414[ebp]
	mov	BYTE PTR [eax], cl

; 1009 :             }

	jmp	SHORT $LN15@AlphaBlt
$LN14@AlphaBlt:

; 1010 :             for(; dy < dy_end_mod16; sa+=8, dy+=16)

	jmp	SHORT $LN13@AlphaBlt
$LN12@AlphaBlt:
	mov	eax, DWORD PTR _sa$305413[ebp]
	add	eax, 8
	mov	DWORD PTR _sa$305413[ebp], eax
	mov	ecx, DWORD PTR _dy$305414[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _dy$305414[ebp], ecx
$LN13@AlphaBlt:
	mov	eax, DWORD PTR _dy$305414[ebp]
	cmp	eax, DWORD PTR _dy_end_mod16$305418[ebp]
	jae	$LN11@AlphaBlt

; 1011 :             {
; 1012 :                 __m128i a = _mm_loadl_epi64((__m128i*)sa);

	mov	eax, DWORD PTR _sa$305413[ebp]
	movq	xmm0, QWORD PTR [eax]
	movdqa	XMMWORD PTR $T305430[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305430[ebp]
	movdqa	XMMWORD PTR _a$305428[ebp], xmm0

; 1013 : 
; 1014 :                 //Y
; 1015 :                 __m128i d = _mm_load_si128((__m128i*)dy);

	mov	eax, DWORD PTR _dy$305414[ebp]
	movdqa	xmm0, XMMWORD PTR [eax]
	movdqa	XMMWORD PTR $T305433[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305433[ebp]
	movdqa	XMMWORD PTR _d$305431[ebp], xmm0

; 1016 : 
; 1017 :                 //__m128i ones = _mm_cmpeq_epi32(zero,zero); //ones = ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
; 1018 :                 //__m128i ia = _mm_xor_si128(a,ones);        //ia   = ~a
; 1019 :                 //ia = _mm_unpacklo_epi8(ia,zero);           //ia   = ~a0 0 ~a1 0 ~a2 0 ~a3 0 ~a4 0 ~a5 0 ~a6 0 ~a7 0
; 1020 :                 a = _mm_unpacklo_epi8(a,zero);               //a= a0 0  a1 0  a2 0  a3 0  a4 0  a5 0  a6 0  a7 0            

	movdqa	xmm0, XMMWORD PTR _zero$[ebp]
	movdqa	xmm1, XMMWORD PTR _a$305428[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T305434[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305434[ebp]
	movdqa	XMMWORD PTR _a$305428[ebp], xmm0

; 1021 :                 __m128i ones = _mm_set1_epi16(256);          //ones = 0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1

	movdqa	xmm0, XMMWORD PTR __xmm@0
	movdqa	XMMWORD PTR $T305436[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305436[ebp]
	movdqa	XMMWORD PTR _ones$305435[ebp], xmm0

; 1022 :                 __m128i ia = _mm_sub_epi16(ones, a);         //ia   = 256-a0 ... 256-a7

	movdqa	xmm0, XMMWORD PTR _a$305428[ebp]
	movdqa	xmm1, XMMWORD PTR _ones$305435[ebp]
	psubw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305438[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305438[ebp]
	movdqa	XMMWORD PTR _ia$305437[ebp], xmm0

; 1023 :                 ones = _mm_srli_epi16(ones, 8);

	movdqa	xmm0, XMMWORD PTR _ones$305435[ebp]
	psrlw	xmm0, 8
	movdqa	XMMWORD PTR $T305439[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305439[ebp]
	movdqa	XMMWORD PTR _ones$305435[ebp], xmm0

; 1024 :                 a = _mm_add_epi16(a, ones);                  //a= 1+a0 ... 1+a7

	movdqa	xmm0, XMMWORD PTR _ones$305435[ebp]
	movdqa	xmm1, XMMWORD PTR _a$305428[ebp]
	paddw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305440[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305440[ebp]
	movdqa	XMMWORD PTR _a$305428[ebp], xmm0

; 1025 : 
; 1026 :                 __m128i dl = _mm_unpacklo_epi8(d,zero);               //d    = b0 0  b1 0  b2 0  b3 0  b4 0  b5 0  b6 0  b7 0 

	movdqa	xmm0, XMMWORD PTR _zero$[ebp]
	movdqa	xmm1, XMMWORD PTR _d$305431[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T305442[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305442[ebp]
	movdqa	XMMWORD PTR _dl$305441[ebp], xmm0

; 1027 :                 __m128i sl = _mm_mullo_epi16(s,a);            //sl   = c0*a0  c1*a1  ... c7*a7

	movdqa	xmm0, XMMWORD PTR _a$305428[ebp]
	movdqa	xmm1, XMMWORD PTR _s$[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305444[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305444[ebp]
	movdqa	XMMWORD PTR _sl$305443[ebp], xmm0

; 1028 : 
; 1029 :                 dl = _mm_mullo_epi16(dl,ia);                   //d    = b0*~a0 b1*~a1 ... b7*~a7

	movdqa	xmm0, XMMWORD PTR _ia$305437[ebp]
	movdqa	xmm1, XMMWORD PTR _dl$305441[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305445[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305445[ebp]
	movdqa	XMMWORD PTR _dl$305441[ebp], xmm0

; 1030 : 
; 1031 :                 dl = _mm_add_epi16(dl,sl);                     //d   = d + sl

	movdqa	xmm0, XMMWORD PTR _sl$305443[ebp]
	movdqa	xmm1, XMMWORD PTR _dl$305441[ebp]
	paddw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305446[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305446[ebp]
	movdqa	XMMWORD PTR _dl$305441[ebp], xmm0

; 1032 :                 dl = _mm_srli_epi16(dl, 8);                    //d   = d>>8

	movdqa	xmm0, XMMWORD PTR _dl$305441[ebp]
	psrlw	xmm0, 8
	movdqa	XMMWORD PTR $T305447[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305447[ebp]
	movdqa	XMMWORD PTR _dl$305441[ebp], xmm0

; 1033 : 
; 1034 :                 sa += 8;

	mov	eax, DWORD PTR _sa$305413[ebp]
	add	eax, 8
	mov	DWORD PTR _sa$305413[ebp], eax

; 1035 :                 a = _mm_loadl_epi64((__m128i*)sa);

	mov	eax, DWORD PTR _sa$305413[ebp]
	movq	xmm0, QWORD PTR [eax]
	movdqa	XMMWORD PTR $T305449[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305449[ebp]
	movdqa	XMMWORD PTR _a$305428[ebp], xmm0

; 1036 : 
; 1037 :                 a = _mm_unpacklo_epi8(a,zero);            

	movdqa	xmm0, XMMWORD PTR _zero$[ebp]
	movdqa	xmm1, XMMWORD PTR _a$305428[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T305450[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305450[ebp]
	movdqa	XMMWORD PTR _a$305428[ebp], xmm0

; 1038 :                 ones = _mm_slli_epi16(ones, 8);

	movdqa	xmm0, XMMWORD PTR _ones$305435[ebp]
	psllw	xmm0, 8
	movdqa	XMMWORD PTR $T305451[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305451[ebp]
	movdqa	XMMWORD PTR _ones$305435[ebp], xmm0

; 1039 :                 ia = _mm_sub_epi16(ones, a);

	movdqa	xmm0, XMMWORD PTR _a$305428[ebp]
	movdqa	xmm1, XMMWORD PTR _ones$305435[ebp]
	psubw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305452[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305452[ebp]
	movdqa	XMMWORD PTR _ia$305437[ebp], xmm0

; 1040 :                 ones = _mm_srli_epi16(ones, 8);

	movdqa	xmm0, XMMWORD PTR _ones$305435[ebp]
	psrlw	xmm0, 8
	movdqa	XMMWORD PTR $T305453[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305453[ebp]
	movdqa	XMMWORD PTR _ones$305435[ebp], xmm0

; 1041 :                 a = _mm_add_epi16(a,ones);

	movdqa	xmm0, XMMWORD PTR _ones$305435[ebp]
	movdqa	xmm1, XMMWORD PTR _a$305428[ebp]
	paddw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305454[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305454[ebp]
	movdqa	XMMWORD PTR _a$305428[ebp], xmm0

; 1042 : 
; 1043 :                 d = _mm_unpackhi_epi8(d,zero);

	movdqa	xmm0, XMMWORD PTR _zero$[ebp]
	movdqa	xmm1, XMMWORD PTR _d$305431[ebp]
	punpckhbw xmm1, xmm0
	movdqa	XMMWORD PTR $T305455[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305455[ebp]
	movdqa	XMMWORD PTR _d$305431[ebp], xmm0

; 1044 :                 sl = _mm_mullo_epi16(s,a);

	movdqa	xmm0, XMMWORD PTR _a$305428[ebp]
	movdqa	xmm1, XMMWORD PTR _s$[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305456[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305456[ebp]
	movdqa	XMMWORD PTR _sl$305443[ebp], xmm0

; 1045 :                 d = _mm_mullo_epi16(d,ia);

	movdqa	xmm0, XMMWORD PTR _ia$305437[ebp]
	movdqa	xmm1, XMMWORD PTR _d$305431[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305457[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305457[ebp]
	movdqa	XMMWORD PTR _d$305431[ebp], xmm0

; 1046 :                 d = _mm_add_epi16(d,sl);

	movdqa	xmm0, XMMWORD PTR _sl$305443[ebp]
	movdqa	xmm1, XMMWORD PTR _d$305431[ebp]
	paddw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305458[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305458[ebp]
	movdqa	XMMWORD PTR _d$305431[ebp], xmm0

; 1047 :                 d = _mm_srli_epi16(d, 8);

	movdqa	xmm0, XMMWORD PTR _d$305431[ebp]
	psrlw	xmm0, 8
	movdqa	XMMWORD PTR $T305459[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305459[ebp]
	movdqa	XMMWORD PTR _d$305431[ebp], xmm0

; 1048 : 
; 1049 :                 dl = _mm_packus_epi16(dl,d);

	movdqa	xmm0, XMMWORD PTR _d$305431[ebp]
	movdqa	xmm1, XMMWORD PTR _dl$305441[ebp]
	packuswb xmm1, xmm0
	movdqa	XMMWORD PTR $T305460[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305460[ebp]
	movdqa	XMMWORD PTR _dl$305441[ebp], xmm0

; 1050 : 
; 1051 :                 _mm_store_si128((__m128i*)dy, dl);

	movdqa	xmm0, XMMWORD PTR _dl$305441[ebp]
	mov	eax, DWORD PTR _dy$305414[ebp]
	movdqa	XMMWORD PTR [eax], xmm0

; 1052 :             }

	jmp	$LN12@AlphaBlt
$LN11@AlphaBlt:

; 1053 :             for(;dy < dy_end; sa++, dy++)

	jmp	SHORT $LN10@AlphaBlt
$LN9@AlphaBlt:
	mov	eax, DWORD PTR _sa$305413[ebp]
	add	eax, 1
	mov	DWORD PTR _sa$305413[ebp], eax
	mov	ecx, DWORD PTR _dy$305414[ebp]
	add	ecx, 1
	mov	DWORD PTR _dy$305414[ebp], ecx
$LN10@AlphaBlt:
	mov	eax, DWORD PTR _dy$305414[ebp]
	cmp	eax, DWORD PTR _dy_end$305421[ebp]
	jae	SHORT $LN8@AlphaBlt

; 1054 :             {
; 1055 :                 *dy = (*dy * (256 - *sa)+ Y*(*sa+1))>>8;

	mov	eax, DWORD PTR _dy$305414[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _sa$305413[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	edx, 256				; 00000100H
	sub	edx, eax
	imul	ecx, edx
	movzx	eax, BYTE PTR _Y$[ebx]
	mov	edx, DWORD PTR _sa$305413[ebp]
	movzx	edx, BYTE PTR [edx]
	add	edx, 1
	imul	eax, edx
	add	ecx, eax
	sar	ecx, 8
	mov	eax, DWORD PTR _dy$305414[ebp]
	mov	BYTE PTR [eax], cl

; 1056 :             }

	jmp	SHORT $LN9@AlphaBlt
$LN8@AlphaBlt:

; 1057 :         }

	jmp	$LN18@AlphaBlt
$LN17@AlphaBlt:

; 1058 :     }
; 1059 :     else

	jmp	$LN21@AlphaBlt
$LN20@AlphaBlt:

; 1060 :     {
; 1061 :         for( ; h>0; h--, pAlphaMask += src_stride, pY += dst_stride )

	jmp	SHORT $LN6@AlphaBlt
$LN5@AlphaBlt:
	mov	eax, DWORD PTR _h$[ebx]
	sub	eax, 1
	mov	DWORD PTR _h$[ebx], eax
	mov	ecx, DWORD PTR _pAlphaMask$[ebx]
	add	ecx, DWORD PTR _src_stride$[ebx]
	mov	DWORD PTR _pAlphaMask$[ebx], ecx
	mov	edx, DWORD PTR _pY$[ebx]
	add	edx, DWORD PTR _dst_stride$[ebx]
	mov	DWORD PTR _pY$[ebx], edx
$LN6@AlphaBlt:
	cmp	DWORD PTR _h$[ebx], 0
	jle	$LN21@AlphaBlt

; 1062 :         {
; 1063 :             const BYTE* sa = pAlphaMask;      

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	mov	DWORD PTR _sa$305469[ebp], eax

; 1064 :             BYTE* dy = pY;

	mov	eax, DWORD PTR _pY$[ebx]
	mov	DWORD PTR _dy$305470[ebp], eax

; 1065 :             const BYTE* dy_end = pY + w;   

	mov	eax, DWORD PTR _pY$[ebx]
	add	eax, DWORD PTR _w$[ebx]
	mov	DWORD PTR _dy_end$305471[ebp], eax
	jmp	SHORT $LN3@AlphaBlt
$LN2@AlphaBlt:

; 1066 : 
; 1067 :             for(;dy < dy_end; sa++, dy++)

	mov	eax, DWORD PTR _sa$305469[ebp]
	add	eax, 1
	mov	DWORD PTR _sa$305469[ebp], eax
	mov	ecx, DWORD PTR _dy$305470[ebp]
	add	ecx, 1
	mov	DWORD PTR _dy$305470[ebp], ecx
$LN3@AlphaBlt:
	mov	eax, DWORD PTR _dy$305470[ebp]
	cmp	eax, DWORD PTR _dy_end$305471[ebp]
	jae	SHORT $LN1@AlphaBlt

; 1068 :             {
; 1069 :                 *dy = (*dy * (256 - *sa)+ Y*(*sa+1))>>8;

	mov	eax, DWORD PTR _dy$305470[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _sa$305469[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	edx, 256				; 00000100H
	sub	edx, eax
	imul	ecx, edx
	movzx	eax, BYTE PTR _Y$[ebx]
	mov	edx, DWORD PTR _sa$305469[ebp]
	movzx	edx, BYTE PTR [edx]
	add	edx, 1
	imul	eax, edx
	add	ecx, eax
	sar	ecx, 8
	mov	eax, DWORD PTR _dy$305470[ebp]
	mov	BYTE PTR [eax], cl

; 1070 :             }

	jmp	SHORT $LN2@AlphaBlt
$LN1@AlphaBlt:

; 1071 :         }

	jmp	$LN5@AlphaBlt
$LN21@AlphaBlt:

; 1072 :     }
; 1073 :     //__asm emms;
; 1074 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?AlphaBlt@@YAXPAEPBEEHHHH@Z ENDP			; AlphaBlt
_TEXT	ENDS
PUBLIC	?AlphaBlt@@YAXPAEEEHHH@Z			; AlphaBlt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AlphaBlt@@YAXPAEEEHHH@Z
_TEXT	SEGMENT
$T305488 = -848						; size = 16
$T305490 = -816						; size = 16
$T305492 = -784						; size = 16
$T305512 = -752						; size = 16
$T305514 = -720						; size = 16
$T305515 = -688						; size = 16
$T305516 = -656						; size = 16
$T305517 = -624						; size = 16
$T305518 = -592						; size = 16
$T305519 = -560						; size = 16
$T305520 = -528						; size = 16
$T305521 = -496						; size = 16
$T305522 = -464						; size = 16
_dy_end$305532 = -248					; size = 4
_dy$305531 = -236					; size = 4
_dl$305513 = -224					; size = 16
_d$305510 = -192					; size = 16
_dy_end$305503 = -160					; size = 4
_dy_end_mod16$305500 = -148				; size = 4
_dy_first_mod16$305497 = -136				; size = 4
_dy$305496 = -124					; size = 4
_ia$305491 = -112					; size = 16
_s$305489 = -80						; size = 16
_zero$305487 = -48					; size = 16
_dstAlpha$ = -20					; size = 4
_yPremul$ = -8						; size = 4
_pY$ = 8						; size = 4
_alpha$ = 12						; size = 1
_Y$ = 16						; size = 1
_h$ = 20						; size = 4
_w$ = 24						; size = 4
_dst_stride$ = 28					; size = 4
?AlphaBlt@@YAXPAEEEHHH@Z PROC				; AlphaBlt, COMDAT

; 1084 : {   

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 856				; 00000358H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-856]
	mov	ecx, 214				; 000000d6H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1085 :     int yPremul = Y*(alpha+1);

	movzx	eax, BYTE PTR _Y$[ebx]
	movzx	ecx, BYTE PTR _alpha$[ebx]
	add	ecx, 1
	imul	eax, ecx
	mov	DWORD PTR _yPremul$[ebp], eax

; 1086 :     int dstAlpha = 0x100 - alpha;

	movzx	eax, BYTE PTR _alpha$[ebx]
	mov	ecx, 256				; 00000100H
	sub	ecx, eax
	mov	DWORD PTR _dstAlpha$[ebp], ecx

; 1087 :     if( w>32 )//IMPORTANT! The result of the following code is undefined with w<15.

	cmp	DWORD PTR _w$[ebx], 32			; 00000020H
	jle	$LN20@AlphaBlt@2

; 1088 :     {
; 1089 :         __m128i zero = _mm_setzero_si128();

	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T305488[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305488[ebp]
	movdqa	XMMWORD PTR _zero$305487[ebp], xmm0

; 1090 :         __m128i s = _mm_set1_epi16(yPremul);    //s = c  0  c  0  c  0  c  0  c  0  c  0  c  0  c  0            

	movsx	eax, WORD PTR _yPremul$[ebp]
	movd	xmm0, eax
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movdqa	XMMWORD PTR $T305490[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305490[ebp]
	movdqa	XMMWORD PTR _s$305489[ebp], xmm0

; 1091 :         __m128i ia = _mm_set1_epi16(dstAlpha);

	movsx	eax, WORD PTR _dstAlpha$[ebp]
	movd	xmm0, eax
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movdqa	XMMWORD PTR $T305492[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305492[ebp]
	movdqa	XMMWORD PTR _ia$305491[ebp], xmm0
	jmp	SHORT $LN19@AlphaBlt@2
$LN18@AlphaBlt@2:

; 1092 :         for( ; h>0; h--, pY += dst_stride )

	mov	eax, DWORD PTR _h$[ebx]
	sub	eax, 1
	mov	DWORD PTR _h$[ebx], eax
	mov	ecx, DWORD PTR _pY$[ebx]
	add	ecx, DWORD PTR _dst_stride$[ebx]
	mov	DWORD PTR _pY$[ebx], ecx
$LN19@AlphaBlt@2:
	cmp	DWORD PTR _h$[ebx], 0
	jle	$LN17@AlphaBlt@2

; 1093 :         {   
; 1094 :             BYTE* dy = pY;

	mov	eax, DWORD PTR _pY$[ebx]
	mov	DWORD PTR _dy$305496[ebp], eax

; 1095 :             const BYTE* dy_first_mod16 = reinterpret_cast<BYTE*>((reinterpret_cast<int>(pY)+15)&~15);  //IMPORTANT! w must >= 15

	mov	eax, DWORD PTR _pY$[ebx]
	add	eax, 15					; 0000000fH
	and	eax, -16				; fffffff0H
	mov	DWORD PTR _dy_first_mod16$305497[ebp], eax

; 1096 :             const BYTE* dy_end_mod16 = reinterpret_cast<BYTE*>(reinterpret_cast<int>(pY+w)&~15);

	mov	eax, DWORD PTR _pY$[ebx]
	add	eax, DWORD PTR _w$[ebx]
	and	eax, -16				; fffffff0H
	mov	DWORD PTR _dy_end_mod16$305500[ebp], eax

; 1097 :             const BYTE* dy_end = pY + w;   

	mov	eax, DWORD PTR _pY$[ebx]
	add	eax, DWORD PTR _w$[ebx]
	mov	DWORD PTR _dy_end$305503[ebp], eax
	jmp	SHORT $LN16@AlphaBlt@2
$LN15@AlphaBlt@2:

; 1098 : 
; 1099 :             for(;dy < dy_first_mod16; dy++)

	mov	eax, DWORD PTR _dy$305496[ebp]
	add	eax, 1
	mov	DWORD PTR _dy$305496[ebp], eax
$LN16@AlphaBlt@2:
	mov	eax, DWORD PTR _dy$305496[ebp]
	cmp	eax, DWORD PTR _dy_first_mod16$305497[ebp]
	jae	SHORT $LN14@AlphaBlt@2

; 1100 :             {
; 1101 :                 *dy = (*dy * dstAlpha + yPremul)>>8;

	mov	eax, DWORD PTR _dy$305496[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _dstAlpha$[ebp]
	add	ecx, DWORD PTR _yPremul$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _dy$305496[ebp]
	mov	BYTE PTR [edx], cl

; 1102 :             }

	jmp	SHORT $LN15@AlphaBlt@2
$LN14@AlphaBlt@2:

; 1103 :             for(; dy < dy_end_mod16; dy+=16)

	jmp	SHORT $LN13@AlphaBlt@2
$LN12@AlphaBlt@2:
	mov	eax, DWORD PTR _dy$305496[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _dy$305496[ebp], eax
$LN13@AlphaBlt@2:
	mov	eax, DWORD PTR _dy$305496[ebp]
	cmp	eax, DWORD PTR _dy_end_mod16$305500[ebp]
	jae	$LN11@AlphaBlt@2

; 1104 :             {
; 1105 :                 //Y
; 1106 :                 __m128i d = _mm_load_si128(reinterpret_cast<const __m128i*>(dy));

	mov	eax, DWORD PTR _dy$305496[ebp]
	movdqa	xmm0, XMMWORD PTR [eax]
	movdqa	XMMWORD PTR $T305512[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305512[ebp]
	movdqa	XMMWORD PTR _d$305510[ebp], xmm0

; 1107 :                 __m128i dl = _mm_unpacklo_epi8(d,zero);        //d    = b0 0  b1 0  b2 0  b3 0  b4 0  b5 0  b6 0  b7 0                 

	movdqa	xmm0, XMMWORD PTR _zero$305487[ebp]
	movdqa	xmm1, XMMWORD PTR _d$305510[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T305514[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305514[ebp]
	movdqa	XMMWORD PTR _dl$305513[ebp], xmm0

; 1108 : 
; 1109 :                 dl = _mm_mullo_epi16(dl,ia);                   //d    = b0*~a0 b1*~a1 ... b7*~a7

	movdqa	xmm0, XMMWORD PTR _ia$305491[ebp]
	movdqa	xmm1, XMMWORD PTR _dl$305513[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305515[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305515[ebp]
	movdqa	XMMWORD PTR _dl$305513[ebp], xmm0

; 1110 :                 dl = _mm_adds_epu16(dl,s);                     //d   = d + s

	movdqa	xmm0, XMMWORD PTR _s$305489[ebp]
	movdqa	xmm1, XMMWORD PTR _dl$305513[ebp]
	paddusw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305516[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305516[ebp]
	movdqa	XMMWORD PTR _dl$305513[ebp], xmm0

; 1111 :                 dl = _mm_srli_epi16(dl, 8);                    //d   = d>>8

	movdqa	xmm0, XMMWORD PTR _dl$305513[ebp]
	psrlw	xmm0, 8
	movdqa	XMMWORD PTR $T305517[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305517[ebp]
	movdqa	XMMWORD PTR _dl$305513[ebp], xmm0

; 1112 :                 
; 1113 :                 d = _mm_unpackhi_epi8(d,zero);                

	movdqa	xmm0, XMMWORD PTR _zero$305487[ebp]
	movdqa	xmm1, XMMWORD PTR _d$305510[ebp]
	punpckhbw xmm1, xmm0
	movdqa	XMMWORD PTR $T305518[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305518[ebp]
	movdqa	XMMWORD PTR _d$305510[ebp], xmm0

; 1114 :                 d = _mm_mullo_epi16(d,ia);

	movdqa	xmm0, XMMWORD PTR _ia$305491[ebp]
	movdqa	xmm1, XMMWORD PTR _d$305510[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305519[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305519[ebp]
	movdqa	XMMWORD PTR _d$305510[ebp], xmm0

; 1115 :                 d = _mm_adds_epu16(d,s);

	movdqa	xmm0, XMMWORD PTR _s$305489[ebp]
	movdqa	xmm1, XMMWORD PTR _d$305510[ebp]
	paddusw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305520[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305520[ebp]
	movdqa	XMMWORD PTR _d$305510[ebp], xmm0

; 1116 :                 d = _mm_srli_epi16(d, 8);

	movdqa	xmm0, XMMWORD PTR _d$305510[ebp]
	psrlw	xmm0, 8
	movdqa	XMMWORD PTR $T305521[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305521[ebp]
	movdqa	XMMWORD PTR _d$305510[ebp], xmm0

; 1117 : 
; 1118 :                 dl = _mm_packus_epi16(dl,d);

	movdqa	xmm0, XMMWORD PTR _d$305510[ebp]
	movdqa	xmm1, XMMWORD PTR _dl$305513[ebp]
	packuswb xmm1, xmm0
	movdqa	XMMWORD PTR $T305522[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305522[ebp]
	movdqa	XMMWORD PTR _dl$305513[ebp], xmm0

; 1119 :                 
; 1120 :                 _mm_store_si128(reinterpret_cast<__m128i*>(dy), dl);

	movdqa	xmm0, XMMWORD PTR _dl$305513[ebp]
	mov	eax, DWORD PTR _dy$305496[ebp]
	movdqa	XMMWORD PTR [eax], xmm0

; 1121 :             }

	jmp	$LN12@AlphaBlt@2
$LN11@AlphaBlt@2:

; 1122 :             for(;dy < dy_end; dy++)

	jmp	SHORT $LN10@AlphaBlt@2
$LN9@AlphaBlt@2:
	mov	eax, DWORD PTR _dy$305496[ebp]
	add	eax, 1
	mov	DWORD PTR _dy$305496[ebp], eax
$LN10@AlphaBlt@2:
	mov	eax, DWORD PTR _dy$305496[ebp]
	cmp	eax, DWORD PTR _dy_end$305503[ebp]
	jae	SHORT $LN8@AlphaBlt@2

; 1123 :             {
; 1124 :                 *dy = (*dy * dstAlpha + yPremul)>>8;

	mov	eax, DWORD PTR _dy$305496[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _dstAlpha$[ebp]
	add	ecx, DWORD PTR _yPremul$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _dy$305496[ebp]
	mov	BYTE PTR [edx], cl

; 1125 :             }

	jmp	SHORT $LN9@AlphaBlt@2
$LN8@AlphaBlt@2:

; 1126 :         }

	jmp	$LN18@AlphaBlt@2
$LN17@AlphaBlt@2:

; 1127 :     }
; 1128 :     else

	jmp	SHORT $LN21@AlphaBlt@2
$LN20@AlphaBlt@2:

; 1129 :     {
; 1130 :         for( ; h>0; h--, pY += dst_stride )

	jmp	SHORT $LN6@AlphaBlt@2
$LN5@AlphaBlt@2:
	mov	eax, DWORD PTR _h$[ebx]
	sub	eax, 1
	mov	DWORD PTR _h$[ebx], eax
	mov	ecx, DWORD PTR _pY$[ebx]
	add	ecx, DWORD PTR _dst_stride$[ebx]
	mov	DWORD PTR _pY$[ebx], ecx
$LN6@AlphaBlt@2:
	cmp	DWORD PTR _h$[ebx], 0
	jle	SHORT $LN21@AlphaBlt@2

; 1131 :         {   
; 1132 :             BYTE* dy = pY;

	mov	eax, DWORD PTR _pY$[ebx]
	mov	DWORD PTR _dy$305531[ebp], eax

; 1133 :             const BYTE* dy_end = pY + w;

	mov	eax, DWORD PTR _pY$[ebx]
	add	eax, DWORD PTR _w$[ebx]
	mov	DWORD PTR _dy_end$305532[ebp], eax
	jmp	SHORT $LN3@AlphaBlt@2
$LN2@AlphaBlt@2:

; 1134 : 
; 1135 :             for(;dy < dy_end; dy++)

	mov	eax, DWORD PTR _dy$305531[ebp]
	add	eax, 1
	mov	DWORD PTR _dy$305531[ebp], eax
$LN3@AlphaBlt@2:
	mov	eax, DWORD PTR _dy$305531[ebp]
	cmp	eax, DWORD PTR _dy_end$305532[ebp]
	jae	SHORT $LN1@AlphaBlt@2

; 1136 :             {
; 1137 :                 *dy = (*dy * dstAlpha + yPremul)>>8;

	mov	eax, DWORD PTR _dy$305531[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _dstAlpha$[ebp]
	add	ecx, DWORD PTR _yPremul$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _dy$305531[ebp]
	mov	BYTE PTR [edx], cl

; 1138 :             }

	jmp	SHORT $LN2@AlphaBlt@2
$LN1@AlphaBlt@2:

; 1139 :         }

	jmp	SHORT $LN5@AlphaBlt@2
$LN21@AlphaBlt@2:

; 1140 :     }
; 1141 :     //__asm emms;
; 1142 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?AlphaBlt@@YAXPAEEEHHH@Z ENDP				; AlphaBlt
_TEXT	ENDS
PUBLIC	?AlphaBltC@@YAXPAEEEHHH@Z			; AlphaBltC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AlphaBltC@@YAXPAEEEHHH@Z
_TEXT	SEGMENT
_dy_end$305550 = -44					; size = 4
_dy$305549 = -32					; size = 4
_dstAlpha$ = -20					; size = 4
_yPremul$ = -8						; size = 4
_pY$ = 8						; size = 4
_alpha$ = 12						; size = 1
_Y$ = 16						; size = 1
_h$ = 20						; size = 4
_w$ = 24						; size = 4
_dst_stride$ = 28					; size = 4
?AlphaBltC@@YAXPAEEEHHH@Z PROC				; AlphaBltC, COMDAT

; 1152 : {   

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1153 :     int yPremul = Y*(alpha+1);

	movzx	eax, BYTE PTR _Y$[ebp]
	movzx	ecx, BYTE PTR _alpha$[ebp]
	add	ecx, 1
	imul	eax, ecx
	mov	DWORD PTR _yPremul$[ebp], eax

; 1154 :     int dstAlpha = 0x100 - alpha;

	movzx	eax, BYTE PTR _alpha$[ebp]
	mov	ecx, 256				; 00000100H
	sub	ecx, eax
	mov	DWORD PTR _dstAlpha$[ebp], ecx
	jmp	SHORT $LN6@AlphaBltC
$LN5@AlphaBltC:

; 1155 : 
; 1156 :     for( ; h>0; h--, pY += dst_stride )

	mov	eax, DWORD PTR _h$[ebp]
	sub	eax, 1
	mov	DWORD PTR _h$[ebp], eax
	mov	ecx, DWORD PTR _pY$[ebp]
	add	ecx, DWORD PTR _dst_stride$[ebp]
	mov	DWORD PTR _pY$[ebp], ecx
$LN6@AlphaBltC:
	cmp	DWORD PTR _h$[ebp], 0
	jle	SHORT $LN7@AlphaBltC

; 1157 :     {
; 1158 :         BYTE* dy = pY;

	mov	eax, DWORD PTR _pY$[ebp]
	mov	DWORD PTR _dy$305549[ebp], eax

; 1159 :         const BYTE* dy_end = pY + w;

	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _dy_end$305550[ebp], eax
	jmp	SHORT $LN3@AlphaBltC
$LN2@AlphaBltC:

; 1160 : 
; 1161 :         for(;dy < dy_end; dy++)

	mov	eax, DWORD PTR _dy$305549[ebp]
	add	eax, 1
	mov	DWORD PTR _dy$305549[ebp], eax
$LN3@AlphaBltC:
	mov	eax, DWORD PTR _dy$305549[ebp]
	cmp	eax, DWORD PTR _dy_end$305550[ebp]
	jae	SHORT $LN1@AlphaBltC

; 1162 :         {
; 1163 :             *dy = (*dy * dstAlpha + yPremul)>>8;

	mov	eax, DWORD PTR _dy$305549[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _dstAlpha$[ebp]
	add	ecx, DWORD PTR _yPremul$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _dy$305549[ebp]
	mov	BYTE PTR [edx], cl

; 1164 :         }

	jmp	SHORT $LN2@AlphaBltC
$LN1@AlphaBltC:

; 1165 :     }

	jmp	SHORT $LN5@AlphaBltC
$LN7@AlphaBltC:

; 1166 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AlphaBltC@@YAXPAEEEHHH@Z ENDP				; AlphaBltC
_TEXT	ENDS
PUBLIC	?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z	; Overlay::FillAlphaMash
PUBLIC	??7?$shared_ptr@E@boost@@QBE_NXZ		; boost::shared_ptr<unsigned char>::operator!
PUBLIC	??1?$shared_ptr@E@boost@@QAE@XZ			; boost::shared_ptr<unsigned char>::~shared_ptr<unsigned char>
PUBLIC	??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
PUBLIC	??0?$shared_ptr@E@boost@@QAE@XZ			; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
PUBLIC	__$ArrayPad$
PUBLIC	?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z ; Rasterizer::CompositeAlphaMask
EXTRN	?SetRect@CRect@@QAEXHHHH@Z:PROC			; CRect::SetRect
EXTRN	??0CRect@@QAE@UtagPOINT@@UtagSIZE@@@Z:PROC	; CRect::CRect
EXTRN	??_4CRect@@QAEXABUtagRECT@@@Z:PROC		; CRect::operator&=
EXTRN	??0CRect@@QAE@HHHH@Z:PROC			; CRect::CRect
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z$0
__ehfuncinfo$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z
_TEXT	SEGMENT
tv373 = -524						; size = 4
tv320 = -524						; size = 4
tv285 = -524						; size = 4
$T329013 = -516						; size = 8
$T329014 = -500						; size = 8
$T329023 = -484						; size = 4
$T305569 = -472						; size = 16
$T305633 = -448						; size = 16
_new_x$305666 = -232					; size = 4
_alpha$305662 = -217					; size = 1
_sw$305658 = -208					; size = 4
_last_x$305657 = -196					; size = 4
_alpha_mask_pitch$ = -184				; size = 4
_alpha_mask_data$ = -172				; size = 4
_s_base$ = -160						; size = 4
_color$ = -148						; size = 4
_fSingleColor$ = -133					; size = 1
_yo$ = -124						; size = 4
_xo$ = -112						; size = 4
_h$ = -100						; size = 4
_w$ = -88						; size = 4
_y$ = -76						; size = 4
_x$ = -64						; size = 4
_r$ = -52						; size = 16
_result$ = -28						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_spd$ = 12						; size = 4
_overlay$ = 16						; size = 4
_clipRect$ = 20						; size = 4
_alpha_mask$ = 24					; size = 4
_xsub$ = 28						; size = 4
_ysub$ = 32						; size = 4
_switchpts$ = 36					; size = 4
_fBody$ = 40						; size = 1
_fBorder$ = 44						; size = 1
_outputDirtyRect$ = 48					; size = 4
?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z PROC ; Rasterizer::CompositeAlphaMask, COMDAT

; 1186 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 512				; 00000200H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T329023[ebp], 0

; 1187 :     //fix me: check and log error
; 1188 :     SharedPtrByte result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	??0?$shared_ptr@E@boost@@QAE@XZ		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1189 :     *outputDirtyRect = CRect(0, 0, 0, 0);

	push	0
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR $T305569[ebp]
	call	??0CRect@@QAE@HHHH@Z			; CRect::CRect
	mov	ecx, DWORD PTR _outputDirtyRect$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 1190 :     if (!switchpts || !fBody && !fBorder) return result;

	cmp	DWORD PTR _switchpts$[ebp], 0
	je	SHORT $LN16@CompositeA
	movzx	eax, BYTE PTR _fBody$[ebp]
	test	eax, eax
	jne	SHORT $LN17@CompositeA
	movzx	eax, BYTE PTR _fBorder$[ebp]
	test	eax, eax
	jne	SHORT $LN17@CompositeA
$LN16@CompositeA:
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z	; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
	mov	ecx, DWORD PTR $T329023[ebp]
	or	ecx, 1
	mov	DWORD PTR $T329023[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _result$[ebp]
	call	??1?$shared_ptr@E@boost@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN18@CompositeA
$LN17@CompositeA:

; 1191 :     if (fBorder && !overlay->mBorder) return result;

	movzx	eax, BYTE PTR _fBorder$[ebp]
	test	eax, eax
	je	SHORT $LN15@CompositeA
	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	add	eax, 8
	mov	ecx, eax
	call	??7?$shared_ptr@E@boost@@QBE_NXZ	; boost::shared_ptr<unsigned char>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@CompositeA
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z	; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
	mov	ecx, DWORD PTR $T329023[ebp]
	or	ecx, 1
	mov	DWORD PTR $T329023[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _result$[ebp]
	call	??1?$shared_ptr@E@boost@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN18@CompositeA
$LN15@CompositeA:

; 1192 :     // clip
; 1193 :     // Limit drawn area to intersection of rendering surface and rectangular clip area
; 1194 :     CRect r(0, 0, spd.w, spd.h);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _r$[ebp]
	call	??0CRect@@QAE@HHHH@Z			; CRect::CRect

; 1195 :     r &= clipRect;

	mov	eax, DWORD PTR _clipRect$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	call	??_4CRect@@QAEXABUtagRECT@@@Z		; CRect::operator&=

; 1196 :     if (alpha_mask!=NULL)

	cmp	DWORD PTR _alpha_mask$[ebp], 0
	je	SHORT $LN14@CompositeA

; 1197 :     {
; 1198 :         r &= CRect(alpha_mask->left_top, alpha_mask->size);

	mov	eax, DWORD PTR _alpha_mask$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T329013[ebp], ecx
	mov	DWORD PTR $T329013[ebp+4], edx
	mov	eax, DWORD PTR _alpha_mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T329014[ebp], ecx
	mov	DWORD PTR $T329014[ebp+4], edx
	mov	eax, DWORD PTR $T329013[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T329013[ebp]
	push	ecx
	mov	edx, DWORD PTR $T329014[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T329014[ebp]
	push	eax
	lea	ecx, DWORD PTR $T305633[ebp]
	call	??0CRect@@QAE@UtagPOINT@@UtagSIZE@@@Z	; CRect::CRect
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	call	??_4CRect@@QAEXABUtagRECT@@@Z		; CRect::operator&=
$LN14@CompositeA:

; 1199 :     }
; 1200 : 
; 1201 :     // Remember that all subtitle coordinates are specified in 1/8 pixels
; 1202 :     // (x+4)>>3 rounds to nearest whole pixel.
; 1203 :     // ??? What is xsub, ysub, mOffsetX and mOffsetY ?    
; 1204 :     int x = (xsub + overlay->mOffsetX + 4)>>3;

	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _xsub$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	sar	edx, 3
	mov	DWORD PTR _x$[ebp], edx

; 1205 :     int y = (ysub + overlay->mOffsetY + 4)>>3;

	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _ysub$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	sar	edx, 3
	mov	DWORD PTR _y$[ebp], edx

; 1206 :     int w = overlay->mOverlayWidth;

	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR _w$[ebp], eax

; 1207 :     int h = overlay->mOverlayHeight;

	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR _h$[ebp], eax

; 1208 :     int xo = 0, yo = 0;

	mov	DWORD PTR _xo$[ebp], 0
	mov	DWORD PTR _yo$[ebp], 0

; 1209 :     // Again, limiting?
; 1210 :     if(x < r.left) {xo = r.left-x; w -= r.left-x; x = r.left;}

	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _r$[ebp]
	jge	SHORT $LN13@CompositeA
	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xo$[ebp], eax
	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _w$[ebp], ecx
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _x$[ebp], eax
$LN13@CompositeA:

; 1211 :     if(y < r.top) {yo = r.top-y; h -= r.top-y; y = r.top;}

	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _r$[ebp+4]
	jge	SHORT $LN12@CompositeA
	mov	eax, DWORD PTR _r$[ebp+4]
	sub	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _yo$[ebp], eax
	mov	eax, DWORD PTR _r$[ebp+4]
	sub	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _h$[ebp], ecx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR _y$[ebp], eax
$LN12@CompositeA:

; 1212 :     if(x+w > r.right) w = r.right-x;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _w$[ebp]
	cmp	eax, DWORD PTR _r$[ebp+8]
	jle	SHORT $LN11@CompositeA
	mov	eax, DWORD PTR _r$[ebp+8]
	sub	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _w$[ebp], eax
$LN11@CompositeA:

; 1213 :     if(y+h > r.bottom) h = r.bottom-y;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _h$[ebp]
	cmp	eax, DWORD PTR _r$[ebp+12]
	jle	SHORT $LN10@CompositeA
	mov	eax, DWORD PTR _r$[ebp+12]
	sub	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _h$[ebp], eax
$LN10@CompositeA:

; 1214 :     // Check if there's actually anything to render
; 1215 :     if(w <= 0 || h <= 0) return(result);

	cmp	DWORD PTR _w$[ebp], 0
	jle	SHORT $LN8@CompositeA
	cmp	DWORD PTR _h$[ebp], 0
	jg	SHORT $LN9@CompositeA
$LN8@CompositeA:
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z	; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
	mov	ecx, DWORD PTR $T329023[ebp]
	or	ecx, 1
	mov	DWORD PTR $T329023[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _result$[ebp]
	call	??1?$shared_ptr@E@boost@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN18@CompositeA
$LN9@CompositeA:

; 1216 :     outputDirtyRect->SetRect(x, y, x+w, y+h);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outputDirtyRect$[ebp]
	call	?SetRect@CRect@@QAEXHHHH@Z		; CRect::SetRect

; 1217 : 
; 1218 :     bool fSingleColor = (switchpts[1]==0xffffffff);

	mov	eax, DWORD PTR _switchpts$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], -1
	sete	cl
	mov	BYTE PTR _fSingleColor$[ebp], cl

; 1219 : 
; 1220 :     // draw
; 1221 :     // Grab the first colour
; 1222 :     DWORD color = switchpts[0];

	mov	eax, DWORD PTR _switchpts$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _color$[ebp], ecx

; 1223 :     byte* s_base = (byte*)xy_malloc(overlay->mOverlayPitch * overlay->mOverlayHeight);

	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	esi, eax
	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, DWORD PTR [esi+40]
	imul	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _s_base$[ebp], eax

; 1224 :     const byte* alpha_mask_data = alpha_mask != NULL ? alpha_mask->data.get() : NULL;

	cmp	DWORD PTR _alpha_mask$[ebp], 0
	je	SHORT $LN20@CompositeA
	mov	ecx, DWORD PTR _alpha_mask$[ebp]
	add	ecx, 20					; 00000014H
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	mov	DWORD PTR tv285[ebp], eax
	jmp	SHORT $LN21@CompositeA
$LN20@CompositeA:
	mov	DWORD PTR tv285[ebp], 0
$LN21@CompositeA:
	mov	eax, DWORD PTR tv285[ebp]
	mov	DWORD PTR _alpha_mask_data$[ebp], eax

; 1225 :     const int alpha_mask_pitch = alpha_mask != NULL ? alpha_mask->pitch : 0;

	cmp	DWORD PTR _alpha_mask$[ebp], 0
	je	SHORT $LN22@CompositeA
	mov	eax, DWORD PTR _alpha_mask$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv320[ebp], ecx
	jmp	SHORT $LN23@CompositeA
$LN22@CompositeA:
	mov	DWORD PTR tv320[ebp], 0
$LN23@CompositeA:
	mov	edx, DWORD PTR tv320[ebp]
	mov	DWORD PTR _alpha_mask_pitch$[ebp], edx

; 1226 :     if(alpha_mask_data!=NULL )

	cmp	DWORD PTR _alpha_mask_data$[ebp], 0
	je	SHORT $LN7@CompositeA

; 1227 :         alpha_mask_data += alpha_mask->pitch * y + x - alpha_mask->left_top.y*alpha_mask->pitch - alpha_mask->left_top.x;

	mov	eax, DWORD PTR _alpha_mask$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _alpha_mask$[ebp]
	mov	eax, DWORD PTR _alpha_mask$[ebp]
	mov	edx, DWORD PTR [edx+4]
	imul	edx, DWORD PTR [eax+16]
	sub	ecx, edx
	mov	eax, DWORD PTR _alpha_mask$[ebp]
	sub	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _alpha_mask_data$[ebp]
	mov	DWORD PTR _alpha_mask_data$[ebp], ecx
$LN7@CompositeA:

; 1228 : 
; 1229 :     if(fSingleColor)

	movzx	eax, BYTE PTR _fSingleColor$[ebp]
	test	eax, eax
	je	SHORT $LN6@CompositeA

; 1230 :     {
; 1231 :         overlay->FillAlphaMash(s_base, fBody, fBorder, xo, yo, w, h, 
; 1232 :             alpha_mask_data, alpha_mask_pitch,
; 1233 :             color>>24 );

	mov	eax, DWORD PTR _color$[ebp]
	shr	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _alpha_mask_pitch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alpha_mask_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yo$[ebp]
	push	edx
	mov	eax, DWORD PTR _xo$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _fBorder$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _fBody$[ebp]
	push	edx
	mov	eax, DWORD PTR _s_base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, eax
	call	?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z ; Overlay::FillAlphaMash

; 1234 :     }
; 1235 :     else

	jmp	$LN5@CompositeA
$LN6@CompositeA:

; 1236 :     {
; 1237 :         int last_x = xo;

	mov	eax, DWORD PTR _xo$[ebp]
	mov	DWORD PTR _last_x$305657[ebp], eax

; 1238 :         const DWORD *sw = switchpts;

	mov	eax, DWORD PTR _switchpts$[ebp]
	mov	DWORD PTR _sw$305658[ebp], eax
$LN4@CompositeA:

; 1239 :         while( last_x<w+xo )

	mov	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	cmp	DWORD PTR _last_x$305657[ebp], eax
	jge	$LN5@CompositeA

; 1240 :         {   
; 1241 :             byte alpha = sw[0]>>24; 

	mov	eax, DWORD PTR _sw$305658[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR _alpha$305662[ebp], cl
$LN2@CompositeA:

; 1242 :             while( sw[3]<w+xo && (sw[2]>>24)==alpha )

	mov	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	mov	ecx, DWORD PTR _sw$305658[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN1@CompositeA
	mov	eax, DWORD PTR _sw$305658[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 24					; 00000018H
	movzx	edx, BYTE PTR _alpha$305662[ebp]
	cmp	ecx, edx
	jne	SHORT $LN1@CompositeA

; 1243 :             {
; 1244 :                 sw += 2;

	mov	eax, DWORD PTR _sw$305658[ebp]
	add	eax, 8
	mov	DWORD PTR _sw$305658[ebp], eax

; 1245 :             }

	jmp	SHORT $LN2@CompositeA
$LN1@CompositeA:

; 1246 :             int new_x = sw[3] < w+xo ? sw[3] : w+xo;

	mov	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	mov	ecx, DWORD PTR _sw$305658[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN24@CompositeA
	mov	edx, DWORD PTR _sw$305658[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv373[ebp], eax
	jmp	SHORT $LN25@CompositeA
$LN24@CompositeA:
	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, DWORD PTR _xo$[ebp]
	mov	DWORD PTR tv373[ebp], ecx
$LN25@CompositeA:
	mov	edx, DWORD PTR tv373[ebp]
	mov	DWORD PTR _new_x$305666[ebp], edx

; 1247 :             overlay->FillAlphaMash(s_base, fBody, fBorder, 
; 1248 :                 last_x, yo, new_x-last_x, h, 
; 1249 :                 alpha_mask_data, alpha_mask_pitch,
; 1250 :                 alpha );   

	movzx	eax, BYTE PTR _alpha$305662[ebp]
	push	eax
	mov	ecx, DWORD PTR _alpha_mask_pitch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alpha_mask_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_x$305666[ebp]
	sub	ecx, DWORD PTR _last_x$305657[ebp]
	push	ecx
	mov	edx, DWORD PTR _yo$[ebp]
	push	edx
	mov	eax, DWORD PTR _last_x$305657[ebp]
	push	eax
	movzx	ecx, BYTE PTR _fBorder$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _fBody$[ebp]
	push	edx
	mov	eax, DWORD PTR _s_base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	ecx, eax
	call	?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z ; Overlay::FillAlphaMash

; 1251 :             last_x = new_x;

	mov	eax, DWORD PTR _new_x$305666[ebp]
	mov	DWORD PTR _last_x$305657[ebp], eax

; 1252 :             sw += 2;

	mov	eax, DWORD PTR _sw$305658[ebp]
	add	eax, 8
	mov	DWORD PTR _sw$305658[ebp], eax

; 1253 :         }

	jmp	$LN4@CompositeA
$LN5@CompositeA:

; 1254 :     }
; 1255 :     result.reset( s_base, xy_free );

	push	OFFSET ?xy_free@@YAXPAX@Z		; xy_free
	mov	eax, DWORD PTR _s_base$[ebp]
	push	eax
	lea	ecx, DWORD PTR _result$[ebp]
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 1256 :     return result;

	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z	; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
	mov	ecx, DWORD PTR $T329023[ebp]
	or	ecx, 1
	mov	DWORD PTR $T329023[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _result$[ebp]
	call	??1?$shared_ptr@E@boost@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN18@CompositeA:

; 1257 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@CompositeA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN33@CompositeA:
	DD	2
	DD	$LN32@CompositeA
$LN32@CompositeA:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN29@CompositeA
	DD	-52					; ffffffccH
	DD	16					; 00000010H
	DD	$LN30@CompositeA
$LN30@CompositeA:
	DB	114					; 00000072H
	DB	0
$LN29@CompositeA:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	??1?$shared_ptr@E@boost@@QAE@XZ
__unwindfunclet$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z$1:
	mov	eax, DWORD PTR $T329023[ebp]
	and	eax, 1
	je	$LN28@CompositeA
	and	DWORD PTR $T329023[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$shared_ptr@E@boost@@QAE@XZ
$LN28@CompositeA:
	ret	0
__ehhandler$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-528]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z ENDP ; Rasterizer::CompositeAlphaMask
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$shared_ptr@E@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$shared_ptr@E@boost@@QAE@XZ PROC			; boost::shared_ptr<unsigned char>::~shared_ptr<unsigned char>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1shared_count@detail@boost@@QAE@XZ	; boost::detail::shared_count::~shared_count
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$shared_ptr@E@boost@@QAE@XZ ENDP			; boost::shared_ptr<unsigned char>::~shared_ptr<unsigned char>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z ; Rasterizer::Draw
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z$0
__ehfuncinfo$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z
_TEXT	SEGMENT
tv563 = -764						; size = 4
tv502 = -764						; size = 4
tv426 = -764						; size = 4
tv333 = -764						; size = 4
tv278 = -764						; size = 4
tv263 = -764						; size = 4
tv248 = -764						; size = 4
tv246 = -764						; size = 4
_temp$305815 = -564					; size = 4
_wt$305807 = -552					; size = 4
_sw$305806 = -540					; size = 4
_dst_V$305802 = -528					; size = 4
_dst_U$305801 = -516					; size = 4
_dst_Y$305800 = -504					; size = 4
_dst_A$305798 = -492					; size = 4
_temp$305792 = -480					; size = 4
_wt$305788 = -468					; size = 4
_dst_V$305784 = -456					; size = 4
_dst_U$305783 = -444					; size = 4
_dst_Y$305782 = -432					; size = 4
_dst_A$305780 = -420					; size = 4
_new_x$305777 = -408					; size = 4
_last_x$305773 = -396					; size = 4
_sw$305772 = -384					; size = 4
_dst_V$305771 = -372					; size = 4
_dst_U$305770 = -360					; size = 4
_dst_Y$305769 = -348					; size = 4
_dst_A$305767 = -336					; size = 4
_dst_V$305765 = -324					; size = 4
_dst_U$305764 = -312					; size = 4
_dst_Y$305763 = -300					; size = 4
_dst_A$305761 = -288					; size = 4
_wt$305750 = -276					; size = 4
_sw$305749 = -264					; size = 4
_wt$305735 = -252					; size = 4
_sw$305734 = -240					; size = 4
_wt$305724 = -228					; size = 4
_wt$305714 = -216					; size = 4
_dst$ = -204						; size = 4
_s$ = -192						; size = 4
_color$ = -180						; size = 4
_draw_method$ = -168					; size = 4
_AYUV_PLANAR$ = -153					; size = 1
_fSingleColor$ = -141					; size = 1
_fSSE2$ = -129						; size = 1
_yo$ = -120						; size = 4
_xo$ = -108						; size = 4
_h$ = -96						; size = 4
_w$ = -84						; size = 4
_y$ = -72						; size = 4
_x$ = -60						; size = 4
_overlayPitch$ = -48					; size = 4
_r$ = -36						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_spd$ = 8						; size = 4
_overlay$ = 12						; size = 8
_clipRect$ = 20						; size = 4
_s_base$ = 24						; size = 4
_xsub$ = 28						; size = 4
_ysub$ = 32						; size = 4
_switchpts$ = 36					; size = 4
_fBody$ = 40						; size = 1
_fBorder$ = 44						; size = 1
?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z PROC ; Rasterizer::Draw, COMDAT

; 1261 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 752				; 000002f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-764]
	mov	ecx, 188				; 000000bcH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1262 :     if(!switchpts || !fBody && !fBorder) return;

	cmp	DWORD PTR _switchpts$[ebp], 0
	je	SHORT $LN68@Draw
	movzx	eax, BYTE PTR _fBody$[ebp]
	test	eax, eax
	jne	SHORT $LN69@Draw
	movzx	eax, BYTE PTR _fBorder$[ebp]
	test	eax, eax
	jne	SHORT $LN69@Draw
$LN68@Draw:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	jmp	$LN70@Draw
$LN69@Draw:

; 1263 : 
; 1264 :     // clip
; 1265 :     // Limit drawn area to intersection of rendering surface and rectangular clip area
; 1266 :     CRect r(0, 0, spd.w, spd.h);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _r$[ebp]
	call	??0CRect@@QAE@HHHH@Z			; CRect::CRect

; 1267 :     r &= clipRect;

	mov	eax, DWORD PTR _clipRect$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	call	??_4CRect@@QAEXABUtagRECT@@@Z		; CRect::operator&=

; 1268 :     // Remember that all subtitle coordinates are specified in 1/8 pixels
; 1269 :     // (x+4)>>3 rounds to nearest whole pixel.
; 1270 :     // ??? What is xsub, ysub, mOffsetX and mOffsetY ?
; 1271 :     int overlayPitch = overlay->mOverlayPitch;

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+40]
	mov	DWORD PTR _overlayPitch$[ebp], eax

; 1272 :     int x = (xsub + overlay->mOffsetX + 4)>>3;

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _xsub$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	sar	edx, 3
	mov	DWORD PTR _x$[ebp], edx

; 1273 :     int y = (ysub + overlay->mOffsetY + 4)>>3;

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _ysub$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	sar	edx, 3
	mov	DWORD PTR _y$[ebp], edx

; 1274 :     int w = overlay->mOverlayWidth;

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR _w$[ebp], eax

; 1275 :     int h = overlay->mOverlayHeight;

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR _h$[ebp], eax

; 1276 :     int xo = 0, yo = 0;

	mov	DWORD PTR _xo$[ebp], 0
	mov	DWORD PTR _yo$[ebp], 0

; 1277 :     // Again, limiting?
; 1278 :     if(x < r.left) {xo = r.left-x; w -= r.left-x; x = r.left;}

	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _r$[ebp]
	jge	SHORT $LN67@Draw
	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xo$[ebp], eax
	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _w$[ebp], ecx
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _x$[ebp], eax
$LN67@Draw:

; 1279 :     if(y < r.top) {yo = r.top-y; h -= r.top-y; y = r.top;}

	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _r$[ebp+4]
	jge	SHORT $LN66@Draw
	mov	eax, DWORD PTR _r$[ebp+4]
	sub	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _yo$[ebp], eax
	mov	eax, DWORD PTR _r$[ebp+4]
	sub	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _h$[ebp], ecx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR _y$[ebp], eax
$LN66@Draw:

; 1280 :     if(x+w > r.right) w = r.right-x;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _w$[ebp]
	cmp	eax, DWORD PTR _r$[ebp+8]
	jle	SHORT $LN65@Draw
	mov	eax, DWORD PTR _r$[ebp+8]
	sub	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _w$[ebp], eax
$LN65@Draw:

; 1281 :     if(y+h > r.bottom) h = r.bottom-y;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _h$[ebp]
	cmp	eax, DWORD PTR _r$[ebp+12]
	jle	SHORT $LN64@Draw
	mov	eax, DWORD PTR _r$[ebp+12]
	sub	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _h$[ebp], eax
$LN64@Draw:

; 1282 :     // Check if there's actually anything to render
; 1283 :     if(w <= 0 || h <= 0) return;

	cmp	DWORD PTR _w$[ebp], 0
	jle	SHORT $LN62@Draw
	cmp	DWORD PTR _h$[ebp], 0
	jg	SHORT $LN63@Draw
$LN62@Draw:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	jmp	$LN70@Draw
$LN63@Draw:

; 1284 : 
; 1285 :     // CPUID from VDub
; 1286 :     bool fSSE2 = !!(g_cpuid.m_flags & CCpuID::sse2);

	mov	eax, DWORD PTR ?g_cpuid@@3VCCpuID@@A	; g_cpuid
	and	eax, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR _fSSE2$[ebp], al

; 1287 :     bool fSingleColor = (switchpts[1]==0xffffffff);

	mov	eax, DWORD PTR _switchpts$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], -1
	sete	cl
	mov	BYTE PTR _fSingleColor$[ebp], cl

; 1288 :     bool AYUV_PLANAR = (spd.type==MSP_AYUV_PLANAR);

	mov	eax, DWORD PTR _spd$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 9
	sete	cl
	mov	BYTE PTR _AYUV_PLANAR$[ebp], cl

; 1289 :     int draw_method = 0;

	mov	DWORD PTR _draw_method$[ebp], 0

; 1290 :     if(fSingleColor)

	movzx	eax, BYTE PTR _fSingleColor$[ebp]
	test	eax, eax
	je	SHORT $LN61@Draw

; 1291 :         draw_method |= DM::SINGLE_COLOR;

	mov	eax, DWORD PTR _draw_method$[ebp]
	or	eax, 4
	mov	DWORD PTR _draw_method$[ebp], eax
$LN61@Draw:

; 1292 :     if(fSSE2)

	movzx	eax, BYTE PTR _fSSE2$[ebp]
	test	eax, eax
	je	SHORT $LN60@Draw

; 1293 :         draw_method |= DM::SSE2;

	mov	eax, DWORD PTR _draw_method$[ebp]
	or	eax, 1
	mov	DWORD PTR _draw_method$[ebp], eax
$LN60@Draw:

; 1294 :     if(AYUV_PLANAR)

	movzx	eax, BYTE PTR _AYUV_PLANAR$[ebp]
	test	eax, eax
	je	SHORT $LN59@Draw

; 1295 :         draw_method |= DM::AYUV_PLANAR;

	mov	eax, DWORD PTR _draw_method$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _draw_method$[ebp], eax
$LN59@Draw:

; 1296 :     
; 1297 :     // draw
; 1298 :     // Grab the first colour
; 1299 :     DWORD color = switchpts[0];

	mov	eax, DWORD PTR _switchpts$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _color$[ebp], ecx

; 1300 :     const byte* s = s_base + overlay->mOverlayPitch*yo + xo;

	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+40]
	imul	eax, DWORD PTR _yo$[ebp]
	add	eax, DWORD PTR _s_base$[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 1301 : 
; 1302 :     // How would this differ from src?
; 1303 :     unsigned long* dst = (unsigned long *)(((char *)spd.bits + spd.pitch * y) + ((x*spd.bpp)>>3));

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, ecx
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	imul	edx, DWORD PTR [ecx+12]
	sar	edx, 3
	add	eax, edx
	mov	DWORD PTR _dst$[ebp], eax

; 1304 : 
; 1305 :     // Every remaining line in the bitmap to be rendered...
; 1306 :     switch(draw_method)

	mov	eax, DWORD PTR _draw_method$[ebp]
	mov	DWORD PTR tv246[ebp], eax
	cmp	DWORD PTR tv246[ebp], 21		; 00000015H
	ja	$LN57@Draw
	mov	ecx, DWORD PTR tv246[ebp]
	movzx	edx, BYTE PTR $LN76@Draw[ecx]
	jmp	DWORD PTR $LN83@Draw[edx*4]
$LN55@Draw:

; 1307 :     {
; 1308 :     case   DM::SINGLE_COLOR |   DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1309 :     {
; 1310 :         while(h--)

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv248[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR tv248[ebp], 0
	je	SHORT $LN54@Draw

; 1311 :         {
; 1312 :             for(int wt=0; wt<w; ++wt)

	mov	DWORD PTR _wt$305714[ebp], 0
	jmp	SHORT $LN53@Draw
$LN52@Draw:
	mov	eax, DWORD PTR _wt$305714[ebp]
	add	eax, 1
	mov	DWORD PTR _wt$305714[ebp], eax
$LN53@Draw:
	mov	eax, DWORD PTR _wt$305714[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN51@Draw

; 1313 :                 // The <<6 is due to pixmix expecting the alpha parameter to be
; 1314 :                 // the multiplication of two 6-bit unsigned numbers but we
; 1315 :                 // only have one here. (No alpha mask.)
; 1316 :                 pixmix_sse2(&dst[wt], color, s[wt]);

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _wt$305714[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _wt$305714[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?pixmix_sse2@@YAXPAKKK@Z		; pixmix_sse2
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN52@Draw
$LN51@Draw:

; 1317 :             s += overlayPitch;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _overlayPitch$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 1318 :             dst = (unsigned long *)((char *)dst + spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst$[ebp], ecx

; 1319 :         }

	jmp	$LN55@Draw
$LN54@Draw:

; 1320 :     }
; 1321 :     break;

	jmp	$LN57@Draw
$LN49@Draw:

; 1322 :     case   DM::SINGLE_COLOR | 0*DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1323 :     {
; 1324 :         while(h--)

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv263[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR tv263[ebp], 0
	je	SHORT $LN48@Draw

; 1325 :         {
; 1326 :             for(int wt=0; wt<w; ++wt)

	mov	DWORD PTR _wt$305724[ebp], 0
	jmp	SHORT $LN47@Draw
$LN46@Draw:
	mov	eax, DWORD PTR _wt$305724[ebp]
	add	eax, 1
	mov	DWORD PTR _wt$305724[ebp], eax
$LN47@Draw:
	mov	eax, DWORD PTR _wt$305724[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN45@Draw

; 1327 :                 pixmix(&dst[wt], color, s[wt]);

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _wt$305724[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _wt$305724[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?pixmix@@YAXPAKKK@Z			; pixmix
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN46@Draw
$LN45@Draw:

; 1328 :             s += overlayPitch;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _overlayPitch$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 1329 :             dst = (unsigned long *)((char *)dst + spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst$[ebp], ecx

; 1330 :         }

	jmp	$LN49@Draw
$LN48@Draw:

; 1331 :     }
; 1332 :     break;

	jmp	$LN57@Draw
$LN43@Draw:

; 1333 :     case 0*DM::SINGLE_COLOR |   DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1334 :     {
; 1335 :         while(h--)

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv278[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR tv278[ebp], 0
	je	$LN42@Draw

; 1336 :         {
; 1337 :             const DWORD *sw = switchpts;

	mov	eax, DWORD PTR _switchpts$[ebp]
	mov	DWORD PTR _sw$305734[ebp], eax

; 1338 :             for(int wt=0; wt<w; ++wt)

	mov	DWORD PTR _wt$305735[ebp], 0
	jmp	SHORT $LN41@Draw
$LN40@Draw:
	mov	eax, DWORD PTR _wt$305735[ebp]
	add	eax, 1
	mov	DWORD PTR _wt$305735[ebp], eax
$LN41@Draw:
	mov	eax, DWORD PTR _wt$305735[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN39@Draw

; 1339 :             {
; 1340 :                 // xo is the offset (usually negative) we have moved into the image
; 1341 :                 // So if we have passed the switchpoint (?) switch to another colour
; 1342 :                 // (So switchpts stores both colours *and* coordinates?)
; 1343 :                 if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];}

	mov	eax, DWORD PTR _wt$305735[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	mov	ecx, DWORD PTR _sw$305734[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN38@Draw
$LN37@Draw:
	mov	eax, DWORD PTR _wt$305735[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	mov	ecx, DWORD PTR _sw$305734[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN36@Draw
	mov	eax, DWORD PTR _sw$305734[ebp]
	add	eax, 8
	mov	DWORD PTR _sw$305734[ebp], eax
	jmp	SHORT $LN37@Draw
$LN36@Draw:
	mov	eax, DWORD PTR _sw$305734[ebp]
	mov	ecx, DWORD PTR [eax-8]
	mov	DWORD PTR _color$[ebp], ecx
$LN38@Draw:

; 1344 :                 pixmix_sse2(&dst[wt], color, s[wt]);

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _wt$305735[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _wt$305735[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?pixmix_sse2@@YAXPAKKK@Z		; pixmix_sse2
	add	esp, 12					; 0000000cH

; 1345 :             }

	jmp	$LN40@Draw
$LN39@Draw:

; 1346 :             s += overlayPitch;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _overlayPitch$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 1347 :             dst = (unsigned long *)((char *)dst + spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst$[ebp], ecx

; 1348 :         }

	jmp	$LN43@Draw
$LN42@Draw:

; 1349 :     }
; 1350 :     break;

	jmp	$LN57@Draw
$LN34@Draw:

; 1351 :     case 0*DM::SINGLE_COLOR | 0*DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1352 :     {
; 1353 :         while(h--)

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv333[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR tv333[ebp], 0
	je	$LN33@Draw

; 1354 :         {
; 1355 :             const DWORD *sw = switchpts;

	mov	eax, DWORD PTR _switchpts$[ebp]
	mov	DWORD PTR _sw$305749[ebp], eax

; 1356 :             for(int wt=0; wt<w; ++wt)

	mov	DWORD PTR _wt$305750[ebp], 0
	jmp	SHORT $LN32@Draw
$LN31@Draw:
	mov	eax, DWORD PTR _wt$305750[ebp]
	add	eax, 1
	mov	DWORD PTR _wt$305750[ebp], eax
$LN32@Draw:
	mov	eax, DWORD PTR _wt$305750[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN30@Draw

; 1357 :             {
; 1358 :                 if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];}

	mov	eax, DWORD PTR _wt$305750[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	mov	ecx, DWORD PTR _sw$305749[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN29@Draw
$LN28@Draw:
	mov	eax, DWORD PTR _wt$305750[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	mov	ecx, DWORD PTR _sw$305749[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN27@Draw
	mov	eax, DWORD PTR _sw$305749[ebp]
	add	eax, 8
	mov	DWORD PTR _sw$305749[ebp], eax
	jmp	SHORT $LN28@Draw
$LN27@Draw:
	mov	eax, DWORD PTR _sw$305749[ebp]
	mov	ecx, DWORD PTR [eax-8]
	mov	DWORD PTR _color$[ebp], ecx
$LN29@Draw:

; 1359 :                 pixmix(&dst[wt], color, s[wt]);

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _wt$305750[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _wt$305750[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?pixmix@@YAXPAKKK@Z			; pixmix
	add	esp, 12					; 0000000cH

; 1360 :             }

	jmp	$LN31@Draw
$LN30@Draw:

; 1361 :             s += overlayPitch;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _overlayPitch$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 1362 :             dst = (unsigned long *)((char *)dst + spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst$[ebp], ecx

; 1363 :         }

	jmp	$LN34@Draw
$LN33@Draw:

; 1364 :     }
; 1365 :     break;

	jmp	$LN57@Draw
$LN26@Draw:

; 1366 :     case   DM::SINGLE_COLOR |   DM::SSE2 |   DM::AYUV_PLANAR :
; 1367 :     {
; 1368 :         unsigned char* dst_A = (unsigned char*)dst;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _dst_A$305761[ebp], eax

; 1369 :         unsigned char* dst_Y = dst_A + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_A$305761[ebp]
	mov	DWORD PTR _dst_Y$305763[ebp], edx

; 1370 :         unsigned char* dst_U = dst_Y + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_Y$305763[ebp]
	mov	DWORD PTR _dst_U$305764[ebp], edx

; 1371 :         unsigned char* dst_V = dst_U + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_U$305764[ebp]
	mov	DWORD PTR _dst_V$305765[ebp], edx

; 1372 : 
; 1373 :         AlphaBlt(dst_Y, s, ((color)>>16)&0xff, h, w, overlayPitch, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _overlayPitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_Y$305763[ebp]
	push	ecx
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt
	add	esp, 28					; 0000001cH

; 1374 :         AlphaBlt(dst_U, s, ((color)>>8)&0xff, h, w, overlayPitch, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _overlayPitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_U$305764[ebp]
	push	ecx
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt
	add	esp, 28					; 0000001cH

; 1375 :         AlphaBlt(dst_V, s, ((color))&0xff, h, w, overlayPitch, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _overlayPitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	and	edx, 255				; 000000ffH
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_V$305765[ebp]
	push	ecx
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt
	add	esp, 28					; 0000001cH

; 1376 :         AlphaBlt(dst_A, s, 0, h, w, overlayPitch, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _overlayPitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_A$305761[ebp]
	push	eax
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt
	add	esp, 28					; 0000001cH

; 1377 :     }
; 1378 :     break;

	jmp	$LN57@Draw
$LN25@Draw:

; 1379 :     case 0*DM::SINGLE_COLOR |   DM::SSE2 |   DM::AYUV_PLANAR :
; 1380 :     {
; 1381 :         unsigned char* dst_A = (unsigned char*)dst;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _dst_A$305767[ebp], eax

; 1382 :         unsigned char* dst_Y = dst_A + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_A$305767[ebp]
	mov	DWORD PTR _dst_Y$305769[ebp], edx

; 1383 :         unsigned char* dst_U = dst_Y + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_Y$305769[ebp]
	mov	DWORD PTR _dst_U$305770[ebp], edx

; 1384 :         unsigned char* dst_V = dst_U + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_U$305770[ebp]
	mov	DWORD PTR _dst_V$305771[ebp], edx

; 1385 : 
; 1386 :         const DWORD *sw = switchpts;

	mov	eax, DWORD PTR _switchpts$[ebp]
	mov	DWORD PTR _sw$305772[ebp], eax

; 1387 :         int last_x = xo;

	mov	eax, DWORD PTR _xo$[ebp]
	mov	DWORD PTR _last_x$305773[ebp], eax

; 1388 :         color = sw[0];

	mov	eax, DWORD PTR _sw$305772[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _color$[ebp], ecx
$LN24@Draw:

; 1389 :         while(last_x<w+xo)

	mov	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	cmp	DWORD PTR _last_x$305773[ebp], eax
	jge	$LN23@Draw

; 1390 :         {
; 1391 :             int new_x = sw[3] < w+xo ? sw[3] : w+xo;

	mov	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	mov	ecx, DWORD PTR _sw$305772[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN72@Draw
	mov	edx, DWORD PTR _sw$305772[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv426[ebp], eax
	jmp	SHORT $LN73@Draw
$LN72@Draw:
	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, DWORD PTR _xo$[ebp]
	mov	DWORD PTR tv426[ebp], ecx
$LN73@Draw:
	mov	edx, DWORD PTR tv426[ebp]
	mov	DWORD PTR _new_x$305777[ebp], edx

; 1392 :             color = sw[0];

	mov	eax, DWORD PTR _sw$305772[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _color$[ebp], ecx

; 1393 :             sw += 2;

	mov	eax, DWORD PTR _sw$305772[ebp]
	add	eax, 8
	mov	DWORD PTR _sw$305772[ebp], eax

; 1394 :             if( new_x < last_x )

	mov	eax, DWORD PTR _new_x$305777[ebp]
	cmp	eax, DWORD PTR _last_x$305773[ebp]
	jge	SHORT $LN22@Draw

; 1395 :                 continue;

	jmp	SHORT $LN24@Draw
$LN22@Draw:

; 1396 :             AlphaBlt(dst_Y, s + last_x - xo, (color>>16)&0xff, h, new_x-last_x, overlayPitch, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _overlayPitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_x$305777[ebp]
	sub	eax, DWORD PTR _last_x$305773[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _last_x$305773[ebp]
	sub	eax, DWORD PTR _xo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_Y$305769[ebp]
	push	ecx
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt
	add	esp, 28					; 0000001cH

; 1397 :             AlphaBlt(dst_U, s + last_x - xo, (color>>8)&0xff, h, new_x-last_x, overlayPitch, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _overlayPitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_x$305777[ebp]
	sub	eax, DWORD PTR _last_x$305773[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _last_x$305773[ebp]
	sub	eax, DWORD PTR _xo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_U$305770[ebp]
	push	ecx
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt
	add	esp, 28					; 0000001cH

; 1398 :             AlphaBlt(dst_V, s + last_x - xo, (color)&0xff, h, new_x-last_x, overlayPitch, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _overlayPitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_x$305777[ebp]
	sub	eax, DWORD PTR _last_x$305773[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	and	edx, 255				; 000000ffH
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _last_x$305773[ebp]
	sub	eax, DWORD PTR _xo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_V$305771[ebp]
	push	ecx
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt
	add	esp, 28					; 0000001cH

; 1399 :             AlphaBlt(dst_A, s + last_x - xo, 0, h, new_x-last_x, overlayPitch, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _overlayPitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_x$305777[ebp]
	sub	eax, DWORD PTR _last_x$305773[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR _last_x$305773[ebp]
	sub	edx, DWORD PTR _xo$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_A$305767[ebp]
	push	eax
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt
	add	esp, 28					; 0000001cH

; 1400 : 
; 1401 :             dst_A += new_x - last_x;

	mov	eax, DWORD PTR _new_x$305777[ebp]
	sub	eax, DWORD PTR _last_x$305773[ebp]
	add	eax, DWORD PTR _dst_A$305767[ebp]
	mov	DWORD PTR _dst_A$305767[ebp], eax

; 1402 :             dst_Y += new_x - last_x;

	mov	eax, DWORD PTR _new_x$305777[ebp]
	sub	eax, DWORD PTR _last_x$305773[ebp]
	add	eax, DWORD PTR _dst_Y$305769[ebp]
	mov	DWORD PTR _dst_Y$305769[ebp], eax

; 1403 :             dst_U += new_x - last_x;

	mov	eax, DWORD PTR _new_x$305777[ebp]
	sub	eax, DWORD PTR _last_x$305773[ebp]
	add	eax, DWORD PTR _dst_U$305770[ebp]
	mov	DWORD PTR _dst_U$305770[ebp], eax

; 1404 :             dst_V += new_x - last_x;

	mov	eax, DWORD PTR _new_x$305777[ebp]
	sub	eax, DWORD PTR _last_x$305773[ebp]
	add	eax, DWORD PTR _dst_V$305771[ebp]
	mov	DWORD PTR _dst_V$305771[ebp], eax

; 1405 :             last_x = new_x;

	mov	eax, DWORD PTR _new_x$305777[ebp]
	mov	DWORD PTR _last_x$305773[ebp], eax

; 1406 :         }

	jmp	$LN24@Draw
$LN23@Draw:

; 1407 :     }
; 1408 :     break;

	jmp	$LN57@Draw
$LN21@Draw:

; 1409 :     case   DM::SINGLE_COLOR | 0*DM::SSE2 |   DM::AYUV_PLANAR :
; 1410 :     {
; 1411 : //        char * debug_dst=(char*)dst;int h2 = h;
; 1412 : //        XY_DO_ONCE( xy_logger::write_file("G:\\b2_rt", (char*)&color, sizeof(color)) );
; 1413 : //        XY_DO_ONCE( xy_logger::write_file("G:\\b2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1414 : //        debug_dst += spd.pitch*spd.h;
; 1415 : //        XY_DO_ONCE( xy_logger::write_file("G:\\b2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1416 : //        debug_dst += spd.pitch*spd.h;
; 1417 : //        XY_DO_ONCE( xy_logger::write_file("G:\\b2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1418 : //        debug_dst += spd.pitch*spd.h;
; 1419 : //        XY_DO_ONCE( xy_logger::write_file("G:\\b2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1420 : //        debug_dst=(char*)dst;
; 1421 : 
; 1422 :         unsigned char* dst_A = (unsigned char*)dst;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _dst_A$305780[ebp], eax

; 1423 :         unsigned char* dst_Y = dst_A + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_A$305780[ebp]
	mov	DWORD PTR _dst_Y$305782[ebp], edx

; 1424 :         unsigned char* dst_U = dst_Y + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_Y$305782[ebp]
	mov	DWORD PTR _dst_U$305783[ebp], edx

; 1425 :         unsigned char* dst_V = dst_U + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_U$305783[ebp]
	mov	DWORD PTR _dst_V$305784[ebp], edx
$LN20@Draw:

; 1426 :         while(h--)

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv502[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR tv502[ebp], 0
	je	$LN19@Draw

; 1427 :         {
; 1428 :             for(int wt=0; wt<w; ++wt)

	mov	DWORD PTR _wt$305788[ebp], 0
	jmp	SHORT $LN18@Draw
$LN17@Draw:
	mov	eax, DWORD PTR _wt$305788[ebp]
	add	eax, 1
	mov	DWORD PTR _wt$305788[ebp], eax
$LN18@Draw:
	mov	eax, DWORD PTR _wt$305788[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	$LN16@Draw

; 1429 :             {
; 1430 :                 DWORD temp = COMBINE_AYUV(dst_A[wt], dst_Y[wt], dst_U[wt], dst_V[wt]);

	mov	eax, DWORD PTR _dst_A$305780[ebp]
	add	eax, DWORD PTR _wt$305788[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _dst_Y$305782[ebp]
	add	edx, DWORD PTR _wt$305788[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	shl	ecx, 8
	mov	edx, DWORD PTR _dst_U$305783[ebp]
	add	edx, DWORD PTR _wt$305788[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	shl	ecx, 8
	mov	edx, DWORD PTR _dst_V$305784[ebp]
	add	edx, DWORD PTR _wt$305788[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	DWORD PTR _temp$305792[ebp], ecx

; 1431 :                 pixmix(&temp, color, s[wt]);

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _wt$305788[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	lea	eax, DWORD PTR _temp$305792[ebp]
	push	eax
	call	?pixmix@@YAXPAKKK@Z			; pixmix
	add	esp, 12					; 0000000cH
$LN15@Draw:

; 1432 :                 SPLIT_AYUV(temp, dst_A+wt, dst_Y+wt, dst_U+wt, dst_V+wt);

	mov	eax, DWORD PTR _temp$305792[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _dst_V$305784[ebp]
	add	ecx, DWORD PTR _wt$305788[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _temp$305792[ebp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _dst_U$305783[ebp]
	add	ecx, DWORD PTR _wt$305788[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _temp$305792[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _dst_Y$305782[ebp]
	add	ecx, DWORD PTR _wt$305788[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _temp$305792[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _dst_A$305780[ebp]
	add	ecx, DWORD PTR _wt$305788[ebp]
	mov	BYTE PTR [ecx], al
	xor	eax, eax
	jne	SHORT $LN15@Draw

; 1433 :             }

	jmp	$LN17@Draw
$LN16@Draw:

; 1434 :             s += overlayPitch;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _overlayPitch$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 1435 :             dst_A += spd.pitch;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst_A$305780[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst_A$305780[ebp], ecx

; 1436 :             dst_Y += spd.pitch;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst_Y$305782[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst_Y$305782[ebp], ecx

; 1437 :             dst_U += spd.pitch;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst_U$305783[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst_U$305783[ebp], ecx

; 1438 :             dst_V += spd.pitch;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst_V$305784[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst_V$305784[ebp], ecx

; 1439 :         }

	jmp	$LN20@Draw
$LN19@Draw:

; 1440 : //        XY_DO_ONCE( xy_logger::write_file("G:\\a2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1441 : //        debug_dst += spd.pitch*spd.h;
; 1442 : //        XY_DO_ONCE( xy_logger::write_file("G:\\a2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1443 : //        debug_dst += spd.pitch*spd.h;
; 1444 : //        XY_DO_ONCE( xy_logger::write_file("G:\\a2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1445 : //        debug_dst += spd.pitch*spd.h;
; 1446 : //        XY_DO_ONCE( xy_logger::write_file("G:\\a2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1447 :     }
; 1448 :     break;

	jmp	$LN57@Draw
$LN12@Draw:

; 1449 :     case 0*DM::SINGLE_COLOR | 0*DM::SSE2 |   DM::AYUV_PLANAR :
; 1450 :     {
; 1451 :         unsigned char* dst_A = (unsigned char*)dst;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _dst_A$305798[ebp], eax

; 1452 :         unsigned char* dst_Y = dst_A + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_A$305798[ebp]
	mov	DWORD PTR _dst_Y$305800[ebp], edx

; 1453 :         unsigned char* dst_U = dst_Y + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_Y$305800[ebp]
	mov	DWORD PTR _dst_U$305801[ebp], edx

; 1454 :         unsigned char* dst_V = dst_U + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_U$305801[ebp]
	mov	DWORD PTR _dst_V$305802[ebp], edx
$LN11@Draw:

; 1455 :         while(h--)

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv563[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR tv563[ebp], 0
	je	$LN57@Draw

; 1456 :         {
; 1457 :             const DWORD *sw = switchpts;

	mov	eax, DWORD PTR _switchpts$[ebp]
	mov	DWORD PTR _sw$305806[ebp], eax

; 1458 :             for(int wt=0; wt<w; ++wt)

	mov	DWORD PTR _wt$305807[ebp], 0
	jmp	SHORT $LN9@Draw
$LN8@Draw:
	mov	eax, DWORD PTR _wt$305807[ebp]
	add	eax, 1
	mov	DWORD PTR _wt$305807[ebp], eax
$LN9@Draw:
	mov	eax, DWORD PTR _wt$305807[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	$LN7@Draw

; 1459 :             {
; 1460 :                 if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];}

	mov	eax, DWORD PTR _wt$305807[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	mov	ecx, DWORD PTR _sw$305806[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN6@Draw
$LN5@Draw:
	mov	eax, DWORD PTR _wt$305807[ebp]
	add	eax, DWORD PTR _xo$[ebp]
	mov	ecx, DWORD PTR _sw$305806[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN4@Draw
	mov	eax, DWORD PTR _sw$305806[ebp]
	add	eax, 8
	mov	DWORD PTR _sw$305806[ebp], eax
	jmp	SHORT $LN5@Draw
$LN4@Draw:
	mov	eax, DWORD PTR _sw$305806[ebp]
	mov	ecx, DWORD PTR [eax-8]
	mov	DWORD PTR _color$[ebp], ecx
$LN6@Draw:

; 1461 :                 DWORD temp = COMBINE_AYUV(dst_A[wt], dst_Y[wt], dst_U[wt], dst_V[wt]);

	mov	eax, DWORD PTR _dst_A$305798[ebp]
	add	eax, DWORD PTR _wt$305807[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _dst_Y$305800[ebp]
	add	edx, DWORD PTR _wt$305807[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	shl	ecx, 8
	mov	edx, DWORD PTR _dst_U$305801[ebp]
	add	edx, DWORD PTR _wt$305807[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	shl	ecx, 8
	mov	edx, DWORD PTR _dst_V$305802[ebp]
	add	edx, DWORD PTR _wt$305807[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	DWORD PTR _temp$305815[ebp], ecx

; 1462 :                 pixmix(&temp, color, (s[wt]*(color>>24))>>8);

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _wt$305807[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _color$[ebp]
	shr	edx, 24					; 00000018H
	imul	ecx, edx
	shr	ecx, 8
	push	ecx
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp$305815[ebp]
	push	ecx
	call	?pixmix@@YAXPAKKK@Z			; pixmix
	add	esp, 12					; 0000000cH
$LN3@Draw:

; 1463 :                 SPLIT_AYUV(temp, dst_A+wt, dst_Y+wt, dst_U+wt, dst_V+wt);

	mov	eax, DWORD PTR _temp$305815[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _dst_V$305802[ebp]
	add	ecx, DWORD PTR _wt$305807[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _temp$305815[ebp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _dst_U$305801[ebp]
	add	ecx, DWORD PTR _wt$305807[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _temp$305815[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _dst_Y$305800[ebp]
	add	ecx, DWORD PTR _wt$305807[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _temp$305815[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _dst_A$305798[ebp]
	add	ecx, DWORD PTR _wt$305807[ebp]
	mov	BYTE PTR [ecx], al
	xor	eax, eax
	jne	SHORT $LN3@Draw

; 1464 :             }

	jmp	$LN8@Draw
$LN7@Draw:

; 1465 :             s += overlayPitch;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _overlayPitch$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 1466 :             dst_A += spd.pitch;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst_A$305798[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst_A$305798[ebp], ecx

; 1467 :             dst_Y += spd.pitch;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst_Y$305800[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst_Y$305800[ebp], ecx

; 1468 :             dst_U += spd.pitch;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst_U$305801[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst_U$305801[ebp], ecx

; 1469 :             dst_V += spd.pitch;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _dst_V$305802[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dst_V$305802[ebp], ecx

; 1470 :         }

	jmp	$LN11@Draw
$LN57@Draw:

; 1471 :     }
; 1472 :     break;
; 1473 :     }
; 1474 :     // Remember to EMMS!
; 1475 :     // Rendering fails in funny ways if we don't do this.
; 1476 :     _mm_empty();

	emms

; 1477 :     return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	jmp	SHORT $LN70@Draw

; 1478 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _overlay$[ebp]
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
$LN70@Draw:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN82@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 764				; 000002fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN82@Draw:
	DD	3
	DD	$LN81@Draw
$LN81@Draw:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN77@Draw
	DD	-480					; fffffe20H
	DD	4
	DD	$LN78@Draw
	DD	-564					; fffffdccH
	DD	4
	DD	$LN79@Draw
$LN79@Draw:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN78@Draw:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN77@Draw:
	DB	114					; 00000072H
	DB	0
$LN83@Draw:
	DD	$LN34@Draw
	DD	$LN43@Draw
	DD	$LN49@Draw
	DD	$LN55@Draw
	DD	$LN12@Draw
	DD	$LN25@Draw
	DD	$LN21@Draw
	DD	$LN26@Draw
	DD	$LN57@Draw
$LN76@Draw:
	DB	0
	DB	1
	DB	8
	DB	8
	DB	2
	DB	3
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	4
	DB	5
	DB	8
	DB	8
	DB	6
	DB	7
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z$0:
	lea	ecx, DWORD PTR _overlay$[ebp]
	jmp	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
__ehhandler$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-768]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z ENDP ; Rasterizer::Draw
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pixmix@@YAXPAKKK@Z
_TEXT	SEGMENT
_ia$ = -20						; size = 4
_a$ = -8						; size = 4
_dst$ = 8						; size = 4
_color$ = 12						; size = 4
_alpha$ = 16						; size = 4
?pixmix@@YAXPAKKK@Z PROC				; pixmix, COMDAT

; 915  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 916  :     int a = alpha;

	mov	eax, DWORD PTR _alpha$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 917  :     // Make sure both a and ia are in range 1..256 for the >>8 operations below to be correct
; 918  :     int ia = 256-a;

	mov	eax, 256				; 00000100H
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _ia$[ebp], eax

; 919  :     a+=1;

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 1
	mov	DWORD PTR _a$[ebp], eax

; 920  :     *dst = ((((*dst&0x00ff00ff)*ia + (color&0x00ff00ff)*a)&0xff00ff00)>>8)
; 921  :            | ((((*dst&0x0000ff00)*ia + (color&0x0000ff00)*a)&0x00ff0000)>>8)
; 922  :            | ((((*dst>>8)&0x00ff0000)*ia)&0xff000000);

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16711935				; 00ff00ffH
	imul	ecx, DWORD PTR _ia$[ebp]
	mov	edx, DWORD PTR _color$[ebp]
	and	edx, 16711935				; 00ff00ffH
	imul	edx, DWORD PTR _a$[ebp]
	add	ecx, edx
	and	ecx, -16711936				; ff00ff00H
	shr	ecx, 8
	mov	eax, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [eax]
	and	edx, 65280				; 0000ff00H
	imul	edx, DWORD PTR _ia$[ebp]
	mov	eax, DWORD PTR _color$[ebp]
	and	eax, 65280				; 0000ff00H
	imul	eax, DWORD PTR _a$[ebp]
	add	edx, eax
	and	edx, 16711680				; 00ff0000H
	shr	edx, 8
	or	ecx, edx
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 8
	and	eax, 16711680				; 00ff0000H
	imul	eax, DWORD PTR _ia$[ebp]
	and	eax, -16777216				; ff000000H
	or	ecx, eax
	mov	edx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [edx], ecx

; 923  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?pixmix@@YAXPAKKK@Z ENDP				; pixmix
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?pixmix_sse2@@YAXPAKKK@Z
_TEXT	SEGMENT
$T305344 = -704						; size = 16
$T305346 = -672						; size = 16
$T305348 = -640						; size = 16
$T305349 = -608						; size = 16
$T305351 = -576						; size = 16
$T305352 = -544						; size = 16
$T305354 = -512						; size = 16
$T305355 = -480						; size = 16
$T305356 = -448						; size = 16
$T305357 = -416						; size = 16
$T305358 = -384						; size = 16
_r$ = -160						; size = 16
_s$ = -128						; size = 16
_d$ = -96						; size = 16
_a$ = -64						; size = 16
_zero$ = -32						; size = 16
_dst$ = 8						; size = 4
_color$ = 12						; size = 4
_alpha$ = 16						; size = 4
?pixmix_sse2@@YAXPAKKK@Z PROC				; pixmix_sse2, COMDAT

; 939  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 712				; 000002c8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-712]
	mov	ecx, 178				; 000000b2H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 940  : //    alpha = (((alpha) * (color>>24)) >> 6) & 0xff;
; 941  :     color &= 0xffffff;

	mov	eax, DWORD PTR _color$[ebx]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _color$[ebx], eax

; 942  :     __m128i zero = _mm_setzero_si128();

	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T305344[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305344[ebp]
	movdqa	XMMWORD PTR _zero$[ebp], xmm0

; 943  :     __m128i a = _mm_set1_epi32(((alpha+1) << 16) | (0x100 - alpha));

	mov	eax, DWORD PTR _alpha$[ebx]
	add	eax, 1
	shl	eax, 16					; 00000010H
	mov	ecx, 256				; 00000100H
	sub	ecx, DWORD PTR _alpha$[ebx]
	or	eax, ecx
	movd	xmm0, eax
	pshufd	xmm0, xmm0, 0
	movdqa	XMMWORD PTR $T305346[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305346[ebp]
	movdqa	XMMWORD PTR _a$[ebp], xmm0

; 944  :     __m128i d = _mm_unpacklo_epi8(_mm_cvtsi32_si128(*dst), zero);

	mov	eax, DWORD PTR _dst$[ebx]
	mov	ecx, DWORD PTR [eax]
	movd	xmm0, ecx
	movdqa	XMMWORD PTR $T305348[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR _zero$[ebp]
	movdqa	xmm1, XMMWORD PTR $T305348[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T305349[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305349[ebp]
	movdqa	XMMWORD PTR _d$[ebp], xmm0

; 945  :     __m128i s = _mm_unpacklo_epi8(_mm_cvtsi32_si128(color), zero);

	mov	eax, DWORD PTR _color$[ebx]
	movd	xmm0, eax
	movdqa	XMMWORD PTR $T305351[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR _zero$[ebp]
	movdqa	xmm1, XMMWORD PTR $T305351[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T305352[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305352[ebp]
	movdqa	XMMWORD PTR _s$[ebp], xmm0

; 946  :     __m128i r = _mm_unpacklo_epi16(d, s);

	movdqa	xmm0, XMMWORD PTR _s$[ebp]
	movdqa	xmm1, XMMWORD PTR _d$[ebp]
	punpcklwd xmm1, xmm0
	movdqa	XMMWORD PTR $T305354[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305354[ebp]
	movdqa	XMMWORD PTR _r$[ebp], xmm0

; 947  :     r = _mm_madd_epi16(r, a);

	movdqa	xmm0, XMMWORD PTR _a$[ebp]
	movdqa	xmm1, XMMWORD PTR _r$[ebp]
	pmaddwd	xmm1, xmm0
	movdqa	XMMWORD PTR $T305355[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305355[ebp]
	movdqa	XMMWORD PTR _r$[ebp], xmm0

; 948  :     r = _mm_srli_epi32(r, 8);

	movdqa	xmm0, XMMWORD PTR _r$[ebp]
	psrld	xmm0, 8
	movdqa	XMMWORD PTR $T305356[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305356[ebp]
	movdqa	XMMWORD PTR _r$[ebp], xmm0

; 949  :     r = _mm_packs_epi32(r, r);

	movdqa	xmm0, XMMWORD PTR _r$[ebp]
	movdqa	xmm1, XMMWORD PTR _r$[ebp]
	packssdw xmm1, xmm0
	movdqa	XMMWORD PTR $T305357[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305357[ebp]
	movdqa	XMMWORD PTR _r$[ebp], xmm0

; 950  :     r = _mm_packus_epi16(r, r);

	movdqa	xmm0, XMMWORD PTR _r$[ebp]
	movdqa	xmm1, XMMWORD PTR _r$[ebp]
	packuswb xmm1, xmm0
	movdqa	XMMWORD PTR $T305358[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305358[ebp]
	movdqa	XMMWORD PTR _r$[ebp], xmm0

; 951  :     *dst = (DWORD)_mm_cvtsi128_si32(r);

	movdqa	xmm0, XMMWORD PTR _r$[ebp]
	movd	eax, xmm0
	mov	ecx, DWORD PTR _dst$[ebx]
	mov	DWORD PTR [ecx], eax

; 952  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?pixmix_sse2@@YAXPAKKK@Z ENDP				; pixmix_sse2
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DryDraw@Rasterizer@@SA?AVCRect@@ABV?$shared_ptr@UOverlay@@@boost@@ABV2@HHPBK_N3@Z ; Rasterizer::DryDraw
EXTRN	??ICRect@@QBE?AV0@ABUtagRECT@@@Z:PROC		; CRect::operator&
EXTRN	??0CRect@@QAE@XZ:PROC				; CRect::CRect
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DryDraw@Rasterizer@@SA?AVCRect@@ABV?$shared_ptr@UOverlay@@@boost@@ABV2@HHPBK_N3@Z
_TEXT	SEGMENT
$T305837 = -312						; size = 16
$T305838 = -288						; size = 16
_h$ = -72						; size = 4
_w$ = -60						; size = 4
_y$ = -48						; size = 4
_x$ = -36						; size = 4
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_overlay$ = 12						; size = 4
_clipRect$ = 16						; size = 4
_xsub$ = 20						; size = 4
_ysub$ = 24						; size = 4
_switchpts$ = 28					; size = 4
_fBody$ = 32						; size = 1
_fBorder$ = 36						; size = 1
?DryDraw@Rasterizer@@SA?AVCRect@@ABV?$shared_ptr@UOverlay@@@boost@@ABV2@HHPBK_N3@Z PROC ; Rasterizer::DryDraw, COMDAT

; 1481 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1482 :     CRect r;

	lea	ecx, DWORD PTR _r$[ebp]
	call	??0CRect@@QAE@XZ			; CRect::CRect

; 1483 :     if(!switchpts || !fBody && !fBorder) return(r);

	cmp	DWORD PTR _switchpts$[ebp], 0
	je	SHORT $LN1@DryDraw
	movzx	eax, BYTE PTR _fBody$[ebp]
	test	eax, eax
	jne	SHORT $LN2@DryDraw
	movzx	eax, BYTE PTR _fBorder$[ebp]
	test	eax, eax
	jne	SHORT $LN2@DryDraw
$LN1@DryDraw:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN3@DryDraw
$LN2@DryDraw:

; 1484 : 
; 1485 :     // Remember that all subtitle coordinates are specified in 1/8 pixels
; 1486 :     // (x+4)>>3 rounds to nearest whole pixel.
; 1487 :     // ??? What is xsub, ysub, mOffsetX and mOffsetY ?
; 1488 :     int x = (xsub + overlay->mOffsetX + 4)>>3;

	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _xsub$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	sar	edx, 3
	mov	DWORD PTR _x$[ebp], edx

; 1489 :     int y = (ysub + overlay->mOffsetY + 4)>>3;

	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _ysub$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	sar	edx, 3
	mov	DWORD PTR _y$[ebp], edx

; 1490 :     int w = overlay->mOverlayWidth;

	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR _w$[ebp], eax

; 1491 :     int h = overlay->mOverlayHeight;

	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ; boost::shared_ptr<Overlay>::operator->
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR _h$[ebp], eax

; 1492 :     r = clipRect & CRect(x, y, x+w, y+h);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T305837[ebp]
	call	??0CRect@@QAE@HHHH@Z			; CRect::CRect
	push	eax
	lea	ecx, DWORD PTR $T305838[ebp]
	push	ecx
	mov	ecx, DWORD PTR _clipRect$[ebp]
	call	??ICRect@@QBE?AV0@ABUtagRECT@@@Z	; CRect::operator&
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _r$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _r$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _r$[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+12], eax

; 1493 :     return r;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@DryDraw:

; 1494 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DryDraw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@DryDraw:
	DD	1
	DD	$LN6@DryDraw
$LN6@DryDraw:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN5@DryDraw
$LN5@DryDraw:
	DB	114					; 00000072H
	DB	0
?DryDraw@Rasterizer@@SA?AVCRect@@ABV?$shared_ptr@UOverlay@@@boost@@ABV2@HHPBK_N3@Z ENDP ; Rasterizer::DryDraw
_TEXT	ENDS
PUBLIC	?FillSolidRect@Rasterizer@@SAXAAUSubPicDesc@@HHHHK@Z ; Rasterizer::FillSolidRect
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FillSolidRect@Rasterizer@@SAXAAUSubPicDesc@@HHHHK@Z
_TEXT	SEGMENT
tv77 = -424						; size = 4
_dst_V$305893 = -224					; size = 4
_dst_U$305892 = -212					; size = 4
_dst_Y$305891 = -200					; size = 4
_dst_A$305890 = -188					; size = 4
_dst$305888 = -176					; size = 4
_dst_V$305886 = -164					; size = 4
_dst_U$305885 = -152					; size = 4
_dst_Y$305884 = -140					; size = 4
_dst_A$305883 = -128					; size = 4
_dst$305881 = -116					; size = 4
_wt$305876 = -104					; size = 4
_dst$305873 = -92					; size = 4
_wy$305869 = -80					; size = 4
_wt$305864 = -68					; size = 4
_dst$305861 = -56					; size = 4
_wy$305857 = -44					; size = 4
_draw_method$ = -32					; size = 4
_AYUV_PLANAR$ = -17					; size = 1
_fSSE2$ = -5						; size = 1
_spd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_nWidth$ = 20						; size = 4
_nHeight$ = 24						; size = 4
_argb$ = 28						; size = 4
?FillSolidRect@Rasterizer@@SAXAAUSubPicDesc@@HHHHK@Z PROC ; Rasterizer::FillSolidRect, COMDAT

; 1497 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-424]
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1498 :     bool fSSE2 = !!(g_cpuid.m_flags & CCpuID::sse2);

	mov	eax, DWORD PTR ?g_cpuid@@3VCCpuID@@A	; g_cpuid
	and	eax, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR _fSSE2$[ebp], al

; 1499 :     bool AYUV_PLANAR = (spd.type==MSP_AYUV_PLANAR);

	mov	eax, DWORD PTR _spd$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 9
	sete	cl
	mov	BYTE PTR _AYUV_PLANAR$[ebp], cl

; 1500 :     int draw_method = 0;

	mov	DWORD PTR _draw_method$[ebp], 0

; 1501 :     if(fSSE2)

	movzx	eax, BYTE PTR _fSSE2$[ebp]
	test	eax, eax
	je	SHORT $LN20@FillSolidR

; 1502 :         draw_method |= DM::SSE2;

	mov	eax, DWORD PTR _draw_method$[ebp]
	or	eax, 1
	mov	DWORD PTR _draw_method$[ebp], eax
$LN20@FillSolidR:

; 1503 :     if(AYUV_PLANAR)

	movzx	eax, BYTE PTR _AYUV_PLANAR$[ebp]
	test	eax, eax
	je	SHORT $LN19@FillSolidR

; 1504 :         draw_method |= DM::AYUV_PLANAR;

	mov	eax, DWORD PTR _draw_method$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _draw_method$[ebp], eax
$LN19@FillSolidR:

; 1505 : 
; 1506 :     switch (draw_method)

	mov	eax, DWORD PTR _draw_method$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	cmp	DWORD PTR tv77[ebp], 17			; 00000011H
	ja	$LN17@FillSolidR
	mov	ecx, DWORD PTR tv77[ebp]
	movzx	edx, BYTE PTR $LN23@FillSolidR[ecx]
	jmp	DWORD PTR $LN24@FillSolidR[edx*4]
$LN16@FillSolidR:

; 1507 :     {
; 1508 :     case   DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1509 :     {
; 1510 :         for (int wy=y; wy<y+nHeight; wy++) {

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _wy$305857[ebp], eax
	jmp	SHORT $LN15@FillSolidR
$LN14@FillSolidR:
	mov	eax, DWORD PTR _wy$305857[ebp]
	add	eax, 1
	mov	DWORD PTR _wy$305857[ebp], eax
$LN15@FillSolidR:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _nHeight$[ebp]
	cmp	DWORD PTR _wy$305857[ebp], eax
	jge	SHORT $LN13@FillSolidR

; 1511 :             DWORD* dst = (DWORD*)((BYTE*)spd.bits + spd.pitch * wy) + x;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, DWORD PTR _wy$305857[ebp]
	mov	edx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, ecx
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dst$305861[ebp], edx

; 1512 :             for(int wt=0; wt<nWidth; ++wt) {

	mov	DWORD PTR _wt$305864[ebp], 0
	jmp	SHORT $LN12@FillSolidR
$LN11@FillSolidR:
	mov	eax, DWORD PTR _wt$305864[ebp]
	add	eax, 1
	mov	DWORD PTR _wt$305864[ebp], eax
$LN12@FillSolidR:
	mov	eax, DWORD PTR _wt$305864[ebp]
	cmp	eax, DWORD PTR _nWidth$[ebp]
	jge	SHORT $LN10@FillSolidR

; 1513 :                 pixmix_sse2(&dst[wt], argb, argb>>24);

	mov	eax, DWORD PTR _argb$[ebp]
	shr	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _argb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wt$305864[ebp]
	mov	eax, DWORD PTR _dst$305861[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	?pixmix_sse2@@YAXPAKKK@Z		; pixmix_sse2
	add	esp, 12					; 0000000cH

; 1514 :             }

	jmp	SHORT $LN11@FillSolidR
$LN10@FillSolidR:

; 1515 :         }

	jmp	SHORT $LN14@FillSolidR
$LN13@FillSolidR:

; 1516 :     }
; 1517 :     break;

	jmp	$LN17@FillSolidR
$LN9@FillSolidR:

; 1518 :     case 0*DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1519 :     {
; 1520 :         for (int wy=y; wy<y+nHeight; wy++) {

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _wy$305869[ebp], eax
	jmp	SHORT $LN8@FillSolidR
$LN7@FillSolidR:
	mov	eax, DWORD PTR _wy$305869[ebp]
	add	eax, 1
	mov	DWORD PTR _wy$305869[ebp], eax
$LN8@FillSolidR:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _nHeight$[ebp]
	cmp	DWORD PTR _wy$305869[ebp], eax
	jge	SHORT $LN6@FillSolidR

; 1521 :             DWORD* dst = (DWORD*)((BYTE*)spd.bits + spd.pitch * wy) + x;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, DWORD PTR _wy$305869[ebp]
	mov	edx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, ecx
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dst$305873[ebp], edx

; 1522 :             for(int wt=0; wt<nWidth; ++wt) {

	mov	DWORD PTR _wt$305876[ebp], 0
	jmp	SHORT $LN5@FillSolidR
$LN4@FillSolidR:
	mov	eax, DWORD PTR _wt$305876[ebp]
	add	eax, 1
	mov	DWORD PTR _wt$305876[ebp], eax
$LN5@FillSolidR:
	mov	eax, DWORD PTR _wt$305876[ebp]
	cmp	eax, DWORD PTR _nWidth$[ebp]
	jge	SHORT $LN3@FillSolidR

; 1523 :                 pixmix(&dst[wt], argb,  argb>>24);

	mov	eax, DWORD PTR _argb$[ebp]
	shr	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _argb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wt$305876[ebp]
	mov	eax, DWORD PTR _dst$305873[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	?pixmix@@YAXPAKKK@Z			; pixmix
	add	esp, 12					; 0000000cH

; 1524 :             }

	jmp	SHORT $LN4@FillSolidR
$LN3@FillSolidR:

; 1525 :         }

	jmp	SHORT $LN7@FillSolidR
$LN6@FillSolidR:

; 1526 :     }
; 1527 :     break;

	jmp	$LN17@FillSolidR
$LN2@FillSolidR:

; 1528 :     case   DM::SSE2 |   DM::AYUV_PLANAR :
; 1529 :     {
; 1530 :         BYTE* dst = reinterpret_cast<BYTE*>(spd.bits) + spd.pitch * y + x;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, ecx
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _dst$305881[ebp], eax

; 1531 :         BYTE* dst_A = dst;

	mov	eax, DWORD PTR _dst$305881[ebp]
	mov	DWORD PTR _dst_A$305883[ebp], eax

; 1532 :         BYTE* dst_Y = dst_A + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_A$305883[ebp]
	mov	DWORD PTR _dst_Y$305884[ebp], edx

; 1533 :         BYTE* dst_U = dst_Y + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_Y$305884[ebp]
	mov	DWORD PTR _dst_U$305885[ebp], edx

; 1534 :         BYTE* dst_V = dst_U + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_U$305885[ebp]
	mov	DWORD PTR _dst_V$305886[ebp], edx

; 1535 :         AlphaBlt(dst_Y, argb>>24, ((argb)>>16)&0xff, nHeight, nWidth, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _nWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _argb$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _argb$[ebp]
	shr	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _dst_Y$305884[ebp]
	push	eax
	call	?AlphaBlt@@YAXPAEEEHHH@Z		; AlphaBlt
	add	esp, 24					; 00000018H

; 1536 :         AlphaBlt(dst_U, argb>>24, ((argb)>>8)&0xff, nHeight, nWidth, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _nWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _argb$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _argb$[ebp]
	shr	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _dst_U$305885[ebp]
	push	eax
	call	?AlphaBlt@@YAXPAEEEHHH@Z		; AlphaBlt
	add	esp, 24					; 00000018H

; 1537 :         AlphaBlt(dst_V, argb>>24, ((argb))&0xff, nHeight, nWidth, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _nWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _argb$[ebp]
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _argb$[ebp]
	shr	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _dst_V$305886[ebp]
	push	eax
	call	?AlphaBlt@@YAXPAEEEHHH@Z		; AlphaBlt
	add	esp, 24					; 00000018H

; 1538 :         AlphaBlt(dst_A, argb>>24, 0, nHeight, nWidth, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _nWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _argb$[ebp]
	shr	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _dst_A$305883[ebp]
	push	edx
	call	?AlphaBlt@@YAXPAEEEHHH@Z		; AlphaBlt
	add	esp, 24					; 00000018H

; 1539 :     }
; 1540 :     break;

	jmp	$LN17@FillSolidR
$LN1@FillSolidR:

; 1541 :     case 0*DM::SSE2 |   DM::AYUV_PLANAR :
; 1542 :     {
; 1543 :         BYTE* dst = reinterpret_cast<BYTE*>(spd.bits) + spd.pitch * y + x;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, ecx
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _dst$305888[ebp], eax

; 1544 :         BYTE* dst_A = dst;

	mov	eax, DWORD PTR _dst$305888[ebp]
	mov	DWORD PTR _dst_A$305890[ebp], eax

; 1545 :         BYTE* dst_Y = dst_A + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_A$305890[ebp]
	mov	DWORD PTR _dst_Y$305891[ebp], edx

; 1546 :         BYTE* dst_U = dst_Y + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_Y$305891[ebp]
	mov	DWORD PTR _dst_U$305892[ebp], edx

; 1547 :         BYTE* dst_V = dst_U + spd.pitch*spd.h;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _dst_U$305892[ebp]
	mov	DWORD PTR _dst_V$305893[ebp], edx

; 1548 :         AlphaBltC(dst_Y, argb>>24, ((argb)>>16)&0xff, nHeight, nWidth, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _nWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _argb$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _argb$[ebp]
	shr	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _dst_Y$305891[ebp]
	push	eax
	call	?AlphaBltC@@YAXPAEEEHHH@Z		; AlphaBltC
	add	esp, 24					; 00000018H

; 1549 :         AlphaBltC(dst_U, argb>>24, ((argb)>>8)&0xff, nHeight, nWidth, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _nWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _argb$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _argb$[ebp]
	shr	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _dst_U$305892[ebp]
	push	eax
	call	?AlphaBltC@@YAXPAEEEHHH@Z		; AlphaBltC
	add	esp, 24					; 00000018H

; 1550 :         AlphaBltC(dst_V, argb>>24, ((argb))&0xff, nHeight, nWidth, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _nWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _argb$[ebp]
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _argb$[ebp]
	shr	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _dst_V$305893[ebp]
	push	eax
	call	?AlphaBltC@@YAXPAEEEHHH@Z		; AlphaBltC
	add	esp, 24					; 00000018H

; 1551 :         AlphaBltC(dst_A, argb>>24, 0, nHeight, nWidth, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _nWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _argb$[ebp]
	shr	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _dst_A$305890[ebp]
	push	edx
	call	?AlphaBltC@@YAXPAEEEHHH@Z		; AlphaBltC
	add	esp, 24					; 00000018H
$LN17@FillSolidR:

; 1552 :     }
; 1553 :     break;
; 1554 :     }
; 1555 :     _mm_empty();

	emms

; 1556 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 424				; 000001a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@FillSolidR:
	DD	$LN9@FillSolidR
	DD	$LN16@FillSolidR
	DD	$LN1@FillSolidR
	DD	$LN2@FillSolidR
	DD	$LN17@FillSolidR
$LN23@FillSolidR:
	DB	0
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	3
?FillSolidRect@Rasterizer@@SAXAAUSubPicDesc@@HHHHK@Z ENDP ; Rasterizer::FillSolidRect
_TEXT	ENDS
PUBLIC	?_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z ; Overlay::_DoFillAlphaMash_c
PUBLIC	??_C@_0EB@NNJOLKLM@e?3?2github?2codesandnotes?2xy?9vsfil@ ; `string'
PUBLIC	?__LINE__Var@?1??_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z@4JA ; `Overlay::_DoFillAlphaMash'::`2'::__LINE__Var
PUBLIC	?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z	; Overlay::_DoFillAlphaMash
EXTRN	?AfxAssertFailedLine@@YGHPBDH@Z:PROC		; AfxAssertFailedLine
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0EB@NNJOLKLM@e?3?2github?2codesandnotes?2xy?9vsfil@
CONST	SEGMENT
??_C@_0EB@NNJOLKLM@e?3?2github?2codesandnotes?2xy?9vsfil@ DB 'e:\github\c'
	DB	'odesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z@4JA DD 061cH ; `Overlay::_DoFillAlphaMash'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z
_TEXT	SEGMENT
tv884 = -4120						; size = 4
tv829 = -4120						; size = 4
tv658 = -4120						; size = 4
tv648 = -4120						; size = 4
tv446 = -4120						; size = 4
tv444 = -4120						; size = 4
tv310 = -4120						; size = 4
tv308 = -4120						; size = 4
tv289 = -4120						; size = 4
tv154 = -4120						; size = 4
tv144 = -4120						; size = 4
tv129 = -4120						; size = 4
tv89 = -4120						; size = 4
tv77 = -4120						; size = 4
tv71 = -4120						; size = 4
$T306177 = -4112					; size = 16
$T306178 = -4080					; size = 16
$T306179 = -4048					; size = 16
$T306180 = -4016					; size = 16
$T306181 = -3984					; size = 16
$T306182 = -3952					; size = 16
$T306183 = -3920					; size = 16
$T306184 = -3888					; size = 16
$T306185 = -3856					; size = 16
$T306186 = -3824					; size = 16
$T306187 = -3792					; size = 16
$T306194 = -3760					; size = 8
$T306197 = -3744					; size = 8
$T306198 = -3728					; size = 8
$T306201 = -3712					; size = 8
$T306203 = -3696					; size = 8
$T306204 = -3680					; size = 8
$T306205 = -3664					; size = 8
$T306206 = -3648					; size = 8
$T306207 = -3632					; size = 8
$T306208 = -3616					; size = 8
$T306209 = -3600					; size = 8
$T305927 = -3584					; size = 8
$T305929 = -3568					; size = 16
$T305944 = -3536					; size = 8
$T305947 = -3520					; size = 8
$T305948 = -3504					; size = 8
$T305950 = -3488					; size = 8
$T305951 = -3472					; size = 8
$T305952 = -3456					; size = 8
$T305953 = -3440					; size = 8
$T305954 = -3424					; size = 8
$T305957 = -3408					; size = 16
$T305963 = -3376					; size = 16
$T305966 = -3344					; size = 16
$T305967 = -3312					; size = 16
$T305969 = -3280					; size = 16
$T305970 = -3248					; size = 16
$T305971 = -3216					; size = 16
$T305972 = -3184					; size = 16
$T305973 = -3152					; size = 16
$T305974 = -3120					; size = 16
$T305975 = -3088					; size = 16
$T305982 = -3056					; size = 8
$T305985 = -3040					; size = 8
$T305986 = -3024					; size = 8
$T305988 = -3008					; size = 8
$T305989 = -2992					; size = 8
$T305990 = -2976					; size = 8
$T305991 = -2960					; size = 8
$T305992 = -2944					; size = 8
$T306013 = -2928					; size = 8
$T306015 = -2912					; size = 8
$T306016 = -2896					; size = 8
$T306017 = -2880					; size = 8
$T306018 = -2864					; size = 8
$T306019 = -2848					; size = 8
$T306022 = -2832					; size = 16
$T306028 = -2800					; size = 16
$T306030 = -2768					; size = 16
$T306031 = -2736					; size = 16
$T306032 = -2704					; size = 16
$T306033 = -2672					; size = 16
$T306034 = -2640					; size = 16
$T306035 = -2608					; size = 16
$T306036 = -2576					; size = 16
$T306043 = -2544					; size = 8
$T306045 = -2528					; size = 8
$T306046 = -2512					; size = 8
$T306047 = -2496					; size = 8
$T306048 = -2480					; size = 8
$T306049 = -2464					; size = 8
$T306069 = -2448					; size = 8
$T306072 = -2432					; size = 8
$T306074 = -2416					; size = 8
$T306075 = -2400					; size = 8
$T306076 = -2384					; size = 8
$T306077 = -2368					; size = 8
$T306078 = -2352					; size = 8
$T306079 = -2336					; size = 8
$T306080 = -2320					; size = 8
$T306083 = -2304					; size = 16
$T306089 = -2272					; size = 16
$T306092 = -2240					; size = 16
$T306095 = -2208					; size = 16
$T306096 = -2176					; size = 16
$T306097 = -2144					; size = 16
$T306098 = -2112					; size = 16
$T306099 = -2080					; size = 16
$T306100 = -2048					; size = 16
$T306101 = -2016					; size = 16
$T306102 = -1984					; size = 16
$T306103 = -1952					; size = 16
$T306104 = -1920					; size = 16
$T306105 = -1888					; size = 16
$T306112 = -1856					; size = 8
$T306115 = -1840					; size = 8
$T306117 = -1824					; size = 8
$T306118 = -1808					; size = 8
$T306119 = -1792					; size = 8
$T306120 = -1776					; size = 8
$T306121 = -1760					; size = 8
$T306122 = -1744					; size = 8
$T306123 = -1728					; size = 8
$T306143 = -1712					; size = 8
$T306146 = -1696					; size = 8
$T306147 = -1680					; size = 8
$T306150 = -1664					; size = 8
$T306152 = -1648					; size = 8
$T306153 = -1632					; size = 8
$T306154 = -1616					; size = 8
$T306155 = -1600					; size = 8
$T306156 = -1584					; size = 8
$T306157 = -1568					; size = 8
$T306158 = -1552					; size = 8
$T306161 = -1536					; size = 16
$T306167 = -1504					; size = 16
$T306170 = -1472					; size = 16
$T306171 = -1440					; size = 16
$T306174 = -1408					; size = 16
_j$306222 = -1192					; size = 4
_temp$306214 = -1180					; size = 4
_zero$306202 = -1168					; size = 8
_mask$306199 = -1152					; size = 8
_body$306195 = -1136					; size = 8
_border$306192 = -1120					; size = 8
_maskhi$306176 = -1104					; size = 16
_srchi$306175 = -1072					; size = 16
_mask$306172 = -1040					; size = 16
_body$306168 = -1008					; size = 16
_border$306165 = -976					; size = 16
_zero$306160 = -944					; size = 16
_zero$306151 = -920					; size = 8
_mask$306148 = -904					; size = 8
_body$306144 = -888					; size = 8
_border$306141 = -872					; size = 8
_temp$306137 = -856					; size = 4
_j$306133 = -844					; size = 4
_zero$306116 = -832					; size = 8
_mask$306113 = -816					; size = 8
_src$306110 = -800					; size = 8
_maskhi$306094 = -784					; size = 16
_srchi$306093 = -752					; size = 16
_mask$306090 = -720					; size = 16
_src$306087 = -688					; size = 16
_zero$306082 = -656					; size = 16
_zero$306073 = -632					; size = 8
_mask$306070 = -616					; size = 8
_src$306067 = -600					; size = 8
_j$306060 = -584					; size = 4
_src1$306056 = -572					; size = 4
_zero$306044 = -560					; size = 8
_src$306041 = -544					; size = 8
_srchi$306029 = -528					; size = 16
_src$306026 = -496					; size = 16
_zero$306021 = -464					; size = 16
_zero$306014 = -440					; size = 8
_src$306011 = -424					; size = 8
_j$306004 = -404					; size = 4
_src1$306000 = -392					; size = 4
_temp$305997 = -380					; size = 4
_zero$305987 = -368					; size = 8
_body$305983 = -352					; size = 8
_border$305980 = -336					; size = 8
_srchi$305968 = -320					; size = 16
_body$305964 = -288					; size = 16
_border$305961 = -256					; size = 16
_zero$305956 = -224					; size = 16
_zero$305949 = -200					; size = 8
_body$305945 = -184					; size = 8
_border$305942 = -168					; size = 8
_temp$305938 = -152					; size = 4
_j$305934 = -140					; size = 4
_color_alpha_128$305928 = -128				; size = 16
_color_alpha_64$305926 = -96				; size = 8
_x_end$305925 = -80					; size = 4
_x_end0$305922 = -68					; size = 4
_x_end00$305919 = -56					; size = 4
_x00$305914 = -44					; size = 4
_x0$305909 = -32					; size = 4
_dst$305908 = -20					; size = 4
_this$ = -8						; size = 4
_outputAlphaMask$ = 8					; size = 4
_pBody$ = 12						; size = 4
_pBorder$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_w$ = 28						; size = 4
_h$ = 32						; size = 4
_pAlphaMask$ = 36					; size = 4
_pitch$ = 40						; size = 4
_color_alpha$ = 44					; size = 4
?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z PROC	; Overlay::_DoFillAlphaMash, COMDAT
; _this$ = ecx

; 1564 : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	mov	eax, 4120				; 00001018H
	call	__chkstk
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-4120]
	mov	ecx, 1030				; 00000406H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1565 :     if (g_cpuid.m_flags & CCpuID::sse2)

	mov	eax, DWORD PTR ?g_cpuid@@3VCCpuID@@A	; g_cpuid
	and	eax, 8
	je	$LN83@DoFillAlph

; 1566 :     {
; 1567 :         pBody = pBody!=NULL ? pBody + y*mOverlayPitch + x: NULL;

	cmp	DWORD PTR _pBody$[ebx], 0
	je	SHORT $LN86@DoFillAlph
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebx]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _pBody$[ebx]
	add	ecx, DWORD PTR _x$[ebx]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN87@DoFillAlph
$LN86@DoFillAlph:
	mov	DWORD PTR tv71[ebp], 0
$LN87@DoFillAlph:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pBody$[ebx], edx

; 1568 :         pBorder = pBorder!=NULL ? pBorder + y*mOverlayPitch + x: NULL;

	cmp	DWORD PTR _pBorder$[ebx], 0
	je	SHORT $LN88@DoFillAlph
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebx]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _pBorder$[ebx]
	add	ecx, DWORD PTR _x$[ebx]
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN89@DoFillAlph
$LN88@DoFillAlph:
	mov	DWORD PTR tv77[ebp], 0
$LN89@DoFillAlph:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _pBorder$[ebx], edx

; 1569 :         byte* dst = outputAlphaMask + y*mOverlayPitch + x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebx]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _outputAlphaMask$[ebx]
	add	ecx, DWORD PTR _x$[ebx]
	mov	DWORD PTR _dst$305908[ebp], ecx

; 1570 : 
; 1571 :         const int x0 = ((reinterpret_cast<int>(dst)+3)&~3) - reinterpret_cast<int>(dst) < w ?
; 1572 :             ((reinterpret_cast<int>(dst)+3)&~3) - reinterpret_cast<int>(dst) : w; //IMPORTANT! Should not exceed w.

	mov	eax, DWORD PTR _dst$305908[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	sub	eax, DWORD PTR _dst$305908[ebp]
	cmp	eax, DWORD PTR _w$[ebx]
	jge	SHORT $LN90@DoFillAlph
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, 3
	and	ecx, -4					; fffffffcH
	sub	ecx, DWORD PTR _dst$305908[ebp]
	mov	DWORD PTR tv89[ebp], ecx
	jmp	SHORT $LN91@DoFillAlph
$LN90@DoFillAlph:
	mov	edx, DWORD PTR _w$[ebx]
	mov	DWORD PTR tv89[ebp], edx
$LN91@DoFillAlph:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR _x0$305909[ebp], eax

; 1573 :         const int x00 = ((reinterpret_cast<int>(dst)+15)&~15) - reinterpret_cast<int>(dst) < w ?
; 1574 :             ((reinterpret_cast<int>(dst)+15)&~15) - reinterpret_cast<int>(dst) : w;//IMPORTANT! Should not exceed w.

	mov	eax, DWORD PTR _dst$305908[ebp]
	add	eax, 15					; 0000000fH
	and	eax, -16				; fffffff0H
	sub	eax, DWORD PTR _dst$305908[ebp]
	cmp	eax, DWORD PTR _w$[ebx]
	jge	SHORT $LN92@DoFillAlph
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, 15					; 0000000fH
	and	ecx, -16				; fffffff0H
	sub	ecx, DWORD PTR _dst$305908[ebp]
	mov	DWORD PTR tv129[ebp], ecx
	jmp	SHORT $LN93@DoFillAlph
$LN92@DoFillAlph:
	mov	edx, DWORD PTR _w$[ebx]
	mov	DWORD PTR tv129[ebp], edx
$LN93@DoFillAlph:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR _x00$305914[ebp], eax

; 1575 :         const int x_end00  = ((reinterpret_cast<int>(dst)+w)&~15) - reinterpret_cast<int>(dst);

	mov	eax, DWORD PTR _dst$305908[ebp]
	add	eax, DWORD PTR _w$[ebx]
	and	eax, -16				; fffffff0H
	sub	eax, DWORD PTR _dst$305908[ebp]
	mov	DWORD PTR _x_end00$305919[ebp], eax

; 1576 :         const int x_end0 = ((reinterpret_cast<int>(dst)+w)&~3) - reinterpret_cast<int>(dst);

	mov	eax, DWORD PTR _dst$305908[ebp]
	add	eax, DWORD PTR _w$[ebx]
	and	eax, -4					; fffffffcH
	sub	eax, DWORD PTR _dst$305908[ebp]
	mov	DWORD PTR _x_end0$305922[ebp], eax

; 1577 :         const int x_end = w;

	mov	eax, DWORD PTR _w$[ebx]
	mov	DWORD PTR _x_end$305925[ebp], eax

; 1578 : 
; 1579 :         __m64 color_alpha_64 = _mm_set1_pi16(color_alpha);

	mov	ax, WORD PTR _color_alpha$[ebx]
	movd	mm0, ax
	movq	mm1, mm0
	punpcklwd mm1, mm0
	movq	mm0, mm1
	punpcklwd mm0, mm1
	movq	MMWORD PTR $T305927[ebp], mm0
	movq	mm0, MMWORD PTR $T305927[ebp]
	movq	MMWORD PTR _color_alpha_64$305926[ebp], mm0

; 1580 :         __m128i color_alpha_128 = _mm_set1_epi16(color_alpha);

	movsx	eax, WORD PTR _color_alpha$[ebx]
	movd	xmm0, eax
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movdqa	XMMWORD PTR $T305929[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305929[ebp]
	movdqa	XMMWORD PTR _color_alpha_128$305928[ebp], xmm0

; 1581 : 
; 1582 :         if(pAlphaMask==NULL && pBody!=NULL && pBorder!=NULL)

	cmp	DWORD PTR _pAlphaMask$[ebx], 0
	jne	$LN82@DoFillAlph
	cmp	DWORD PTR _pBody$[ebx], 0
	je	$LN82@DoFillAlph
	cmp	DWORD PTR _pBorder$[ebx], 0
	je	$LN82@DoFillAlph
$LN81@DoFillAlph:

; 1583 :         {
; 1584 :             while(h--)

	mov	eax, DWORD PTR _h$[ebx]
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR _h$[ebx]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebx], ecx
	cmp	DWORD PTR tv144[ebp], 0
	je	$LN80@DoFillAlph

; 1585 :             {
; 1586 :                 int j=0;

	mov	DWORD PTR _j$305934[ebp], 0
	jmp	SHORT $LN79@DoFillAlph
$LN78@DoFillAlph:

; 1587 :                 for( ; j<x0; j++ )

	mov	eax, DWORD PTR _j$305934[ebp]
	add	eax, 1
	mov	DWORD PTR _j$305934[ebp], eax
$LN79@DoFillAlph:
	mov	eax, DWORD PTR _j$305934[ebp]
	cmp	eax, DWORD PTR _x0$305909[ebp]
	jge	SHORT $LN77@DoFillAlph

; 1588 :                 {
; 1589 :                     int temp = pBorder[j]-pBody[j];

	mov	eax, DWORD PTR _pBorder$[ebx]
	add	eax, DWORD PTR _j$305934[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pBody$[ebx]
	add	edx, DWORD PTR _j$305934[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR _temp$305938[ebp], ecx

; 1590 :                     temp = temp<0 ? 0 : temp;

	jns	SHORT $LN94@DoFillAlph
	mov	DWORD PTR tv154[ebp], 0
	jmp	SHORT $LN95@DoFillAlph
$LN94@DoFillAlph:
	mov	eax, DWORD PTR _temp$305938[ebp]
	mov	DWORD PTR tv154[ebp], eax
$LN95@DoFillAlph:
	mov	ecx, DWORD PTR tv154[ebp]
	mov	DWORD PTR _temp$305938[ebp], ecx

; 1591 :                     dst[j] = (temp * color_alpha)>>6;

	mov	eax, DWORD PTR _temp$305938[ebp]
	imul	eax, DWORD PTR _color_alpha$[ebx]
	shr	eax, 6
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR _j$305934[ebp]
	mov	BYTE PTR [ecx], al

; 1592 :                 }

	jmp	SHORT $LN78@DoFillAlph
$LN77@DoFillAlph:

; 1593 :                 for( ;j<x00;j+=4 )

	jmp	SHORT $LN76@DoFillAlph
$LN75@DoFillAlph:
	mov	eax, DWORD PTR _j$305934[ebp]
	add	eax, 4
	mov	DWORD PTR _j$305934[ebp], eax
$LN76@DoFillAlph:
	mov	eax, DWORD PTR _j$305934[ebp]
	cmp	eax, DWORD PTR _x00$305914[ebp]
	jge	$LN74@DoFillAlph

; 1594 :                 {
; 1595 :                     __m64 border = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBorder+j));

	mov	eax, DWORD PTR _pBorder$[ebx]
	add	eax, DWORD PTR _j$305934[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T305944[ebp], mm0
	movq	mm0, MMWORD PTR $T305944[ebp]
	movq	MMWORD PTR _border$305942[ebp], mm0

; 1596 :                     __m64 body = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBody+j));

	mov	eax, DWORD PTR _pBody$[ebx]
	add	eax, DWORD PTR _j$305934[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T305947[ebp], mm0
	movq	mm0, MMWORD PTR $T305947[ebp]
	movq	MMWORD PTR _body$305945[ebp], mm0

; 1597 :                     border = _mm_subs_pu8(border, body);                    

	movq	mm0, MMWORD PTR _body$305945[ebp]
	movq	mm1, MMWORD PTR _border$305942[ebp]
	psubusb	mm1, mm0
	movq	MMWORD PTR $T305948[ebp], mm1
	movq	mm0, MMWORD PTR $T305948[ebp]
	movq	MMWORD PTR _border$305942[ebp], mm0

; 1598 :                     __m64 zero = _mm_setzero_si64();

	pxor	mm0, mm0
	movq	MMWORD PTR $T305950[ebp], mm0
	movq	mm0, MMWORD PTR $T305950[ebp]
	movq	MMWORD PTR _zero$305949[ebp], mm0

; 1599 :                     border = _mm_unpacklo_pi8(border, zero);

	movq	mm0, MMWORD PTR _zero$305949[ebp]
	movq	mm1, MMWORD PTR _border$305942[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T305951[ebp], mm1
	movq	mm0, MMWORD PTR $T305951[ebp]
	movq	MMWORD PTR _border$305942[ebp], mm0

; 1600 :                     border = _mm_mullo_pi16(border, color_alpha_64);

	movq	mm0, MMWORD PTR _color_alpha_64$305926[ebp]
	movq	mm1, MMWORD PTR _border$305942[ebp]
	pmullw	mm1, mm0
	movq	MMWORD PTR $T305952[ebp], mm1
	movq	mm0, MMWORD PTR $T305952[ebp]
	movq	MMWORD PTR _border$305942[ebp], mm0

; 1601 :                     border = _mm_srli_pi16(border, 6);

	movq	mm0, MMWORD PTR _border$305942[ebp]
	psrlw	mm0, 6
	movq	MMWORD PTR $T305953[ebp], mm0
	movq	mm0, MMWORD PTR $T305953[ebp]
	movq	MMWORD PTR _border$305942[ebp], mm0

; 1602 :                     border = _mm_packs_pu16(border,border);

	movq	mm0, MMWORD PTR _border$305942[ebp]
	movq	mm1, MMWORD PTR _border$305942[ebp]
	packuswb mm1, mm0
	movq	MMWORD PTR $T305954[ebp], mm1
	movq	mm0, MMWORD PTR $T305954[ebp]
	movq	MMWORD PTR _border$305942[ebp], mm0

; 1603 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(border);

	movq	mm0, MMWORD PTR _border$305942[ebp]
	movd	eax, mm0
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR _j$305934[ebp]
	mov	DWORD PTR [ecx], eax

; 1604 :                 }

	jmp	$LN75@DoFillAlph
$LN74@DoFillAlph:

; 1605 :                 __m128i zero = _mm_setzero_si128();

	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T305957[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305957[ebp]
	movdqa	XMMWORD PTR _zero$305956[ebp], xmm0
	jmp	SHORT $LN73@DoFillAlph
$LN72@DoFillAlph:

; 1606 :                 for( ;j<x_end00;j+=16)

	mov	eax, DWORD PTR _j$305934[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _j$305934[ebp], eax
$LN73@DoFillAlph:
	mov	eax, DWORD PTR _j$305934[ebp]
	cmp	eax, DWORD PTR _x_end00$305919[ebp]
	jge	$LN71@DoFillAlph

; 1607 :                 {
; 1608 :                     __m128i border = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pBorder+j));

	mov	eax, DWORD PTR _pBorder$[ebx]
	add	eax, DWORD PTR _j$305934[ebp]
	movdqu	xmm0, XMMWORD PTR [eax]
	movdqa	XMMWORD PTR $T305963[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305963[ebp]
	movdqa	XMMWORD PTR _border$305961[ebp], xmm0

; 1609 :                     __m128i body = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pBody+j));

	mov	eax, DWORD PTR _pBody$[ebx]
	add	eax, DWORD PTR _j$305934[ebp]
	movdqu	xmm0, XMMWORD PTR [eax]
	movdqa	XMMWORD PTR $T305966[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305966[ebp]
	movdqa	XMMWORD PTR _body$305964[ebp], xmm0

; 1610 :                     border = _mm_subs_epu8(border,body);

	movdqa	xmm0, XMMWORD PTR _body$305964[ebp]
	movdqa	xmm1, XMMWORD PTR _border$305961[ebp]
	psubusb	xmm1, xmm0
	movdqa	XMMWORD PTR $T305967[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305967[ebp]
	movdqa	XMMWORD PTR _border$305961[ebp], xmm0

; 1611 :                     __m128i srchi = border;   

	movdqa	xmm0, XMMWORD PTR _border$305961[ebp]
	movdqa	XMMWORD PTR _srchi$305968[ebp], xmm0

; 1612 :                     border = _mm_unpacklo_epi8(border, zero);

	movdqa	xmm0, XMMWORD PTR _zero$305956[ebp]
	movdqa	xmm1, XMMWORD PTR _border$305961[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T305969[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305969[ebp]
	movdqa	XMMWORD PTR _border$305961[ebp], xmm0

; 1613 :                     srchi = _mm_unpackhi_epi8(srchi, zero);

	movdqa	xmm0, XMMWORD PTR _zero$305956[ebp]
	movdqa	xmm1, XMMWORD PTR _srchi$305968[ebp]
	punpckhbw xmm1, xmm0
	movdqa	XMMWORD PTR $T305970[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305970[ebp]
	movdqa	XMMWORD PTR _srchi$305968[ebp], xmm0

; 1614 :                     border = _mm_mullo_epi16(border, color_alpha_128);

	movdqa	xmm0, XMMWORD PTR _color_alpha_128$305928[ebp]
	movdqa	xmm1, XMMWORD PTR _border$305961[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305971[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305971[ebp]
	movdqa	XMMWORD PTR _border$305961[ebp], xmm0

; 1615 :                     srchi = _mm_mullo_epi16(srchi, color_alpha_128);

	movdqa	xmm0, XMMWORD PTR _color_alpha_128$305928[ebp]
	movdqa	xmm1, XMMWORD PTR _srchi$305968[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T305972[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305972[ebp]
	movdqa	XMMWORD PTR _srchi$305968[ebp], xmm0

; 1616 :                     border = _mm_srli_epi16(border, 6);

	movdqa	xmm0, XMMWORD PTR _border$305961[ebp]
	psrlw	xmm0, 6
	movdqa	XMMWORD PTR $T305973[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305973[ebp]
	movdqa	XMMWORD PTR _border$305961[ebp], xmm0

; 1617 :                     srchi = _mm_srli_epi16(srchi, 6);

	movdqa	xmm0, XMMWORD PTR _srchi$305968[ebp]
	psrlw	xmm0, 6
	movdqa	XMMWORD PTR $T305974[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305974[ebp]
	movdqa	XMMWORD PTR _srchi$305968[ebp], xmm0

; 1618 :                     border = _mm_packus_epi16(border, srchi);

	movdqa	xmm0, XMMWORD PTR _srchi$305968[ebp]
	movdqa	xmm1, XMMWORD PTR _border$305961[ebp]
	packuswb xmm1, xmm0
	movdqa	XMMWORD PTR $T305975[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T305975[ebp]
	movdqa	XMMWORD PTR _border$305961[ebp], xmm0

; 1619 :                     _mm_storeu_si128(reinterpret_cast<__m128i*>(dst+j), border);

	movdqa	xmm0, XMMWORD PTR _border$305961[ebp]
	mov	eax, DWORD PTR _dst$305908[ebp]
	add	eax, DWORD PTR _j$305934[ebp]
	movdqu	XMMWORD PTR [eax], xmm0

; 1620 :                 }

	jmp	$LN72@DoFillAlph
$LN71@DoFillAlph:

; 1621 :                 for( ;j<x_end0;j+=4)

	jmp	SHORT $LN70@DoFillAlph
$LN69@DoFillAlph:
	mov	eax, DWORD PTR _j$305934[ebp]
	add	eax, 4
	mov	DWORD PTR _j$305934[ebp], eax
$LN70@DoFillAlph:
	mov	eax, DWORD PTR _j$305934[ebp]
	cmp	eax, DWORD PTR _x_end0$305922[ebp]
	jge	$LN68@DoFillAlph

; 1622 :                 {
; 1623 :                     __m64 border = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBorder+j));

	mov	eax, DWORD PTR _pBorder$[ebx]
	add	eax, DWORD PTR _j$305934[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T305982[ebp], mm0
	movq	mm0, MMWORD PTR $T305982[ebp]
	movq	MMWORD PTR _border$305980[ebp], mm0

; 1624 :                     __m64 body = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBody+j));

	mov	eax, DWORD PTR _pBody$[ebx]
	add	eax, DWORD PTR _j$305934[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T305985[ebp], mm0
	movq	mm0, MMWORD PTR $T305985[ebp]
	movq	MMWORD PTR _body$305983[ebp], mm0

; 1625 :                     border = _mm_subs_pu8(border, body);                    

	movq	mm0, MMWORD PTR _body$305983[ebp]
	movq	mm1, MMWORD PTR _border$305980[ebp]
	psubusb	mm1, mm0
	movq	MMWORD PTR $T305986[ebp], mm1
	movq	mm0, MMWORD PTR $T305986[ebp]
	movq	MMWORD PTR _border$305980[ebp], mm0

; 1626 :                     __m64 zero = _mm_setzero_si64();

	pxor	mm0, mm0
	movq	MMWORD PTR $T305988[ebp], mm0
	movq	mm0, MMWORD PTR $T305988[ebp]
	movq	MMWORD PTR _zero$305987[ebp], mm0

; 1627 :                     border = _mm_unpacklo_pi8(border, zero);

	movq	mm0, MMWORD PTR _zero$305987[ebp]
	movq	mm1, MMWORD PTR _border$305980[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T305989[ebp], mm1
	movq	mm0, MMWORD PTR $T305989[ebp]
	movq	MMWORD PTR _border$305980[ebp], mm0

; 1628 :                     border = _mm_mullo_pi16(border, color_alpha_64);

	movq	mm0, MMWORD PTR _color_alpha_64$305926[ebp]
	movq	mm1, MMWORD PTR _border$305980[ebp]
	pmullw	mm1, mm0
	movq	MMWORD PTR $T305990[ebp], mm1
	movq	mm0, MMWORD PTR $T305990[ebp]
	movq	MMWORD PTR _border$305980[ebp], mm0

; 1629 :                     border = _mm_srli_pi16(border, 6);

	movq	mm0, MMWORD PTR _border$305980[ebp]
	psrlw	mm0, 6
	movq	MMWORD PTR $T305991[ebp], mm0
	movq	mm0, MMWORD PTR $T305991[ebp]
	movq	MMWORD PTR _border$305980[ebp], mm0

; 1630 :                     border = _mm_packs_pu16(border,border);

	movq	mm0, MMWORD PTR _border$305980[ebp]
	movq	mm1, MMWORD PTR _border$305980[ebp]
	packuswb mm1, mm0
	movq	MMWORD PTR $T305992[ebp], mm1
	movq	mm0, MMWORD PTR $T305992[ebp]
	movq	MMWORD PTR _border$305980[ebp], mm0

; 1631 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(border);

	movq	mm0, MMWORD PTR _border$305980[ebp]
	movd	eax, mm0
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR _j$305934[ebp]
	mov	DWORD PTR [ecx], eax

; 1632 :                 }

	jmp	$LN69@DoFillAlph
$LN68@DoFillAlph:

; 1633 :                 for( ;j<x_end;j++)

	jmp	SHORT $LN67@DoFillAlph
$LN66@DoFillAlph:
	mov	eax, DWORD PTR _j$305934[ebp]
	add	eax, 1
	mov	DWORD PTR _j$305934[ebp], eax
$LN67@DoFillAlph:
	mov	eax, DWORD PTR _j$305934[ebp]
	cmp	eax, DWORD PTR _x_end$305925[ebp]
	jge	SHORT $LN65@DoFillAlph

; 1634 :                 {
; 1635 :                     int temp = pBorder[j]-pBody[j];

	mov	eax, DWORD PTR _pBorder$[ebx]
	add	eax, DWORD PTR _j$305934[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pBody$[ebx]
	add	edx, DWORD PTR _j$305934[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR _temp$305997[ebp], ecx

; 1636 :                     temp = temp<0 ? 0 : temp;

	jns	SHORT $LN96@DoFillAlph
	mov	DWORD PTR tv289[ebp], 0
	jmp	SHORT $LN97@DoFillAlph
$LN96@DoFillAlph:
	mov	eax, DWORD PTR _temp$305997[ebp]
	mov	DWORD PTR tv289[ebp], eax
$LN97@DoFillAlph:
	mov	ecx, DWORD PTR tv289[ebp]
	mov	DWORD PTR _temp$305997[ebp], ecx

; 1637 :                     dst[j] = (temp * color_alpha)>>6;

	mov	eax, DWORD PTR _temp$305997[ebp]
	imul	eax, DWORD PTR _color_alpha$[ebx]
	shr	eax, 6
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR _j$305934[ebp]
	mov	BYTE PTR [ecx], al

; 1638 :                 }

	jmp	SHORT $LN66@DoFillAlph
$LN65@DoFillAlph:

; 1639 :                 pBody += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pBody$[ebx]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pBody$[ebx], ecx

; 1640 :                 pBorder += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pBorder$[ebx]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pBorder$[ebx], ecx

; 1641 :                 //pAlphaMask += pitch;
; 1642 :                 dst += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$305908[ebp], ecx

; 1643 :             }

	jmp	$LN81@DoFillAlph
$LN80@DoFillAlph:

; 1644 :         }
; 1645 :         else if( ((pBody==NULL) + (pBorder==NULL))==1 && pAlphaMask==NULL)

	jmp	$LN64@DoFillAlph
$LN82@DoFillAlph:
	xor	eax, eax
	cmp	DWORD PTR _pBody$[ebx], 0
	sete	al
	xor	ecx, ecx
	cmp	DWORD PTR _pBorder$[ebx], 0
	sete	cl
	add	eax, ecx
	cmp	eax, 1
	jne	$LN63@DoFillAlph
	cmp	DWORD PTR _pAlphaMask$[ebx], 0
	jne	$LN63@DoFillAlph

; 1646 :         {
; 1647 :             const BYTE* src1 = pBody!=NULL ? pBody : pBorder;

	cmp	DWORD PTR _pBody$[ebx], 0
	je	SHORT $LN98@DoFillAlph
	mov	eax, DWORD PTR _pBody$[ebx]
	mov	DWORD PTR tv308[ebp], eax
	jmp	SHORT $LN99@DoFillAlph
$LN98@DoFillAlph:
	mov	ecx, DWORD PTR _pBorder$[ebx]
	mov	DWORD PTR tv308[ebp], ecx
$LN99@DoFillAlph:
	mov	edx, DWORD PTR tv308[ebp]
	mov	DWORD PTR _src1$306000[ebp], edx
$LN62@DoFillAlph:

; 1648 :             while(h--)

	mov	eax, DWORD PTR _h$[ebx]
	mov	DWORD PTR tv310[ebp], eax
	mov	ecx, DWORD PTR _h$[ebx]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebx], ecx
	cmp	DWORD PTR tv310[ebp], 0
	je	$LN61@DoFillAlph

; 1649 :             {
; 1650 :                 int j=0;

	mov	DWORD PTR _j$306004[ebp], 0
	jmp	SHORT $LN60@DoFillAlph
$LN59@DoFillAlph:

; 1651 :                 for( ; j<x0; j++ )

	mov	eax, DWORD PTR _j$306004[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306004[ebp], eax
$LN60@DoFillAlph:
	mov	eax, DWORD PTR _j$306004[ebp]
	cmp	eax, DWORD PTR _x0$305909[ebp]
	jge	SHORT $LN58@DoFillAlph

; 1652 :                 {
; 1653 :                     dst[j] = (src1[j] * color_alpha)>>6;

	mov	eax, DWORD PTR _src1$306000[ebp]
	add	eax, DWORD PTR _j$306004[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _color_alpha$[ebx]
	shr	ecx, 6
	mov	edx, DWORD PTR _dst$305908[ebp]
	add	edx, DWORD PTR _j$306004[ebp]
	mov	BYTE PTR [edx], cl

; 1654 :                 }

	jmp	SHORT $LN59@DoFillAlph
$LN58@DoFillAlph:

; 1655 :                 for( ;j<x00;j+=4 )

	jmp	SHORT $LN57@DoFillAlph
$LN56@DoFillAlph:
	mov	eax, DWORD PTR _j$306004[ebp]
	add	eax, 4
	mov	DWORD PTR _j$306004[ebp], eax
$LN57@DoFillAlph:
	mov	eax, DWORD PTR _j$306004[ebp]
	cmp	eax, DWORD PTR _x00$305914[ebp]
	jge	$LN55@DoFillAlph

; 1656 :                 {
; 1657 :                     __m64 src = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(src1+j));

	mov	eax, DWORD PTR _src1$306000[ebp]
	add	eax, DWORD PTR _j$306004[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306013[ebp], mm0
	movq	mm0, MMWORD PTR $T306013[ebp]
	movq	MMWORD PTR _src$306011[ebp], mm0

; 1658 :                     __m64 zero = _mm_setzero_si64();

	pxor	mm0, mm0
	movq	MMWORD PTR $T306015[ebp], mm0
	movq	mm0, MMWORD PTR $T306015[ebp]
	movq	MMWORD PTR _zero$306014[ebp], mm0

; 1659 :                     src = _mm_unpacklo_pi8(src, zero);

	movq	mm0, MMWORD PTR _zero$306014[ebp]
	movq	mm1, MMWORD PTR _src$306011[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T306016[ebp], mm1
	movq	mm0, MMWORD PTR $T306016[ebp]
	movq	MMWORD PTR _src$306011[ebp], mm0

; 1660 :                     src = _mm_mullo_pi16(src, color_alpha_64);

	movq	mm0, MMWORD PTR _color_alpha_64$305926[ebp]
	movq	mm1, MMWORD PTR _src$306011[ebp]
	pmullw	mm1, mm0
	movq	MMWORD PTR $T306017[ebp], mm1
	movq	mm0, MMWORD PTR $T306017[ebp]
	movq	MMWORD PTR _src$306011[ebp], mm0

; 1661 :                     src = _mm_srli_pi16(src, 6);

	movq	mm0, MMWORD PTR _src$306011[ebp]
	psrlw	mm0, 6
	movq	MMWORD PTR $T306018[ebp], mm0
	movq	mm0, MMWORD PTR $T306018[ebp]
	movq	MMWORD PTR _src$306011[ebp], mm0

; 1662 :                     src = _mm_packs_pu16(src,src);

	movq	mm0, MMWORD PTR _src$306011[ebp]
	movq	mm1, MMWORD PTR _src$306011[ebp]
	packuswb mm1, mm0
	movq	MMWORD PTR $T306019[ebp], mm1
	movq	mm0, MMWORD PTR $T306019[ebp]
	movq	MMWORD PTR _src$306011[ebp], mm0

; 1663 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(src);

	movq	mm0, MMWORD PTR _src$306011[ebp]
	movd	eax, mm0
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR _j$306004[ebp]
	mov	DWORD PTR [ecx], eax

; 1664 :                 }

	jmp	$LN56@DoFillAlph
$LN55@DoFillAlph:

; 1665 :                 __m128i zero = _mm_setzero_si128();

	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T306022[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306022[ebp]
	movdqa	XMMWORD PTR _zero$306021[ebp], xmm0
	jmp	SHORT $LN54@DoFillAlph
$LN53@DoFillAlph:

; 1666 :                 for( ;j<x_end00;j+=16)

	mov	eax, DWORD PTR _j$306004[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _j$306004[ebp], eax
$LN54@DoFillAlph:
	mov	eax, DWORD PTR _j$306004[ebp]
	cmp	eax, DWORD PTR _x_end00$305919[ebp]
	jge	$LN52@DoFillAlph

; 1667 :                 {
; 1668 :                     __m128i src = _mm_loadu_si128(reinterpret_cast<const __m128i*>(src1+j));

	mov	eax, DWORD PTR _src1$306000[ebp]
	add	eax, DWORD PTR _j$306004[ebp]
	movdqu	xmm0, XMMWORD PTR [eax]
	movdqa	XMMWORD PTR $T306028[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306028[ebp]
	movdqa	XMMWORD PTR _src$306026[ebp], xmm0

; 1669 :                     __m128i srchi = src;

	movdqa	xmm0, XMMWORD PTR _src$306026[ebp]
	movdqa	XMMWORD PTR _srchi$306029[ebp], xmm0

; 1670 :                     src = _mm_unpacklo_epi8(src, zero);

	movdqa	xmm0, XMMWORD PTR _zero$306021[ebp]
	movdqa	xmm1, XMMWORD PTR _src$306026[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T306030[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306030[ebp]
	movdqa	XMMWORD PTR _src$306026[ebp], xmm0

; 1671 :                     srchi = _mm_unpackhi_epi8(srchi, zero);

	movdqa	xmm0, XMMWORD PTR _zero$306021[ebp]
	movdqa	xmm1, XMMWORD PTR _srchi$306029[ebp]
	punpckhbw xmm1, xmm0
	movdqa	XMMWORD PTR $T306031[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306031[ebp]
	movdqa	XMMWORD PTR _srchi$306029[ebp], xmm0

; 1672 :                     src = _mm_mullo_epi16(src, color_alpha_128);

	movdqa	xmm0, XMMWORD PTR _color_alpha_128$305928[ebp]
	movdqa	xmm1, XMMWORD PTR _src$306026[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T306032[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306032[ebp]
	movdqa	XMMWORD PTR _src$306026[ebp], xmm0

; 1673 :                     srchi = _mm_mullo_epi16(srchi, color_alpha_128);

	movdqa	xmm0, XMMWORD PTR _color_alpha_128$305928[ebp]
	movdqa	xmm1, XMMWORD PTR _srchi$306029[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T306033[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306033[ebp]
	movdqa	XMMWORD PTR _srchi$306029[ebp], xmm0

; 1674 :                     src = _mm_srli_epi16(src, 6);

	movdqa	xmm0, XMMWORD PTR _src$306026[ebp]
	psrlw	xmm0, 6
	movdqa	XMMWORD PTR $T306034[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306034[ebp]
	movdqa	XMMWORD PTR _src$306026[ebp], xmm0

; 1675 :                     srchi = _mm_srli_epi16(srchi, 6);

	movdqa	xmm0, XMMWORD PTR _srchi$306029[ebp]
	psrlw	xmm0, 6
	movdqa	XMMWORD PTR $T306035[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306035[ebp]
	movdqa	XMMWORD PTR _srchi$306029[ebp], xmm0

; 1676 :                     src = _mm_packus_epi16(src, srchi);

	movdqa	xmm0, XMMWORD PTR _srchi$306029[ebp]
	movdqa	xmm1, XMMWORD PTR _src$306026[ebp]
	packuswb xmm1, xmm0
	movdqa	XMMWORD PTR $T306036[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306036[ebp]
	movdqa	XMMWORD PTR _src$306026[ebp], xmm0

; 1677 :                     _mm_storeu_si128(reinterpret_cast<__m128i*>(dst+j), src);

	movdqa	xmm0, XMMWORD PTR _src$306026[ebp]
	mov	eax, DWORD PTR _dst$305908[ebp]
	add	eax, DWORD PTR _j$306004[ebp]
	movdqu	XMMWORD PTR [eax], xmm0

; 1678 :                 }

	jmp	$LN53@DoFillAlph
$LN52@DoFillAlph:

; 1679 :                 for( ;j<x_end0;j+=4)

	jmp	SHORT $LN51@DoFillAlph
$LN50@DoFillAlph:
	mov	eax, DWORD PTR _j$306004[ebp]
	add	eax, 4
	mov	DWORD PTR _j$306004[ebp], eax
$LN51@DoFillAlph:
	mov	eax, DWORD PTR _j$306004[ebp]
	cmp	eax, DWORD PTR _x_end0$305922[ebp]
	jge	$LN49@DoFillAlph

; 1680 :                 {
; 1681 :                     __m64 src = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(src1+j));

	mov	eax, DWORD PTR _src1$306000[ebp]
	add	eax, DWORD PTR _j$306004[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306043[ebp], mm0
	movq	mm0, MMWORD PTR $T306043[ebp]
	movq	MMWORD PTR _src$306041[ebp], mm0

; 1682 :                     __m64 zero = _mm_setzero_si64();

	pxor	mm0, mm0
	movq	MMWORD PTR $T306045[ebp], mm0
	movq	mm0, MMWORD PTR $T306045[ebp]
	movq	MMWORD PTR _zero$306044[ebp], mm0

; 1683 :                     src = _mm_unpacklo_pi8(src, zero);

	movq	mm0, MMWORD PTR _zero$306044[ebp]
	movq	mm1, MMWORD PTR _src$306041[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T306046[ebp], mm1
	movq	mm0, MMWORD PTR $T306046[ebp]
	movq	MMWORD PTR _src$306041[ebp], mm0

; 1684 :                     src = _mm_mullo_pi16(src, color_alpha_64);

	movq	mm0, MMWORD PTR _color_alpha_64$305926[ebp]
	movq	mm1, MMWORD PTR _src$306041[ebp]
	pmullw	mm1, mm0
	movq	MMWORD PTR $T306047[ebp], mm1
	movq	mm0, MMWORD PTR $T306047[ebp]
	movq	MMWORD PTR _src$306041[ebp], mm0

; 1685 :                     src = _mm_srli_pi16(src, 6);

	movq	mm0, MMWORD PTR _src$306041[ebp]
	psrlw	mm0, 6
	movq	MMWORD PTR $T306048[ebp], mm0
	movq	mm0, MMWORD PTR $T306048[ebp]
	movq	MMWORD PTR _src$306041[ebp], mm0

; 1686 :                     src = _mm_packs_pu16(src,src);

	movq	mm0, MMWORD PTR _src$306041[ebp]
	movq	mm1, MMWORD PTR _src$306041[ebp]
	packuswb mm1, mm0
	movq	MMWORD PTR $T306049[ebp], mm1
	movq	mm0, MMWORD PTR $T306049[ebp]
	movq	MMWORD PTR _src$306041[ebp], mm0

; 1687 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(src);

	movq	mm0, MMWORD PTR _src$306041[ebp]
	movd	eax, mm0
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR _j$306004[ebp]
	mov	DWORD PTR [ecx], eax

; 1688 :                 }

	jmp	$LN50@DoFillAlph
$LN49@DoFillAlph:

; 1689 :                 for( ;j<x_end;j++)

	jmp	SHORT $LN48@DoFillAlph
$LN47@DoFillAlph:
	mov	eax, DWORD PTR _j$306004[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306004[ebp], eax
$LN48@DoFillAlph:
	mov	eax, DWORD PTR _j$306004[ebp]
	cmp	eax, DWORD PTR _x_end$305925[ebp]
	jge	SHORT $LN46@DoFillAlph

; 1690 :                 {
; 1691 :                     dst[j] = (src1[j] * color_alpha)>>6;

	mov	eax, DWORD PTR _src1$306000[ebp]
	add	eax, DWORD PTR _j$306004[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _color_alpha$[ebx]
	shr	ecx, 6
	mov	edx, DWORD PTR _dst$305908[ebp]
	add	edx, DWORD PTR _j$306004[ebp]
	mov	BYTE PTR [edx], cl

; 1692 :                 }

	jmp	SHORT $LN47@DoFillAlph
$LN46@DoFillAlph:

; 1693 :                 src1 += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src1$306000[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _src1$306000[ebp], ecx

; 1694 :                 //pAlphaMask += pitch;
; 1695 :                 dst += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$305908[ebp], ecx

; 1696 :             }

	jmp	$LN62@DoFillAlph
$LN61@DoFillAlph:

; 1697 :         }
; 1698 :         else if( ((pBody==NULL) + (pBorder==NULL))==1 && pAlphaMask!=NULL)

	jmp	$LN64@DoFillAlph
$LN63@DoFillAlph:
	xor	eax, eax
	cmp	DWORD PTR _pBody$[ebx], 0
	sete	al
	xor	ecx, ecx
	cmp	DWORD PTR _pBorder$[ebx], 0
	sete	cl
	add	eax, ecx
	cmp	eax, 1
	jne	$LN44@DoFillAlph
	cmp	DWORD PTR _pAlphaMask$[ebx], 0
	je	$LN44@DoFillAlph

; 1699 :         {
; 1700 :             const BYTE* src1 = pBody!=NULL ? pBody : pBorder;

	cmp	DWORD PTR _pBody$[ebx], 0
	je	SHORT $LN100@DoFillAlph
	mov	eax, DWORD PTR _pBody$[ebx]
	mov	DWORD PTR tv444[ebp], eax
	jmp	SHORT $LN101@DoFillAlph
$LN100@DoFillAlph:
	mov	ecx, DWORD PTR _pBorder$[ebx]
	mov	DWORD PTR tv444[ebp], ecx
$LN101@DoFillAlph:
	mov	edx, DWORD PTR tv444[ebp]
	mov	DWORD PTR _src1$306056[ebp], edx
$LN43@DoFillAlph:

; 1701 :             while(h--)

	mov	eax, DWORD PTR _h$[ebx]
	mov	DWORD PTR tv446[ebp], eax
	mov	ecx, DWORD PTR _h$[ebx]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebx], ecx
	cmp	DWORD PTR tv446[ebp], 0
	je	$LN42@DoFillAlph

; 1702 :             {
; 1703 :                 int j=0;

	mov	DWORD PTR _j$306060[ebp], 0
	jmp	SHORT $LN41@DoFillAlph
$LN40@DoFillAlph:

; 1704 :                 for( ; j<x0; j++ )

	mov	eax, DWORD PTR _j$306060[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306060[ebp], eax
$LN41@DoFillAlph:
	mov	eax, DWORD PTR _j$306060[ebp]
	cmp	eax, DWORD PTR _x0$305909[ebp]
	jge	SHORT $LN39@DoFillAlph

; 1705 :                 {
; 1706 :                     dst[j] = (src1[j] * pAlphaMask[j] * color_alpha)>>12;

	mov	eax, DWORD PTR _src1$306056[ebp]
	add	eax, DWORD PTR _j$306060[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pAlphaMask$[ebx]
	add	edx, DWORD PTR _j$306060[ebp]
	movzx	eax, BYTE PTR [edx]
	imul	ecx, eax
	imul	ecx, DWORD PTR _color_alpha$[ebx]
	shr	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _dst$305908[ebp]
	add	edx, DWORD PTR _j$306060[ebp]
	mov	BYTE PTR [edx], cl

; 1707 :                 }

	jmp	SHORT $LN40@DoFillAlph
$LN39@DoFillAlph:

; 1708 :                 for( ;j<x00;j+=4 )

	jmp	SHORT $LN38@DoFillAlph
$LN37@DoFillAlph:
	mov	eax, DWORD PTR _j$306060[ebp]
	add	eax, 4
	mov	DWORD PTR _j$306060[ebp], eax
$LN38@DoFillAlph:
	mov	eax, DWORD PTR _j$306060[ebp]
	cmp	eax, DWORD PTR _x00$305914[ebp]
	jge	$LN36@DoFillAlph

; 1709 :                 {
; 1710 :                     __m64 src = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(src1+j));

	mov	eax, DWORD PTR _src1$306056[ebp]
	add	eax, DWORD PTR _j$306060[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306069[ebp], mm0
	movq	mm0, MMWORD PTR $T306069[ebp]
	movq	MMWORD PTR _src$306067[ebp], mm0

; 1711 :                     __m64 mask = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pAlphaMask+j));

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	add	eax, DWORD PTR _j$306060[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306072[ebp], mm0
	movq	mm0, MMWORD PTR $T306072[ebp]
	movq	MMWORD PTR _mask$306070[ebp], mm0

; 1712 :                     __m64 zero = _mm_setzero_si64();

	pxor	mm0, mm0
	movq	MMWORD PTR $T306074[ebp], mm0
	movq	mm0, MMWORD PTR $T306074[ebp]
	movq	MMWORD PTR _zero$306073[ebp], mm0

; 1713 :                     src = _mm_unpacklo_pi8(src, zero);

	movq	mm0, MMWORD PTR _zero$306073[ebp]
	movq	mm1, MMWORD PTR _src$306067[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T306075[ebp], mm1
	movq	mm0, MMWORD PTR $T306075[ebp]
	movq	MMWORD PTR _src$306067[ebp], mm0

; 1714 :                     src = _mm_mullo_pi16(src, color_alpha_64);

	movq	mm0, MMWORD PTR _color_alpha_64$305926[ebp]
	movq	mm1, MMWORD PTR _src$306067[ebp]
	pmullw	mm1, mm0
	movq	MMWORD PTR $T306076[ebp], mm1
	movq	mm0, MMWORD PTR $T306076[ebp]
	movq	MMWORD PTR _src$306067[ebp], mm0

; 1715 :                     mask = _mm_unpacklo_pi8(zero, mask); //important!

	movq	mm0, MMWORD PTR _mask$306070[ebp]
	movq	mm1, MMWORD PTR _zero$306073[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T306077[ebp], mm1
	movq	mm0, MMWORD PTR $T306077[ebp]
	movq	MMWORD PTR _mask$306070[ebp], mm0

; 1716 :                     src = _mm_mulhi_pi16(src, mask); //important!

	movq	mm0, MMWORD PTR _mask$306070[ebp]
	movq	mm1, MMWORD PTR _src$306067[ebp]
	pmulhw	mm1, mm0
	movq	MMWORD PTR $T306078[ebp], mm1
	movq	mm0, MMWORD PTR $T306078[ebp]
	movq	MMWORD PTR _src$306067[ebp], mm0

; 1717 :                     src = _mm_srli_pi16(src, 12+8-16); //important!

	movq	mm0, MMWORD PTR _src$306067[ebp]
	psrlw	mm0, 4
	movq	MMWORD PTR $T306079[ebp], mm0
	movq	mm0, MMWORD PTR $T306079[ebp]
	movq	MMWORD PTR _src$306067[ebp], mm0

; 1718 :                     src = _mm_packs_pu16(src,src);

	movq	mm0, MMWORD PTR _src$306067[ebp]
	movq	mm1, MMWORD PTR _src$306067[ebp]
	packuswb mm1, mm0
	movq	MMWORD PTR $T306080[ebp], mm1
	movq	mm0, MMWORD PTR $T306080[ebp]
	movq	MMWORD PTR _src$306067[ebp], mm0

; 1719 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(src);

	movq	mm0, MMWORD PTR _src$306067[ebp]
	movd	eax, mm0
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR _j$306060[ebp]
	mov	DWORD PTR [ecx], eax

; 1720 :                 }

	jmp	$LN37@DoFillAlph
$LN36@DoFillAlph:

; 1721 :                 __m128i zero = _mm_setzero_si128();

	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T306083[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306083[ebp]
	movdqa	XMMWORD PTR _zero$306082[ebp], xmm0
	jmp	SHORT $LN35@DoFillAlph
$LN34@DoFillAlph:

; 1722 :                 for( ;j<x_end00;j+=16)

	mov	eax, DWORD PTR _j$306060[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _j$306060[ebp], eax
$LN35@DoFillAlph:
	mov	eax, DWORD PTR _j$306060[ebp]
	cmp	eax, DWORD PTR _x_end00$305919[ebp]
	jge	$LN33@DoFillAlph

; 1723 :                 {
; 1724 :                     __m128i src = _mm_loadu_si128(reinterpret_cast<const __m128i*>(src1+j));

	mov	eax, DWORD PTR _src1$306056[ebp]
	add	eax, DWORD PTR _j$306060[ebp]
	movdqu	xmm0, XMMWORD PTR [eax]
	movdqa	XMMWORD PTR $T306089[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306089[ebp]
	movdqa	XMMWORD PTR _src$306087[ebp], xmm0

; 1725 :                     __m128i mask = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pAlphaMask+j));

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	add	eax, DWORD PTR _j$306060[ebp]
	movdqu	xmm0, XMMWORD PTR [eax]
	movdqa	XMMWORD PTR $T306092[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306092[ebp]
	movdqa	XMMWORD PTR _mask$306090[ebp], xmm0

; 1726 :                     __m128i srchi = src;

	movdqa	xmm0, XMMWORD PTR _src$306087[ebp]
	movdqa	XMMWORD PTR _srchi$306093[ebp], xmm0

; 1727 :                     __m128i maskhi = mask;                 

	movdqa	xmm0, XMMWORD PTR _mask$306090[ebp]
	movdqa	XMMWORD PTR _maskhi$306094[ebp], xmm0

; 1728 :                     src = _mm_unpacklo_epi8(src, zero);

	movdqa	xmm0, XMMWORD PTR _zero$306082[ebp]
	movdqa	xmm1, XMMWORD PTR _src$306087[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T306095[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306095[ebp]
	movdqa	XMMWORD PTR _src$306087[ebp], xmm0

; 1729 :                     srchi = _mm_unpackhi_epi8(srchi, zero);

	movdqa	xmm0, XMMWORD PTR _zero$306082[ebp]
	movdqa	xmm1, XMMWORD PTR _srchi$306093[ebp]
	punpckhbw xmm1, xmm0
	movdqa	XMMWORD PTR $T306096[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306096[ebp]
	movdqa	XMMWORD PTR _srchi$306093[ebp], xmm0

; 1730 :                     mask = _mm_unpacklo_epi8(zero, mask); //important!

	movdqa	xmm0, XMMWORD PTR _mask$306090[ebp]
	movdqa	xmm1, XMMWORD PTR _zero$306082[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T306097[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306097[ebp]
	movdqa	XMMWORD PTR _mask$306090[ebp], xmm0

; 1731 :                     maskhi = _mm_unpackhi_epi8(zero, maskhi);

	movdqa	xmm0, XMMWORD PTR _maskhi$306094[ebp]
	movdqa	xmm1, XMMWORD PTR _zero$306082[ebp]
	punpckhbw xmm1, xmm0
	movdqa	XMMWORD PTR $T306098[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306098[ebp]
	movdqa	XMMWORD PTR _maskhi$306094[ebp], xmm0

; 1732 :                     src = _mm_mullo_epi16(src, color_alpha_128);

	movdqa	xmm0, XMMWORD PTR _color_alpha_128$305928[ebp]
	movdqa	xmm1, XMMWORD PTR _src$306087[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T306099[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306099[ebp]
	movdqa	XMMWORD PTR _src$306087[ebp], xmm0

; 1733 :                     srchi = _mm_mullo_epi16(srchi, color_alpha_128);

	movdqa	xmm0, XMMWORD PTR _color_alpha_128$305928[ebp]
	movdqa	xmm1, XMMWORD PTR _srchi$306093[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T306100[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306100[ebp]
	movdqa	XMMWORD PTR _srchi$306093[ebp], xmm0

; 1734 :                     src = _mm_mulhi_epu16(src, mask); //important!

	movdqa	xmm0, XMMWORD PTR _mask$306090[ebp]
	movdqa	xmm1, XMMWORD PTR _src$306087[ebp]
	pmulhuw	xmm1, xmm0
	movdqa	XMMWORD PTR $T306101[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306101[ebp]
	movdqa	XMMWORD PTR _src$306087[ebp], xmm0

; 1735 :                     srchi = _mm_mulhi_epu16(srchi, maskhi);

	movdqa	xmm0, XMMWORD PTR _maskhi$306094[ebp]
	movdqa	xmm1, XMMWORD PTR _srchi$306093[ebp]
	pmulhuw	xmm1, xmm0
	movdqa	XMMWORD PTR $T306102[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306102[ebp]
	movdqa	XMMWORD PTR _srchi$306093[ebp], xmm0

; 1736 :                     src = _mm_srli_epi16(src, 12+8-16); //important!

	movdqa	xmm0, XMMWORD PTR _src$306087[ebp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR $T306103[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306103[ebp]
	movdqa	XMMWORD PTR _src$306087[ebp], xmm0

; 1737 :                     srchi = _mm_srli_epi16(srchi, 12+8-16);

	movdqa	xmm0, XMMWORD PTR _srchi$306093[ebp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR $T306104[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306104[ebp]
	movdqa	XMMWORD PTR _srchi$306093[ebp], xmm0

; 1738 :                     src = _mm_packus_epi16(src, srchi);

	movdqa	xmm0, XMMWORD PTR _srchi$306093[ebp]
	movdqa	xmm1, XMMWORD PTR _src$306087[ebp]
	packuswb xmm1, xmm0
	movdqa	XMMWORD PTR $T306105[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306105[ebp]
	movdqa	XMMWORD PTR _src$306087[ebp], xmm0

; 1739 :                     _mm_storeu_si128(reinterpret_cast<__m128i*>(dst+j), src);

	movdqa	xmm0, XMMWORD PTR _src$306087[ebp]
	mov	eax, DWORD PTR _dst$305908[ebp]
	add	eax, DWORD PTR _j$306060[ebp]
	movdqu	XMMWORD PTR [eax], xmm0

; 1740 :                 }

	jmp	$LN34@DoFillAlph
$LN33@DoFillAlph:

; 1741 :                 for( ;j<x_end0;j+=4)

	jmp	SHORT $LN32@DoFillAlph
$LN31@DoFillAlph:
	mov	eax, DWORD PTR _j$306060[ebp]
	add	eax, 4
	mov	DWORD PTR _j$306060[ebp], eax
$LN32@DoFillAlph:
	mov	eax, DWORD PTR _j$306060[ebp]
	cmp	eax, DWORD PTR _x_end0$305922[ebp]
	jge	$LN30@DoFillAlph

; 1742 :                 {
; 1743 :                     __m64 src = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(src1+j));

	mov	eax, DWORD PTR _src1$306056[ebp]
	add	eax, DWORD PTR _j$306060[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306112[ebp], mm0
	movq	mm0, MMWORD PTR $T306112[ebp]
	movq	MMWORD PTR _src$306110[ebp], mm0

; 1744 :                     __m64 mask = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pAlphaMask+j));

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	add	eax, DWORD PTR _j$306060[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306115[ebp], mm0
	movq	mm0, MMWORD PTR $T306115[ebp]
	movq	MMWORD PTR _mask$306113[ebp], mm0

; 1745 :                     __m64 zero = _mm_setzero_si64();

	pxor	mm0, mm0
	movq	MMWORD PTR $T306117[ebp], mm0
	movq	mm0, MMWORD PTR $T306117[ebp]
	movq	MMWORD PTR _zero$306116[ebp], mm0

; 1746 :                     src = _mm_unpacklo_pi8(src, zero);

	movq	mm0, MMWORD PTR _zero$306116[ebp]
	movq	mm1, MMWORD PTR _src$306110[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T306118[ebp], mm1
	movq	mm0, MMWORD PTR $T306118[ebp]
	movq	MMWORD PTR _src$306110[ebp], mm0

; 1747 :                     src = _mm_mullo_pi16(src, color_alpha_64);

	movq	mm0, MMWORD PTR _color_alpha_64$305926[ebp]
	movq	mm1, MMWORD PTR _src$306110[ebp]
	pmullw	mm1, mm0
	movq	MMWORD PTR $T306119[ebp], mm1
	movq	mm0, MMWORD PTR $T306119[ebp]
	movq	MMWORD PTR _src$306110[ebp], mm0

; 1748 :                     mask = _mm_unpacklo_pi8(zero, mask); //important!

	movq	mm0, MMWORD PTR _mask$306113[ebp]
	movq	mm1, MMWORD PTR _zero$306116[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T306120[ebp], mm1
	movq	mm0, MMWORD PTR $T306120[ebp]
	movq	MMWORD PTR _mask$306113[ebp], mm0

; 1749 :                     src = _mm_mulhi_pi16(src, mask); //important!

	movq	mm0, MMWORD PTR _mask$306113[ebp]
	movq	mm1, MMWORD PTR _src$306110[ebp]
	pmulhw	mm1, mm0
	movq	MMWORD PTR $T306121[ebp], mm1
	movq	mm0, MMWORD PTR $T306121[ebp]
	movq	MMWORD PTR _src$306110[ebp], mm0

; 1750 :                     src = _mm_srli_pi16(src, 12+8-16); //important!

	movq	mm0, MMWORD PTR _src$306110[ebp]
	psrlw	mm0, 4
	movq	MMWORD PTR $T306122[ebp], mm0
	movq	mm0, MMWORD PTR $T306122[ebp]
	movq	MMWORD PTR _src$306110[ebp], mm0

; 1751 :                     src = _mm_packs_pu16(src,src);

	movq	mm0, MMWORD PTR _src$306110[ebp]
	movq	mm1, MMWORD PTR _src$306110[ebp]
	packuswb mm1, mm0
	movq	MMWORD PTR $T306123[ebp], mm1
	movq	mm0, MMWORD PTR $T306123[ebp]
	movq	MMWORD PTR _src$306110[ebp], mm0

; 1752 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(src);

	movq	mm0, MMWORD PTR _src$306110[ebp]
	movd	eax, mm0
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR _j$306060[ebp]
	mov	DWORD PTR [ecx], eax

; 1753 :                 }

	jmp	$LN31@DoFillAlph
$LN30@DoFillAlph:

; 1754 :                 for( ;j<x_end;j++)

	jmp	SHORT $LN29@DoFillAlph
$LN28@DoFillAlph:
	mov	eax, DWORD PTR _j$306060[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306060[ebp], eax
$LN29@DoFillAlph:
	mov	eax, DWORD PTR _j$306060[ebp]
	cmp	eax, DWORD PTR _x_end$305925[ebp]
	jge	SHORT $LN27@DoFillAlph

; 1755 :                 {
; 1756 :                     dst[j] = (src1[j] * pAlphaMask[j] * color_alpha)>>12;

	mov	eax, DWORD PTR _src1$306056[ebp]
	add	eax, DWORD PTR _j$306060[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pAlphaMask$[ebx]
	add	edx, DWORD PTR _j$306060[ebp]
	movzx	eax, BYTE PTR [edx]
	imul	ecx, eax
	imul	ecx, DWORD PTR _color_alpha$[ebx]
	shr	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _dst$305908[ebp]
	add	edx, DWORD PTR _j$306060[ebp]
	mov	BYTE PTR [edx], cl

; 1757 :                 }

	jmp	SHORT $LN28@DoFillAlph
$LN27@DoFillAlph:

; 1758 :                 src1 += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src1$306056[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _src1$306056[ebp], ecx

; 1759 :                 pAlphaMask += pitch;

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	add	eax, DWORD PTR _pitch$[ebx]
	mov	DWORD PTR _pAlphaMask$[ebx], eax

; 1760 :                 dst += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$305908[ebp], ecx

; 1761 :             }

	jmp	$LN43@DoFillAlph
$LN42@DoFillAlph:

; 1762 :         }
; 1763 :         else if( pAlphaMask!=NULL && pBody!=NULL && pBorder!=NULL )

	jmp	$LN64@DoFillAlph
$LN44@DoFillAlph:
	cmp	DWORD PTR _pAlphaMask$[ebx], 0
	je	$LN25@DoFillAlph
	cmp	DWORD PTR _pBody$[ebx], 0
	je	$LN25@DoFillAlph
	cmp	DWORD PTR _pBorder$[ebx], 0
	je	$LN25@DoFillAlph
$LN24@DoFillAlph:

; 1764 :         {
; 1765 :             while(h--)

	mov	eax, DWORD PTR _h$[ebx]
	mov	DWORD PTR tv648[ebp], eax
	mov	ecx, DWORD PTR _h$[ebx]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebx], ecx
	cmp	DWORD PTR tv648[ebp], 0
	je	$LN23@DoFillAlph

; 1766 :             {
; 1767 :                 int j=0;

	mov	DWORD PTR _j$306133[ebp], 0
	jmp	SHORT $LN22@DoFillAlph
$LN21@DoFillAlph:

; 1768 :                 for( ; j<x0; j++ )

	mov	eax, DWORD PTR _j$306133[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306133[ebp], eax
$LN22@DoFillAlph:
	mov	eax, DWORD PTR _j$306133[ebp]
	cmp	eax, DWORD PTR _x0$305909[ebp]
	jge	SHORT $LN20@DoFillAlph

; 1769 :                 {
; 1770 :                     int temp = pBorder[j]-pBody[j];

	mov	eax, DWORD PTR _pBorder$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pBody$[ebx]
	add	edx, DWORD PTR _j$306133[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR _temp$306137[ebp], ecx

; 1771 :                     temp = temp<0 ? 0 : temp;

	jns	SHORT $LN102@DoFillAlph
	mov	DWORD PTR tv658[ebp], 0
	jmp	SHORT $LN103@DoFillAlph
$LN102@DoFillAlph:
	mov	eax, DWORD PTR _temp$306137[ebp]
	mov	DWORD PTR tv658[ebp], eax
$LN103@DoFillAlph:
	mov	ecx, DWORD PTR tv658[ebp]
	mov	DWORD PTR _temp$306137[ebp], ecx

; 1772 :                     dst[j] = (temp * pAlphaMask[j] * color_alpha)>>12;

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _temp$306137[ebp]
	imul	ecx, DWORD PTR _color_alpha$[ebx]
	shr	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _dst$305908[ebp]
	add	edx, DWORD PTR _j$306133[ebp]
	mov	BYTE PTR [edx], cl

; 1773 :                 }

	jmp	$LN21@DoFillAlph
$LN20@DoFillAlph:

; 1774 :                 for( ;j<x00;j+=4 )

	jmp	SHORT $LN19@DoFillAlph
$LN18@DoFillAlph:
	mov	eax, DWORD PTR _j$306133[ebp]
	add	eax, 4
	mov	DWORD PTR _j$306133[ebp], eax
$LN19@DoFillAlph:
	mov	eax, DWORD PTR _j$306133[ebp]
	cmp	eax, DWORD PTR _x00$305914[ebp]
	jge	$LN17@DoFillAlph

; 1775 :                 {
; 1776 :                     __m64 border = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBorder+j));

	mov	eax, DWORD PTR _pBorder$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306143[ebp], mm0
	movq	mm0, MMWORD PTR $T306143[ebp]
	movq	MMWORD PTR _border$306141[ebp], mm0

; 1777 :                     __m64 body = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBody+j));

	mov	eax, DWORD PTR _pBody$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306146[ebp], mm0
	movq	mm0, MMWORD PTR $T306146[ebp]
	movq	MMWORD PTR _body$306144[ebp], mm0

; 1778 :                     border = _mm_subs_pu8(border, body);

	movq	mm0, MMWORD PTR _body$306144[ebp]
	movq	mm1, MMWORD PTR _border$306141[ebp]
	psubusb	mm1, mm0
	movq	MMWORD PTR $T306147[ebp], mm1
	movq	mm0, MMWORD PTR $T306147[ebp]
	movq	MMWORD PTR _border$306141[ebp], mm0

; 1779 :                     __m64 mask = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pAlphaMask+j));

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306150[ebp], mm0
	movq	mm0, MMWORD PTR $T306150[ebp]
	movq	MMWORD PTR _mask$306148[ebp], mm0

; 1780 :                     __m64 zero = _mm_setzero_si64();

	pxor	mm0, mm0
	movq	MMWORD PTR $T306152[ebp], mm0
	movq	mm0, MMWORD PTR $T306152[ebp]
	movq	MMWORD PTR _zero$306151[ebp], mm0

; 1781 :                     border = _mm_unpacklo_pi8(border, zero);

	movq	mm0, MMWORD PTR _zero$306151[ebp]
	movq	mm1, MMWORD PTR _border$306141[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T306153[ebp], mm1
	movq	mm0, MMWORD PTR $T306153[ebp]
	movq	MMWORD PTR _border$306141[ebp], mm0

; 1782 :                     border = _mm_mullo_pi16(border, color_alpha_64);

	movq	mm0, MMWORD PTR _color_alpha_64$305926[ebp]
	movq	mm1, MMWORD PTR _border$306141[ebp]
	pmullw	mm1, mm0
	movq	MMWORD PTR $T306154[ebp], mm1
	movq	mm0, MMWORD PTR $T306154[ebp]
	movq	MMWORD PTR _border$306141[ebp], mm0

; 1783 :                     mask = _mm_unpacklo_pi8(zero, mask); //important!

	movq	mm0, MMWORD PTR _mask$306148[ebp]
	movq	mm1, MMWORD PTR _zero$306151[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T306155[ebp], mm1
	movq	mm0, MMWORD PTR $T306155[ebp]
	movq	MMWORD PTR _mask$306148[ebp], mm0

; 1784 :                     border = _mm_mulhi_pi16(border, mask); //important!

	movq	mm0, MMWORD PTR _mask$306148[ebp]
	movq	mm1, MMWORD PTR _border$306141[ebp]
	pmulhw	mm1, mm0
	movq	MMWORD PTR $T306156[ebp], mm1
	movq	mm0, MMWORD PTR $T306156[ebp]
	movq	MMWORD PTR _border$306141[ebp], mm0

; 1785 :                     border = _mm_srli_pi16(border, 12+8-16); //important!

	movq	mm0, MMWORD PTR _border$306141[ebp]
	psrlw	mm0, 4
	movq	MMWORD PTR $T306157[ebp], mm0
	movq	mm0, MMWORD PTR $T306157[ebp]
	movq	MMWORD PTR _border$306141[ebp], mm0

; 1786 :                     border = _mm_packs_pu16(border,border);

	movq	mm0, MMWORD PTR _border$306141[ebp]
	movq	mm1, MMWORD PTR _border$306141[ebp]
	packuswb mm1, mm0
	movq	MMWORD PTR $T306158[ebp], mm1
	movq	mm0, MMWORD PTR $T306158[ebp]
	movq	MMWORD PTR _border$306141[ebp], mm0

; 1787 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(border);

	movq	mm0, MMWORD PTR _border$306141[ebp]
	movd	eax, mm0
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR _j$306133[ebp]
	mov	DWORD PTR [ecx], eax

; 1788 :                 }

	jmp	$LN18@DoFillAlph
$LN17@DoFillAlph:

; 1789 :                 __m128i zero = _mm_setzero_si128();

	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T306161[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306161[ebp]
	movdqa	XMMWORD PTR _zero$306160[ebp], xmm0
	jmp	SHORT $LN16@DoFillAlph
$LN15@DoFillAlph:

; 1790 :                 for( ;j<x_end00;j+=16)

	mov	eax, DWORD PTR _j$306133[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _j$306133[ebp], eax
$LN16@DoFillAlph:
	mov	eax, DWORD PTR _j$306133[ebp]
	cmp	eax, DWORD PTR _x_end00$305919[ebp]
	jge	$LN14@DoFillAlph

; 1791 :                 {
; 1792 :                     __m128i border = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pBorder+j));

	mov	eax, DWORD PTR _pBorder$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	movdqu	xmm0, XMMWORD PTR [eax]
	movdqa	XMMWORD PTR $T306167[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306167[ebp]
	movdqa	XMMWORD PTR _border$306165[ebp], xmm0

; 1793 :                     __m128i body = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pBody+j));

	mov	eax, DWORD PTR _pBody$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	movdqu	xmm0, XMMWORD PTR [eax]
	movdqa	XMMWORD PTR $T306170[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306170[ebp]
	movdqa	XMMWORD PTR _body$306168[ebp], xmm0

; 1794 :                     border = _mm_subs_epu8(border,body);

	movdqa	xmm0, XMMWORD PTR _body$306168[ebp]
	movdqa	xmm1, XMMWORD PTR _border$306165[ebp]
	psubusb	xmm1, xmm0
	movdqa	XMMWORD PTR $T306171[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306171[ebp]
	movdqa	XMMWORD PTR _border$306165[ebp], xmm0

; 1795 : 
; 1796 :                     __m128i mask = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pAlphaMask+j));

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	movdqu	xmm0, XMMWORD PTR [eax]
	movdqa	XMMWORD PTR $T306174[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306174[ebp]
	movdqa	XMMWORD PTR _mask$306172[ebp], xmm0

; 1797 :                     __m128i srchi = border;

	movdqa	xmm0, XMMWORD PTR _border$306165[ebp]
	movdqa	XMMWORD PTR _srchi$306175[ebp], xmm0

; 1798 :                     __m128i maskhi = mask;                 

	movdqa	xmm0, XMMWORD PTR _mask$306172[ebp]
	movdqa	XMMWORD PTR _maskhi$306176[ebp], xmm0

; 1799 :                     border = _mm_unpacklo_epi8(border, zero);

	movdqa	xmm0, XMMWORD PTR _zero$306160[ebp]
	movdqa	xmm1, XMMWORD PTR _border$306165[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T306177[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306177[ebp]
	movdqa	XMMWORD PTR _border$306165[ebp], xmm0

; 1800 :                     srchi = _mm_unpackhi_epi8(srchi, zero);

	movdqa	xmm0, XMMWORD PTR _zero$306160[ebp]
	movdqa	xmm1, XMMWORD PTR _srchi$306175[ebp]
	punpckhbw xmm1, xmm0
	movdqa	XMMWORD PTR $T306178[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306178[ebp]
	movdqa	XMMWORD PTR _srchi$306175[ebp], xmm0

; 1801 :                     mask = _mm_unpacklo_epi8(zero, mask); //important!

	movdqa	xmm0, XMMWORD PTR _mask$306172[ebp]
	movdqa	xmm1, XMMWORD PTR _zero$306160[ebp]
	punpcklbw xmm1, xmm0
	movdqa	XMMWORD PTR $T306179[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306179[ebp]
	movdqa	XMMWORD PTR _mask$306172[ebp], xmm0

; 1802 :                     maskhi = _mm_unpackhi_epi8(zero, maskhi);

	movdqa	xmm0, XMMWORD PTR _maskhi$306176[ebp]
	movdqa	xmm1, XMMWORD PTR _zero$306160[ebp]
	punpckhbw xmm1, xmm0
	movdqa	XMMWORD PTR $T306180[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306180[ebp]
	movdqa	XMMWORD PTR _maskhi$306176[ebp], xmm0

; 1803 :                     border = _mm_mullo_epi16(border, color_alpha_128);

	movdqa	xmm0, XMMWORD PTR _color_alpha_128$305928[ebp]
	movdqa	xmm1, XMMWORD PTR _border$306165[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T306181[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306181[ebp]
	movdqa	XMMWORD PTR _border$306165[ebp], xmm0

; 1804 :                     srchi = _mm_mullo_epi16(srchi, color_alpha_128);

	movdqa	xmm0, XMMWORD PTR _color_alpha_128$305928[ebp]
	movdqa	xmm1, XMMWORD PTR _srchi$306175[ebp]
	pmullw	xmm1, xmm0
	movdqa	XMMWORD PTR $T306182[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306182[ebp]
	movdqa	XMMWORD PTR _srchi$306175[ebp], xmm0

; 1805 :                     border = _mm_mulhi_epu16(border, mask); //important!

	movdqa	xmm0, XMMWORD PTR _mask$306172[ebp]
	movdqa	xmm1, XMMWORD PTR _border$306165[ebp]
	pmulhuw	xmm1, xmm0
	movdqa	XMMWORD PTR $T306183[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306183[ebp]
	movdqa	XMMWORD PTR _border$306165[ebp], xmm0

; 1806 :                     srchi = _mm_mulhi_epu16(srchi, maskhi);

	movdqa	xmm0, XMMWORD PTR _maskhi$306176[ebp]
	movdqa	xmm1, XMMWORD PTR _srchi$306175[ebp]
	pmulhuw	xmm1, xmm0
	movdqa	XMMWORD PTR $T306184[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306184[ebp]
	movdqa	XMMWORD PTR _srchi$306175[ebp], xmm0

; 1807 :                     border = _mm_srli_epi16(border, 12+8-16); //important!

	movdqa	xmm0, XMMWORD PTR _border$306165[ebp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR $T306185[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306185[ebp]
	movdqa	XMMWORD PTR _border$306165[ebp], xmm0

; 1808 :                     srchi = _mm_srli_epi16(srchi, 12+8-16);

	movdqa	xmm0, XMMWORD PTR _srchi$306175[ebp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR $T306186[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306186[ebp]
	movdqa	XMMWORD PTR _srchi$306175[ebp], xmm0

; 1809 :                     border = _mm_packus_epi16(border, srchi);

	movdqa	xmm0, XMMWORD PTR _srchi$306175[ebp]
	movdqa	xmm1, XMMWORD PTR _border$306165[ebp]
	packuswb xmm1, xmm0
	movdqa	XMMWORD PTR $T306187[ebp], xmm1
	movdqa	xmm0, XMMWORD PTR $T306187[ebp]
	movdqa	XMMWORD PTR _border$306165[ebp], xmm0

; 1810 :                     _mm_storeu_si128(reinterpret_cast<__m128i*>(dst+j), border);

	movdqa	xmm0, XMMWORD PTR _border$306165[ebp]
	mov	eax, DWORD PTR _dst$305908[ebp]
	add	eax, DWORD PTR _j$306133[ebp]
	movdqu	XMMWORD PTR [eax], xmm0

; 1811 :                 }

	jmp	$LN15@DoFillAlph
$LN14@DoFillAlph:

; 1812 :                 for( ;j<x_end0;j+=4)

	jmp	SHORT $LN13@DoFillAlph
$LN12@DoFillAlph:
	mov	eax, DWORD PTR _j$306133[ebp]
	add	eax, 4
	mov	DWORD PTR _j$306133[ebp], eax
$LN13@DoFillAlph:
	mov	eax, DWORD PTR _j$306133[ebp]
	cmp	eax, DWORD PTR _x_end0$305922[ebp]
	jge	$LN11@DoFillAlph

; 1813 :                 {
; 1814 :                     __m64 border = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBorder+j));

	mov	eax, DWORD PTR _pBorder$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306194[ebp], mm0
	movq	mm0, MMWORD PTR $T306194[ebp]
	movq	MMWORD PTR _border$306192[ebp], mm0

; 1815 :                     __m64 body = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBody+j));

	mov	eax, DWORD PTR _pBody$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306197[ebp], mm0
	movq	mm0, MMWORD PTR $T306197[ebp]
	movq	MMWORD PTR _body$306195[ebp], mm0

; 1816 :                     border = _mm_subs_pu8(border, body);

	movq	mm0, MMWORD PTR _body$306195[ebp]
	movq	mm1, MMWORD PTR _border$306192[ebp]
	psubusb	mm1, mm0
	movq	MMWORD PTR $T306198[ebp], mm1
	movq	mm0, MMWORD PTR $T306198[ebp]
	movq	MMWORD PTR _border$306192[ebp], mm0

; 1817 :                     __m64 mask = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pAlphaMask+j));

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	mov	ecx, DWORD PTR [eax]
	movd	mm0, ecx
	movq	MMWORD PTR $T306201[ebp], mm0
	movq	mm0, MMWORD PTR $T306201[ebp]
	movq	MMWORD PTR _mask$306199[ebp], mm0

; 1818 :                     __m64 zero = _mm_setzero_si64();

	pxor	mm0, mm0
	movq	MMWORD PTR $T306203[ebp], mm0
	movq	mm0, MMWORD PTR $T306203[ebp]
	movq	MMWORD PTR _zero$306202[ebp], mm0

; 1819 :                     border = _mm_unpacklo_pi8(border, zero);

	movq	mm0, MMWORD PTR _zero$306202[ebp]
	movq	mm1, MMWORD PTR _border$306192[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T306204[ebp], mm1
	movq	mm0, MMWORD PTR $T306204[ebp]
	movq	MMWORD PTR _border$306192[ebp], mm0

; 1820 :                     border = _mm_mullo_pi16(border, color_alpha_64);

	movq	mm0, MMWORD PTR _color_alpha_64$305926[ebp]
	movq	mm1, MMWORD PTR _border$306192[ebp]
	pmullw	mm1, mm0
	movq	MMWORD PTR $T306205[ebp], mm1
	movq	mm0, MMWORD PTR $T306205[ebp]
	movq	MMWORD PTR _border$306192[ebp], mm0

; 1821 :                     mask = _mm_unpacklo_pi8(zero, mask); //important!

	movq	mm0, MMWORD PTR _mask$306199[ebp]
	movq	mm1, MMWORD PTR _zero$306202[ebp]
	punpcklbw mm1, mm0
	movq	MMWORD PTR $T306206[ebp], mm1
	movq	mm0, MMWORD PTR $T306206[ebp]
	movq	MMWORD PTR _mask$306199[ebp], mm0

; 1822 :                     border = _mm_mulhi_pi16(border, mask); //important!

	movq	mm0, MMWORD PTR _mask$306199[ebp]
	movq	mm1, MMWORD PTR _border$306192[ebp]
	pmulhw	mm1, mm0
	movq	MMWORD PTR $T306207[ebp], mm1
	movq	mm0, MMWORD PTR $T306207[ebp]
	movq	MMWORD PTR _border$306192[ebp], mm0

; 1823 :                     border = _mm_srli_pi16(border, 12+8-16); //important!

	movq	mm0, MMWORD PTR _border$306192[ebp]
	psrlw	mm0, 4
	movq	MMWORD PTR $T306208[ebp], mm0
	movq	mm0, MMWORD PTR $T306208[ebp]
	movq	MMWORD PTR _border$306192[ebp], mm0

; 1824 :                     border = _mm_packs_pu16(border,border);

	movq	mm0, MMWORD PTR _border$306192[ebp]
	movq	mm1, MMWORD PTR _border$306192[ebp]
	packuswb mm1, mm0
	movq	MMWORD PTR $T306209[ebp], mm1
	movq	mm0, MMWORD PTR $T306209[ebp]
	movq	MMWORD PTR _border$306192[ebp], mm0

; 1825 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(border);

	movq	mm0, MMWORD PTR _border$306192[ebp]
	movd	eax, mm0
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR _j$306133[ebp]
	mov	DWORD PTR [ecx], eax

; 1826 :                 }

	jmp	$LN12@DoFillAlph
$LN11@DoFillAlph:

; 1827 :                 for( ;j<x_end;j++)

	jmp	SHORT $LN10@DoFillAlph
$LN9@DoFillAlph:
	mov	eax, DWORD PTR _j$306133[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306133[ebp], eax
$LN10@DoFillAlph:
	mov	eax, DWORD PTR _j$306133[ebp]
	cmp	eax, DWORD PTR _x_end$305925[ebp]
	jge	SHORT $LN8@DoFillAlph

; 1828 :                 {
; 1829 :                     int temp = pBorder[j]-pBody[j];

	mov	eax, DWORD PTR _pBorder$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pBody$[ebx]
	add	edx, DWORD PTR _j$306133[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR _temp$306214[ebp], ecx

; 1830 :                     temp = temp<0 ? 0 : temp;

	jns	SHORT $LN104@DoFillAlph
	mov	DWORD PTR tv829[ebp], 0
	jmp	SHORT $LN105@DoFillAlph
$LN104@DoFillAlph:
	mov	eax, DWORD PTR _temp$306214[ebp]
	mov	DWORD PTR tv829[ebp], eax
$LN105@DoFillAlph:
	mov	ecx, DWORD PTR tv829[ebp]
	mov	DWORD PTR _temp$306214[ebp], ecx

; 1831 :                     dst[j] = (temp * pAlphaMask[j] * color_alpha)>>12;

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	add	eax, DWORD PTR _j$306133[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _temp$306214[ebp]
	imul	ecx, DWORD PTR _color_alpha$[ebx]
	shr	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _dst$305908[ebp]
	add	edx, DWORD PTR _j$306133[ebp]
	mov	BYTE PTR [edx], cl

; 1832 :                 }

	jmp	$LN9@DoFillAlph
$LN8@DoFillAlph:

; 1833 :                 pBody += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pBody$[ebx]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pBody$[ebx], ecx

; 1834 :                 pBorder += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pBorder$[ebx]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pBorder$[ebx], ecx

; 1835 :                 pAlphaMask += pitch;

	mov	eax, DWORD PTR _pAlphaMask$[ebx]
	add	eax, DWORD PTR _pitch$[ebx]
	mov	DWORD PTR _pAlphaMask$[ebx], eax

; 1836 :                 dst += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$305908[ebp], ecx

; 1837 :             }

	jmp	$LN24@DoFillAlph
$LN23@DoFillAlph:

; 1838 :         }
; 1839 :         else

	jmp	SHORT $LN64@DoFillAlph
$LN25@DoFillAlph:

; 1840 :         {
; 1841 :             //should NOT happen!
; 1842 :             ASSERT(0);

	xor	eax, eax
	jne	SHORT $LN6@DoFillAlph
	mov	ecx, DWORD PTR ?__LINE__Var@?1??_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z@4JA
	add	ecx, 278				; 00000116H
	push	ecx
	push	OFFSET ??_C@_0EB@NNJOLKLM@e?3?2github?2codesandnotes?2xy?9vsfil@
	call	?AfxAssertFailedLine@@YGHPBDH@Z		; AfxAssertFailedLine
	test	eax, eax
	je	SHORT $LN6@DoFillAlph
	int	3
$LN6@DoFillAlph:

; 1843 :             while(h--)

	mov	eax, DWORD PTR _h$[ebx]
	mov	DWORD PTR tv884[ebp], eax
	mov	ecx, DWORD PTR _h$[ebx]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebx], ecx
	cmp	DWORD PTR tv884[ebp], 0
	je	SHORT $LN64@DoFillAlph

; 1844 :             {
; 1845 :                 for(int j=0;j<x_end;j++)

	mov	DWORD PTR _j$306222[ebp], 0
	jmp	SHORT $LN4@DoFillAlph
$LN3@DoFillAlph:
	mov	eax, DWORD PTR _j$306222[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306222[ebp], eax
$LN4@DoFillAlph:
	mov	eax, DWORD PTR _j$306222[ebp]
	cmp	eax, DWORD PTR _x_end$305925[ebp]
	jge	SHORT $LN2@DoFillAlph

; 1846 :                 {
; 1847 :                     dst[j] = 0;

	mov	eax, DWORD PTR _dst$305908[ebp]
	add	eax, DWORD PTR _j$306222[ebp]
	mov	BYTE PTR [eax], 0

; 1848 :                 }

	jmp	SHORT $LN3@DoFillAlph
$LN2@DoFillAlph:

; 1849 :                 dst += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dst$305908[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$305908[ebp], ecx

; 1850 :             }

	jmp	SHORT $LN6@DoFillAlph
$LN64@DoFillAlph:

; 1851 :         }
; 1852 :     }
; 1853 :     else

	jmp	SHORT $LN84@DoFillAlph
$LN83@DoFillAlph:

; 1854 :     {
; 1855 :         _DoFillAlphaMash_c(outputAlphaMask, pBody, pBorder, x, y, w, h, pAlphaMask, pitch, color_alpha);

	mov	eax, DWORD PTR _color_alpha$[ebx]
	push	eax
	mov	ecx, DWORD PTR _pitch$[ebx]
	push	ecx
	mov	edx, DWORD PTR _pAlphaMask$[ebx]
	push	edx
	mov	eax, DWORD PTR _h$[ebx]
	push	eax
	mov	ecx, DWORD PTR _w$[ebx]
	push	ecx
	mov	edx, DWORD PTR _y$[ebx]
	push	edx
	mov	eax, DWORD PTR _x$[ebx]
	push	eax
	mov	ecx, DWORD PTR _pBorder$[ebx]
	push	ecx
	mov	edx, DWORD PTR _pBody$[ebx]
	push	edx
	mov	eax, DWORD PTR _outputAlphaMask$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z ; Overlay::_DoFillAlphaMash_c
$LN84@DoFillAlph:

; 1856 :         return;
; 1857 :     }
; 1858 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	40					; 00000028H
?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z ENDP	; Overlay::_DoFillAlphaMash
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z@4JA ; `Overlay::_DoFillAlphaMash_c'::`2'::__LINE__Var
;	COMDAT ?__LINE__Var@?1??_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z@4JA DD 0746H ; `Overlay::_DoFillAlphaMash_c'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z
_TEXT	SEGMENT
tv226 = -328						; size = 4
tv203 = -328						; size = 4
tv193 = -328						; size = 4
tv171 = -328						; size = 4
tv169 = -328						; size = 4
tv147 = -328						; size = 4
tv145 = -328						; size = 4
tv94 = -328						; size = 4
tv84 = -328						; size = 4
tv75 = -328						; size = 4
tv69 = -328						; size = 4
_j$306286 = -128					; size = 4
_temp$306279 = -116					; size = 4
_j$306275 = -104					; size = 4
_j$306266 = -92						; size = 4
_src1$306262 = -80					; size = 4
_j$306256 = -68						; size = 4
_src1$306252 = -56					; size = 4
_temp$306249 = -44					; size = 4
_j$306245 = -32						; size = 4
_dst$ = -20						; size = 4
_this$ = -8						; size = 4
_outputAlphaMask$ = 8					; size = 4
_pBody$ = 12						; size = 4
_pBorder$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_w$ = 28						; size = 4
_h$ = 32						; size = 4
_pAlphaMask$ = 36					; size = 4
_pitch$ = 40						; size = 4
_color_alpha$ = 44					; size = 4
?_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z PROC	; Overlay::_DoFillAlphaMash_c, COMDAT
; _this$ = ecx

; 1862 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1863 :     pBody = pBody!=NULL ? pBody + y*mOverlayPitch + x: NULL;

	cmp	DWORD PTR _pBody$[ebp], 0
	je	SHORT $LN36@DoFillAlph@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _pBody$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN37@DoFillAlph@2
$LN36@DoFillAlph@2:
	mov	DWORD PTR tv69[ebp], 0
$LN37@DoFillAlph@2:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _pBody$[ebp], edx

; 1864 :     pBorder = pBorder!=NULL ? pBorder + y*mOverlayPitch + x: NULL;

	cmp	DWORD PTR _pBorder$[ebp], 0
	je	SHORT $LN38@DoFillAlph@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _pBorder$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN39@DoFillAlph@2
$LN38@DoFillAlph@2:
	mov	DWORD PTR tv75[ebp], 0
$LN39@DoFillAlph@2:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _pBorder$[ebp], edx

; 1865 :     byte* dst = outputAlphaMask + y*mOverlayPitch + x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _outputAlphaMask$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _dst$[ebp], ecx

; 1866 : 
; 1867 :     if(pAlphaMask==NULL && pBody!=NULL && pBorder!=NULL)

	cmp	DWORD PTR _pAlphaMask$[ebp], 0
	jne	$LN33@DoFillAlph@2
	cmp	DWORD PTR _pBody$[ebp], 0
	je	$LN33@DoFillAlph@2
	cmp	DWORD PTR _pBorder$[ebp], 0
	je	$LN33@DoFillAlph@2
$LN32@DoFillAlph@2:

; 1868 :     {
; 1869 :         while(h--)

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR tv84[ebp], 0
	je	$LN31@DoFillAlph@2

; 1870 :         {
; 1871 :             int j=0;

	mov	DWORD PTR _j$306245[ebp], 0
	jmp	SHORT $LN30@DoFillAlph@2
$LN29@DoFillAlph@2:

; 1872 :             for( ;j<w;j++)

	mov	eax, DWORD PTR _j$306245[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306245[ebp], eax
$LN30@DoFillAlph@2:
	mov	eax, DWORD PTR _j$306245[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN28@DoFillAlph@2

; 1873 :             {
; 1874 :                 int temp = pBorder[j]-pBody[j];

	mov	eax, DWORD PTR _pBorder$[ebp]
	add	eax, DWORD PTR _j$306245[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pBody$[ebp]
	add	edx, DWORD PTR _j$306245[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR _temp$306249[ebp], ecx

; 1875 :                 temp = temp<0 ? 0 : temp;

	jns	SHORT $LN40@DoFillAlph@2
	mov	DWORD PTR tv94[ebp], 0
	jmp	SHORT $LN41@DoFillAlph@2
$LN40@DoFillAlph@2:
	mov	eax, DWORD PTR _temp$306249[ebp]
	mov	DWORD PTR tv94[ebp], eax
$LN41@DoFillAlph@2:
	mov	ecx, DWORD PTR tv94[ebp]
	mov	DWORD PTR _temp$306249[ebp], ecx

; 1876 :                 dst[j] = (temp * color_alpha)>>6;

	mov	eax, DWORD PTR _temp$306249[ebp]
	imul	eax, DWORD PTR _color_alpha$[ebp]
	shr	eax, 6
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR _j$306245[ebp]
	mov	BYTE PTR [ecx], al

; 1877 :             }

	jmp	SHORT $LN29@DoFillAlph@2
$LN28@DoFillAlph@2:

; 1878 :             pBody += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pBody$[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pBody$[ebp], ecx

; 1879 :             pBorder += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pBorder$[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pBorder$[ebp], ecx

; 1880 :             //pAlphaMask += pitch;
; 1881 :             dst += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$[ebp], ecx

; 1882 :         }

	jmp	$LN32@DoFillAlph@2
$LN31@DoFillAlph@2:

; 1883 :     }
; 1884 :     else if( ((pBody==NULL) + (pBorder==NULL))==1 && pAlphaMask==NULL)

	jmp	$LN34@DoFillAlph@2
$LN33@DoFillAlph@2:
	xor	eax, eax
	cmp	DWORD PTR _pBody$[ebp], 0
	sete	al
	xor	ecx, ecx
	cmp	DWORD PTR _pBorder$[ebp], 0
	sete	cl
	add	eax, ecx
	cmp	eax, 1
	jne	$LN26@DoFillAlph@2
	cmp	DWORD PTR _pAlphaMask$[ebp], 0
	jne	$LN26@DoFillAlph@2

; 1885 :     {
; 1886 :         const BYTE* src1 = pBody!=NULL ? pBody : pBorder;

	cmp	DWORD PTR _pBody$[ebp], 0
	je	SHORT $LN42@DoFillAlph@2
	mov	eax, DWORD PTR _pBody$[ebp]
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN43@DoFillAlph@2
$LN42@DoFillAlph@2:
	mov	ecx, DWORD PTR _pBorder$[ebp]
	mov	DWORD PTR tv145[ebp], ecx
$LN43@DoFillAlph@2:
	mov	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR _src1$306252[ebp], edx
$LN25@DoFillAlph@2:

; 1887 :         while(h--)

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR tv147[ebp], 0
	je	SHORT $LN24@DoFillAlph@2

; 1888 :         {
; 1889 :             int j=0;

	mov	DWORD PTR _j$306256[ebp], 0
	jmp	SHORT $LN23@DoFillAlph@2
$LN22@DoFillAlph@2:

; 1890 :             for( ; j<w; j++ )

	mov	eax, DWORD PTR _j$306256[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306256[ebp], eax
$LN23@DoFillAlph@2:
	mov	eax, DWORD PTR _j$306256[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN21@DoFillAlph@2

; 1891 :             {
; 1892 :                 dst[j] = (src1[j] * color_alpha)>>6;

	mov	eax, DWORD PTR _src1$306252[ebp]
	add	eax, DWORD PTR _j$306256[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _color_alpha$[ebp]
	shr	ecx, 6
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, DWORD PTR _j$306256[ebp]
	mov	BYTE PTR [edx], cl

; 1893 :             }

	jmp	SHORT $LN22@DoFillAlph@2
$LN21@DoFillAlph@2:

; 1894 :             src1 += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src1$306252[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _src1$306252[ebp], ecx

; 1895 :             //pAlphaMask += pitch;
; 1896 :             dst += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$[ebp], ecx

; 1897 :         }

	jmp	SHORT $LN25@DoFillAlph@2
$LN24@DoFillAlph@2:

; 1898 :     }
; 1899 :     else if( ((pBody==NULL) + (pBorder==NULL))==1 && pAlphaMask!=NULL)

	jmp	$LN34@DoFillAlph@2
$LN26@DoFillAlph@2:
	xor	eax, eax
	cmp	DWORD PTR _pBody$[ebp], 0
	sete	al
	xor	ecx, ecx
	cmp	DWORD PTR _pBorder$[ebp], 0
	sete	cl
	add	eax, ecx
	cmp	eax, 1
	jne	$LN19@DoFillAlph@2
	cmp	DWORD PTR _pAlphaMask$[ebp], 0
	je	$LN19@DoFillAlph@2

; 1900 :     {
; 1901 :         const BYTE* src1 = pBody!=NULL ? pBody : pBorder;

	cmp	DWORD PTR _pBody$[ebp], 0
	je	SHORT $LN44@DoFillAlph@2
	mov	eax, DWORD PTR _pBody$[ebp]
	mov	DWORD PTR tv169[ebp], eax
	jmp	SHORT $LN45@DoFillAlph@2
$LN44@DoFillAlph@2:
	mov	ecx, DWORD PTR _pBorder$[ebp]
	mov	DWORD PTR tv169[ebp], ecx
$LN45@DoFillAlph@2:
	mov	edx, DWORD PTR tv169[ebp]
	mov	DWORD PTR _src1$306262[ebp], edx
$LN18@DoFillAlph@2:

; 1902 :         while(h--)

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv171[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR tv171[ebp], 0
	je	SHORT $LN17@DoFillAlph@2

; 1903 :         {
; 1904 :             int j=0;

	mov	DWORD PTR _j$306266[ebp], 0
	jmp	SHORT $LN16@DoFillAlph@2
$LN15@DoFillAlph@2:

; 1905 :             for( ; j<w; j++ )

	mov	eax, DWORD PTR _j$306266[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306266[ebp], eax
$LN16@DoFillAlph@2:
	mov	eax, DWORD PTR _j$306266[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN14@DoFillAlph@2

; 1906 :             {
; 1907 :                 dst[j] = (src1[j] * pAlphaMask[j] * color_alpha)>>12;

	mov	eax, DWORD PTR _src1$306262[ebp]
	add	eax, DWORD PTR _j$306266[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pAlphaMask$[ebp]
	add	edx, DWORD PTR _j$306266[ebp]
	movzx	eax, BYTE PTR [edx]
	imul	ecx, eax
	imul	ecx, DWORD PTR _color_alpha$[ebp]
	shr	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, DWORD PTR _j$306266[ebp]
	mov	BYTE PTR [edx], cl

; 1908 :             }

	jmp	SHORT $LN15@DoFillAlph@2
$LN14@DoFillAlph@2:

; 1909 :             src1 += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src1$306262[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _src1$306262[ebp], ecx

; 1910 :             pAlphaMask += pitch;

	mov	eax, DWORD PTR _pAlphaMask$[ebp]
	add	eax, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR _pAlphaMask$[ebp], eax

; 1911 :             dst += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$[ebp], ecx

; 1912 :         }

	jmp	SHORT $LN18@DoFillAlph@2
$LN17@DoFillAlph@2:

; 1913 :     }
; 1914 :     else if( pAlphaMask!=NULL && pBody!=NULL && pBorder!=NULL )

	jmp	$LN34@DoFillAlph@2
$LN19@DoFillAlph@2:
	cmp	DWORD PTR _pAlphaMask$[ebp], 0
	je	$LN12@DoFillAlph@2
	cmp	DWORD PTR _pBody$[ebp], 0
	je	$LN12@DoFillAlph@2
	cmp	DWORD PTR _pBorder$[ebp], 0
	je	$LN12@DoFillAlph@2
$LN11@DoFillAlph@2:

; 1915 :     {
; 1916 :         while(h--)

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv193[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR tv193[ebp], 0
	je	$LN10@DoFillAlph@2

; 1917 :         {
; 1918 :             int j=0;

	mov	DWORD PTR _j$306275[ebp], 0
	jmp	SHORT $LN9@DoFillAlph@2
$LN8@DoFillAlph@2:

; 1919 :             for( ; j<w; j++ )

	mov	eax, DWORD PTR _j$306275[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306275[ebp], eax
$LN9@DoFillAlph@2:
	mov	eax, DWORD PTR _j$306275[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN7@DoFillAlph@2

; 1920 :             {
; 1921 :                 int temp = pBorder[j]-pBody[j];

	mov	eax, DWORD PTR _pBorder$[ebp]
	add	eax, DWORD PTR _j$306275[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pBody$[ebp]
	add	edx, DWORD PTR _j$306275[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR _temp$306279[ebp], ecx

; 1922 :                 temp = temp<0 ? 0 : temp;

	jns	SHORT $LN46@DoFillAlph@2
	mov	DWORD PTR tv203[ebp], 0
	jmp	SHORT $LN47@DoFillAlph@2
$LN46@DoFillAlph@2:
	mov	eax, DWORD PTR _temp$306279[ebp]
	mov	DWORD PTR tv203[ebp], eax
$LN47@DoFillAlph@2:
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR _temp$306279[ebp], ecx

; 1923 :                 dst[j] = (temp * pAlphaMask[j] * color_alpha)>>12;

	mov	eax, DWORD PTR _pAlphaMask$[ebp]
	add	eax, DWORD PTR _j$306275[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _temp$306279[ebp]
	imul	ecx, DWORD PTR _color_alpha$[ebp]
	shr	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, DWORD PTR _j$306275[ebp]
	mov	BYTE PTR [edx], cl

; 1924 :             }

	jmp	SHORT $LN8@DoFillAlph@2
$LN7@DoFillAlph@2:

; 1925 :             pBody += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pBody$[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pBody$[ebp], ecx

; 1926 :             pBorder += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pBorder$[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pBorder$[ebp], ecx

; 1927 :             pAlphaMask += pitch;

	mov	eax, DWORD PTR _pAlphaMask$[ebp]
	add	eax, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR _pAlphaMask$[ebp], eax

; 1928 :             dst += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$[ebp], ecx

; 1929 :         }

	jmp	$LN11@DoFillAlph@2
$LN10@DoFillAlph@2:

; 1930 :     }
; 1931 :     else

	jmp	SHORT $LN34@DoFillAlph@2
$LN12@DoFillAlph@2:

; 1932 :     {
; 1933 :         //should NOT happen!
; 1934 :         ASSERT(0);

	xor	eax, eax
	jne	SHORT $LN5@DoFillAlph@2
	mov	ecx, DWORD PTR ?__LINE__Var@?1??_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z@4JA
	add	ecx, 72					; 00000048H
	push	ecx
	push	OFFSET ??_C@_0EB@NNJOLKLM@e?3?2github?2codesandnotes?2xy?9vsfil@
	call	?AfxAssertFailedLine@@YGHPBDH@Z		; AfxAssertFailedLine
	test	eax, eax
	je	SHORT $LN5@DoFillAlph@2
	int	3
$LN5@DoFillAlph@2:

; 1935 :         while(h--)

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv226[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR tv226[ebp], 0
	je	SHORT $LN34@DoFillAlph@2

; 1936 :         {
; 1937 :             for(int j=0;j<w;j++)

	mov	DWORD PTR _j$306286[ebp], 0
	jmp	SHORT $LN3@DoFillAlph@2
$LN2@DoFillAlph@2:
	mov	eax, DWORD PTR _j$306286[ebp]
	add	eax, 1
	mov	DWORD PTR _j$306286[ebp], eax
$LN3@DoFillAlph@2:
	mov	eax, DWORD PTR _j$306286[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN1@DoFillAlph@2

; 1938 :             {
; 1939 :                 dst[j] = 0;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, DWORD PTR _j$306286[ebp]
	mov	BYTE PTR [eax], 0

; 1940 :             }

	jmp	SHORT $LN2@DoFillAlph@2
$LN1@DoFillAlph@2:

; 1941 :             dst += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$[ebp], ecx

; 1942 :         }

	jmp	SHORT $LN5@DoFillAlph@2
$LN34@DoFillAlph@2:

; 1943 :     }
; 1944 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
?_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z ENDP	; Overlay::_DoFillAlphaMash_c
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z@4JA ; `Overlay::FillAlphaMash'::`2'::__LINE__Var
;	COMDAT ?__LINE__Var@?1??FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z@4JA DD 079bH ; `Overlay::FillAlphaMash'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_outputAlphaMask$ = 8					; size = 4
_fBody$ = 12						; size = 1
_fBorder$ = 16						; size = 1
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_w$ = 28						; size = 4
_h$ = 32						; size = 4
_pAlphaMask$ = 36					; size = 4
_pitch$ = 40						; size = 4
_color_alpha$ = 44					; size = 4
?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z PROC	; Overlay::FillAlphaMash, COMDAT
; _this$ = ecx

; 1947 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1948 :     if(!fBorder && fBody && pAlphaMask==NULL)

	movzx	eax, BYTE PTR _fBorder$[ebp]
	test	eax, eax
	jne	SHORT $LN10@FillAlphaM
	movzx	eax, BYTE PTR _fBody$[ebp]
	test	eax, eax
	je	SHORT $LN10@FillAlphaM
	cmp	DWORD PTR _pAlphaMask$[ebp], 0
	jne	SHORT $LN10@FillAlphaM

; 1949 :     {
; 1950 :         _DoFillAlphaMash(outputAlphaMask, mBody.get(), NULL, x, y, w, h, pAlphaMask, pitch, color_alpha);        

	mov	eax, DWORD PTR _color_alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pAlphaMask$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	push	eax
	mov	ecx, DWORD PTR _outputAlphaMask$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z ; Overlay::_DoFillAlphaMash
	jmp	$LN11@FillAlphaM
$LN10@FillAlphaM:

; 1951 :     }
; 1952 :     else if(/*fBorder &&*/ fBody && pAlphaMask==NULL)

	movzx	eax, BYTE PTR _fBody$[ebp]
	test	eax, eax
	je	SHORT $LN8@FillAlphaM
	cmp	DWORD PTR _pAlphaMask$[ebp], 0
	jne	SHORT $LN8@FillAlphaM

; 1953 :     {
; 1954 :         _DoFillAlphaMash(outputAlphaMask, NULL, mBorder.get(), x, y, w, h, pAlphaMask, pitch, color_alpha);        

	mov	eax, DWORD PTR _color_alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pAlphaMask$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	push	eax
	push	0
	mov	ecx, DWORD PTR _outputAlphaMask$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z ; Overlay::_DoFillAlphaMash
	jmp	$LN11@FillAlphaM
$LN8@FillAlphaM:

; 1955 :     }
; 1956 :     else if(!fBody && fBorder /* pAlphaMask==NULL or not*/)

	movzx	eax, BYTE PTR _fBody$[ebp]
	test	eax, eax
	jne	SHORT $LN6@FillAlphaM
	movzx	eax, BYTE PTR _fBorder$[ebp]
	test	eax, eax
	je	SHORT $LN6@FillAlphaM

; 1957 :     {
; 1958 :         _DoFillAlphaMash(outputAlphaMask, mBody.get(), mBorder.get(), x, y, w, h, pAlphaMask, pitch, color_alpha);        

	mov	eax, DWORD PTR _color_alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pAlphaMask$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	push	eax
	mov	ecx, DWORD PTR _outputAlphaMask$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z ; Overlay::_DoFillAlphaMash
	jmp	$LN11@FillAlphaM
$LN6@FillAlphaM:

; 1959 :     }
; 1960 :     else if(!fBorder && fBody && pAlphaMask!=NULL)

	movzx	eax, BYTE PTR _fBorder$[ebp]
	test	eax, eax
	jne	SHORT $LN4@FillAlphaM
	movzx	eax, BYTE PTR _fBody$[ebp]
	test	eax, eax
	je	SHORT $LN4@FillAlphaM
	cmp	DWORD PTR _pAlphaMask$[ebp], 0
	je	SHORT $LN4@FillAlphaM

; 1961 :     {
; 1962 :         _DoFillAlphaMash(outputAlphaMask, mBody.get(), NULL, x, y, w, h, pAlphaMask, pitch, color_alpha);        

	mov	eax, DWORD PTR _color_alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pAlphaMask$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	push	eax
	mov	ecx, DWORD PTR _outputAlphaMask$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z ; Overlay::_DoFillAlphaMash
	jmp	SHORT $LN11@FillAlphaM
$LN4@FillAlphaM:

; 1963 :     }
; 1964 :     else if(fBorder && fBody && pAlphaMask!=NULL)

	movzx	eax, BYTE PTR _fBorder$[ebp]
	test	eax, eax
	je	SHORT $LN2@FillAlphaM
	movzx	eax, BYTE PTR _fBody$[ebp]
	test	eax, eax
	je	SHORT $LN2@FillAlphaM
	cmp	DWORD PTR _pAlphaMask$[ebp], 0
	je	SHORT $LN2@FillAlphaM

; 1965 :     {
; 1966 :         _DoFillAlphaMash(outputAlphaMask, NULL, mBorder.get(), x, y, w, h, pAlphaMask, pitch, color_alpha);        

	mov	eax, DWORD PTR _color_alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pAlphaMask$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	push	eax
	push	0
	mov	ecx, DWORD PTR _outputAlphaMask$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z ; Overlay::_DoFillAlphaMash

; 1967 :     }
; 1968 :     else

	jmp	SHORT $LN11@FillAlphaM
$LN2@FillAlphaM:

; 1969 :     {
; 1970 :         //should NOT happen
; 1971 :         ASSERT(0);

	xor	eax, eax
	jne	SHORT $LN11@FillAlphaM
	mov	ecx, DWORD PTR ?__LINE__Var@?1??FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z@4JA
	add	ecx, 24					; 00000018H
	push	ecx
	push	OFFSET ??_C@_0EB@NNJOLKLM@e?3?2github?2codesandnotes?2xy?9vsfil@
	call	?AfxAssertFailedLine@@YGHPBDH@Z		; AfxAssertFailedLine
	test	eax, eax
	je	SHORT $LN11@FillAlphaM
	int	3
$LN11@FillAlphaM:

; 1972 :     }
; 1973 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z ENDP	; Overlay::FillAlphaMash
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetSubpixelVariance@Overlay@@QAEPAU2@II@Z@4JA ; `Overlay::GetSubpixelVariance'::`2'::__LINE__Var
PUBLIC	??B?$shared_ptr@E@boost@@QBEPQ01@PAEXZ		; boost::shared_ptr<unsigned char>::operator unsigned char * boost::shared_ptr<unsigned char>::*
PUBLIC	??0Overlay@@QAE@XZ				; Overlay::Overlay
PUBLIC	?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z	; Overlay::GetSubpixelVariance
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ?__LINE__Var@?1??GetSubpixelVariance@Overlay@@QAEPAU2@II@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSubpixelVariance@Overlay@@QAEPAU2@II@Z@4JA DD 07b8H ; `Overlay::GetSubpixelVariance'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z$0
__ehfuncinfo$?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z
_TEXT	SEGMENT
tv71 = -328						; size = 4
$T329116 = -320						; size = 4
$T329117 = -308						; size = 4
_i$306351 = -104					; size = 4
_i$306344 = -92						; size = 4
_src$306343 = -80					; size = 4
_dst$306342 = -68					; size = 4
_border$ = -56						; size = 4
_body$ = -44						; size = 4
_overlay$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_xshift$ = 8						; size = 4
_yshift$ = 12						; size = 4
?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z PROC		; Overlay::GetSubpixelVariance, COMDAT
; _this$ = ecx

; 1976 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1977 :     Overlay* overlay = new Overlay();

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T329117[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T329117[ebp], 0
	je	SHORT $LN24@GetSubpixe
	mov	ecx, DWORD PTR $T329117[ebp]
	call	??0Overlay@@QAE@XZ			; Overlay::Overlay
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN25@GetSubpixe
$LN24@GetSubpixe:
	mov	DWORD PTR tv71[ebp], 0
$LN25@GetSubpixe:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T329116[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T329116[ebp]
	mov	DWORD PTR _overlay$[ebp], ecx

; 1978 :     if(!overlay)

	cmp	DWORD PTR _overlay$[ebp], 0
	jne	SHORT $LN21@GetSubpixe

; 1979 :     {
; 1980 :         return NULL;

	xor	eax, eax
	jmp	$LN22@GetSubpixe
$LN21@GetSubpixe:

; 1981 :     }
; 1982 :     xshift &= 7;

	mov	eax, DWORD PTR _xshift$[ebp]
	and	eax, 7
	mov	DWORD PTR _xshift$[ebp], eax

; 1983 :     yshift &= 7;

	mov	eax, DWORD PTR _yshift$[ebp]
	and	eax, 7
	mov	DWORD PTR _yshift$[ebp], eax

; 1984 : 
; 1985 :     overlay->mOffsetX = mOffsetX - xshift;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _xshift$[ebp]
	mov	edx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 1986 :     overlay->mOffsetY = mOffsetY - yshift;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _yshift$[ebp]
	mov	edx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1987 :     overlay->mWidth = mWidth + xshift;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _xshift$[ebp]
	mov	edx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 1988 :     overlay->mHeight = mHeight + yshift;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, DWORD PTR _yshift$[ebp]
	mov	edx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1989 : 
; 1990 :     overlay->mOverlayWidth = ((overlay->mWidth+7)>>3) + 1;

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 7
	sar	ecx, 3
	add	ecx, 1
	mov	edx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 1991 :     overlay->mOverlayHeight = ((overlay->mHeight + 7)>>3) + 1;

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 7
	sar	ecx, 3
	add	ecx, 1
	mov	edx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edx+36], ecx

; 1992 :     overlay->mOverlayPitch = (overlay->mOverlayWidth+15)&~15;

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 15					; 0000000fH
	and	ecx, -16				; fffffff0H
	mov	edx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edx+40], ecx

; 1993 :     
; 1994 : 
; 1995 :     overlay->mfWideOutlineEmpty = mfWideOutlineEmpty;

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+44]
	mov	BYTE PTR [eax+44], dl

; 1996 : 
; 1997 :     if (overlay->mOverlayPitch * overlay->mOverlayHeight<=0)

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	edx, DWORD PTR [eax+40]
	imul	edx, DWORD PTR [ecx+36]
	test	edx, edx
	jg	SHORT $LN20@GetSubpixe

; 1998 :     {
; 1999 :         return NULL;

	xor	eax, eax
	jmp	$LN22@GetSubpixe
$LN20@GetSubpixe:

; 2000 :     }
; 2001 : 
; 2002 :     BYTE* body = reinterpret_cast<BYTE*>(xy_malloc(overlay->mOverlayPitch * overlay->mOverlayHeight));

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	edx, DWORD PTR [eax+40]
	imul	edx, DWORD PTR [ecx+36]
	push	edx
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _body$[ebp], eax

; 2003 :     if( body==NULL )

	cmp	DWORD PTR _body$[ebp], 0
	jne	SHORT $LN19@GetSubpixe

; 2004 :     {
; 2005 :         return NULL;

	xor	eax, eax
	jmp	$LN22@GetSubpixe
$LN19@GetSubpixe:

; 2006 :     }
; 2007 :     overlay->mBody.reset(body, xy_free);    

	push	OFFSET ?xy_free@@YAXPAX@Z		; xy_free
	mov	eax, DWORD PTR _body$[ebp]
	push	eax
	mov	ecx, DWORD PTR _overlay$[ebp]
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 2008 :     BYTE* border = NULL;

	mov	DWORD PTR _border$[ebp], 0

; 2009 :     if (!overlay->mfWideOutlineEmpty)

	mov	eax, DWORD PTR _overlay$[ebp]
	movzx	ecx, BYTE PTR [eax+44]
	test	ecx, ecx
	jne	SHORT $LN18@GetSubpixe

; 2010 :     {
; 2011 :         border = reinterpret_cast<BYTE*>(xy_malloc(overlay->mOverlayPitch * overlay->mOverlayHeight));

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	edx, DWORD PTR [eax+40]
	imul	edx, DWORD PTR [ecx+36]
	push	edx
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _border$[ebp], eax

; 2012 :         if (border==NULL)

	cmp	DWORD PTR _border$[ebp], 0
	jne	SHORT $LN17@GetSubpixe

; 2013 :         {
; 2014 :             return NULL;

	xor	eax, eax
	jmp	$LN22@GetSubpixe
$LN17@GetSubpixe:

; 2015 :         }
; 2016 :         overlay->mBorder.reset(border, xy_free);        

	push	OFFSET ?xy_free@@YAXPAX@Z		; xy_free
	mov	eax, DWORD PTR _border$[ebp]
	push	eax
	mov	ecx, DWORD PTR _overlay$[ebp]
	add	ecx, 8
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>
$LN18@GetSubpixe:

; 2017 :     }
; 2018 :     
; 2019 :     if(overlay->mOverlayPitch==mOverlayPitch && overlay->mOverlayHeight>=mOverlayHeight)

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+40]
	jne	$LN16@GetSubpixe
	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx+36]
	jl	$LN16@GetSubpixe

; 2020 :     {
; 2021 :         if (body && mBody)

	cmp	DWORD PTR _body$[ebp], 0
	je	SHORT $LN15@GetSubpixe
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$shared_ptr@E@boost@@QBEPQ01@PAEXZ	; boost::shared_ptr<unsigned char>::operator unsigned char * boost::shared_ptr<unsigned char>::*
	cmp	eax, -1
	je	SHORT $LN15@GetSubpixe

; 2022 :         {
; 2023 :             memcpy(body, mBody.get(), mOverlayPitch * mOverlayHeight);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	imul	edx, DWORD PTR [ecx+36]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	push	eax
	mov	eax, DWORD PTR _body$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2024 :             memset(body+mOverlayPitch*mOverlayHeight, 0, mOverlayPitch * (overlay->mOverlayHeight-mOverlayHeight));

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+36]
	sub	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	imul	edx, DWORD PTR [eax+40]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	imul	eax, DWORD PTR [edx+36]
	add	eax, DWORD PTR _body$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN14@GetSubpixe
$LN15@GetSubpixe:

; 2025 :         }
; 2026 :         else if ( (!!body)!=(!!mBody)/*==NULL*/)

	xor	ebx, ebx
	cmp	DWORD PTR _body$[ebp], 0
	setne	bl
	mov	ecx, DWORD PTR _this$[ebp]
	call	??7?$shared_ptr@E@boost@@QBE_NXZ	; boost::shared_ptr<unsigned char>::operator!
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1
	cmp	ebx, eax
	je	SHORT $LN14@GetSubpixe

; 2027 :         {
; 2028 :             return NULL;

	xor	eax, eax
	jmp	$LN22@GetSubpixe
$LN14@GetSubpixe:

; 2029 :         }
; 2030 :         
; 2031 :         if (border && mBorder)

	cmp	DWORD PTR _border$[ebp], 0
	je	SHORT $LN12@GetSubpixe
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$shared_ptr@E@boost@@QBEPQ01@PAEXZ	; boost::shared_ptr<unsigned char>::operator unsigned char * boost::shared_ptr<unsigned char>::*
	cmp	eax, -1
	je	SHORT $LN12@GetSubpixe

; 2032 :         {
; 2033 :             memcpy(border, mBorder.get(), mOverlayPitch * mOverlayHeight);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	imul	edx, DWORD PTR [ecx+36]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	push	eax
	mov	eax, DWORD PTR _border$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2034 :             memset(border+mOverlayPitch*mOverlayHeight, 0, mOverlayPitch * (overlay->mOverlayHeight-mOverlayHeight));

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+36]
	sub	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	imul	edx, DWORD PTR [eax+40]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	imul	eax, DWORD PTR [edx+36]
	add	eax, DWORD PTR _border$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN11@GetSubpixe
$LN12@GetSubpixe:

; 2035 :         }
; 2036 :         else if ( (!!border)!=(!!mBorder)/*==NULL*/ )

	xor	ebx, ebx
	cmp	DWORD PTR _border$[ebp], 0
	setne	bl
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??7?$shared_ptr@E@boost@@QBE_NXZ	; boost::shared_ptr<unsigned char>::operator!
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1
	cmp	ebx, eax
	je	SHORT $LN11@GetSubpixe

; 2037 :         {
; 2038 :             return NULL;

	xor	eax, eax
	jmp	$LN22@GetSubpixe
$LN11@GetSubpixe:

; 2039 :         }
; 2040 :     }
; 2041 :     else

	jmp	$LN9@GetSubpixe
$LN16@GetSubpixe:

; 2042 :     {
; 2043 :         memset(body, 0, overlay->mOverlayPitch * overlay->mOverlayHeight);                

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	edx, DWORD PTR [eax+40]
	imul	edx, DWORD PTR [ecx+36]
	push	edx
	push	0
	mov	eax, DWORD PTR _body$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2044 :         byte* dst = body;

	mov	eax, DWORD PTR _body$[ebp]
	mov	DWORD PTR _dst$306342[ebp], eax

; 2045 :         const byte* src = mBody.get();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	mov	DWORD PTR _src$306343[ebp], eax

; 2046 :         for (int i=0;i<mOverlayHeight;i++)

	mov	DWORD PTR _i$306344[ebp], 0
	jmp	SHORT $LN8@GetSubpixe
$LN7@GetSubpixe:
	mov	eax, DWORD PTR _i$306344[ebp]
	add	eax, 1
	mov	DWORD PTR _i$306344[ebp], eax
$LN8@GetSubpixe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$306344[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jge	SHORT $LN6@GetSubpixe

; 2047 :         {
; 2048 :             memcpy(dst, src, mOverlayPitch);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _src$306343[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$306342[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2049 :             dst += overlay->mOverlayPitch;

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _dst$306342[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$306342[ebp], ecx

; 2050 :             src += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src$306343[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _src$306343[ebp], ecx

; 2051 :         }

	jmp	SHORT $LN7@GetSubpixe
$LN6@GetSubpixe:

; 2052 :         if (!overlay->mfWideOutlineEmpty)

	mov	eax, DWORD PTR _overlay$[ebp]
	movzx	ecx, BYTE PTR [eax+44]
	test	ecx, ecx
	jne	$LN9@GetSubpixe

; 2053 :         {
; 2054 :             ASSERT(border && mBorder);

	cmp	DWORD PTR _border$[ebp], 0
	je	SHORT $LN26@GetSubpixe
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$shared_ptr@E@boost@@QBEPQ01@PAEXZ	; boost::shared_ptr<unsigned char>::operator unsigned char * boost::shared_ptr<unsigned char>::*
	cmp	eax, -1
	jne	SHORT $LN27@GetSubpixe
$LN26@GetSubpixe:
	mov	eax, DWORD PTR ?__LINE__Var@?1??GetSubpixelVariance@Overlay@@QAEPAU2@II@Z@4JA
	add	eax, 78					; 0000004eH
	push	eax
	push	OFFSET ??_C@_0EB@NNJOLKLM@e?3?2github?2codesandnotes?2xy?9vsfil@
	call	?AfxAssertFailedLine@@YGHPBDH@Z		; AfxAssertFailedLine
	test	eax, eax
	je	SHORT $LN27@GetSubpixe
	int	3
$LN27@GetSubpixe:

; 2055 :             memset(border, 0, overlay->mOverlayPitch * overlay->mOverlayHeight);

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	edx, DWORD PTR [eax+40]
	imul	edx, DWORD PTR [ecx+36]
	push	edx
	push	0
	mov	eax, DWORD PTR _border$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2056 :             dst = border;

	mov	eax, DWORD PTR _border$[ebp]
	mov	DWORD PTR _dst$306342[ebp], eax

; 2057 :             src = mBorder.get();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?get@?$shared_ptr@E@boost@@QBEPAEXZ	; boost::shared_ptr<unsigned char>::get
	mov	DWORD PTR _src$306343[ebp], eax

; 2058 :             for (int i=0;i<mOverlayHeight;i++)

	mov	DWORD PTR _i$306351[ebp], 0
	jmp	SHORT $LN4@GetSubpixe
$LN3@GetSubpixe:
	mov	eax, DWORD PTR _i$306351[ebp]
	add	eax, 1
	mov	DWORD PTR _i$306351[ebp], eax
$LN4@GetSubpixe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$306351[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jge	SHORT $LN9@GetSubpixe

; 2059 :             {
; 2060 :                 memcpy(dst, src, mOverlayPitch);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _src$306343[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$306342[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2061 :                 dst += overlay->mOverlayPitch;

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR _dst$306342[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst$306342[ebp], ecx

; 2062 :                 src += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src$306343[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _src$306343[ebp], ecx

; 2063 :             }

	jmp	SHORT $LN3@GetSubpixe
$LN9@GetSubpixe:

; 2064 :         }        
; 2065 :     }
; 2066 :     //not equal
; 2067 :     //  Bilinear(overlay->mpOverlayBuffer.base, overlay->mOverlayWidth, 2*overlay->mOverlayHeight, overlay->mOverlayPitch, xshift, yshift);
; 2068 :     Bilinear(body, overlay->mOverlayWidth, overlay->mOverlayHeight, overlay->mOverlayPitch, xshift, yshift);

	mov	eax, DWORD PTR _yshift$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xshift$[ebp]
	push	ecx
	mov	edx, DWORD PTR _overlay$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _body$[ebp]
	push	edx
	call	?Bilinear@@YAXPAEHHHHH@Z		; Bilinear
	add	esp, 24					; 00000018H

; 2069 :     if (!overlay->mfWideOutlineEmpty)

	mov	eax, DWORD PTR _overlay$[ebp]
	movzx	ecx, BYTE PTR [eax+44]
	test	ecx, ecx
	jne	SHORT $LN1@GetSubpixe

; 2070 :     {
; 2071 :         Bilinear(border, overlay->mOverlayWidth, overlay->mOverlayHeight, overlay->mOverlayPitch, xshift, yshift);

	mov	eax, DWORD PTR _yshift$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xshift$[ebp]
	push	ecx
	mov	edx, DWORD PTR _overlay$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _border$[ebp]
	push	edx
	call	?Bilinear@@YAXPAEHHHHH@Z		; Bilinear
	add	esp, 24					; 00000018H
$LN1@GetSubpixe:

; 2072 :     }    
; 2073 :     return overlay;

	mov	eax, DWORD PTR _overlay$[ebp]
$LN22@GetSubpixe:

; 2074 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z$0:
	mov	eax, DWORD PTR $T329117[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-332]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z ENDP		; Overlay::GetSubpixelVariance
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.h
xdata$x	SEGMENT
__unwindtable$??0Overlay@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Overlay@@QAE@XZ$0
__ehfuncinfo$??0Overlay@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Overlay@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0Overlay@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0Overlay@@QAE@XZ PROC					; Overlay::Overlay, COMDAT
; _this$ = ecx

; 152  :     Overlay()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Overlay@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$shared_ptr@E@boost@@QAE@XZ		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$shared_ptr@E@boost@@QAE@XZ		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>

; 153  :     {
; 154  :         mOffsetX=mOffsetY=mWidth=mHeight=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 155  :         mOverlayWidth=mOverlayHeight=mOverlayPitch=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0

; 156  :         mfWideOutlineEmpty = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 157  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Overlay@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$shared_ptr@E@boost@@QAE@XZ
__ehhandler$??0Overlay@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Overlay@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Overlay@@QAE@XZ ENDP					; Overlay::Overlay
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
;	COMDAT ?Bilinear@@YAXPAEHHHHH@Z
_TEXT	SEGMENT
_temp2$298654 = -92					; size = 4
_temp1$298653 = -80					; size = 4
_x$298649 = -68						; size = 4
_last$298648 = -56					; size = 4
_col_pix_buf$298647 = -44				; size = 4
_src$298646 = -32					; size = 4
_y$298642 = -20						; size = 4
_col_pix_buf_base$ = -8					; size = 4
_buf$ = 8						; size = 4
_w$ = 12						; size = 4
_h$ = 16						; size = 4
_stride$ = 20						; size = 4
_x_factor$ = 24						; size = 4
_y_factor$ = 28						; size = 4
?Bilinear@@YAXPAEHHHHH@Z PROC				; Bilinear, COMDAT

; 668  : {   

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 669  :     WORD *col_pix_buf_base = reinterpret_cast<WORD*>(xy_malloc(w*sizeof(WORD)));

	mov	eax, DWORD PTR _w$[ebp]
	shl	eax, 1
	push	eax
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	add	esp, 4
	mov	DWORD PTR _col_pix_buf_base$[ebp], eax

; 670  :     if(!col_pix_buf_base)

	cmp	DWORD PTR _col_pix_buf_base$[ebp], 0
	jne	SHORT $LN7@Bilinear

; 671  :     {
; 672  :         //ToDo: error handling
; 673  :         return;

	jmp	$LN8@Bilinear
$LN7@Bilinear:

; 674  :     }
; 675  :     memset(col_pix_buf_base, 0, w*sizeof(WORD));

	mov	eax, DWORD PTR _w$[ebp]
	shl	eax, 1
	push	eax
	push	0
	mov	ecx, DWORD PTR _col_pix_buf_base$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 676  : 
; 677  :     for (int y = 0; y < h; y++){

	mov	DWORD PTR _y$298642[ebp], 0
	jmp	SHORT $LN6@Bilinear
$LN5@Bilinear:
	mov	eax, DWORD PTR _y$298642[ebp]
	add	eax, 1
	mov	DWORD PTR _y$298642[ebp], eax
$LN6@Bilinear:
	mov	eax, DWORD PTR _y$298642[ebp]
	cmp	eax, DWORD PTR _h$[ebp]
	jge	$LN4@Bilinear

; 678  :         unsigned char *src=buf+y*stride;

	mov	eax, DWORD PTR _y$298642[ebp]
	imul	eax, DWORD PTR _stride$[ebp]
	add	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _src$298646[ebp], eax

; 679  : 
; 680  :         WORD *col_pix_buf = col_pix_buf_base;

	mov	eax, DWORD PTR _col_pix_buf_base$[ebp]
	mov	DWORD PTR _col_pix_buf$298647[ebp], eax

; 681  :         int last=0;

	mov	DWORD PTR _last$298648[ebp], 0

; 682  :         for(int x = 0; x < w; x++)

	mov	DWORD PTR _x$298649[ebp], 0
	jmp	SHORT $LN3@Bilinear
$LN2@Bilinear:
	mov	eax, DWORD PTR _x$298649[ebp]
	add	eax, 1
	mov	DWORD PTR _x$298649[ebp], eax
$LN3@Bilinear:
	mov	eax, DWORD PTR _x$298649[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	$LN1@Bilinear

; 683  :         {
; 684  :             int temp1 = src[x];

	mov	eax, DWORD PTR _src$298646[ebp]
	add	eax, DWORD PTR _x$298649[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _temp1$298653[ebp], ecx

; 685  :             int temp2 = temp1*x_factor;

	mov	eax, DWORD PTR _temp1$298653[ebp]
	imul	eax, DWORD PTR _x_factor$[ebp]
	mov	DWORD PTR _temp2$298654[ebp], eax

; 686  :             temp1 <<= 3;

	mov	eax, DWORD PTR _temp1$298653[ebp]
	shl	eax, 3
	mov	DWORD PTR _temp1$298653[ebp], eax

; 687  :             temp1 -= temp2;

	mov	eax, DWORD PTR _temp1$298653[ebp]
	sub	eax, DWORD PTR _temp2$298654[ebp]
	mov	DWORD PTR _temp1$298653[ebp], eax

; 688  :             temp1 += last;

	mov	eax, DWORD PTR _temp1$298653[ebp]
	add	eax, DWORD PTR _last$298648[ebp]
	mov	DWORD PTR _temp1$298653[ebp], eax

; 689  :             last = temp2;

	mov	eax, DWORD PTR _temp2$298654[ebp]
	mov	DWORD PTR _last$298648[ebp], eax

; 690  : 
; 691  :             temp2 = temp1*y_factor;

	mov	eax, DWORD PTR _temp1$298653[ebp]
	imul	eax, DWORD PTR _y_factor$[ebp]
	mov	DWORD PTR _temp2$298654[ebp], eax

; 692  :             temp1 <<= 3;

	mov	eax, DWORD PTR _temp1$298653[ebp]
	shl	eax, 3
	mov	DWORD PTR _temp1$298653[ebp], eax

; 693  :             temp1 -= temp2;

	mov	eax, DWORD PTR _temp1$298653[ebp]
	sub	eax, DWORD PTR _temp2$298654[ebp]
	mov	DWORD PTR _temp1$298653[ebp], eax

; 694  :             temp1 += col_pix_buf[x];

	mov	eax, DWORD PTR _x$298649[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$298647[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _temp1$298653[ebp]
	mov	DWORD PTR _temp1$298653[ebp], edx

; 695  :             src[x] = ((temp1+32)>>6);

	mov	eax, DWORD PTR _temp1$298653[ebp]
	add	eax, 32					; 00000020H
	sar	eax, 6
	mov	ecx, DWORD PTR _src$298646[ebp]
	add	ecx, DWORD PTR _x$298649[ebp]
	mov	BYTE PTR [ecx], al

; 696  :             col_pix_buf[x] = temp2;

	mov	eax, DWORD PTR _x$298649[ebp]
	mov	ecx, DWORD PTR _col_pix_buf$298647[ebp]
	mov	dx, WORD PTR _temp2$298654[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 697  :         }

	jmp	$LN2@Bilinear
$LN1@Bilinear:

; 698  :     }

	jmp	$LN5@Bilinear
$LN4@Bilinear:

; 699  :     xy_free(col_pix_buf_base);

	mov	eax, DWORD PTR _col_pix_buf_base$[ebp]
	push	eax
	call	?xy_free@@YAXPAX@Z			; xy_free
	add	esp, 4
$LN8@Bilinear:

; 700  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Bilinear@@YAXPAEHHHHH@Z ENDP				; Bilinear
_TEXT	ENDS
PUBLIC	??0PathData@@QAE@XZ				; PathData::PathData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0PathData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0PathData@@QAE@XZ PROC				; PathData::PathData, COMDAT
; _this$ = ecx

; 2081 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 2082 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PathData@@QAE@XZ ENDP				; PathData::PathData
_TEXT	ENDS
PUBLIC	??0PathData@@QAE@ABU0@@Z			; PathData::PathData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0PathData@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_src$ = 8						; size = 4
??0PathData@@QAE@ABU0@@Z PROC				; PathData::PathData, COMDAT
; _this$ = ecx

; 2085 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 2086 :     //TODO: deal with the case that src.mPathPoints<0 
; 2087 :     if(mPathPoints>0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	SHORT $LN2@PathData

; 2088 :     {
; 2089 :         mpPathTypes = static_cast<BYTE*>(malloc(mPathPoints * sizeof(BYTE)));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_malloc
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 2090 :         mpPathPoints = static_cast<POINT*>(malloc(mPathPoints * sizeof(POINT)));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 3
	push	ecx
	call	_malloc
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN2@PathData:

; 2091 :     }
; 2092 :     if(mPathPoints>0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	SHORT $LN3@PathData

; 2093 :     {
; 2094 :         memcpy(mpPathTypes, src.mpPathTypes, mPathPoints*sizeof(BYTE));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2095 :         memcpy(mpPathPoints, src.mpPathPoints, mPathPoints*sizeof(POINT));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@PathData:

; 2096 :     }
; 2097 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0PathData@@QAE@ABU0@@Z ENDP				; PathData::PathData
_TEXT	ENDS
PUBLIC	?_TrashPath@PathData@@QAEXXZ			; PathData::_TrashPath
PUBLIC	??4PathData@@QAEABU0@ABU0@@Z			; PathData::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4PathData@@QAEABU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_src$ = 8						; size = 4
??4PathData@@QAEABU0@ABU0@@Z PROC			; PathData::operator=, COMDAT
; _this$ = ecx

; 2100 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2101 :     if(this!=&src)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _src$[ebp]
	je	$LN3@operator

; 2102 :     {
; 2103 :         if(mPathPoints!=src.mPathPoints && src.mPathPoints>0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN2@operator
	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	SHORT $LN2@operator

; 2104 :         {
; 2105 :             _TrashPath();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_TrashPath@PathData@@QAEXXZ		; PathData::_TrashPath

; 2106 :             mPathPoints = src.mPathPoints;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 2107 :             mpPathTypes = static_cast<BYTE*>(malloc(mPathPoints * sizeof(BYTE)));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_malloc
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 2108 :             mpPathPoints = static_cast<POINT*>(malloc(mPathPoints * sizeof(POINT)));//better than realloc

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 3
	push	ecx
	call	_malloc
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN2@operator:

; 2109 :         }
; 2110 :         if(src.mPathPoints>0)

	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	SHORT $LN3@operator

; 2111 :         {
; 2112 :             memcpy(mpPathTypes, src.mpPathTypes, mPathPoints*sizeof(BYTE));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2113 :             memcpy(mpPathPoints, src.mpPathPoints, mPathPoints*sizeof(POINT));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@operator:

; 2114 :         }
; 2115 :     }
; 2116 :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 2117 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4PathData@@QAEABU0@ABU0@@Z ENDP			; PathData::operator=
_TEXT	ENDS
PUBLIC	??1PathData@@QAE@XZ				; PathData::~PathData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1PathData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1PathData@@QAE@XZ PROC				; PathData::~PathData, COMDAT
; _this$ = ecx

; 2120 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2121 :     _TrashPath();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_TrashPath@PathData@@QAEXXZ		; PathData::_TrashPath

; 2122 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1PathData@@QAE@XZ ENDP				; PathData::~PathData
_TEXT	ENDS
PUBLIC	??8PathData@@QBE_NABU0@@Z			; PathData::operator==
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??8PathData@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv83 = -208						; size = 4
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
??8PathData@@QBE_NABU0@@Z PROC				; PathData::operator==, COMDAT
; _this$ = ecx

; 2125 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2126 :     return (this==&rhs) || (
; 2127 :         mPathPoints==rhs.mPathPoints 
; 2128 :         && !memcmp(mpPathTypes, rhs.mpPathTypes, mPathPoints * sizeof(BYTE) ) 
; 2129 :         && !memcmp(mpPathPoints, rhs.mpPathPoints, mPathPoints * sizeof(POINT) )
; 2130 :         );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _rhs$[ebp]
	je	SHORT $LN4@operator@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@operator@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 3
	push	edx
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@operator@2
$LN3@operator@2:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN5@operator@2
$LN4@operator@2:
	mov	DWORD PTR tv83[ebp], 1
$LN5@operator@2:
	mov	al, BYTE PTR tv83[ebp]

; 2131 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8PathData@@QBE_NABU0@@Z ENDP				; PathData::operator==
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_TrashPath@PathData@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_TrashPath@PathData@@QAEXXZ PROC			; PathData::_TrashPath, COMDAT
; _this$ = ecx

; 2134 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2135 :     if (mpPathTypes)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@TrashPath

; 2136 :     {
; 2137 :         free(mpPathTypes);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 2138 :         mpPathTypes = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@TrashPath:

; 2139 :     }
; 2140 :     if (mpPathPoints)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@TrashPath

; 2141 :     {
; 2142 :         free(mpPathPoints);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_free
	add	esp, 4

; 2143 :         mpPathPoints = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN1@TrashPath:

; 2144 :     }
; 2145 :     mPathPoints = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 2146 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_TrashPath@PathData@@QAEXXZ ENDP			; PathData::_TrashPath
_TEXT	ENDS
PUBLIC	?BeginPath@PathData@@QAE_NPAUHDC__@@@Z		; PathData::BeginPath
EXTRN	__imp__BeginPath@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginPath@PathData@@QAE_NPAUHDC__@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_hdc$ = 8						; size = 4
?BeginPath@PathData@@QAE_NPAUHDC__@@@Z PROC		; PathData::BeginPath, COMDAT
; _this$ = ecx

; 2149 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2150 :     _TrashPath();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_TrashPath@PathData@@QAEXXZ		; PathData::_TrashPath

; 2151 :     return !!::BeginPath(hdc);

	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__BeginPath@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	neg	eax

; 2152 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?BeginPath@PathData@@QAE_NPAUHDC__@@@Z ENDP		; PathData::BeginPath
_TEXT	ENDS
PUBLIC	?EndPath@PathData@@QAE_NPAUHDC__@@@Z		; PathData::EndPath
EXTRN	__imp__AbortPath@4:PROC
EXTRN	__imp__GetPath@16:PROC
EXTRN	__imp__EndPath@4:PROC
EXTRN	__imp__CloseFigure@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EndPath@PathData@@QAE_NPAUHDC__@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_hdc$ = 8						; size = 4
?EndPath@PathData@@QAE_NPAUHDC__@@@Z PROC		; PathData::EndPath, COMDAT
; _this$ = ecx

; 2155 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2156 :     ::CloseFigure(hdc);

	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseFigure@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2157 :     if(::EndPath(hdc))

	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__EndPath@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN3@EndPath

; 2158 :     {
; 2159 :         mPathPoints = GetPath(hdc, NULL, NULL, 0);

	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GetPath@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 2160 :         if(!mPathPoints)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@EndPath

; 2161 :             return true;

	mov	al, 1
	jmp	SHORT $LN4@EndPath
$LN2@EndPath:

; 2162 :         mpPathTypes = (BYTE*)malloc(sizeof(BYTE) * mPathPoints);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_malloc
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 2163 :         mpPathPoints = (POINT*)malloc(sizeof(POINT) * mPathPoints);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 3
	push	ecx
	call	_malloc
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 2164 :         if(mPathPoints == GetPath(hdc, mpPathPoints, mpPathTypes, mPathPoints))

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GetPath@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN3@EndPath

; 2165 :             return true;

	mov	al, 1
	jmp	SHORT $LN4@EndPath
$LN3@EndPath:

; 2166 :     }
; 2167 :     ::AbortPath(hdc);

	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__AbortPath@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2168 :     return false;

	xor	al, al
$LN4@EndPath:

; 2169 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EndPath@PathData@@QAE_NPAUHDC__@@@Z ENDP		; PathData::EndPath
_TEXT	ENDS
PUBLIC	?PartialBeginPath@PathData@@QAE_NPAUHDC__@@_N@Z	; PathData::PartialBeginPath
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PartialBeginPath@PathData@@QAE_NPAUHDC__@@_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_hdc$ = 8						; size = 4
_bClearPath$ = 12					; size = 1
?PartialBeginPath@PathData@@QAE_NPAUHDC__@@_N@Z PROC	; PathData::PartialBeginPath, COMDAT
; _this$ = ecx

; 2172 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2173 :     if(bClearPath)

	movzx	eax, BYTE PTR _bClearPath$[ebp]
	test	eax, eax
	je	SHORT $LN1@PartialBeg

; 2174 :         _TrashPath();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_TrashPath@PathData@@QAEXXZ		; PathData::_TrashPath
$LN1@PartialBeg:

; 2175 :     return !!::BeginPath(hdc);

	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__BeginPath@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	neg	eax

; 2176 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?PartialBeginPath@PathData@@QAE_NPAUHDC__@@_N@Z ENDP	; PathData::PartialBeginPath
_TEXT	ENDS
PUBLIC	?PartialEndPath@PathData@@QAE_NPAUHDC__@@JJ@Z	; PathData::PartialEndPath
EXTRN	__imp__DebugBreak@0:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PartialEndPath@PathData@@QAE_NPAUHDC__@@JJ@Z
_TEXT	SEGMENT
$T329164 = -344						; size = 4
$T329165 = -332						; size = 4
$T329166 = -320						; size = 4
$T329167 = -308						; size = 4
$T329168 = -296						; size = 4
$T329169 = -284						; size = 4
_i$306443 = -80						; size = 4
_pPoints$306439 = -68					; size = 4
_pTypes$306436 = -56					; size = 4
_pNewPoints$306428 = -44				; size = 4
_pNewTypes$306427 = -32					; size = 4
_nPoints$306426 = -20					; size = 4
_this$ = -8						; size = 4
_hdc$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
?PartialEndPath@PathData@@QAE_NPAUHDC__@@JJ@Z PROC	; PathData::PartialEndPath, COMDAT
; _this$ = ecx

; 2179 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2180 :     ::CloseFigure(hdc);

	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseFigure@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2181 :     if(::EndPath(hdc))

	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__EndPath@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN9@PartialEnd

; 2182 :     {
; 2183 :         int nPoints;
; 2184 :         BYTE* pNewTypes;
; 2185 :         POINT* pNewPoints;
; 2186 :         nPoints = GetPath(hdc, NULL, NULL, 0);

	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GetPath@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nPoints$306426[ebp], eax

; 2187 :         if(!nPoints)

	cmp	DWORD PTR _nPoints$306426[ebp], 0
	jne	SHORT $LN8@PartialEnd

; 2188 :             return true;

	mov	al, 1
	jmp	$LN10@PartialEnd
$LN8@PartialEnd:

; 2189 :         pNewTypes = (BYTE*)realloc(mpPathTypes, (mPathPoints + nPoints) * sizeof(BYTE));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nPoints$306426[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pNewTypes$306427[ebp], eax

; 2190 :         pNewPoints = (POINT*)realloc(mpPathPoints, (mPathPoints + nPoints) * sizeof(POINT));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nPoints$306426[ebp]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pNewPoints$306428[ebp], eax

; 2191 :         if(pNewTypes)

	cmp	DWORD PTR _pNewTypes$306427[ebp], 0
	je	SHORT $LN7@PartialEnd

; 2192 :             mpPathTypes = pNewTypes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNewTypes$306427[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@PartialEnd:

; 2193 :         if(pNewPoints)

	cmp	DWORD PTR _pNewPoints$306428[ebp], 0
	je	SHORT $LN6@PartialEnd

; 2194 :             mpPathPoints = pNewPoints;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNewPoints$306428[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN6@PartialEnd:

; 2195 :         BYTE* pTypes = new BYTE[nPoints];

	mov	eax, DWORD PTR _nPoints$306426[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T329164[ebp], eax
	mov	ecx, DWORD PTR $T329164[ebp]
	mov	DWORD PTR _pTypes$306436[ebp], ecx

; 2196 :         POINT* pPoints = new POINT[nPoints];

	xor	ecx, ecx
	mov	eax, DWORD PTR _nPoints$306426[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T329165[ebp], eax
	mov	eax, DWORD PTR $T329165[ebp]
	mov	DWORD PTR _pPoints$306439[ebp], eax

; 2197 :         if(pNewTypes && pNewPoints && nPoints == GetPath(hdc, pPoints, pTypes, nPoints))

	cmp	DWORD PTR _pNewTypes$306427[ebp], 0
	je	$LN5@PartialEnd
	cmp	DWORD PTR _pNewPoints$306428[ebp], 0
	je	$LN5@PartialEnd
	mov	esi, esp
	mov	eax, DWORD PTR _nPoints$306426[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTypes$306436[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPoints$306439[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GetPath@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _nPoints$306426[ebp], eax
	jne	$LN5@PartialEnd

; 2198 :         {
; 2199 :             for(int i = 0; i < nPoints; ++i)

	mov	DWORD PTR _i$306443[ebp], 0
	jmp	SHORT $LN4@PartialEnd
$LN3@PartialEnd:
	mov	eax, DWORD PTR _i$306443[ebp]
	add	eax, 1
	mov	DWORD PTR _i$306443[ebp], eax
$LN4@PartialEnd:
	mov	eax, DWORD PTR _i$306443[ebp]
	cmp	eax, DWORD PTR _nPoints$306426[ebp]
	jge	SHORT $LN2@PartialEnd

; 2200 :             {
; 2201 :                 mpPathPoints[mPathPoints + i].x = pPoints[i].x + dx;

	mov	eax, DWORD PTR _i$306443[ebp]
	mov	ecx, DWORD PTR _pPoints$306439[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	add	edx, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _i$306443[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+ecx*8], edx

; 2202 :                 mpPathPoints[mPathPoints + i].y = pPoints[i].y + dy;

	mov	eax, DWORD PTR _i$306443[ebp]
	mov	ecx, DWORD PTR _pPoints$306439[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	add	edx, DWORD PTR _dy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _i$306443[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+ecx*8+4], edx

; 2203 :                 mpPathTypes[mPathPoints + i] = pTypes[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _i$306443[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _pTypes$306436[ebp]
	add	edx, DWORD PTR _i$306443[ebp]
	mov	dl, BYTE PTR [edx]
	mov	BYTE PTR [ecx+eax], dl

; 2204 :             }

	jmp	SHORT $LN3@PartialEnd
$LN2@PartialEnd:

; 2205 :             mPathPoints += nPoints;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nPoints$306426[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 2206 :             delete[] pTypes;

	mov	eax, DWORD PTR _pTypes$306436[ebp]
	mov	DWORD PTR $T329166[ebp], eax
	mov	ecx, DWORD PTR $T329166[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2207 :             delete[] pPoints;

	mov	eax, DWORD PTR _pPoints$306439[ebp]
	mov	DWORD PTR $T329167[ebp], eax
	mov	ecx, DWORD PTR $T329167[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2208 :             return true;

	mov	al, 1
	jmp	SHORT $LN10@PartialEnd

; 2209 :         }
; 2210 :         else

	jmp	SHORT $LN1@PartialEnd
$LN5@PartialEnd:

; 2211 :             DebugBreak();

	mov	esi, esp
	call	DWORD PTR __imp__DebugBreak@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@PartialEnd:

; 2212 :         delete[] pTypes;

	mov	eax, DWORD PTR _pTypes$306436[ebp]
	mov	DWORD PTR $T329168[ebp], eax
	mov	ecx, DWORD PTR $T329168[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2213 :         delete[] pPoints;

	mov	eax, DWORD PTR _pPoints$306439[ebp]
	mov	DWORD PTR $T329169[ebp], eax
	mov	ecx, DWORD PTR $T329169[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN9@PartialEnd:

; 2214 :     }
; 2215 :     ::AbortPath(hdc);

	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__AbortPath@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2216 :     return false;

	xor	al, al
$LN10@PartialEnd:

; 2217 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PartialEndPath@PathData@@QAE_NPAUHDC__@@JJ@Z ENDP	; PathData::PartialEndPath
_TEXT	ENDS
PUBLIC	?AlignLeftTop@PathData@@QAEXPAVCPoint@@PAVCSize@@@Z ; PathData::AlignLeftTop
EXTRN	??0CSize@@QAE@HH@Z:PROC				; CSize::CSize
EXTRN	??0CPoint@@QAE@HH@Z:PROC			; CPoint::CPoint
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AlignLeftTop@PathData@@QAEXPAVCPoint@@PAVCSize@@@Z
_TEXT	SEGMENT
$T329172 = -360						; size = 8
$T329173 = -344						; size = 8
$T329174 = -328						; size = 8
$T329175 = -312						; size = 8
_i$306475 = -104					; size = 4
_iy$306466 = -92					; size = 4
_ix$306465 = -80					; size = 4
_i$306461 = -68						; size = 4
_maxy$ = -56						; size = 4
_maxx$ = -44						; size = 4
_miny$ = -32						; size = 4
_minx$ = -20						; size = 4
_this$ = -8						; size = 4
_left_top$ = 8						; size = 4
_size$ = 12						; size = 4
?AlignLeftTop@PathData@@QAEXPAVCPoint@@PAVCSize@@@Z PROC ; PathData::AlignLeftTop, COMDAT
; _this$ = ecx

; 2220 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2221 :     int minx = INT_MAX;

	mov	DWORD PTR _minx$[ebp], 2147483647	; 7fffffffH

; 2222 :     int miny = INT_MAX;

	mov	DWORD PTR _miny$[ebp], 2147483647	; 7fffffffH

; 2223 :     int maxx = INT_MIN;

	mov	DWORD PTR _maxx$[ebp], -2147483648	; 80000000H

; 2224 :     int maxy = INT_MIN;

	mov	DWORD PTR _maxy$[ebp], -2147483648	; 80000000H

; 2225 :     for(int i=0; i<mPathPoints; ++i)

	mov	DWORD PTR _i$306461[ebp], 0
	jmp	SHORT $LN12@AlignLeftT
$LN11@AlignLeftT:
	mov	eax, DWORD PTR _i$306461[ebp]
	add	eax, 1
	mov	DWORD PTR _i$306461[ebp], eax
$LN12@AlignLeftT:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$306461[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN10@AlignLeftT

; 2226 :     {
; 2227 :         int ix = mpPathPoints[i].x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$306461[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _ix$306465[ebp], eax

; 2228 :         int iy = mpPathPoints[i].y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$306461[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _iy$306466[ebp], eax

; 2229 :         if(ix < minx) minx = ix;

	mov	eax, DWORD PTR _ix$306465[ebp]
	cmp	eax, DWORD PTR _minx$[ebp]
	jge	SHORT $LN9@AlignLeftT
	mov	eax, DWORD PTR _ix$306465[ebp]
	mov	DWORD PTR _minx$[ebp], eax
$LN9@AlignLeftT:

; 2230 :         if(ix > maxx) maxx = ix;

	mov	eax, DWORD PTR _ix$306465[ebp]
	cmp	eax, DWORD PTR _maxx$[ebp]
	jle	SHORT $LN8@AlignLeftT
	mov	eax, DWORD PTR _ix$306465[ebp]
	mov	DWORD PTR _maxx$[ebp], eax
$LN8@AlignLeftT:

; 2231 :         if(iy < miny) miny = iy;

	mov	eax, DWORD PTR _iy$306466[ebp]
	cmp	eax, DWORD PTR _miny$[ebp]
	jge	SHORT $LN7@AlignLeftT
	mov	eax, DWORD PTR _iy$306466[ebp]
	mov	DWORD PTR _miny$[ebp], eax
$LN7@AlignLeftT:

; 2232 :         if(iy > maxy) maxy = iy;

	mov	eax, DWORD PTR _iy$306466[ebp]
	cmp	eax, DWORD PTR _maxy$[ebp]
	jle	SHORT $LN6@AlignLeftT
	mov	eax, DWORD PTR _iy$306466[ebp]
	mov	DWORD PTR _maxy$[ebp], eax
$LN6@AlignLeftT:

; 2233 :     }

	jmp	SHORT $LN11@AlignLeftT
$LN10@AlignLeftT:

; 2234 :     if(minx > maxx || miny > maxy)

	mov	eax, DWORD PTR _minx$[ebp]
	cmp	eax, DWORD PTR _maxx$[ebp]
	jg	SHORT $LN4@AlignLeftT
	mov	eax, DWORD PTR _miny$[ebp]
	cmp	eax, DWORD PTR _maxy$[ebp]
	jle	SHORT $LN5@AlignLeftT
$LN4@AlignLeftT:

; 2235 :     {
; 2236 :         _TrashPath();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_TrashPath@PathData@@QAEXXZ		; PathData::_TrashPath

; 2237 :         *left_top = CPoint(0, 0);

	push	0
	push	0
	lea	ecx, DWORD PTR $T329172[ebp]
	call	??0CPoint@@QAE@HH@Z			; CPoint::CPoint
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _left_top$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 2238 :         *size = CSize(0, 0);

	push	0
	push	0
	lea	ecx, DWORD PTR $T329173[ebp]
	call	??0CSize@@QAE@HH@Z			; CSize::CSize
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 2239 :         return;

	jmp	$LN13@AlignLeftT
$LN5@AlignLeftT:

; 2240 :     }
; 2241 :     minx = (minx >> 3) & ~7;

	mov	eax, DWORD PTR _minx$[ebp]
	sar	eax, 3
	and	eax, -8					; fffffff8H
	mov	DWORD PTR _minx$[ebp], eax

; 2242 :     miny = (miny >> 3) & ~7;

	mov	eax, DWORD PTR _miny$[ebp]
	sar	eax, 3
	and	eax, -8					; fffffff8H
	mov	DWORD PTR _miny$[ebp], eax

; 2243 :     maxx = (maxx + 7) >> 3;

	mov	eax, DWORD PTR _maxx$[ebp]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR _maxx$[ebp], eax

; 2244 :     maxy = (maxy + 7) >> 3;

	mov	eax, DWORD PTR _maxy$[ebp]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR _maxy$[ebp], eax

; 2245 :     for(int i=0; i<mPathPoints; ++i)

	mov	DWORD PTR _i$306475[ebp], 0
	jmp	SHORT $LN3@AlignLeftT
$LN2@AlignLeftT:
	mov	eax, DWORD PTR _i$306475[ebp]
	add	eax, 1
	mov	DWORD PTR _i$306475[ebp], eax
$LN3@AlignLeftT:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$306475[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN1@AlignLeftT

; 2246 :     {
; 2247 :         mpPathPoints[i].x -= minx*8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _minx$[ebp]
	shl	edx, 3
	mov	eax, DWORD PTR _i$306475[ebp]
	mov	ecx, DWORD PTR [ecx+eax*8]
	sub	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$306475[ebp]
	mov	DWORD PTR [eax+edx*8], ecx

; 2248 :         mpPathPoints[i].y -= miny*8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _miny$[ebp]
	shl	edx, 3
	mov	eax, DWORD PTR _i$306475[ebp]
	mov	ecx, DWORD PTR [ecx+eax*8+4]
	sub	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$306475[ebp]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 2249 :     }

	jmp	SHORT $LN2@AlignLeftT
$LN1@AlignLeftT:

; 2250 :     *left_top = CPoint(minx, miny);

	mov	eax, DWORD PTR _miny$[ebp]
	push	eax
	mov	ecx, DWORD PTR _minx$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T329174[ebp]
	call	??0CPoint@@QAE@HH@Z			; CPoint::CPoint
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _left_top$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 2251 :     *size = CSize(maxx+1-minx, maxy+1-miny);

	mov	eax, DWORD PTR _maxy$[ebp]
	add	eax, 1
	sub	eax, DWORD PTR _miny$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxx$[ebp]
	add	ecx, 1
	sub	ecx, DWORD PTR _minx$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T329175[ebp]
	call	??0CSize@@QAE@HH@Z			; CSize::CSize
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
$LN13@AlignLeftT:

; 2252 :     return;
; 2253 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AlignLeftTop@PathData@@QAEXPAVCPoint@@PAVCSize@@@Z ENDP ; PathData::AlignLeftTop
_TEXT	ENDS
PUBLIC	??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??_7ScanLineData@@6B@				; ScanLineData::`vftable'
PUBLIC	??0ScanLineData@@QAE@XZ				; ScanLineData::ScanLineData
PUBLIC	??_R4ScanLineData@@6B@				; ScanLineData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScanLineData@@@8			; ScanLineData `RTTI Type Descriptor'
PUBLIC	??_R3ScanLineData@@8				; ScanLineData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScanLineData@@8				; ScanLineData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScanLineData@@8			; ScanLineData::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??0CPoint@@QAE@XZ:PROC				; CPoint::CPoint
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EScanLineData@@UAEPAXI@Z:PROC		; ScanLineData::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ScanLineData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScanLineData@@8 DD FLAT:??_R0?AVScanLineData@@@8 ; ScanLineData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScanLineData@@8
rdata$r	ENDS
;	COMDAT ??_R2ScanLineData@@8
rdata$r	SEGMENT
??_R2ScanLineData@@8 DD FLAT:??_R1A@?0A@EA@ScanLineData@@8 ; ScanLineData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ScanLineData@@8
rdata$r	SEGMENT
??_R3ScanLineData@@8 DD 00H				; ScanLineData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ScanLineData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScanLineData@@@8
_DATA	SEGMENT
??_R0?AVScanLineData@@@8 DD FLAT:??_7type_info@@6B@	; ScanLineData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScanLineData@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScanLineData@@6B@
rdata$r	SEGMENT
??_R4ScanLineData@@6B@ DD 00H				; ScanLineData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScanLineData@@@8
	DD	FLAT:??_R3ScanLineData@@8
rdata$r	ENDS
;	COMDAT ??_7ScanLineData@@6B@
CONST	SEGMENT
??_7ScanLineData@@6B@ DD FLAT:??_R4ScanLineData@@6B@	; ScanLineData::`vftable'
	DD	FLAT:??_EScanLineData@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0ScanLineData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0ScanLineData@@QAE@XZ PROC				; ScanLineData::ScanLineData, COMDAT
; _this$ = ecx

; 2260 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScanLineData@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPoint@@QAE@XZ			; CPoint::CPoint
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CPoint@@QAE@XZ			; CPoint::CPoint
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 2261 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ScanLineData@@QAE@XZ ENDP				; ScanLineData::ScanLineData
_TEXT	ENDS
PUBLIC	??1ScanLineData@@UAE@XZ				; ScanLineData::~ScanLineData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GScanLineData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GScanLineData@@UAEPAXI@Z PROC			; ScanLineData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScanLineData@@UAE@XZ			; ScanLineData::~ScanLineData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScanLineData@@UAEPAXI@Z ENDP			; ScanLineData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ScanLineData@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1ScanLineData@@UAE@XZ PROC				; ScanLineData::~ScanLineData, COMDAT
; _this$ = ecx

; 2264 : {    

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScanLineData@@6B@

; 2265 : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1ScanLineData@@UAE@XZ ENDP				; ScanLineData::~ScanLineData
_TEXT	ENDS
PUBLIC	?_ReallocEdgeBuffer@ScanLineData@@AAEXH@Z	; ScanLineData::_ReallocEdgeBuffer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_ReallocEdgeBuffer@ScanLineData@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_edges$ = 8						; size = 4
?_ReallocEdgeBuffer@ScanLineData@@AAEXH@Z PROC		; ScanLineData::_ReallocEdgeBuffer, COMDAT
; _this$ = ecx

; 2268 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2269 :     mEdgeHeapSize = edges;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 2270 :     mpEdgeBuffer = (Edge*)realloc(mpEdgeBuffer, sizeof(Edge)*edges);

	mov	eax, DWORD PTR _edges$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	_realloc
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 2271 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_ReallocEdgeBuffer@ScanLineData@@AAEXH@Z ENDP		; ScanLineData::_ReallocEdgeBuffer
_TEXT	ENDS
PUBLIC	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z		; ScanLineData::_EvaluateLine
PUBLIC	__real@4000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@c008000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__real@3fc5555555555555
PUBLIC	?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z ; ScanLineData::_EvaluateBezier
EXTRN	_sqrt:PROC
EXTRN	_fabs:PROC
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@c008000000000000
CONST	SEGMENT
__real@c008000000000000 DQ 0c008000000000000r	; -3
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@3fc5555555555555
CONST	SEGMENT
__real@3fc5555555555555 DQ 03fc5555555555555r	; 0.166667
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z
_TEXT	SEGMENT
tv523 = -676						; size = 8
tv521 = -676						; size = 8
tv220 = -676						; size = 8
_y$ = -472						; size = 8
_x$ = -456						; size = 8
_y$306539 = -440					; size = 8
_x$306538 = -424					; size = 8
_t$306534 = -408					; size = 8
_h$ = -392						; size = 8
_maxaccel$ = -376					; size = 8
_maxaccel2$ = -360					; size = 8
_maxaccel1$ = -344					; size = 8
__1div6$306524 = -328					; size = 8
_cy0$ = -312						; size = 8
_cy1$ = -296						; size = 8
_cy2$ = -280						; size = 8
_cy3$ = -264						; size = 8
_cx0$ = -248						; size = 8
_cx1$ = -232						; size = 8
_cx2$ = -216						; size = 8
_cx3$ = -200						; size = 8
_y3$ = -184						; size = 8
_y2$ = -168						; size = 8
_y1$ = -152						; size = 8
_y0$ = -136						; size = 8
_x3$ = -120						; size = 8
_x2$ = -104						; size = 8
_x1$ = -88						; size = 8
_x0$ = -72						; size = 8
_pt3$ = -56						; size = 4
_pt2$ = -44						; size = 4
_pt1$ = -32						; size = 4
_pt0$ = -20						; size = 4
_this$ = -8						; size = 4
_path_data$ = 8						; size = 4
_ptbase$ = 12						; size = 4
_fBSpline$ = 16						; size = 1
?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z PROC ; ScanLineData::_EvaluateBezier, COMDAT
; _this$ = ecx

; 2274 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 676				; 000002a4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-676]
	mov	ecx, 169				; 000000a9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2275 :     const POINT* pt0 = path_data.mpPathPoints + ptbase;

	mov	eax, DWORD PTR _path_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ptbase$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _pt0$[ebp], eax

; 2276 :     const POINT* pt1 = path_data.mpPathPoints + ptbase + 1;

	mov	eax, DWORD PTR _path_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ptbase$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+8]
	mov	DWORD PTR _pt1$[ebp], eax

; 2277 :     const POINT* pt2 = path_data.mpPathPoints + ptbase + 2;

	mov	eax, DWORD PTR _path_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ptbase$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+16]
	mov	DWORD PTR _pt2$[ebp], eax

; 2278 :     const POINT* pt3 = path_data.mpPathPoints + ptbase + 3;

	mov	eax, DWORD PTR _path_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ptbase$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _pt3$[ebp], eax

; 2279 :     double x0 = pt0->x;

	mov	eax, DWORD PTR _pt0$[ebp]
	fild	DWORD PTR [eax]
	fstp	QWORD PTR _x0$[ebp]

; 2280 :     double x1 = pt1->x;

	mov	eax, DWORD PTR _pt1$[ebp]
	fild	DWORD PTR [eax]
	fstp	QWORD PTR _x1$[ebp]

; 2281 :     double x2 = pt2->x;

	mov	eax, DWORD PTR _pt2$[ebp]
	fild	DWORD PTR [eax]
	fstp	QWORD PTR _x2$[ebp]

; 2282 :     double x3 = pt3->x;

	mov	eax, DWORD PTR _pt3$[ebp]
	fild	DWORD PTR [eax]
	fstp	QWORD PTR _x3$[ebp]

; 2283 :     double y0 = pt0->y;

	mov	eax, DWORD PTR _pt0$[ebp]
	fild	DWORD PTR [eax+4]
	fstp	QWORD PTR _y0$[ebp]

; 2284 :     double y1 = pt1->y;

	mov	eax, DWORD PTR _pt1$[ebp]
	fild	DWORD PTR [eax+4]
	fstp	QWORD PTR _y1$[ebp]

; 2285 :     double y2 = pt2->y;

	mov	eax, DWORD PTR _pt2$[ebp]
	fild	DWORD PTR [eax+4]
	fstp	QWORD PTR _y2$[ebp]

; 2286 :     double y3 = pt3->y;

	mov	eax, DWORD PTR _pt3$[ebp]
	fild	DWORD PTR [eax+4]
	fstp	QWORD PTR _y3$[ebp]

; 2287 :     double cx3, cx2, cx1, cx0, cy3, cy2, cy1, cy0;
; 2288 :     if(fBSpline)

	movzx	eax, BYTE PTR _fBSpline$[ebp]
	test	eax, eax
	je	$LN7@EvaluateBe

; 2289 :     {
; 2290 :         // 1   [-1 +3 -3 +1]
; 2291 :         // - * [+3 -6 +3  0]
; 2292 :         // 6   [-3  0 +3  0]
; 2293 :         //	   [+1 +4 +1  0]
; 2294 :         double _1div6 = 1.0/6.0;

	fld	QWORD PTR __real@3fc5555555555555
	fstp	QWORD PTR __1div6$306524[ebp]

; 2295 :         cx3 = _1div6*(-  x0+3*x1-3*x2+x3);

	fld	QWORD PTR _x0$[ebp]
	fchs
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _x1$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _x2$[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR _x3$[ebp]
	fmul	QWORD PTR __1div6$306524[ebp]
	fstp	QWORD PTR _cx3$[ebp]

; 2296 :         cx2 = _1div6*( 3*x0-6*x1+3*x2);

	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _x0$[ebp]
	fld	QWORD PTR __real@4018000000000000
	fmul	QWORD PTR _x1$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _x2$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __1div6$306524[ebp]
	fstp	QWORD PTR _cx2$[ebp]

; 2297 :         cx1 = _1div6*(-3*x0	   +3*x2);

	fld	QWORD PTR __real@c008000000000000
	fmul	QWORD PTR _x0$[ebp]
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _x2$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __1div6$306524[ebp]
	fstp	QWORD PTR _cx1$[ebp]

; 2298 :         cx0 = _1div6*(   x0+4*x1+1*x2);

	fld	QWORD PTR __real@4010000000000000
	fmul	QWORD PTR _x1$[ebp]
	fadd	QWORD PTR _x0$[ebp]
	fld1
	fmul	QWORD PTR _x2$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __1div6$306524[ebp]
	fstp	QWORD PTR _cx0$[ebp]

; 2299 :         cy3 = _1div6*(-  y0+3*y1-3*y2+y3);

	fld	QWORD PTR _y0$[ebp]
	fchs
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _y1$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _y2$[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR _y3$[ebp]
	fmul	QWORD PTR __1div6$306524[ebp]
	fstp	QWORD PTR _cy3$[ebp]

; 2300 :         cy2 = _1div6*( 3*y0-6*y1+3*y2);

	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _y0$[ebp]
	fld	QWORD PTR __real@4018000000000000
	fmul	QWORD PTR _y1$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _y2$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __1div6$306524[ebp]
	fstp	QWORD PTR _cy2$[ebp]

; 2301 :         cy1 = _1div6*(-3*y0     +3*y2);

	fld	QWORD PTR __real@c008000000000000
	fmul	QWORD PTR _y0$[ebp]
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _y2$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __1div6$306524[ebp]
	fstp	QWORD PTR _cy1$[ebp]

; 2302 :         cy0 = _1div6*(   y0+4*y1+1*y2);

	fld	QWORD PTR __real@4010000000000000
	fmul	QWORD PTR _y1$[ebp]
	fadd	QWORD PTR _y0$[ebp]
	fld1
	fmul	QWORD PTR _y2$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __1div6$306524[ebp]
	fstp	QWORD PTR _cy0$[ebp]

; 2303 :     }
; 2304 :     else // bezier

	jmp	$LN6@EvaluateBe
$LN7@EvaluateBe:

; 2305 :     {
; 2306 :         // [-1 +3 -3 +1]
; 2307 :         // [+3 -6 +3  0]
; 2308 :         // [-3 +3  0  0]
; 2309 :         // [+1  0  0  0]
; 2310 :         cx3 = -  x0+3*x1-3*x2+x3;

	fld	QWORD PTR _x0$[ebp]
	fchs
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _x1$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _x2$[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR _x3$[ebp]
	fstp	QWORD PTR _cx3$[ebp]

; 2311 :         cx2 =  3*x0-6*x1+3*x2;

	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _x0$[ebp]
	fld	QWORD PTR __real@4018000000000000
	fmul	QWORD PTR _x1$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _x2$[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _cx2$[ebp]

; 2312 :         cx1 = -3*x0+3*x1;

	fld	QWORD PTR __real@c008000000000000
	fmul	QWORD PTR _x0$[ebp]
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _x1$[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _cx1$[ebp]

; 2313 :         cx0 =    x0;

	fld	QWORD PTR _x0$[ebp]
	fstp	QWORD PTR _cx0$[ebp]

; 2314 :         cy3 = -  y0+3*y1-3*y2+y3;

	fld	QWORD PTR _y0$[ebp]
	fchs
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _y1$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _y2$[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR _y3$[ebp]
	fstp	QWORD PTR _cy3$[ebp]

; 2315 :         cy2 =  3*y0-6*y1+3*y2;

	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _y0$[ebp]
	fld	QWORD PTR __real@4018000000000000
	fmul	QWORD PTR _y1$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _y2$[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _cy2$[ebp]

; 2316 :         cy1 = -3*y0+3*y1;

	fld	QWORD PTR __real@c008000000000000
	fmul	QWORD PTR _y0$[ebp]
	fld	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _y1$[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _cy1$[ebp]

; 2317 :         cy0 =    y0;

	fld	QWORD PTR _y0$[ebp]
	fstp	QWORD PTR _cy0$[ebp]
$LN6@EvaluateBe:

; 2318 :     }
; 2319 :     //
; 2320 :     // This equation is from Graphics Gems I.
; 2321 :     //
; 2322 :     // The idea is that since we're approximating a cubic curve with lines,
; 2323 :     // any error we incur is due to the curvature of the line, which we can
; 2324 :     // estimate by calculating the maximum acceleration of the curve.  For
; 2325 :     // a cubic, the acceleration (second derivative) is a line, meaning that
; 2326 :     // the absolute maximum acceleration must occur at either the beginning
; 2327 :     // (|c2|) or the end (|c2+c3|).  Our bounds here are a little more
; 2328 :     // conservative than that, but that's okay.
; 2329 :     //
; 2330 :     // If the acceleration of the parametric formula is zero (c2 = c3 = 0),
; 2331 :     // that component of the curve is linear and does not incur any error.
; 2332 :     // If a=0 for both X and Y, the curve is a line segment and we can
; 2333 :     // use a step size of 1.
; 2334 :     double maxaccel1 = fabs(2*cy2) + fabs(6*cy3);

	fld	QWORD PTR __real@4000000000000000
	fmul	QWORD PTR _cy2$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_fabs
	add	esp, 8
	fld	QWORD PTR __real@4018000000000000
	fmul	QWORD PTR _cy3$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv521[ebp]
	call	_fabs
	add	esp, 8
	fadd	QWORD PTR tv521[ebp]
	fstp	QWORD PTR _maxaccel1$[ebp]

; 2335 :     double maxaccel2 = fabs(2*cx2) + fabs(6*cx3);

	fld	QWORD PTR __real@4000000000000000
	fmul	QWORD PTR _cx2$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_fabs
	add	esp, 8
	fld	QWORD PTR __real@4018000000000000
	fmul	QWORD PTR _cx3$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv523[ebp]
	call	_fabs
	add	esp, 8
	fadd	QWORD PTR tv523[ebp]
	fstp	QWORD PTR _maxaccel2$[ebp]

; 2336 :     double maxaccel = maxaccel1 > maxaccel2 ? maxaccel1 : maxaccel2;

	fld	QWORD PTR _maxaccel2$[ebp]
	fcomp	QWORD PTR _maxaccel1$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN10@EvaluateBe
	fld	QWORD PTR _maxaccel1$[ebp]
	fstp	QWORD PTR tv220[ebp]
	jmp	SHORT $LN11@EvaluateBe
$LN10@EvaluateBe:
	fld	QWORD PTR _maxaccel2$[ebp]
	fstp	QWORD PTR tv220[ebp]
$LN11@EvaluateBe:
	fld	QWORD PTR tv220[ebp]
	fstp	QWORD PTR _maxaccel$[ebp]

; 2337 :     double h = 1.0;

	fld1
	fstp	QWORD PTR _h$[ebp]

; 2338 :     if(maxaccel > 8.0) h = sqrt(8.0 / maxaccel);

	fld	QWORD PTR __real@4020000000000000
	fcomp	QWORD PTR _maxaccel$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN5@EvaluateBe
	fld	QWORD PTR __real@4020000000000000
	fdiv	QWORD PTR _maxaccel$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR _h$[ebp]
$LN5@EvaluateBe:

; 2339 :     if(!fFirstSet) {firstp.x = (LONG)cx0; firstp.y = (LONG)cy0; lastp = firstp; fFirstSet = true;}

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN4@EvaluateBe
	fld	QWORD PTR _cx0$[ebp]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	fld	QWORD PTR _cy0$[ebp]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 1
$LN4@EvaluateBe:

; 2340 :     for(double t = 0; t < 1.0; t += h)

	fldz
	fstp	QWORD PTR _t$306534[ebp]
	jmp	SHORT $LN3@EvaluateBe
$LN2@EvaluateBe:
	fld	QWORD PTR _t$306534[ebp]
	fadd	QWORD PTR _h$[ebp]
	fstp	QWORD PTR _t$306534[ebp]
$LN3@EvaluateBe:
	fld1
	fcomp	QWORD PTR _t$306534[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN1@EvaluateBe

; 2341 :     {
; 2342 :         double x = cx0 + t*(cx1 + t*(cx2 + t*cx3));

	fld	QWORD PTR _t$306534[ebp]
	fmul	QWORD PTR _cx3$[ebp]
	fadd	QWORD PTR _cx2$[ebp]
	fmul	QWORD PTR _t$306534[ebp]
	fadd	QWORD PTR _cx1$[ebp]
	fmul	QWORD PTR _t$306534[ebp]
	fadd	QWORD PTR _cx0$[ebp]
	fstp	QWORD PTR _x$306538[ebp]

; 2343 :         double y = cy0 + t*(cy1 + t*(cy2 + t*cy3));

	fld	QWORD PTR _t$306534[ebp]
	fmul	QWORD PTR _cy3$[ebp]
	fadd	QWORD PTR _cy2$[ebp]
	fmul	QWORD PTR _t$306534[ebp]
	fadd	QWORD PTR _cy1$[ebp]
	fmul	QWORD PTR _t$306534[ebp]
	fadd	QWORD PTR _cy0$[ebp]
	fstp	QWORD PTR _y$306539[ebp]

; 2344 :         _EvaluateLine(lastp.x, lastp.y, (int)x, (int)y);

	fld	QWORD PTR _y$306539[ebp]
	call	__ftol2_sse
	push	eax
	fld	QWORD PTR _x$306538[ebp]
	call	__ftol2_sse
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine

; 2345 :     }

	jmp	$LN2@EvaluateBe
$LN1@EvaluateBe:

; 2346 :     double x = cx0 + cx1 + cx2 + cx3;

	fld	QWORD PTR _cx0$[ebp]
	fadd	QWORD PTR _cx1$[ebp]
	fadd	QWORD PTR _cx2$[ebp]
	fadd	QWORD PTR _cx3$[ebp]
	fstp	QWORD PTR _x$[ebp]

; 2347 :     double y = cy0 + cy1 + cy2 + cy3;

	fld	QWORD PTR _cy0$[ebp]
	fadd	QWORD PTR _cy1$[ebp]
	fadd	QWORD PTR _cy2$[ebp]
	fadd	QWORD PTR _cy3$[ebp]
	fstp	QWORD PTR _y$[ebp]

; 2348 :     _EvaluateLine(lastp.x, lastp.y, (int)x, (int)y);

	fld	QWORD PTR _y$[ebp]
	call	__ftol2_sse
	push	eax
	fld	QWORD PTR _x$[ebp]
	call	__ftol2_sse
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine

; 2349 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 676				; 000002a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z ENDP ; ScanLineData::_EvaluateBezier
_TEXT	ENDS
PUBLIC	?_EvaluateLine@ScanLineData@@AAEXABUPathData@@HH@Z ; ScanLineData::_EvaluateLine
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_EvaluateLine@ScanLineData@@AAEXABUPathData@@HH@Z
_TEXT	SEGMENT
_pt2$ = -32						; size = 4
_pt1$ = -20						; size = 4
_this$ = -8						; size = 4
_path_data$ = 8						; size = 4
_pt1idx$ = 12						; size = 4
_pt2idx$ = 16						; size = 4
?_EvaluateLine@ScanLineData@@AAEXABUPathData@@HH@Z PROC	; ScanLineData::_EvaluateLine, COMDAT
; _this$ = ecx

; 2352 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2353 :     const POINT* pt1 = path_data.mpPathPoints + pt1idx;

	mov	eax, DWORD PTR _path_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pt1idx$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _pt1$[ebp], eax

; 2354 :     const POINT* pt2 = path_data.mpPathPoints + pt2idx;

	mov	eax, DWORD PTR _path_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pt2idx$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _pt2$[ebp], eax

; 2355 :     _EvaluateLine(pt1->x, pt1->y, pt2->x, pt2->y);

	mov	eax, DWORD PTR _pt2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pt2$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pt1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pt1$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine

; 2356 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_EvaluateLine@ScanLineData@@AAEXABUPathData@@HH@Z ENDP	; ScanLineData::_EvaluateLine
_TEXT	ENDS
EXTRN	__allshr:PROC
EXTRN	__allmul:PROC
EXTRN	__alldiv:PROC
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_EvaluateLine@ScanLineData@@AAEXHHHH@Z
_TEXT	SEGMENT
_ix$306595 = -168					; size = 4
_invslope$306588 = -156					; size = 8
_iy$306586 = -140					; size = 4
_y$306585 = -128					; size = 4
_dy$306584 = -116					; size = 4
_xacc$306582 = -104					; size = 8
_ix$306578 = -88					; size = 4
_invslope$306571 = -76					; size = 8
_iy$306569 = -60					; size = 4
_y$306568 = -48						; size = 4
_dy$306567 = -36					; size = 4
_xacc$306565 = -24					; size = 8
_this$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
?_EvaluateLine@ScanLineData@@AAEXHHHH@Z PROC		; ScanLineData::_EvaluateLine, COMDAT
; _this$ = ecx

; 2359 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2360 :     if(lastp.x != x0 || lastp.y != y0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _x0$[ebp]
	jne	SHORT $LN15@EvaluateLi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _y0$[ebp]
	je	SHORT $LN16@EvaluateLi
$LN15@EvaluateLi:

; 2361 :     {
; 2362 :         _EvaluateLine(lastp.x, lastp.y, x0, y0);

	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine
$LN16@EvaluateLi:

; 2363 :     }
; 2364 :     if(!fFirstSet) {firstp.x = x0; firstp.y = y0; fFirstSet = true;}

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN14@EvaluateLi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 1
$LN14@EvaluateLi:

; 2365 :     lastp.x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 2366 :     lastp.y = y1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 2367 :     if(y1 > y0)	// down

	mov	eax, DWORD PTR _y1$[ebp]
	cmp	eax, DWORD PTR _y0$[ebp]
	jle	$LN13@EvaluateLi

; 2368 :     {
; 2369 :         __int64 xacc = (__int64)x0 << 13;

	mov	eax, DWORD PTR _x0$[ebp]
	cdq
	mov	cl, 13					; 0000000dH
	call	__allshl
	mov	DWORD PTR _xacc$306565[ebp], eax
	mov	DWORD PTR _xacc$306565[ebp+4], edx

; 2370 :         // prestep y0 down
; 2371 :         int dy = y1 - y0;

	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _dy$306567[ebp], eax

; 2372 :         int y = ((y0 + 3)&~7) + 4;

	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 3
	and	eax, -8					; fffffff8H
	add	eax, 4
	mov	DWORD PTR _y$306568[ebp], eax

; 2373 :         int iy = y >> 3;

	mov	eax, DWORD PTR _y$306568[ebp]
	sar	eax, 3
	mov	DWORD PTR _iy$306569[ebp], eax

; 2374 :         y1 = (y1 - 5) >> 3;

	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, 5
	sar	eax, 3
	mov	DWORD PTR _y1$[ebp], eax

; 2375 :         if(iy <= y1)

	mov	eax, DWORD PTR _iy$306569[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	$LN12@EvaluateLi

; 2376 :         {
; 2377 :             __int64 invslope = (__int64(x1 - x0) << 16) / dy;

	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	cdq
	mov	cl, 16					; 00000010H
	call	__allshl
	mov	ecx, eax
	mov	esi, edx
	mov	eax, DWORD PTR _dy$306567[ebp]
	cdq
	push	edx
	push	eax
	push	esi
	push	ecx
	call	__alldiv
	mov	DWORD PTR _invslope$306571[ebp], eax
	mov	DWORD PTR _invslope$306571[ebp+4], edx
$LN11@EvaluateLi:

; 2378 :             while(mEdgeNext + y1 + 1 - iy > mEdgeHeapSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _y1$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	sub	eax, DWORD PTR _iy$306569[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+56]
	jbe	SHORT $LN10@EvaluateLi

; 2379 :                 _ReallocEdgeBuffer(mEdgeHeapSize*2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	shl	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_ReallocEdgeBuffer@ScanLineData@@AAEXH@Z ; ScanLineData::_ReallocEdgeBuffer
	jmp	SHORT $LN11@EvaluateLi
$LN10@EvaluateLi:

; 2380 :             xacc += (invslope * (y - y0)) >> 3;

	mov	eax, DWORD PTR _y$306568[ebp]
	sub	eax, DWORD PTR _y0$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _invslope$306571[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _invslope$306571[ebp]
	push	ecx
	call	__allmul
	mov	cl, 3
	call	__allshr
	add	eax, DWORD PTR _xacc$306565[ebp]
	adc	edx, DWORD PTR _xacc$306565[ebp+4]
	mov	DWORD PTR _xacc$306565[ebp], eax
	mov	DWORD PTR _xacc$306565[ebp+4], edx
$LN9@EvaluateLi:

; 2381 :             while(iy <= y1)

	mov	eax, DWORD PTR _iy$306569[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	$LN12@EvaluateLi

; 2382 :             {
; 2383 :                 int ix = (int)((xacc + 32768) >> 16);

	mov	eax, DWORD PTR _xacc$306565[ebp]
	add	eax, 32768				; 00008000H
	mov	edx, DWORD PTR _xacc$306565[ebp+4]
	adc	edx, 0
	mov	cl, 16					; 00000010H
	call	__allshr
	mov	DWORD PTR _ix$306578[ebp], eax

; 2384 :                 mpEdgeBuffer[mEdgeNext].next = mpScanBuffer[iy];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+52]
	mov	esi, DWORD PTR _iy$306569[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [edx+eax*8], ecx

; 2385 :                 mpEdgeBuffer[mEdgeNext].posandflag = ix*2 + 1;

	mov	eax, DWORD PTR _ix$306578[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+52]
	mov	DWORD PTR [edx+eax*8+4], ecx

; 2386 :                 mpScanBuffer[iy] = mEdgeNext++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _iy$306569[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx

; 2387 :                 ++iy;

	mov	eax, DWORD PTR _iy$306569[ebp]
	add	eax, 1
	mov	DWORD PTR _iy$306569[ebp], eax

; 2388 :                 xacc += invslope;

	mov	eax, DWORD PTR _xacc$306565[ebp]
	add	eax, DWORD PTR _invslope$306571[ebp]
	mov	ecx, DWORD PTR _xacc$306565[ebp+4]
	adc	ecx, DWORD PTR _invslope$306571[ebp+4]
	mov	DWORD PTR _xacc$306565[ebp], eax
	mov	DWORD PTR _xacc$306565[ebp+4], ecx

; 2389 :             }

	jmp	$LN9@EvaluateLi
$LN12@EvaluateLi:

; 2390 :         }
; 2391 :     }

	jmp	$LN17@EvaluateLi
$LN13@EvaluateLi:

; 2392 :     else if(y1 < y0) // up

	mov	eax, DWORD PTR _y1$[ebp]
	cmp	eax, DWORD PTR _y0$[ebp]
	jge	$LN17@EvaluateLi

; 2393 :     {
; 2394 :         __int64 xacc = (__int64)x1 << 13;

	mov	eax, DWORD PTR _x1$[ebp]
	cdq
	mov	cl, 13					; 0000000dH
	call	__allshl
	mov	DWORD PTR _xacc$306582[ebp], eax
	mov	DWORD PTR _xacc$306582[ebp+4], edx

; 2395 :         // prestep y1 down
; 2396 :         int dy = y0 - y1;

	mov	eax, DWORD PTR _y0$[ebp]
	sub	eax, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _dy$306584[ebp], eax

; 2397 :         int y = ((y1 + 3)&~7) + 4;

	mov	eax, DWORD PTR _y1$[ebp]
	add	eax, 3
	and	eax, -8					; fffffff8H
	add	eax, 4
	mov	DWORD PTR _y$306585[ebp], eax

; 2398 :         int iy = y >> 3;

	mov	eax, DWORD PTR _y$306585[ebp]
	sar	eax, 3
	mov	DWORD PTR _iy$306586[ebp], eax

; 2399 :         y0 = (y0 - 5) >> 3;

	mov	eax, DWORD PTR _y0$[ebp]
	sub	eax, 5
	sar	eax, 3
	mov	DWORD PTR _y0$[ebp], eax

; 2400 :         if(iy <= y0)

	mov	eax, DWORD PTR _iy$306586[ebp]
	cmp	eax, DWORD PTR _y0$[ebp]
	jg	$LN17@EvaluateLi

; 2401 :         {
; 2402 :             __int64 invslope = (__int64(x0 - x1) << 16) / dy;

	mov	eax, DWORD PTR _x0$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	cdq
	mov	cl, 16					; 00000010H
	call	__allshl
	mov	ecx, eax
	mov	esi, edx
	mov	eax, DWORD PTR _dy$306584[ebp]
	cdq
	push	edx
	push	eax
	push	esi
	push	ecx
	call	__alldiv
	mov	DWORD PTR _invslope$306588[ebp], eax
	mov	DWORD PTR _invslope$306588[ebp+4], edx
$LN4@EvaluateLi:

; 2403 :             while(mEdgeNext + y0 + 1 - iy > mEdgeHeapSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _y0$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	sub	eax, DWORD PTR _iy$306586[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+56]
	jbe	SHORT $LN3@EvaluateLi

; 2404 :                 _ReallocEdgeBuffer(mEdgeHeapSize*2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	shl	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_ReallocEdgeBuffer@ScanLineData@@AAEXH@Z ; ScanLineData::_ReallocEdgeBuffer
	jmp	SHORT $LN4@EvaluateLi
$LN3@EvaluateLi:

; 2405 :             xacc += (invslope * (y - y1)) >> 3;

	mov	eax, DWORD PTR _y$306585[ebp]
	sub	eax, DWORD PTR _y1$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _invslope$306588[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _invslope$306588[ebp]
	push	ecx
	call	__allmul
	mov	cl, 3
	call	__allshr
	add	eax, DWORD PTR _xacc$306582[ebp]
	adc	edx, DWORD PTR _xacc$306582[ebp+4]
	mov	DWORD PTR _xacc$306582[ebp], eax
	mov	DWORD PTR _xacc$306582[ebp+4], edx
$LN2@EvaluateLi:

; 2406 :             while(iy <= y0)

	mov	eax, DWORD PTR _iy$306586[ebp]
	cmp	eax, DWORD PTR _y0$[ebp]
	jg	$LN17@EvaluateLi

; 2407 :             {
; 2408 :                 int ix = (int)((xacc + 32768) >> 16);

	mov	eax, DWORD PTR _xacc$306582[ebp]
	add	eax, 32768				; 00008000H
	mov	edx, DWORD PTR _xacc$306582[ebp+4]
	adc	edx, 0
	mov	cl, 16					; 00000010H
	call	__allshr
	mov	DWORD PTR _ix$306595[ebp], eax

; 2409 :                 mpEdgeBuffer[mEdgeNext].next = mpScanBuffer[iy];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+52]
	mov	esi, DWORD PTR _iy$306586[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [edx+eax*8], ecx

; 2410 :                 mpEdgeBuffer[mEdgeNext].posandflag = ix*2;

	mov	eax, DWORD PTR _ix$306595[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 2411 :                 mpScanBuffer[iy] = mEdgeNext++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _iy$306586[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx

; 2412 :                 ++iy;

	mov	eax, DWORD PTR _iy$306586[ebp]
	add	eax, 1
	mov	DWORD PTR _iy$306586[ebp], eax

; 2413 :                 xacc += invslope;

	mov	eax, DWORD PTR _xacc$306582[ebp]
	add	eax, DWORD PTR _invslope$306588[ebp]
	mov	ecx, DWORD PTR _xacc$306582[ebp+4]
	adc	ecx, DWORD PTR _invslope$306588[ebp+4]
	mov	DWORD PTR _xacc$306582[ebp], eax
	mov	DWORD PTR _xacc$306582[ebp+4], ecx

; 2414 :             }

	jmp	$LN2@EvaluateLi
$LN17@EvaluateLi:

; 2415 :         }
; 2416 :     }
; 2417 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_EvaluateLine@ScanLineData@@AAEXHHHH@Z ENDP		; ScanLineData::_EvaluateLine
_TEXT	ENDS
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::~_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
PUBLIC	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
PUBLIC	??$?0_J_J@?$pair@_K_K@std@@QAE@$$QAU?$pair@_J_J@1@@Z ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><__int64,__int64>
PUBLIC	??0?$pair@_J_J@std@@QAE@$$QA_J0@Z		; std::pair<__int64,__int64>::pair<__int64,__int64>
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear
PUBLIC	?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z ; ScanLineData::ScanConvert
EXTRN	??0CPoint@@QAE@UtagPOINT@@@Z:PROC		; CPoint::CPoint
EXTRN	??9CPoint@@QBEHUtagPOINT@@@Z:PROC		; CPoint::operator!=
EXTRN	__RTC_UninitUse:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z$4
__ehfuncinfo$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z
_TEXT	SEGMENT
tv412 = -608						; size = 4
tv592 = -604						; size = 8
tv409 = -604						; size = 4
tv300 = -600						; size = 4
tv169 = -600						; size = 4
$T329208 = -592						; size = 4
$T329209 = -580						; size = 8
$T329210 = -564						; size = 8
$T329211 = -548						; size = 8
$T329212 = -532						; size = 4
$T329213 = -520						; size = 4
$T329214 = -508						; size = 16
$T329215 = -484						; size = 16
$T329216 = -460						; size = 8
$T329217 = -444						; size = 8
$T329218 = -428						; size = 4
$T329219 = -413						; size = 1
$T329227 = -401						; size = 1
_x$307148 = -200					; size = 4
_x2$307128 = -188					; size = 4
_x1$307127 = -176					; size = 4
_itX2$307125 = -164					; size = 12
_itX1$307119 = -144					; size = 12
_ptr$306963 = -124					; size = 4
_count$306962 = -112					; size = 4
_y$ = -100						; size = 8
_heap$ = -84						; size = 20
_t$306613 = -53						; size = 1
_i$ = -44						; size = 4
_lastmoveto$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_path_data$ = 8						; size = 4
_size$ = 12						; size = 4
?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z PROC ; ScanLineData::ScanConvert, COMDAT
; _this$ = ecx

; 2420 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 596				; 00000254H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-608]
	mov	ecx, 149				; 00000095H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2421 :     int lastmoveto = -1;

	mov	DWORD PTR _lastmoveto$[ebp], -1

; 2422 :     int i;
; 2423 :     // Drop any outlines we may have.
; 2424 :     mOutline.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear

; 2425 :     // Determine bounding box
; 2426 :     if(!path_data.mPathPoints)

	mov	eax, DWORD PTR _path_data$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN32@ScanConver

; 2427 :     {
; 2428 :         mWidth = mHeight = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 2429 :         return false;

	xor	al, al
	jmp	$LN33@ScanConver
$LN32@ScanConver:

; 2430 :     }
; 2431 :     mWidth = size.cx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx

; 2432 :     mHeight = size.cy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 2433 :     // Initialize edge buffer.  We use edge 0 as a sentinel.
; 2434 :     mEdgeNext = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 1

; 2435 :     mEdgeHeapSize = 2048;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 2048		; 00000800H

; 2436 :     mpEdgeBuffer = (Edge*)malloc(sizeof(Edge)*mEdgeHeapSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	shl	ecx, 3
	push	ecx
	call	_malloc
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], eax

; 2437 :     // Initialize scanline list.
; 2438 :     mpScanBuffer = new unsigned int[mHeight];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T329208[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T329208[ebp]
	mov	DWORD PTR [eax+64], ecx

; 2439 :     memset(mpScanBuffer, 0, mHeight*sizeof(unsigned int));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shl	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2440 :     // Scan convert the outline.  Yuck, Bezier curves....
; 2441 :     // Unfortunately, Windows 95/98 GDI has a bad habit of giving us text
; 2442 :     // paths with all but the first figure left open, so we can't rely
; 2443 :     // on the PT_CLOSEFIGURE flag being used appropriately.
; 2444 :     fFirstSet = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0

; 2445 :     firstp.x = firstp.y = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 2446 :     lastp.x = lastp.y = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 2447 :     for(i=0; i<path_data.mPathPoints; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@ScanConver
$LN30@ScanConver:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN31@ScanConver:
	mov	eax, DWORD PTR _path_data$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	$LN29@ScanConver

; 2448 :     {
; 2449 :         BYTE t = path_data.mpPathTypes[i] & ~PT_CLOSEFIGURE;

	mov	eax, DWORD PTR _path_data$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	and	eax, -2					; fffffffeH
	mov	BYTE PTR _t$306613[ebp], al

; 2450 :         switch(t)

	movzx	eax, BYTE PTR _t$306613[ebp]
	mov	DWORD PTR tv169[ebp], eax
	mov	ecx, DWORD PTR tv169[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv169[ebp], ecx
	cmp	DWORD PTR tv169[ebp], 250		; 000000faH
	ja	$LN27@ScanConver
	mov	edx, DWORD PTR tv169[ebp]
	movzx	eax, BYTE PTR $LN43@ScanConver[edx]
	jmp	DWORD PTR $LN51@ScanConver[eax*4]
$LN26@ScanConver:

; 2451 :         {
; 2452 :         case PT_MOVETO:
; 2453 :             if(lastmoveto >= 0 && firstp != lastp)

	cmp	DWORD PTR _lastmoveto$[ebp], 0
	jl	SHORT $LN25@ScanConver
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR $T329209[ebp], ecx
	mov	DWORD PTR $T329209[ebp+4], edx
	mov	eax, DWORD PTR $T329209[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T329209[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??9CPoint@@QBEHUtagPOINT@@@Z		; CPoint::operator!=
	test	eax, eax
	je	SHORT $LN25@ScanConver

; 2454 :                 _EvaluateLine(lastp.x, lastp.y, firstp.x, firstp.y);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine
$LN25@ScanConver:

; 2455 :             lastmoveto = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _lastmoveto$[ebp], eax

; 2456 :             fFirstSet = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0

; 2457 :             lastp = path_data.mpPathPoints[i];

	mov	eax, DWORD PTR _path_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	push	eax
	mov	ecx, DWORD PTR [ecx+edx*8]
	push	ecx
	lea	ecx, DWORD PTR $T329210[ebp]
	call	??0CPoint@@QAE@UtagPOINT@@@Z		; CPoint::CPoint
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T329210[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR $T329210[ebp+4]
	mov	DWORD PTR [edx+20], ecx

; 2458 :             break;

	jmp	$LN27@ScanConver

; 2459 :         case PT_MOVETONC:
; 2460 :             break;

	jmp	$LN27@ScanConver
$LN23@ScanConver:

; 2461 :         case PT_LINETO:
; 2462 :             if(path_data.mPathPoints - (i-1) >= 2) _EvaluateLine(path_data, i-1, i);

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _path_data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	cmp	edx, 2
	jl	SHORT $LN22@ScanConver
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _path_data$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_EvaluateLine@ScanLineData@@AAEXABUPathData@@HH@Z ; ScanLineData::_EvaluateLine
$LN22@ScanConver:

; 2463 :             break;

	jmp	$LN27@ScanConver
$LN21@ScanConver:

; 2464 :         case PT_BEZIERTO:
; 2465 :             if(path_data.mPathPoints - (i-1) >= 4) _EvaluateBezier(path_data, i-1, false);

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _path_data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	cmp	edx, 4
	jl	SHORT $LN20@ScanConver
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _path_data$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z ; ScanLineData::_EvaluateBezier
$LN20@ScanConver:

; 2466 :             i += 2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	mov	DWORD PTR _i$[ebp], eax

; 2467 :             break;

	jmp	SHORT $LN27@ScanConver
$LN19@ScanConver:

; 2468 :         case PT_BSPLINETO:
; 2469 :             if(path_data.mPathPoints - (i-1) >= 4) _EvaluateBezier(path_data, i-1, true);

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _path_data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	cmp	edx, 4
	jl	SHORT $LN18@ScanConver
	push	1
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _path_data$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z ; ScanLineData::_EvaluateBezier
$LN18@ScanConver:

; 2470 :             i += 2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	mov	DWORD PTR _i$[ebp], eax

; 2471 :             break;

	jmp	SHORT $LN27@ScanConver
$LN17@ScanConver:

; 2472 :         case PT_BSPLINEPATCHTO:
; 2473 :             if(path_data.mPathPoints - (i-3) >= 4) _EvaluateBezier(path_data, i-3, true);

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 3
	mov	ecx, DWORD PTR _path_data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	cmp	edx, 4
	jl	SHORT $LN27@ScanConver
	push	1
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 3
	push	eax
	mov	ecx, DWORD PTR _path_data$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z ; ScanLineData::_EvaluateBezier
$LN27@ScanConver:

; 2474 :             break;
; 2475 :         }
; 2476 :     }

	jmp	$LN30@ScanConver
$LN29@ScanConver:

; 2477 :     if(lastmoveto >= 0 && firstp != lastp)

	cmp	DWORD PTR _lastmoveto$[ebp], 0
	jl	SHORT $LN15@ScanConver
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR $T329211[ebp], ecx
	mov	DWORD PTR $T329211[ebp+4], edx
	mov	eax, DWORD PTR $T329211[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T329211[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??9CPoint@@QBEHUtagPOINT@@@Z		; CPoint::operator!=
	test	eax, eax
	je	SHORT $LN15@ScanConver

; 2478 :         _EvaluateLine(lastp.x, lastp.y, firstp.x, firstp.y);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine
$LN15@ScanConver:

; 2479 :     // Convert the edges to spans.  We couldn't do this before because some of
; 2480 :     // the regions may have winding numbers >+1 and it would have been a pain
; 2481 :     // to try to adjust the spans on the fly.  We use one heap to detangle
; 2482 :     // a scanline's worth of edges from the singly-linked lists, and another
; 2483 :     // to collect the actual scans.
; 2484 :     std::vector<int> heap;

	lea	ecx, DWORD PTR _heap$[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2485 :     mOutline.reserve(mEdgeNext / 2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	shr	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve

; 2486 :     __int64 y = 0;

	mov	DWORD PTR _y$[ebp], 0
	mov	DWORD PTR _y$[ebp+4], 0

; 2487 :     for(y=0; y<mHeight; ++y)

	mov	DWORD PTR _y$[ebp], 0
	mov	DWORD PTR _y$[ebp+4], 0
	jmp	SHORT $LN14@ScanConver
$LN13@ScanConver:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _y$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _y$[ebp], eax
	mov	DWORD PTR _y$[ebp+4], ecx
$LN14@ScanConver:
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	cdq
	mov	DWORD PTR tv592[ebp], eax
	mov	DWORD PTR tv592[ebp+4], edx
	mov	ecx, DWORD PTR _y$[ebp+4]
	cmp	ecx, DWORD PTR tv592[ebp+4]
	jg	$LN12@ScanConver
	jl	SHORT $LN44@ScanConver
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR tv592[ebp]
	jae	$LN12@ScanConver
$LN44@ScanConver:
	mov	BYTE PTR $T329227[ebp], 0

; 2488 :     {
; 2489 :         int count = 0;

	mov	DWORD PTR _count$306962[ebp], 0

; 2490 :         // Detangle scanline into edge heap.
; 2491 :         for(unsigned ptr = (unsigned)(mpScanBuffer[y]&0xffffffff); ptr; ptr = mpEdgeBuffer[ptr].next)

	push	0
	push	4
	mov	eax, DWORD PTR _y$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+64]
	mov	edx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _ptr$306963[ebp], edx
	jmp	SHORT $LN11@ScanConver
$LN10@ScanConver:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _ptr$306963[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _ptr$306963[ebp], eax
$LN11@ScanConver:
	cmp	DWORD PTR _ptr$306963[ebp], 0
	je	SHORT $LN9@ScanConver

; 2492 :         {
; 2493 :             heap.push_back(mpEdgeBuffer[ptr].posandflag);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _ptr$306963[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+4]
	push	eax
	lea	ecx, DWORD PTR _heap$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 2494 :         }

	jmp	SHORT $LN10@ScanConver
$LN9@ScanConver:

; 2495 :         // Sort edge heap.  Note that we conveniently made the opening edges
; 2496 :         // one more than closing edges at the same spot, so we won't have any
; 2497 :         // problems with abutting spans.
; 2498 :         std::sort(heap.begin(), heap.end()/*begin() + heap.size()*/);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T329212[ebp], esp
	push	eax
	lea	ecx, DWORD PTR _heap$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv300[ebp], eax
	mov	ecx, DWORD PTR tv300[ebp]
	mov	DWORD PTR tv409[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T329213[ebp], esp
	push	edx
	lea	ecx, DWORD PTR _heap$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	DWORD PTR tv412[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	call	??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
	add	esp, 24					; 00000018H

; 2499 :         // Process edges and add spans.  Since we only check for a non-zero
; 2500 :         // winding number, it doesn't matter which way the outlines go!
; 2501 :         std::vector<int>::iterator itX1 = heap.begin();

	lea	eax, DWORD PTR _itX1$307119[ebp]
	push	eax
	lea	ecx, DWORD PTR _heap$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 2502 :         std::vector<int>::iterator itX2 = heap.end(); // begin() + heap.size();

	lea	eax, DWORD PTR _itX2$307125[ebp]
	push	eax
	lea	ecx, DWORD PTR _heap$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	jmp	SHORT $LN8@ScanConver
$LN7@ScanConver:

; 2503 :         int x1, x2;
; 2504 :         for(; itX1 != itX2; ++itX1)

	lea	ecx, DWORD PTR _itX1$307119[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
$LN8@ScanConver:
	lea	eax, DWORD PTR _itX2$307125[ebp]
	push	eax
	lea	ecx, DWORD PTR _itX1$307119[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN6@ScanConver

; 2505 :         {
; 2506 :             int x = *itX1;

	lea	ecx, DWORD PTR _itX1$307119[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _x$307148[ebp], eax

; 2507 :             if(!count)

	cmp	DWORD PTR _count$306962[ebp], 0
	jne	SHORT $LN5@ScanConver

; 2508 :                 x1 = (x>>1);

	mov	eax, DWORD PTR _x$307148[ebp]
	sar	eax, 1
	mov	BYTE PTR $T329227[ebp], 1
	mov	DWORD PTR _x1$307127[ebp], eax
$LN5@ScanConver:

; 2509 :             if(x&1)

	mov	eax, DWORD PTR _x$307148[ebp]
	and	eax, 1
	je	SHORT $LN4@ScanConver

; 2510 :                 ++count;

	mov	eax, DWORD PTR _count$306962[ebp]
	add	eax, 1
	mov	DWORD PTR _count$306962[ebp], eax

; 2511 :             else

	jmp	SHORT $LN3@ScanConver
$LN4@ScanConver:

; 2512 :                 --count;

	mov	eax, DWORD PTR _count$306962[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$306962[ebp], eax
$LN3@ScanConver:

; 2513 :             if(!count)

	cmp	DWORD PTR _count$306962[ebp], 0
	jne	$LN2@ScanConver

; 2514 :             {
; 2515 :                 x2 = (x>>1);

	mov	eax, DWORD PTR _x$307148[ebp]
	sar	eax, 1
	mov	DWORD PTR _x2$307128[ebp], eax

; 2516 :                 if(x2>x1)

	cmp	BYTE PTR $T329227[ebp], 0
	jne	SHORT $LN40@ScanConver
	push	OFFSET $LN41@ScanConver
	call	__RTC_UninitUse
	add	esp, 4
$LN40@ScanConver:
	mov	eax, DWORD PTR _x2$307128[ebp]
	cmp	eax, DWORD PTR _x1$307127[ebp]
	jle	$LN2@ScanConver

; 2517 :                     mOutline.push_back(std::pair<__int64,__int64>((y<<32)+x1+0x4000000040000000i64, (y<<32)+x2+0x4000000040000000i64)); // G: damn Avery, this is evil! :)

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _y$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	ecx, eax
	mov	esi, edx
	mov	eax, DWORD PTR _x2$307128[ebp]
	cdq
	add	ecx, eax
	adc	esi, edx
	add	ecx, 1073741824				; 40000000H
	adc	esi, 1073741824				; 40000000H
	mov	DWORD PTR $T329216[ebp], ecx
	mov	DWORD PTR $T329216[ebp+4], esi
	cmp	BYTE PTR $T329227[ebp], 0
	jne	SHORT $LN42@ScanConver
	push	OFFSET $LN41@ScanConver
	call	__RTC_UninitUse
	add	esp, 4
$LN42@ScanConver:
	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _y$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	ecx, eax
	mov	esi, edx
	mov	eax, DWORD PTR _x1$307127[ebp]
	cdq
	add	ecx, eax
	adc	esi, edx
	add	ecx, 1073741824				; 40000000H
	adc	esi, 1073741824				; 40000000H
	mov	DWORD PTR $T329217[ebp], ecx
	mov	DWORD PTR $T329217[ebp+4], esi
	lea	edx, DWORD PTR $T329216[ebp]
	push	edx
	lea	eax, DWORD PTR $T329217[ebp]
	push	eax
	lea	ecx, DWORD PTR $T329215[ebp]
	call	??0?$pair@_J_J@std@@QAE@$$QA_J0@Z	; std::pair<__int64,__int64>::pair<__int64,__int64>
	push	eax
	lea	ecx, DWORD PTR $T329214[ebp]
	call	??$?0_J_J@?$pair@_K_K@std@@QAE@$$QAU?$pair@_J_J@1@@Z ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><__int64,__int64>
	lea	ecx, DWORD PTR $T329214[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
$LN2@ScanConver:

; 2518 :             }
; 2519 :         }

	jmp	$LN7@ScanConver
$LN6@ScanConver:

; 2520 :         heap.clear();

	lea	ecx, DWORD PTR _heap$[ebp]
	call	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear

; 2521 :     }

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itX2$307125[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _itX1$307119[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	jmp	$LN13@ScanConver
$LN12@ScanConver:

; 2522 :     // Dump the edge and scan buffers, since we no longer need them.
; 2523 :     free(mpEdgeBuffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_free
	add	esp, 4

; 2524 :     delete [] mpScanBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR $T329218[ebp], ecx
	mov	edx, DWORD PTR $T329218[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2525 :     // All done!
; 2526 :     return true;

	mov	BYTE PTR $T329219[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _heap$[ebp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	al, BYTE PTR $T329219[ebp]
$LN33@ScanConver:

; 2527 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN50@ScanConver
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 608				; 00000260H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN50@ScanConver:
	DD	3
	DD	$LN49@ScanConver
$LN49@ScanConver:
	DD	-84					; ffffffacH
	DD	20					; 00000014H
	DD	$LN45@ScanConver
	DD	-144					; ffffff70H
	DD	12					; 0000000cH
	DD	$LN46@ScanConver
	DD	-164					; ffffff5cH
	DD	12					; 0000000cH
	DD	$LN47@ScanConver
$LN47@ScanConver:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	88					; 00000058H
	DB	50					; 00000032H
	DB	0
$LN46@ScanConver:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	88					; 00000058H
	DB	49					; 00000031H
	DB	0
$LN45@ScanConver:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN41@ScanConver:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	0
	npad	2
$LN51@ScanConver:
	DD	$LN23@ScanConver
	DD	$LN21@ScanConver
	DD	$LN26@ScanConver
	DD	$LN17@ScanConver
	DD	$LN19@ScanConver
	DD	$LN27@ScanConver
$LN43@ScanConver:
	DB	0
	DB	5
	DB	1
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z$0:
	lea	ecx, DWORD PTR _heap$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z$1:
	mov	ecx, DWORD PTR $T329212[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z$3:
	lea	ecx, DWORD PTR _itX1$307119[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z$4:
	lea	ecx, DWORD PTR _itX2$307125[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__ehhandler$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-612]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z ENDP ; ScanLineData::ScanConvert
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::~_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::~_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::~_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::~_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::~_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
_TEXT	ENDS
PUBLIC	?DeleteOutlines@ScanLineData@@QAEXXZ		; ScanLineData::DeleteOutlines
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DeleteOutlines@ScanLineData@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DeleteOutlines@ScanLineData@@QAEXXZ PROC		; ScanLineData::DeleteOutlines, COMDAT
; _this$ = ecx

; 2532 : {    

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2533 :     mOutline.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear

; 2534 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteOutlines@ScanLineData@@QAEXXZ ENDP		; ScanLineData::DeleteOutlines
_TEXT	ENDS
PUBLIC	??$?0$$CB_K$$CB_K@?$pair@_K_K@std@@QAE@$$QB_K0@Z ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >
PUBLIC	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
PUBLIC	??$?0AA_KAA_K@?$pair@_K_K@std@@QAE@AA_K0@Z	; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::~_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
PUBLIC	??$max@_K@std@@YAAB_KAB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator==
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
PUBLIC	?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
PUBLIC	?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
PUBLIC	?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::swap
PUBLIC	?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size
PUBLIC	?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z ; ScanLineData2::_OverlapRegion
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$8
	DD	04H
	DD	FLAT:__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$9
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z
_TEXT	SEGMENT
tv584 = -656						; size = 4
tv737 = -652						; size = 8
tv704 = -652						; size = 8
tv677 = -652						; size = 8
tv644 = -652						; size = 8
tv581 = -652						; size = 8
tv481 = -652						; size = 4
tv479 = -652						; size = 4
tv477 = -652						; size = 4
tv475 = -652						; size = 4
tv473 = -652						; size = 4
tv767 = -648						; size = 4
tv747 = -648						; size = 4
tv628 = -648						; size = 4
tv608 = -648						; size = 4
tv89 = -648						; size = 4
tv85 = -648						; size = 4
tv81 = -648						; size = 4
tv77 = -648						; size = 4
tv65 = -648						; size = 4
$T329257 = -640						; size = 12
$T329258 = -620						; size = 8
$T329259 = -604						; size = 12
$T329260 = -584						; size = 16
$T329261 = -560						; size = 8
$T329262 = -544						; size = 12
$T329263 = -524						; size = 12
$T329264 = -504						; size = 16
$T329265 = -480						; size = 12
$T329266 = -460						; size = 16
$T329267 = -436						; size = 8
$T329268 = -420						; size = 8
_x2$307443 = -212					; size = 8
_x1$307442 = -196					; size = 8
_x2$307411 = -180					; size = 8
_x1$307410 = -164					; size = 8
_offset2$ = -148					; size = 8
_offset1$ = -132					; size = 8
_itBE$ = -116						; size = 12
_itB$ = -96						; size = 12
_itAE$ = -76						; size = 12
_itA$ = -56						; size = 12
_temp$ = -36						; size = 20
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z PROC ; ScanLineData2::_OverlapRegion, COMDAT

; 2537 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 644				; 00000284H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-656]
	mov	ecx, 161				; 000000a1H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2538 :     tSpanBuffer temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2539 :     temp.reserve(dst.size() + src.size());

	mov	ecx, DWORD PTR _dst$[ebp]
	call	?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size
	add	esi, eax
	push	esi
	lea	ecx, DWORD PTR _temp$[ebp]
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve

; 2540 :     dst.swap(temp);

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	call	?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::swap

; 2541 :     tSpanBuffer::iterator itA = temp.begin();

	lea	eax, DWORD PTR _itA$[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	call	?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 2542 :     tSpanBuffer::iterator itAE = temp.end();

	lea	eax, DWORD PTR _itAE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	call	?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 2543 :     tSpanBuffer::const_iterator itB = src.begin();

	lea	eax, DWORD PTR _itB$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 2544 :     tSpanBuffer::const_iterator itBE = src.end();

	lea	eax, DWORD PTR _itBE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 2545 :     // Don't worry -- even if dy<0 this will still work! // G: hehe, the evil twin :)
; 2546 :     unsigned __int64 offset1 = (((__int64)dy)<<32) - dx;

	mov	eax, DWORD PTR _dy$[ebp]
	cdq
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	ecx, eax
	mov	esi, edx
	mov	eax, DWORD PTR _dx$[ebp]
	cdq
	sub	ecx, eax
	sbb	esi, edx
	mov	DWORD PTR _offset1$[ebp], ecx
	mov	DWORD PTR _offset1$[ebp+4], esi

; 2547 :     unsigned __int64 offset2 = (((__int64)dy)<<32) + dx;

	mov	eax, DWORD PTR _dy$[ebp]
	cdq
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	ecx, eax
	mov	esi, edx
	mov	eax, DWORD PTR _dx$[ebp]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	DWORD PTR _offset2$[ebp], ecx
	mov	DWORD PTR _offset2$[ebp+4], esi
$LN36@OverlapReg:

; 2548 :     while(itA != itAE && itB != itBE)

	lea	eax, DWORD PTR _itAE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@OverlapReg
	lea	eax, DWORD PTR _itBE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@OverlapReg

; 2549 :     {
; 2550 :         if((*itB).first + offset1 < (*itA).first)

	lea	ecx, DWORD PTR _itB$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	esi, DWORD PTR [eax]
	add	esi, DWORD PTR _offset1$[ebp]
	mov	edi, DWORD PTR [eax+4]
	adc	edi, DWORD PTR _offset1$[ebp+4]
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	DWORD PTR tv581[ebp], esi
	mov	DWORD PTR tv581[ebp+4], edi
	mov	DWORD PTR tv584[ebp], eax
	mov	eax, DWORD PTR tv584[ebp]
	mov	ecx, DWORD PTR tv581[ebp+4]
	cmp	ecx, DWORD PTR [eax+4]
	ja	$LN34@OverlapReg
	jb	SHORT $LN49@OverlapReg
	mov	edx, DWORD PTR tv584[ebp]
	mov	eax, DWORD PTR tv581[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	$LN34@OverlapReg
$LN49@OverlapReg:

; 2551 :         {
; 2552 :             // B span is earlier.  Use it.
; 2553 :             unsigned __int64 x1 = (*itB).first + offset1;

	lea	ecx, DWORD PTR _itB$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offset1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	adc	edx, DWORD PTR _offset1$[ebp+4]
	mov	DWORD PTR _x1$307410[ebp], ecx
	mov	DWORD PTR _x1$307410[ebp+4], edx

; 2554 :             unsigned __int64 x2 = (*itB).second + offset2;

	lea	ecx, DWORD PTR _itB$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _offset2$[ebp]
	mov	edx, DWORD PTR [eax+12]
	adc	edx, DWORD PTR _offset2$[ebp+4]
	mov	DWORD PTR _x2$307411[ebp], ecx
	mov	DWORD PTR _x2$307411[ebp+4], edx

; 2555 :             ++itB;

	lea	ecx, DWORD PTR _itB$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
$LN33@OverlapReg:

; 2556 :             // B spans don't overlap, so begin merge loop with A first.
; 2557 :             for(;;)
; 2558 :             {
; 2559 :                 // If we run out of A spans or the A span doesn't overlap,
; 2560 :                 // then the next B span can't either (because B spans don't
; 2561 :                 // overlap) and we exit.
; 2562 :                 if(itA == itAE || (*itA).first > x2)

	lea	eax, DWORD PTR _itAE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN30@OverlapReg
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	DWORD PTR tv608[ebp], eax
	mov	eax, DWORD PTR tv608[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _x2$307411[ebp+4]
	jb	SHORT $LN29@OverlapReg
	ja	SHORT $LN30@OverlapReg
	mov	edx, DWORD PTR tv608[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _x2$307411[ebp]
	jbe	SHORT $LN29@OverlapReg
$LN30@OverlapReg:

; 2563 :                     break;

	jmp	$LN32@OverlapReg
$LN29@OverlapReg:

; 2564 :                 do {x2 = _MAX(x2, (*itA++).second);}

	push	0
	lea	eax, DWORD PTR $T329257[ebp]
	push	eax
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
	mov	DWORD PTR tv89[ebp], eax
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR tv473[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv473[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	add	eax, 8
	push	eax
	lea	edx, DWORD PTR _x2$307411[ebp]
	push	edx
	call	??$max@_K@std@@YAAB_KAB_K0@Z		; std::max<unsigned __int64>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x2$307411[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x2$307411[ebp+4], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T329257[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ

; 2565 :                 while(itA != itAE && (*itA).first <= x2);

	lea	eax, DWORD PTR _itAE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN27@OverlapReg
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	DWORD PTR tv628[ebp], eax
	mov	eax, DWORD PTR tv628[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _x2$307411[ebp+4]
	jb	$LN29@OverlapReg
	ja	SHORT $LN27@OverlapReg
	mov	edx, DWORD PTR tv628[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _x2$307411[ebp]
	jbe	$LN29@OverlapReg
$LN27@OverlapReg:

; 2566 :                 // If we run out of B spans or the B span doesn't overlap,
; 2567 :                 // then the next A span can't either (because A spans don't
; 2568 :                 // overlap) and we exit.
; 2569 :                 if(itB == itBE || (*itB).first + offset1 > x2)

	lea	eax, DWORD PTR _itBE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@OverlapReg
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offset1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	adc	edx, DWORD PTR _offset1$[ebp+4]
	mov	DWORD PTR tv644[ebp], ecx
	mov	DWORD PTR tv644[ebp+4], edx
	mov	eax, DWORD PTR tv644[ebp+4]
	cmp	eax, DWORD PTR _x2$307411[ebp+4]
	jb	SHORT $LN23@OverlapReg
	ja	SHORT $LN24@OverlapReg
	mov	ecx, DWORD PTR tv644[ebp]
	cmp	ecx, DWORD PTR _x2$307411[ebp]
	jbe	SHORT $LN23@OverlapReg
$LN24@OverlapReg:

; 2570 :                     break;

	jmp	$LN32@OverlapReg
$LN23@OverlapReg:

; 2571 :                 do {x2 = _MAX(x2, (*itB++).second + offset2);}

	push	0
	lea	eax, DWORD PTR $T329259[ebp]
	push	eax
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR tv475[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR tv475[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	edx, DWORD PTR [eax+8]
	add	edx, DWORD PTR _offset2$[ebp]
	mov	eax, DWORD PTR [eax+12]
	adc	eax, DWORD PTR _offset2$[ebp+4]
	mov	DWORD PTR $T329258[ebp], edx
	mov	DWORD PTR $T329258[ebp+4], eax
	lea	ecx, DWORD PTR $T329258[ebp]
	push	ecx
	lea	edx, DWORD PTR _x2$307411[ebp]
	push	edx
	call	??$max@_K@std@@YAAB_KAB_K0@Z		; std::max<unsigned __int64>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x2$307411[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x2$307411[ebp+4], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T329259[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ

; 2572 :                 while(itB != itBE && (*itB).first + offset1 <= x2);

	lea	eax, DWORD PTR _itBE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN21@OverlapReg
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offset1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	adc	edx, DWORD PTR _offset1$[ebp+4]
	mov	DWORD PTR tv677[ebp], ecx
	mov	DWORD PTR tv677[ebp+4], edx
	mov	eax, DWORD PTR tv677[ebp+4]
	cmp	eax, DWORD PTR _x2$307411[ebp+4]
	jb	$LN23@OverlapReg
	ja	SHORT $LN21@OverlapReg
	mov	ecx, DWORD PTR tv677[ebp]
	cmp	ecx, DWORD PTR _x2$307411[ebp]
	jbe	$LN23@OverlapReg
$LN21@OverlapReg:

; 2573 :             }

	jmp	$LN33@OverlapReg
$LN32@OverlapReg:

; 2574 :             // Flush span.
; 2575 :             dst.push_back(tSpan(x1, x2));

	lea	eax, DWORD PTR _x2$307411[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1$307410[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T329260[ebp]
	call	??$?0AA_KAA_K@?$pair@_K_K@std@@QAE@AA_K0@Z ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	call	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back

; 2576 :         }
; 2577 :         else

	jmp	$LN19@OverlapReg
$LN34@OverlapReg:

; 2578 :         {
; 2579 :             // A span is earlier.  Use it.
; 2580 :             unsigned __int64 x1 = (*itA).first;

	lea	ecx, DWORD PTR _itA$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x1$307442[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x1$307442[ebp+4], edx

; 2581 :             unsigned __int64 x2 = (*itA).second;

	lea	ecx, DWORD PTR _itA$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _x2$307443[ebp], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _x2$307443[ebp+4], edx

; 2582 :             ++itA;

	lea	ecx, DWORD PTR _itA$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
$LN18@OverlapReg:

; 2583 :             // A spans don't overlap, so begin merge loop with B first.
; 2584 :             for(;;)
; 2585 :             {
; 2586 :                 // If we run out of B spans or the B span doesn't overlap,
; 2587 :                 // then the next A span can't either (because A spans don't
; 2588 :                 // overlap) and we exit.
; 2589 :                 if(itB == itBE || (*itB).first + offset1 > x2)

	lea	eax, DWORD PTR _itBE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN15@OverlapReg
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offset1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	adc	edx, DWORD PTR _offset1$[ebp+4]
	mov	DWORD PTR tv704[ebp], ecx
	mov	DWORD PTR tv704[ebp+4], edx
	mov	eax, DWORD PTR tv704[ebp+4]
	cmp	eax, DWORD PTR _x2$307443[ebp+4]
	jb	SHORT $LN14@OverlapReg
	ja	SHORT $LN15@OverlapReg
	mov	ecx, DWORD PTR tv704[ebp]
	cmp	ecx, DWORD PTR _x2$307443[ebp]
	jbe	SHORT $LN14@OverlapReg
$LN15@OverlapReg:

; 2590 :                     break;

	jmp	$LN17@OverlapReg
$LN14@OverlapReg:

; 2591 :                 do {x2 = _MAX(x2, (*itB++).second + offset2);}

	push	0
	lea	eax, DWORD PTR $T329262[ebp]
	push	eax
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR tv477[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR tv477[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	edx, DWORD PTR [eax+8]
	add	edx, DWORD PTR _offset2$[ebp]
	mov	eax, DWORD PTR [eax+12]
	adc	eax, DWORD PTR _offset2$[ebp+4]
	mov	DWORD PTR $T329261[ebp], edx
	mov	DWORD PTR $T329261[ebp+4], eax
	lea	ecx, DWORD PTR $T329261[ebp]
	push	ecx
	lea	edx, DWORD PTR _x2$307443[ebp]
	push	edx
	call	??$max@_K@std@@YAAB_KAB_K0@Z		; std::max<unsigned __int64>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x2$307443[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x2$307443[ebp+4], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T329262[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ

; 2592 :                 while(itB != itBE && (*itB).first + offset1 <= x2);

	lea	eax, DWORD PTR _itBE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@OverlapReg
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offset1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	adc	edx, DWORD PTR _offset1$[ebp+4]
	mov	DWORD PTR tv737[ebp], ecx
	mov	DWORD PTR tv737[ebp+4], edx
	mov	eax, DWORD PTR tv737[ebp+4]
	cmp	eax, DWORD PTR _x2$307443[ebp+4]
	jb	$LN14@OverlapReg
	ja	SHORT $LN12@OverlapReg
	mov	ecx, DWORD PTR tv737[ebp]
	cmp	ecx, DWORD PTR _x2$307443[ebp]
	jbe	$LN14@OverlapReg
$LN12@OverlapReg:

; 2593 :                 // If we run out of A spans or the A span doesn't overlap,
; 2594 :                 // then the next B span can't either (because B spans don't
; 2595 :                 // overlap) and we exit.
; 2596 :                 if(itA == itAE || (*itA).first > x2)

	lea	eax, DWORD PTR _itAE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@OverlapReg
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	DWORD PTR tv747[ebp], eax
	mov	eax, DWORD PTR tv747[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _x2$307443[ebp+4]
	jb	SHORT $LN8@OverlapReg
	ja	SHORT $LN9@OverlapReg
	mov	edx, DWORD PTR tv747[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _x2$307443[ebp]
	jbe	SHORT $LN8@OverlapReg
$LN9@OverlapReg:

; 2597 :                     break;

	jmp	$LN17@OverlapReg
$LN8@OverlapReg:

; 2598 :                 do {x2 = _MAX(x2, (*itA++).second);}

	push	0
	lea	eax, DWORD PTR $T329263[ebp]
	push	eax
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv479[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR tv479[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	add	eax, 8
	push	eax
	lea	edx, DWORD PTR _x2$307443[ebp]
	push	edx
	call	??$max@_K@std@@YAAB_KAB_K0@Z		; std::max<unsigned __int64>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x2$307443[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x2$307443[ebp+4], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T329263[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ

; 2599 :                 while(itA != itAE && (*itA).first <= x2);

	lea	eax, DWORD PTR _itAE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@OverlapReg
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	DWORD PTR tv767[ebp], eax
	mov	eax, DWORD PTR tv767[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _x2$307443[ebp+4]
	jb	$LN8@OverlapReg
	ja	SHORT $LN6@OverlapReg
	mov	edx, DWORD PTR tv767[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _x2$307443[ebp]
	jbe	$LN8@OverlapReg
$LN6@OverlapReg:

; 2600 :             }

	jmp	$LN18@OverlapReg
$LN17@OverlapReg:

; 2601 :             // Flush span.
; 2602 :             dst.push_back(tSpan(x1, x2));

	lea	eax, DWORD PTR _x2$307443[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1$307442[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T329264[ebp]
	call	??$?0AA_KAA_K@?$pair@_K_K@std@@QAE@AA_K0@Z ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	call	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
$LN19@OverlapReg:

; 2603 :         }
; 2604 :     }

	jmp	$LN36@OverlapReg
$LN4@OverlapReg:

; 2605 :     // Copy over leftover spans.
; 2606 :     while(itA != itAE)

	lea	eax, DWORD PTR _itAE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@OverlapReg

; 2607 :         dst.push_back(*itA++);

	push	0
	lea	eax, DWORD PTR $T329265[ebp]
	push	eax
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv481[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR tv481[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	call	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T329265[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@OverlapReg
$LN2@OverlapReg:

; 2608 :     while(itB != itBE)

	lea	eax, DWORD PTR _itBE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@OverlapReg

; 2609 :     {
; 2610 :         dst.push_back(tSpan((*itB).first + offset1, (*itB).second + offset2));

	lea	ecx, DWORD PTR _itB$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _offset2$[ebp]
	mov	edx, DWORD PTR [eax+12]
	adc	edx, DWORD PTR _offset2$[ebp+4]
	mov	DWORD PTR $T329267[ebp], ecx
	mov	DWORD PTR $T329267[ebp+4], edx
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offset1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	adc	edx, DWORD PTR _offset1$[ebp+4]
	mov	DWORD PTR $T329268[ebp], ecx
	mov	DWORD PTR $T329268[ebp+4], edx
	lea	eax, DWORD PTR $T329267[ebp]
	push	eax
	lea	ecx, DWORD PTR $T329268[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T329266[ebp]
	call	??$?0$$CB_K$$CB_K@?$pair@_K_K@std@@QAE@$$QB_K0@Z ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	call	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back

; 2611 :         ++itB;

	lea	ecx, DWORD PTR _itB$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++

; 2612 :     }

	jmp	$LN2@OverlapReg
$LN1@OverlapReg:

; 2613 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _itBE$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itB$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _itAE$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _itA$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN69@OverlapReg
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 656				; 00000290H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN69@OverlapReg:
	DD	9
	DD	$LN68@OverlapReg
$LN68@OverlapReg:
	DD	-36					; ffffffdcH
	DD	20					; 00000014H
	DD	$LN58@OverlapReg
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN59@OverlapReg
	DD	-76					; ffffffb4H
	DD	12					; 0000000cH
	DD	$LN60@OverlapReg
	DD	-96					; ffffffa0H
	DD	12					; 0000000cH
	DD	$LN61@OverlapReg
	DD	-116					; ffffff8cH
	DD	12					; 0000000cH
	DD	$LN62@OverlapReg
	DD	-164					; ffffff5cH
	DD	8
	DD	$LN63@OverlapReg
	DD	-180					; ffffff4cH
	DD	8
	DD	$LN64@OverlapReg
	DD	-196					; ffffff3cH
	DD	8
	DD	$LN65@OverlapReg
	DD	-212					; ffffff2cH
	DD	8
	DD	$LN66@OverlapReg
$LN66@OverlapReg:
	DB	120					; 00000078H
	DB	50					; 00000032H
	DB	0
$LN65@OverlapReg:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	0
$LN64@OverlapReg:
	DB	120					; 00000078H
	DB	50					; 00000032H
	DB	0
$LN63@OverlapReg:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	0
$LN62@OverlapReg:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	69					; 00000045H
	DB	0
$LN61@OverlapReg:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	0
$LN60@OverlapReg:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	69					; 00000045H
	DB	0
$LN59@OverlapReg:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	0
$LN58@OverlapReg:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$0:
	lea	ecx, DWORD PTR _temp$[ebp]
	jmp	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$1:
	lea	ecx, DWORD PTR _itA$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$2:
	lea	ecx, DWORD PTR _itAE$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$3:
	lea	ecx, DWORD PTR _itB$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$4:
	lea	ecx, DWORD PTR _itBE$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$5:
	lea	ecx, DWORD PTR $T329257[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$6:
	lea	ecx, DWORD PTR $T329259[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$7:
	lea	ecx, DWORD PTR $T329262[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$8:
	lea	ecx, DWORD PTR $T329263[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$9:
	lea	ecx, DWORD PTR $T329265[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__ehhandler$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-660]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z ENDP ; ScanLineData2::_OverlapRegion
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::~_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::~_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??C?$shared_ptr@$$CBVScanLineData@@@boost@@QBEPBVScanLineData@@XZ ; boost::shared_ptr<ScanLineData const >::operator->
PUBLIC	?CreateWidenedRegion@ScanLineData2@@QAE_NHH@Z	; ScanLineData2::CreateWidenedRegion
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CreateWidenedRegion@ScanLineData2@@QAE_NHH@Z
_TEXT	SEGMENT
tv155 = -244						; size = 4
tv68 = -244						; size = 4
_x$307493 = -44						; size = 4
_y$307489 = -32						; size = 4
_out_line$ = -20					; size = 4
_this$ = -8						; size = 4
_rx$ = 8						; size = 4
_ry$ = 12						; size = 4
?CreateWidenedRegion@ScanLineData2@@QAE_NHH@Z PROC	; ScanLineData2::CreateWidenedRegion, COMDAT
; _this$ = ecx

; 2616 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2617 :     if(rx < 0) rx = 0;

	cmp	DWORD PTR _rx$[ebp], 0
	jge	SHORT $LN8@CreateWide
	mov	DWORD PTR _rx$[ebp], 0
$LN8@CreateWide:

; 2618 :     if(ry < 0) ry = 0;

	cmp	DWORD PTR _ry$[ebp], 0
	jge	SHORT $LN7@CreateWide
	mov	DWORD PTR _ry$[ebp], 0
$LN7@CreateWide:

; 2619 :     mWideBorder = max(rx,ry);

	mov	eax, DWORD PTR _rx$[ebp]
	cmp	eax, DWORD PTR _ry$[ebp]
	jle	SHORT $LN11@CreateWide
	mov	ecx, DWORD PTR _rx$[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN12@CreateWide
$LN11@CreateWide:
	mov	edx, DWORD PTR _ry$[ebp]
	mov	DWORD PTR tv68[ebp], edx
$LN12@CreateWide:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR [eax+36], ecx

; 2620 :     mWideOutline.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear

; 2621 : 
; 2622 :     const tSpanBuffer& out_line = m_scan_line_data->mOutline;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$shared_ptr@$$CBVScanLineData@@@boost@@QBEPBVScanLineData@@XZ ; boost::shared_ptr<ScanLineData const >::operator->
	add	eax, 32					; 00000020H
	mov	DWORD PTR _out_line$[ebp], eax

; 2623 :     if (ry > 0)

	cmp	DWORD PTR _ry$[ebp], 0
	jle	SHORT $LN6@CreateWide

; 2624 :     {
; 2625 :         // Do a half circle.
; 2626 :         // _OverlapRegion mirrors this so both halves are done.
; 2627 :         for(int y = -ry; y <= ry; ++y)

	mov	eax, DWORD PTR _ry$[ebp]
	neg	eax
	mov	DWORD PTR _y$307489[ebp], eax
	jmp	SHORT $LN5@CreateWide
$LN4@CreateWide:
	mov	eax, DWORD PTR _y$307489[ebp]
	add	eax, 1
	mov	DWORD PTR _y$307489[ebp], eax
$LN5@CreateWide:
	mov	eax, DWORD PTR _y$307489[ebp]
	cmp	eax, DWORD PTR _ry$[ebp]
	jg	SHORT $LN3@CreateWide

; 2628 :         {
; 2629 :             int x = (int)(0.5 + sqrt(float(ry*ry - y*y)) * float(rx)/float(ry));

	mov	eax, DWORD PTR _ry$[ebp]
	imul	eax, DWORD PTR _ry$[ebp]
	mov	ecx, DWORD PTR _y$307489[ebp]
	imul	ecx, DWORD PTR _y$307489[ebp]
	sub	eax, ecx
	mov	DWORD PTR tv155[ebp], eax
	fild	DWORD PTR tv155[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fimul	DWORD PTR _rx$[ebp]
	fidiv	DWORD PTR _ry$[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	DWORD PTR _x$307493[ebp], eax

; 2630 :             _OverlapRegion(mWideOutline, out_line, x, y);

	mov	eax, DWORD PTR _y$307489[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$307493[ebp]
	push	ecx
	mov	edx, DWORD PTR _out_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z ; ScanLineData2::_OverlapRegion
	add	esp, 16					; 00000010H

; 2631 :         }

	jmp	SHORT $LN4@CreateWide
$LN3@CreateWide:

; 2632 :     }
; 2633 :     else if (ry == 0 && rx > 0)

	jmp	SHORT $LN1@CreateWide
$LN6@CreateWide:
	cmp	DWORD PTR _ry$[ebp], 0
	jne	SHORT $LN1@CreateWide
	cmp	DWORD PTR _rx$[ebp], 0
	jle	SHORT $LN1@CreateWide

; 2634 :     {
; 2635 :         // There are artifacts if we don't make at least two overlaps of the line, even at same Y coord
; 2636 :         _OverlapRegion(mWideOutline, out_line, rx, 0);

	push	0
	mov	eax, DWORD PTR _rx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z ; ScanLineData2::_OverlapRegion
	add	esp, 16					; 00000010H

; 2637 :         _OverlapRegion(mWideOutline, out_line, rx, 0);

	push	0
	mov	eax, DWORD PTR _rx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z ; ScanLineData2::_OverlapRegion
	add	esp, 16					; 00000010H
$LN1@CreateWide:

; 2638 :     }
; 2639 :     return true;

	mov	al, 1

; 2640 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CreateWidenedRegion@ScanLineData2@@QAE_NHH@Z ENDP	; ScanLineData2::CreateWidenedRegion
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 542  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@XZ	; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T329318 = -212						; size = 4
_this$ = -8						; size = 4
??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T329318[ebp], esp
	call	??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@XZ ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 508  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@U32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Orphan_range
PUBLIC	?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
PUBLIC	?_Inside@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBE_NPBU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Inside
PUBLIC	??$addressof@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAU10@@Z ; std::addressof<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z
_TEXT	SEGMENT
__Idx$309574 = -20					; size = 4
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAU10@@Z ; std::addressof<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBE_NPBU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@push_back

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAU10@@Z ; std::addressof<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 4
	mov	DWORD PTR __Idx$309574[ebp], eax

; 635  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN3@push_back

; 636  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
$LN3@push_back:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Orphan_range

; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

	mov	eax, DWORD PTR __Idx$309574[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	call	??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@U32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 12					; 0000000cH

; 641  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 642  : 			}
; 643  : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN1@push_back

; 646  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
$LN1@push_back:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Orphan_range

; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@U32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 12					; 0000000cH

; 651  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back:

; 652  : 			}
; 653  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	?_Tidy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Tidy

; 706  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
__ehhandler$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Destroy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Destroy
PUBLIC	?deallocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::deallocate
PUBLIC	??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate
PUBLIC	?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity
PUBLIC	?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
PUBLIC	?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$309618 = -48					; size = 4
__Ptr$309611 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
	jmp	$LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate
	mov	DWORD PTR __Ptr$309611[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	eax, DWORD PTR __Ptr$309611[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>
	jmp	SHORT $LN8@reserve
__catch$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$309611[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::deallocate

; 757  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 758  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$1
	ret	0
$LN8@reserve:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size
	mov	DWORD PTR __Size$309618[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Ptr$309611[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

	mov	eax, DWORD PTR __Size$309618[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Ptr$309611[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 771  : 			this->_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$309611[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$146154 = -32					; size = 4
__Lock$146153 = -20					; size = 4
_this$ = -8						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 194  : 	{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 195  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 196  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_all

; 197  : 		{	// proxy allocated, drain it
; 198  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$146153[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 199  : 
; 200  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$146154[ebp], ecx
	jmp	SHORT $LN3@Orphan_all
$LN2@Orphan_all:

; 201  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

	mov	eax, DWORD PTR __Pnext$146154[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$146154[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN3@Orphan_all:
	mov	eax, DWORD PTR __Pnext$146154[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Orphan_all

; 202  : 			(*_Pnext)->_Myproxy = 0;

	mov	eax, DWORD PTR __Pnext$146154[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN2@Orphan_all
$LN1@Orphan_all:

; 203  : 		_Myproxy->_Myfirstiter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], 0

; 204  : 		}

	lea	ecx, DWORD PTR __Lock$146153[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN5@Orphan_all:

; 205  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 206  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@Orphan_all
$LN8@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
$T329356 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329356[ebp], 0

; 782  : 		return (iterator(this->_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
	mov	eax, DWORD PTR $T329356[ebp]
	or	eax, 1
	mov	DWORD PTR $T329356[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
$T329361 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329361[ebp], 0

; 787  : 		return (const_iterator(this->_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
	mov	eax, DWORD PTR $T329361[ebp]
	or	eax, 1
	mov	DWORD PTR $T329361[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 788  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
$T329366 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329366[ebp], 0

; 792  : 		return (iterator(this->_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
	mov	eax, DWORD PTR $T329366[ebp]
	or	eax, 1
	mov	DWORD PTR $T329366[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
$T329371 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329371[ebp], 0

; 797  : 		return (const_iterator(this->_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
	mov	eax, DWORD PTR $T329371[ebp]
	or	eax, 1
	mov	DWORD PTR $T329371[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 798  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 4

; 880  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::empty, COMDAT
; _this$ = ecx

; 888  : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+8]
	sete	al

; 890  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::empty
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@ABU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@AAU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> &>
PUBLIC	??$addressof@$$CBU?$pair@_K_K@std@@@std@@YAPBU?$pair@_K_K@0@ABU10@@Z ; std::addressof<std::pair<unsigned __int64,unsigned __int64> const >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z
_TEXT	SEGMENT
__Idx$309647 = -20					; size = 4
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBU?$pair@_K_K@std@@@std@@YAPBU?$pair@_K_K@0@ABU10@@Z ; std::addressof<std::pair<unsigned __int64,unsigned __int64> const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBE_NPBU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBU?$pair@_K_K@std@@@std@@YAPBU?$pair@_K_K@0@ABU10@@Z ; std::addressof<std::pair<unsigned __int64,unsigned __int64> const >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 4
	mov	DWORD PTR __Idx$309647[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR __Idx$309647[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@AAU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> &>
	add	esp, 12					; 0000000cH

; 986  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 987  : 			}
; 988  : 		else

	jmp	SHORT $LN5@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@ABU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>
	add	esp, 12					; 0000000cH

; 996  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back@2:

; 997  : 			}
; 998  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ$2
__ehfuncinfo$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
tv149 = -332						; size = 4
tv154 = -328						; size = 4
tv151 = -324						; size = 4
tv158 = -320						; size = 4
tv148 = -316						; size = 4
tv157 = -312						; size = 4
tv146 = -308						; size = 4
tv156 = -304						; size = 4
$T329381 = -296						; size = 4
$T329382 = -284						; size = 12
$T329383 = -264						; size = 4
$T329384 = -252						; size = 12
$T329385 = -232						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T329382[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
	mov	DWORD PTR tv156[ebp], eax
	mov	ecx, DWORD PTR tv156[ebp]
	mov	DWORD PTR tv146[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329381[ebp], esp
	mov	edx, DWORD PTR tv146[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv157[ebp], eax
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T329384[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
	mov	DWORD PTR tv158[ebp], eax
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR tv151[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329383[ebp], esp
	mov	eax, DWORD PTR tv151[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv154[ebp], eax
	lea	ecx, DWORD PTR $T329385[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase
	mov	DWORD PTR tv149[ebp], eax
	lea	ecx, DWORD PTR $T329385[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T329384[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T329382[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ

; 1219 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ$0:
	lea	ecx, DWORD PTR $T329382[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ$1:
	mov	ecx, DWORD PTR $T329381[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T329384[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__ehhandler$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-336]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear
PUBLIC	??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator=
PUBLIC	??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??$_Move@AAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ; std::_Move<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > &>
PUBLIC	??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z	; std::_Container_base12::_Swap_all
PUBLIC	??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ; std::operator==<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z$0
__ehfuncinfo$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Ts$309763 = -48					; size = 20
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::swap, COMDAT
; _this$ = ecx

; 1222 : 		{	// exchange contents with _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1223 : 		if (this == &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN4@swap
	jmp	$LN5@swap
$LN4@swap:

; 1224 : 			;	// same object, do nothing
; 1225 : 		else if (this->_Alval == _Right._Alval)

	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ; std::operator==<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@swap

; 1226 : 			{	// same allocator, swap control information
; 1227 : 			this->_Swap_all(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_all

; 1228 : 			_STD swap(this->_Myfirst, _Right._Myfirst);

	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>
	add	esp, 8

; 1229 : 			_STD swap(this->_Mylast, _Right._Mylast);

	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	call	??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>
	add	esp, 8

; 1230 : 			_STD swap(this->_Myend, _Right._Myend);

	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>
	add	esp, 8

; 1231 : 			}
; 1232 : 		else

	jmp	SHORT $LN5@swap
$LN2@swap:

; 1233 : 			{	// different allocator, do multiple assigns
; 1234 : 			_Myt _Ts = _Move(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$_Move@AAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ; std::_Move<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Ts$309763[ebp]
	call	??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1235 : 
; 1236 : 			*this = _Move(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$_Move@AAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ; std::_Move<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator=

; 1237 : 			_Right = _Move(_Ts);

	lea	eax, DWORD PTR __Ts$309763[ebp]
	push	eax
	call	??$_Move@AAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ; std::_Move<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator=

; 1238 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Ts$309763[ebp]
	call	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
$LN5@swap:

; 1239 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN11@swap:
	DD	1
	DD	$LN10@swap
$LN10@swap:
	DD	-48					; ffffffd0H
	DD	20					; 00000014H
	DD	$LN8@swap
$LN8@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z$0:
	lea	ecx, DWORD PTR __Ts$309763[ebp]
	jmp	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
__ehhandler$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::swap
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -32						; size = 4
__Lock$ = -20						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z PROC	; std::_Container_base12::_Swap_all, COMDAT
; _this$ = ecx

; 209  : 	{	// swap all iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 210  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 211  : 	_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 212  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 213  : 
; 214  : 	_Container_proxy *_Temp = _Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$[ebp], ecx

; 215  : 	_Myproxy = _Right._Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 216  : 	_Right._Myproxy = _Temp;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Temp$[ebp]
	mov	DWORD PTR [eax], ecx

; 217  : 
; 218  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Swap_all

; 219  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx
$LN2@Swap_all:

; 220  : 	if (_Right._Myproxy != 0)

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Swap_all

; 221  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Swap_all:

; 222  : 	}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Swap_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN8@Swap_all:
	DD	1
	DD	$LN7@Swap_all
$LN7@Swap_all:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@Swap_all
$LN6@Swap_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ENDP	; std::_Container_base12::_Swap_all
_TEXT	ENDS
PUBLIC	??_C@_1BA@EEPFKCON@?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1LO@INIHHGBB@?$AAe?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAs?$AAa?$AAn?$AAd?$AAn?$AAo?$AAt?$AAe?$AAs?$AA?2?$AAx?$AAy?$AA?9?$AAv?$AAs?$AAf?$AAi?$AAl@ ; `string'
EXTRN	__wassert:PROC
;	COMDAT ??_C@_1BA@EEPFKCON@?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\shared_ptr.hpp
CONST	SEGMENT
??_C@_1BA@EEPFKCON@?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'p'
	DB	00H, 'x', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@INIHHGBB@?$AAe?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAs?$AAa?$AAn?$AAd?$AAn?$AAo?$AAt?$AAe?$AAs?$AA?2?$AAx?$AAy?$AA?9?$AAv?$AAs?$AAf?$AAi?$AAl@
CONST	SEGMENT
??_C@_1LO@INIHHGBB@?$AAe?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAs?$AAa?$AAn?$AAd?$AAn?$AAo?$AAt?$AAe?$AAs?$AA?2?$AAx?$AAy?$AA?9?$AAv?$AAs?$AAf?$AAi?$AAl@ DB 'e'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, 's', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'y', 00H, '-'
	DB	00H, 'v', 00H, 's', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 'r', 00H, 'd', 00H, 'p', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 'y', 00H, '\', 00H, 'b', 00H, 'o'
	DB	00H, 'o', 00H, 's', 00H, 't', 00H, '_', 00H, '1', 00H, '_', 00H
	DB	'4', 00H, '7', 00H, '_', 00H, '0', 00H, '\', 00H, 'b', 00H, 'o'
	DB	00H, 'o', 00H, 's', 00H, 't', 00H, '\', 00H, 's', 00H, 'm', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, '_', 00H, 'p', 00H, 't', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H
	DB	'd', 00H, '_', 00H, 'p', 00H, 't', 00H, 'r', 00H, '.', 00H, 'h'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??D?$shared_ptr@$$CBVScanLineData@@@boost@@QBEABVScanLineData@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$shared_ptr@$$CBVScanLineData@@@boost@@QBEABVScanLineData@@XZ PROC ; boost::shared_ptr<ScanLineData const >::operator*, COMDAT
; _this$ = ecx

; 407  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 408  :         BOOST_ASSERT(px != 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator@3
	push	408					; 00000198H
	push	OFFSET ??_C@_1LO@INIHHGBB@?$AAe?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAs?$AAa?$AAn?$AAd?$AAn?$AAo?$AAt?$AAe?$AAs?$AA?2?$AAx?$AAy?$AA?9?$AAv?$AAs?$AAf?$AAi?$AAl@
	push	OFFSET ??_C@_1BA@EEPFKCON@?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator@3:

; 409  :         return *px;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 410  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$shared_ptr@$$CBVScanLineData@@@boost@@QBEABVScanLineData@@XZ ENDP ; boost::shared_ptr<ScanLineData const >::operator*
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??C?$shared_ptr@$$CBVScanLineData@@@boost@@QBEPBVScanLineData@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??C?$shared_ptr@$$CBVScanLineData@@@boost@@QBEPBVScanLineData@@XZ PROC ; boost::shared_ptr<ScanLineData const >::operator->, COMDAT
; _this$ = ecx

; 413  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 414  :         BOOST_ASSERT(px != 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator@4
	push	414					; 0000019eH
	push	OFFSET ??_C@_1LO@INIHHGBB@?$AAe?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAs?$AAa?$AAn?$AAd?$AAn?$AAo?$AAt?$AAe?$AAs?$AA?2?$AAx?$AAy?$AA?9?$AAv?$AAs?$AAf?$AAi?$AAl@
	push	OFFSET ??_C@_1BA@EEPFKCON@?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator@4:

; 415  :         return px;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 416  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$shared_ptr@$$CBVScanLineData@@@boost@@QBEPBVScanLineData@@XZ ENDP ; boost::shared_ptr<ScanLineData const >::operator->
_TEXT	ENDS
PUBLIC	??0shared_count@detail@boost@@QAE@XZ		; boost::detail::shared_count::shared_count
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$shared_ptr@E@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$shared_ptr@E@boost@@QAE@XZ PROC			; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>, COMDAT
; _this$ = ecx

; 179  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0shared_count@detail@boost@@QAE@XZ	; boost::detail::shared_count::shared_count

; 180  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$shared_ptr@E@boost@@QAE@XZ ENDP			; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\shared_count.hpp
_TEXT	ENDS
;	COMDAT ??0shared_count@detail@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0shared_count@detail@boost@@QAE@XZ PROC		; boost::detail::shared_count::shared_count, COMDAT
; _this$ = ecx

; 79   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 80   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0shared_count@detail@boost@@QAE@XZ ENDP		; boost::detail::shared_count::shared_count
_TEXT	ENDS
PUBLIC	?swap@shared_count@detail@boost@@QAEXAAV123@@Z	; boost::detail::shared_count::swap
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\shared_ptr.hpp
xdata$x	SEGMENT
__unwindtable$??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z$0
__ehfuncinfo$??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_r$ = 8							; size = 4
??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z PROC		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>, COMDAT
; _this$ = ecx

; 344  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0shared_count@detail@boost@@QAE@XZ	; boost::detail::shared_count::shared_count
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 345  :         pn.swap( r.pn );

	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?swap@shared_count@detail@boost@@QAEXAAV123@@Z ; boost::detail::shared_count::swap

; 346  :         r.px = 0;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], 0

; 347  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1shared_count@detail@boost@@QAE@XZ	; boost::detail::shared_count::~shared_count
__ehhandler$??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z ENDP		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\shared_count.hpp
;	COMDAT ?swap@shared_count@detail@boost@@QAEXAAV123@@Z
_TEXT	SEGMENT
_tmp$ = -20						; size = 4
_this$ = -8						; size = 4
_r$ = 8							; size = 4
?swap@shared_count@detail@boost@@QAEXAAV123@@Z PROC	; boost::detail::shared_count::swap, COMDAT
; _this$ = ecx

; 349  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  :         sp_counted_base * tmp = r.pi_;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tmp$[ebp], ecx

; 351  :         r.pi_ = pi_;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 352  :         pi_ = tmp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [eax], ecx

; 353  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?swap@shared_count@detail@boost@@QAEXAAV123@@Z ENDP	; boost::detail::shared_count::swap
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\shared_ptr.hpp
_TEXT	ENDS
;	COMDAT ?get@?$shared_ptr@E@boost@@QBEPAEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get@?$shared_ptr@E@boost@@QBEPAEXZ PROC		; boost::shared_ptr<unsigned char>::get, COMDAT
; _this$ = ecx

; 419  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 420  :         return px;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 421  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$shared_ptr@E@boost@@QBEPAEXZ ENDP		; boost::shared_ptr<unsigned char>::get
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\operator_bool.hpp
_TEXT	ENDS
;	COMDAT ??B?$shared_ptr@E@boost@@QBEPQ01@PAEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$shared_ptr@E@boost@@QBEPQ01@PAEXZ PROC		; boost::shared_ptr<unsigned char>::operator unsigned char * boost::shared_ptr<unsigned char>::*, COMDAT
; _this$ = ecx

; 46   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   :         return px == 0? 0: &this_type::px;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	neg	eax
	sbb	eax, eax
	neg	eax
	sub	eax, 1

; 48   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$shared_ptr@E@boost@@QBEPQ01@PAEXZ ENDP		; boost::shared_ptr<unsigned char>::operator unsigned char * boost::shared_ptr<unsigned char>::*
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??7?$shared_ptr@E@boost@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??7?$shared_ptr@E@boost@@QBE_NXZ PROC			; boost::shared_ptr<unsigned char>::operator!, COMDAT
; _this$ = ecx

; 54   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   :         return px == 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl

; 56   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$shared_ptr@E@boost@@QBE_NXZ ENDP			; boost::shared_ptr<unsigned char>::operator!
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\shared_ptr.hpp
_TEXT	ENDS
;	COMDAT ??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ PROC ; boost::shared_ptr<Overlay>::operator->, COMDAT
; _this$ = ecx

; 413  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 414  :         BOOST_ASSERT(px != 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator@5
	push	414					; 0000019eH
	push	OFFSET ??_C@_1LO@INIHHGBB@?$AAe?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAs?$AAa?$AAn?$AAd?$AAn?$AAo?$AAt?$AAe?$AAs?$AA?2?$AAx?$AAy?$AA?9?$AAv?$AAs?$AAf?$AAi?$AAl@
	push	OFFSET ??_C@_1BA@EEPFKCON@?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator@5:

; 415  :         return px;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 416  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$shared_ptr@UOverlay@@@boost@@QBEPAUOverlay@@XZ ENDP ; boost::shared_ptr<Overlay>::operator->
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\operator_bool.hpp
_TEXT	ENDS
;	COMDAT ??7?$shared_ptr@UOverlay@@@boost@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??7?$shared_ptr@UOverlay@@@boost@@QBE_NXZ PROC		; boost::shared_ptr<Overlay>::operator!, COMDAT
; _this$ = ecx

; 54   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   :         return px == 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl

; 56   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$shared_ptr@UOverlay@@@boost@@QBE_NXZ ENDP		; boost::shared_ptr<Overlay>::operator!
_TEXT	ENDS
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BIE@CHEPNEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; `string'
PUBLIC	??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; `string'
PUBLIC	??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
EXTRN	__invalid_parameter:PROC
EXTRN	__CrtDbgReportW:PROC
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BIE@CHEPNEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1BIE@CHEPNEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a', 00H, 'i'
	DB	00H, 'r', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i', 00H
	DB	'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '_', 00H, '_'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, '6', 00H, '4', 00H, ',', 00H
	DB	'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, '_', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, '6', 00H, '4', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H
	DB	'a', 00H, 'i', 00H, 'r', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'_', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, '6', 00H, '4'
	DB	00H, ',', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '_', 00H, '_', 00H, 'i'
	DB	00H, 'n', 00H, 't', 00H, '6', 00H, '4', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
CONST	SEGMENT
??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
CONST	SEGMENT
??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ DB 'Stand'
	DB	'ard C++ Libraries Out of Range', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*, COMDAT
; _this$ = ecx

; 63   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN4@operator@6
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@operator@6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+4]
	jb	SHORT $LN4@operator@6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN2@operator@6
$LN4@operator@6:

; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");

	push	70					; 00000046H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 71   : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN8@operator@6
	xor	ecx, ecx
	jne	SHORT $LN9@operator@6
$LN8@operator@6:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN9@operator@6
	int	3
$LN9@operator@6:
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BIE@CHEPNEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator@6:

; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);

	xor	eax, eax
	jne	SHORT $LN2@operator@6

; 83   : 
; 84   : 		return (*this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 85   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 162  : 		{	// get owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv66[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv66[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv66[ebp]

; 164  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
PUBLIC	??_C@_1BIG@IPBKDIEK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ ; `string'
;	COMDAT ??_C@_1BIG@IPBKDIEK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_1BIG@IPBKDIEK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a', 00H, 'i'
	DB	00H, 'r', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i', 00H
	DB	'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '_', 00H, '_'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, '6', 00H, '4', 00H, ',', 00H
	DB	'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, '_', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, '6', 00H, '4', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H
	DB	'a', 00H, 'i', 00H, 'r', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'_', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, '6', 00H, '4'
	DB	00H, ',', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '_', 00H, '_', 00H, 'i'
	DB	00H, 'n', 00H, 't', 00H, '6', 00H, '4', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
CONST	SEGMENT
??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@operator@7
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@operator@7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN2@operator@7
$LN1@operator@7:

; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");

	push	99					; 00000063H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 100  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN5@operator@7
	xor	ecx, ecx
	jne	SHORT $LN6@operator@7
$LN5@operator@7:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	0
	push	100					; 00000064H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN6@operator@7
	int	3
$LN6@operator@7:
	push	0
	push	100					; 00000064H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BIG@IPBKDIEK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator@7:

; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 111  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 112  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z$0
__ehfuncinfo$??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
$T329464 = -244						; size = 4
__Tmp$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// postincrement

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329464[ebp], 0

; 116  : 		_Myiter _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 117  : 		++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++

; 118  : 		return (_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T329464[ebp]
	or	ecx, 1
	mov	DWORD PTR $T329464[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 119  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator@8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@operator@8:
	DD	1
	DD	$LN8@operator@8
$LN8@operator@8:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN6@operator@8
$LN6@operator@8:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z$1:
	mov	eax, DWORD PTR $T329464[ebp]
	and	eax, 1
	je	$LN5@operator@8
	and	DWORD PTR $T329464[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
$LN5@operator@8:
	ret	0
__ehhandler$??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Compat
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+8]
	sete	al

; 204  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator==
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 209  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
_TEXT	ENDS
PUBLIC	?value@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABVass_synth_priv@@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::value
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\flyweight.hpp
;	COMDAT ?get@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QBEABVass_synth_priv@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QBEABVass_synth_priv@@XZ PROC ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::get, COMDAT
; _this$ = ecx

; 202  :   const value_type& get()const{return core::value(h);}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?value@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABVass_synth_priv@@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::value
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QBEABVass_synth_priv@@XZ ENDP ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::get
_TEXT	ENDS
PUBLIC	??$erase@P6A_NABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@@Z@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAXABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@P6A_N0@Z@Z ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::erase<bool (__cdecl*)(boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> > const &)>
PUBLIC	?check_erase@?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@CA_NABV1234@@Z ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::check_erase
PUBLIC	?release@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release
PUBLIC	?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
;	COMDAT ??1?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::~refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >, COMDAT
; _this$ = ecx

; 111  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  :     if(TrackingHelper::entry(*this).release()){

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
	add	esp, 4
	mov	ecx, eax
	call	?release@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@refcounted

; 113  :       TrackingHelper::erase(*this,check_erase);

	push	OFFSET ?check_erase@?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@CA_NABV1234@@Z ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::check_erase
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$erase@P6A_NABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@@Z@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAXABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@P6A_N0@Z@Z ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::erase<bool (__cdecl*)(boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> > const &)>
	add	esp, 8
$LN2@refcounted:

; 114  :     }
; 115  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::~refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T329485 = -212						; size = 4
_this$ = -8						; size = 4
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T329485[ebp], esp
	call	??0?$allocator@H@std@@QAE@XZ		; std::allocator<int>::allocator<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >

; 508  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 706  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T329499 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329499[ebp], 0

; 782  : 		return (iterator(this->_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
	mov	eax, DWORD PTR $T329499[ebp]
	or	eax, 1
	mov	DWORD PTR $T329499[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T329504 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329504[ebp], 0

; 792  : 		return (iterator(this->_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
	mov	eax, DWORD PTR $T329504[ebp]
	or	eax, 1
	mov	DWORD PTR $T329504[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ; std::_Cons_val<std::allocator<int>,int,int const &>
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ; std::_Cons_val<std::allocator<int>,int,int &>
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
PUBLIC	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
PUBLIC	??$addressof@$$CBH@std@@YAPBHABH@Z		; std::addressof<int const >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
__Idx$309937 = -20					; size = 4
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBH@std@@YAPBHABH@Z	; std::addressof<int const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back@3

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBH@std@@YAPBHABH@Z	; std::addressof<int const >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
	mov	DWORD PTR __Idx$309937[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN3@push_back@3

; 981  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN3@push_back@3:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Idx$309937[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ; std::_Cons_val<std::allocator<int>,int,int &>
	add	esp, 12					; 0000000cH

; 986  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 987  : 			}
; 988  : 		else

	jmp	SHORT $LN5@push_back@3
$LN4@push_back@3:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN1@push_back@3

; 991  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN1@push_back@3:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ; std::_Cons_val<std::allocator<int>,int,int const &>
	add	esp, 12					; 0000000cH

; 996  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back@3:

; 997  : 			}
; 998  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$2
__ehfuncinfo$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
tv149 = -332						; size = 4
tv154 = -328						; size = 4
tv151 = -324						; size = 4
tv158 = -320						; size = 4
tv148 = -316						; size = 4
tv157 = -312						; size = 4
tv146 = -308						; size = 4
tv156 = -304						; size = 4
$T329510 = -296						; size = 4
$T329511 = -284						; size = 12
$T329512 = -264						; size = 4
$T329513 = -252						; size = 12
$T329514 = -232						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T329511[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv156[ebp], eax
	mov	ecx, DWORD PTR tv156[ebp]
	mov	DWORD PTR tv146[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329510[ebp], esp
	mov	edx, DWORD PTR tv146[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv157[ebp], eax
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T329513[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	DWORD PTR tv158[ebp], eax
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR tv151[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329512[ebp], esp
	mov	eax, DWORD PTR tv151[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv154[ebp], eax
	lea	ecx, DWORD PTR $T329514[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
	mov	DWORD PTR tv149[ebp], eax
	lea	ecx, DWORD PTR $T329514[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T329513[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T329511[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ

; 1219 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$0:
	lea	ecx, DWORD PTR $T329511[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$1:
	mov	ecx, DWORD PTR $T329510[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T329513[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__ehhandler$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-336]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*, COMDAT
; _this$ = ecx

; 321  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 322  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*

; 323  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 332  : 		++*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++

; 333  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 334  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 209  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@_J_J@std@@QAE@$$QA_J0@Z		; std::_Pair_base<__int64,__int64>::_Pair_base<__int64,__int64>
PUBLIC	??$move@AA_J@std@@YA$$QA_JAA_J@Z		; std::move<__int64 &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@_J_J@std@@QAE@$$QA_J0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@_J_J@std@@QAE@$$QA_J0@Z PROC			; std::pair<__int64,__int64>::pair<__int64,__int64>, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from specified values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$move@AA_J@std@@YA$$QA_JAA_J@Z	; std::move<__int64 &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val1$[ebp]
	push	ecx
	call	??$move@AA_J@std@@YA$$QA_JAA_J@Z	; std::move<__int64 &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Pair_base@_J_J@std@@QAE@$$QA_J0@Z	; std::_Pair_base<__int64,__int64>::_Pair_base<__int64,__int64>

; 228  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$pair@_J_J@std@@QAE@$$QA_J0@Z ENDP			; std::pair<__int64,__int64>::pair<__int64,__int64>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*, COMDAT
; _this$ = ecx

; 321  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 322  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*

; 323  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 332  : 		++*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++

; 333  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 334  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z$0
__ehfuncinfo$??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
$T329542 = -244						; size = 4
__Tmp$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329542[ebp], 0

; 338  : 		_Myiter _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 339  : 		++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++

; 340  : 		return (_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T329542[ebp]
	or	ecx, 1
	mov	DWORD PTR $T329542[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 341  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator@9
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@operator@9:
	DD	1
	DD	$LN8@operator@9
$LN8@operator@9:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN6@operator@9
$LN6@operator@9:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z$1:
	mov	eax, DWORD PTR $T329542[ebp]
	and	eax, 1
	je	$LN5@operator@9
	and	DWORD PTR $T329542[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
$LN5@operator@9:
	ret	0
__ehhandler$??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
_TEXT	ENDS
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
_TEXT	ENDS
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>
_TEXT	ENDS
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 116  : 		{	// copy an iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 117  : 		*this = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 118  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 121  : 		{	// assign an iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 		if (_Myproxy != _Right._Myproxy)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@operator@10

; 123  : 			_Adopt(_Right._Myproxy->_Mycont);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN1@operator@10:

; 124  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 125  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$146132 = -44					; size = 4
__Parent_proxy$146130 = -32				; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 136  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		if (_Parent != 0)

	cmp	DWORD PTR __Parent$[ebp], 0
	je	SHORT $LN3@Adopt

; 138  : 			{	// have a parent, do adoption
; 139  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$146130[ebp], ecx

; 140  : 
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 			if (_Myproxy != _Parent_proxy)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Parent_proxy$146130[ebp]
	je	SHORT $LN3@Adopt

; 143  : 				{	// change parentage
; 144  : 				_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$146132[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 145  : 				_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 146  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$146130[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 147  : 				_Parent_proxy->_Myfirstiter = this;

	mov	eax, DWORD PTR __Parent_proxy$146130[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 148  : 				_Myproxy = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$146130[ebp]
	mov	DWORD PTR [eax], ecx

; 149  : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$146132[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN3@Adopt:

; 150  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 151  : 			_Myproxy = _Parent_proxy;
; 152  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 153  : 			}
; 154  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN9@Adopt:
	DD	1
	DD	$LN8@Adopt
$LN8@Adopt:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN6@Adopt
$LN6@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0:
	lea	ecx, DWORD PTR __Lock$146132[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
_TEXT	ENDS
PUBLIC	?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Assign_rv
PUBLIC	??$forward@V?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ; std::forward<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
PUBLIC	??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z$0
__ehfuncinfo$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T329586 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = ecx

; 595  : 		{	// construct by moving _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 16					; 00000010H
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T329586[ebp], esp
	push	eax
	call	??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 596  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@V?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ; std::forward<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Assign_rv

; 597  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
__ehhandler$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator=, COMDAT
; _this$ = ecx

; 600  : 		{	// assign by moving _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@V?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ; std::forward<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Assign_rv

; 602  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 603  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator=
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 4

; 778  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::max_size

; 885  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size
_TEXT	ENDS
PUBLIC	??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; `string'
PUBLIC	??M?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator<
PUBLIC	?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter
;	COMDAT ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
CONST	SEGMENT
??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z$5
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z
_TEXT	SEGMENT
tv275 = -324						; size = 4
tv271 = -324						; size = 4
tv267 = -324						; size = 4
tv274 = -320						; size = 4
tv270 = -320						; size = 4
tv266 = -320						; size = 4
$T329602 = -312						; size = 4
$T329603 = -300						; size = 4
$T329604 = -288						; size = 4
$T329613 = -276						; size = 4
__Ptr$310975 = -72					; size = 4
__Last$ = -60						; size = 12
__First$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 12
__Last_arg$ = 24					; size = 12
?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329613[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1191 : 		iterator _First = _Make_iter(_First_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329602[ebp], esp
	lea	eax, DWORD PTR __First_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv266[ebp], eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter
	mov	DWORD PTR tv267[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329603[ebp], esp
	lea	eax, DWORD PTR __Last_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv270[ebp], eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter
	mov	DWORD PTR tv271[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1193 : 
; 1194 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator<
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@erase
	lea	ecx, DWORD PTR __First$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@erase
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __First$[ebp+8]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@erase
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Last$[ebp+8]
	jae	SHORT $LN2@erase
$LN1@erase:

; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");

	push	1200					; 000004b0H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@erase:

; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));

	mov	eax, DWORD PTR __First$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+8]
	push	eax
	call	??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$310975[ebp], eax

; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Orphan_range

; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));
; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Ptr$310975[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$310975[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@erase:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329604[ebp], esp
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv274[ebp], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter
	mov	DWORD PTR tv275[ebp], eax
	mov	edx, DWORD PTR $T329613[ebp]
	or	edx, 1
	mov	DWORD PTR $T329613[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First_arg$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@erase
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
$LN19@erase:
	DD	2
	DD	$LN18@erase
$LN18@erase:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN15@erase
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN16@erase
$LN16@erase:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN15@erase:
	DB	95					; 0000005fH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z$0:
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z$1:
	lea	ecx, DWORD PTR __First_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z$3:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z$5:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z$7:
	mov	eax, DWORD PTR $T329613[ebp]
	and	eax, 1
	je	$LN14@erase
	and	DWORD PTR $T329613[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
$LN14@erase:
	ret	0
__ehhandler$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-328]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase
PUBLIC	??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Destroy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXPAU?$pair@_K_K@2@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXPAU?$pair@_K_K@2@0@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	add	esp, 12					; 0000000cH

; 1271 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXPAU?$pair@_K_K@2@0@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Destroy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBE_NPBU?$pair@_K_K@2@@Z
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBE_NPBU?$pair@_K_K@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1287 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBE_NPBU?$pair@_K_K@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Inside
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEII@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Grow_to
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -20						; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size
	sub	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Size$[ebp]
	jae	SHORT $LN4@Reserve

; 1293 : 			_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
	jmp	SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

	mov	eax, DWORD PTR __Size$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Size$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity
	cmp	DWORD PTR __Size$[ebp], eax
	ja	SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

	jmp	SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEII@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
$LN6@Reserve:

; 1298 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1310 : 		this->_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1311 : 		this->_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1312 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Tidy
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1428 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
_TEXT	ENDS
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z
_TEXT	SEGMENT
__Pnext$ = -44						; size = 4
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1437 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1438 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1439 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 1440 : 		if (_Pnext != 0)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1441 : 			while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran

; 1442 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:

; 1443 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1444 : 				else

	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:

; 1445 : 					{	// orphan the iterator
; 1446 : 					(*_Pnext)->_Clrcont();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1447 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran:

; 1448 : 					}

	jmp	SHORT $LN5@Orphan_ran
$LN6@Orphan_ran:

; 1449 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@Orphan_ran:
	DD	1
	DD	$LN12@Orphan_ran
$LN12@Orphan_ran:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Orphan_range
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx

; 96   : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getpfirst
	mov	DWORD PTR tv66[ebp], 0
	jmp	SHORT $LN4@Getpfirst
$LN3@Getpfirst:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR tv66[ebp], edx
$LN4@Getpfirst:
	mov	eax, DWORD PTR tv66[ebp]

; 98   : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 157  : 		{	// disown owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 159  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 167  : 		{	// get address of remaining iterator chain

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 		return (&_Mynextiter);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 169  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0U?$pair@_K_K@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@_K_K@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z
_TEXT	SEGMENT
$T329659 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z PROC ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = ecx

; 439  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >

; 440  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 441  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0U?$pair@_K_K@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@_K_K@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<unsigned __int64,unsigned __int64> >

; 442  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 443  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T329659[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 444  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 445  : 
; 446  : 		_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 447  : 		_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 448  : 		_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 449  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN7@Vector_val:
	DD	1
	DD	$LN6@Vector_val
$LN6@Vector_val:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val
$LN4@Vector_val:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z ENDP ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 65   : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 66   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 77   : 		{	// construct childless container

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 78   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 91   : 		{	// destroy the container

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 93   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ PROC ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = ecx

; 452  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 453  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 454  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0U?$pair@_K_K@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@_K_K@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<unsigned __int64,unsigned __int64> >

; 455  : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 456  : 		_Dest_val(_Alproxy, this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
	add	esp, 8

; 457  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 458  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 459  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Vector_val@2:
	DD	1
	DD	$LN6@Vector_val@2
$LN6@Vector_val@2:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@2
$LN4@Vector_val@2:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ENDP ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@XZ PROC	; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@XZ ENDP	; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@I@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@I@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate
_TEXT	ENDS
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 46   : 		this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 47   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BHO@BLMKGDAC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BHO@BLMKGDAC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1BHO@BLMKGDAC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a', 00H, 'i'
	DB	00H, 'r', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i', 00H
	DB	'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '_', 00H, '_'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, '6', 00H, '4', 00H, ',', 00H
	DB	'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, '_', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, '6', 00H, '4', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H
	DB	'a', 00H, 'i', 00H, 'r', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'_', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, '6', 00H, '4'
	DB	00H, ',', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '_', 00H, '_', 00H, 'i'
	DB	00H, 'n', 00H, 't', 00H, '6', 00H, '4', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, '_', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'A', 00H
	DB	'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
CONST	SEGMENT
??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ DB 'Standa'
	DB	'rd C++ Libraries Invalid Argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Compat, COMDAT
; _this$ = ecx

; 234  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 		if (this->_Getcont() == 0
; 236  : 			|| this->_Getcont() != _Right._Getcont())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@Compat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	SHORT $LN3@Compat
$LN1@Compat:

; 237  : 			{	// report error
; 238  : 			_DEBUG_ERROR("vector iterators incompatible");

	push	238					; 000000eeH
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 239  : 			_SCL_SECURE_INVALID_ARGUMENT;

	mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
	test	eax, eax
	je	SHORT $LN5@Compat
	xor	ecx, ecx
	jne	SHORT $LN6@Compat
$LN5@Compat:
	push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN6@Compat
	int	3
$LN6@Compat:
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BHO@BLMKGDAC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Compat:

; 240  : 			}
; 241  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Compat
_TEXT	ENDS
PUBLIC	??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABVass_synth_priv@@XZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator ass_synth_priv const &
PUBLIC	??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@XZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type const &
PUBLIC	?entry@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABQBV5234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
PUBLIC	??B?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QBEABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@XZ ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::operator boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const * const &
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
;	COMDAT ?value@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABVass_synth_priv@@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
?value@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABVass_synth_priv@@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::value, COMDAT

; 137  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 138  :     return static_cast<const rep_type&>(entry(h));

	mov	ecx, DWORD PTR _h$[ebp]
	call	??B?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QBEABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@XZ ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::operator boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const * const &
	push	eax
	call	?entry@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABQBV5234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
	add	esp, 4
	mov	ecx, eax
	call	??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@XZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type const &
	mov	ecx, eax
	call	??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABVass_synth_priv@@XZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator ass_synth_priv const &

; 139  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?value@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABVass_synth_priv@@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::value
_TEXT	ENDS
PUBLIC	??Fatomic_count@detail@boost@@QAEJXZ		; boost::detail::atomic_count::operator--
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
;	COMDAT ?release@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?release@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release, COMDAT
; _this$ = ecx

; 77   :   bool release()const{return (--ref==0);}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??Fatomic_count@detail@boost@@QAEJXZ	; boost::detail::atomic_count::operator--
	neg	eax
	sbb	eax, eax
	add	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?release@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\atomic_count_win32.hpp
_TEXT	ENDS
;	COMDAT ??Fatomic_count@detail@boost@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Fatomic_count@detail@boost@@QAEJXZ PROC		; boost::detail::atomic_count::operator--, COMDAT
; _this$ = ecx

; 42   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 43   :         return BOOST_INTERLOCKED_DECREMENT( &value_ );

	mov	eax, DWORD PTR _this$[ebp]
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	mov	eax, ecx

; 44   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Fatomic_count@detail@boost@@QAEJXZ ENDP		; boost::detail::atomic_count::operator--
_TEXT	ENDS
PUBLIC	?release_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release_deleter
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
;	COMDAT ?check_erase@?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@CA_NABV1234@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?check_erase@?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@CA_NABV1234@@Z PROC ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::check_erase, COMDAT

; 126  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 127  :     return TrackingHelper::entry(x).release_deleter();

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
	add	esp, 4
	mov	ecx, eax
	call	?release_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release_deleter

; 128  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?check_erase@?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@CA_NABV1234@@Z ENDP ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::check_erase
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00@Z		; std::_Move<int *,int *>
PUBLIC	??M?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator<
PUBLIC	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z$5
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z
_TEXT	SEGMENT
tv275 = -324						; size = 4
tv271 = -324						; size = 4
tv267 = -324						; size = 4
tv274 = -320						; size = 4
tv270 = -320						; size = 4
tv266 = -320						; size = 4
$T329728 = -312						; size = 4
$T329717 = -300						; size = 4
$T329718 = -288						; size = 4
$T329719 = -276						; size = 4
__Ptr$311103 = -72					; size = 4
__Last$ = -60						; size = 12
__First$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 12
__Last_arg$ = 24					; size = 12
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329728[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1191 : 		iterator _First = _Make_iter(_First_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329717[ebp], esp
	lea	eax, DWORD PTR __First_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv266[ebp], eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
	mov	DWORD PTR tv267[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329718[ebp], esp
	lea	eax, DWORD PTR __Last_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv270[ebp], eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
	mov	DWORD PTR tv271[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1193 : 
; 1194 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator<
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@erase@2
	lea	ecx, DWORD PTR __First$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@erase@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __First$[ebp+8]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@erase@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Last$[ebp+8]
	jae	SHORT $LN2@erase@2
$LN1@erase@2:

; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");

	push	1200					; 000004b0H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@erase@2:

; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));

	mov	eax, DWORD PTR __First$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+8]
	push	eax
	call	??$_Move@PAHPAH@std@@YAPAHPAH00@Z	; std::_Move<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$311103[ebp], eax

; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));
; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Ptr$311103[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$311103[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@erase@2:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329719[ebp], esp
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv274[ebp], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
	mov	DWORD PTR tv275[ebp], eax
	mov	edx, DWORD PTR $T329728[ebp]
	or	edx, 1
	mov	DWORD PTR $T329728[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First_arg$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@erase@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
$LN19@erase@2:
	DD	2
	DD	$LN18@erase@2
$LN18@erase@2:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN15@erase@2
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN16@erase@2
$LN16@erase@2:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN15@erase@2:
	DB	95					; 0000005fH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z$0:
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z$1:
	lea	ecx, DWORD PTR __First_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z$3:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z$5:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z$7:
	mov	eax, DWORD PTR $T329728[ebp]
	and	eax, 1
	je	$LN14@erase@2
	and	DWORD PTR $T329728[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
$LN14@erase@2:
	ret	0
__ehhandler$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-328]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside@2
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside@2
$LN3@Inside@2:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside@2:
	mov	al, BYTE PTR tv76[ebp]

; 1287 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
PUBLIC	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -20						; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	sub	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Size$[ebp]
	jae	SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
	jmp	SHORT $LN6@Reserve@2
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

	mov	eax, DWORD PTR __Size$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Size$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
	cmp	DWORD PTR __Size$[ebp], eax
	ja	SHORT $LN2@Reserve@2

; 1295 : 			;
; 1296 : 		else

	jmp	SHORT $LN6@Reserve@2
$LN2@Reserve@2:

; 1297 : 			reserve(_Grow_to(_Size));

	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN6@Reserve@2:

; 1298 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
$LN1@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1310 : 		this->_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1311 : 		this->_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1312 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
__Pnext$ = -44						; size = 4
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1437 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1438 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1439 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 1440 : 		if (_Pnext != 0)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran@2
$LN5@Orphan_ran@2:

; 1441 : 			while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran@2

; 1442 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran@2
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran@2
$LN2@Orphan_ran@2:

; 1443 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1444 : 				else

	jmp	SHORT $LN1@Orphan_ran@2
$LN3@Orphan_ran@2:

; 1445 : 					{	// orphan the iterator
; 1446 : 					(*_Pnext)->_Clrcont();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1447 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran@2:

; 1448 : 					}

	jmp	SHORT $LN5@Orphan_ran@2
$LN6@Orphan_ran@2:

; 1449 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@Orphan_ran@2:
	DD	1
	DD	$LN12@Orphan_ran@2
$LN12@Orphan_ran@2:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@Orphan_ran@2
$LN10@Orphan_ran@2:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
PUBLIC	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
$T329762 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z PROC ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 439  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>

; 440  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 441  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>

; 442  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 443  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T329762[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 444  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 445  : 
; 446  : 		_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 447  : 		_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 448  : 		_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 449  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN7@Vector_val@3:
	DD	1
	DD	$LN6@Vector_val@3
$LN6@Vector_val@3:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@3
$LN4@Vector_val@3:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ENDP ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 452  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 453  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 454  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>

; 455  : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 456  : 		_Dest_val(_Alproxy, this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
	add	esp, 8

; 457  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 458  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 459  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Vector_val@4:
	DD	1
	DD	$LN6@Vector_val@4
$LN6@Vector_val@4:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@4
$LN4@Vector_val@4:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >

; 305  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??_C@_1MC@PALAGODG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
;	COMDAT ??_C@_1MC@PALAGODG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1MC@PALAGODG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H
	DB	':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*, COMDAT
; _this$ = ecx

; 63   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN4@operator@11
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@operator@11
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+4]
	jb	SHORT $LN4@operator@11
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN2@operator@11
$LN4@operator@11:

; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");

	push	70					; 00000046H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 71   : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN8@operator@11
	xor	ecx, ecx
	jne	SHORT $LN9@operator@11
$LN8@operator@11:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN9@operator@11
	int	3
$LN9@operator@11:
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1MC@PALAGODG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator@11:

; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);

	xor	eax, eax
	jne	SHORT $LN2@operator@11

; 83   : 
; 84   : 		return (*this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 85   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
_TEXT	ENDS
PUBLIC	??_C@_1ME@JPHJNGAA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
;	COMDAT ??_C@_1ME@JPHJNGAA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1ME@JPHJNGAA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H
	DB	':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@operator@12
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@operator@12
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN2@operator@12
$LN1@operator@12:

; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");

	push	99					; 00000063H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 100  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN5@operator@12
	xor	ecx, ecx
	jne	SHORT $LN6@operator@12
$LN5@operator@12:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	0
	push	100					; 00000064H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN6@operator@12
	int	3
$LN6@operator@12:
	push	0
	push	100					; 00000064H
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1ME@JPHJNGAA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator@12:

; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 111  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 112  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+8]
	sete	al

; 204  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??0?$_Pair_base@_J_J@std@@QAE@$$QA_J0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@_J_J@std@@QAE@$$QA_J0@Z PROC		; std::_Pair_base<__int64,__int64>::_Pair_base<__int64,__int64>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$move@AA_J@std@@YA$$QA_JAA_J@Z	; std::move<__int64 &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$move@AA_J@std@@YA$$QA_JAA_J@Z	; std::move<__int64 &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], eax

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Pair_base@_J_J@std@@QAE@$$QA_J0@Z ENDP		; std::_Pair_base<__int64,__int64>::_Pair_base<__int64,__int64>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >

; 305  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
_TEXT	ENDS
;	COMDAT ?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z PROC ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry, COMDAT

; 61   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 62   :     return core::entry(h);

	mov	ecx, DWORD PTR _h$[ebp]
	call	??B?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QBEABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@XZ ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::operator boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const * const &
	push	eax
	call	?entry@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABQBV5234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
	add	esp, 4

; 63   :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ENDP ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
_TEXT	ENDS
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator012@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 111  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 112  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
PUBLIC	??$?9U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ; std::operator!=<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	?get_allocator@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$allocator@U?$pair@_K_K@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::get_allocator
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z$1
__ehfuncinfo$?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
tv196 = -300						; size = 4
tv78 = -296						; size = 4
$T329814 = -285						; size = 1
$T329815 = -273						; size = 1
$T329816 = -261						; size = 1
$T329817 = -252						; size = 12
__Next$312190 = -40					; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Assign_rv, COMDAT
; _this$ = ecx

; 606  : 		{	// assign by moving _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		if (this == &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN7@Assign_rv
	jmp	$LN8@Assign_rv
$LN7@Assign_rv:

; 608  : 			;
; 609  : 		else if (get_allocator() != _Right.get_allocator())

	lea	eax, DWORD PTR $T329814[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?get_allocator@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$allocator@U?$pair@_K_K@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::get_allocator
	push	eax
	lea	ecx, DWORD PTR $T329815[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_allocator@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$allocator@U?$pair@_K_K@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::get_allocator
	push	eax
	call	??$?9U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ; std::operator!=<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN5@Assign_rv

; 610  : 			{	// move construct a copy
; 611  : 			clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear

; 612  : 			for (iterator _Next = _Right.begin(); _Next != _Right.end();

	lea	eax, DWORD PTR __Next$312190[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	jmp	SHORT $LN4@Assign_rv
$LN3@Assign_rv:

; 613  : 				++_Next)

	lea	ecx, DWORD PTR __Next$312190[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
$LN4@Assign_rv:
	lea	eax, DWORD PTR $T329817[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv196[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv196[ebp]
	push	edx
	lea	ecx, DWORD PTR __Next$312190[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
	mov	BYTE PTR $T329816[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T329817[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T329816[ebp]
	test	eax, eax
	je	SHORT $LN2@Assign_rv

; 614  : 				push_back(_STD forward<_Ty>(*_Next));

	lea	ecx, DWORD PTR __Next$312190[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
	push	eax
	call	??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
	jmp	SHORT $LN3@Assign_rv
$LN2@Assign_rv:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Next$312190[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ

; 615  : 			}
; 616  : 		else

	jmp	SHORT $LN8@Assign_rv
$LN5@Assign_rv:

; 617  : 			{	// clear this and steal from _Right
; 618  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Tidy

; 619  : 			this->_Swap_all((_Myt&)_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_all

; 620  : 			this->_Myfirst = _Right._Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 621  : 			this->_Mylast = _Right._Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 622  : 			this->_Myend = _Right._Myend;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 623  : 
; 624  : 			_Right._Myfirst = 0;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax+4], 0

; 625  : 			_Right._Mylast = 0;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax+8], 0

; 626  : 			_Right._Myend = 0;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN8@Assign_rv:

; 627  : 			}
; 628  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Assign_rv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN15@Assign_rv:
	DD	1
	DD	$LN14@Assign_rv
$LN14@Assign_rv:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN12@Assign_rv
$LN12@Assign_rv:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z$0:
	lea	ecx, DWORD PTR __Next$312190[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z$1:
	lea	ecx, DWORD PTR $T329817[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__ehhandler$?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Assign_rv
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z$0
__ehfuncinfo$?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z
_TEXT	SEGMENT
$T329833 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329833[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 802  : 		return (iterator(_Where._Ptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
	mov	edx, DWORD PTR $T329833[ebp]
	or	edx, 1
	mov	DWORD PTR $T329833[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z$1:
	mov	eax, DWORD PTR $T329833[ebp]
	and	eax, 1
	je	$LN5@Make_iter
	and	DWORD PTR $T329833[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@XZ
$LN5@Make_iter:
	ret	0
__ehhandler$?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Grow_to@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Capacity$ = -20					; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEII@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

	mov	eax, DWORD PTR __Capacity$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEII@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Grow_to
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 268435455	; 0fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 220  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::max_size
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??M?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator<, COMDAT
; _this$ = ecx

; 212  : 		{	// test if this < _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Compat

; 214  : 		return (this->_Ptr < _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	sbb	eax, eax
	neg	eax

; 215  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??M?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator<
_TEXT	ENDS
PUBLIC	?entry@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@PBV4523@@Z ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::entry
PUBLIC	?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::factory
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
;	COMDAT ?entry@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABQBV5234@@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
?entry@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABQBV5234@@Z PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry, COMDAT

; 132  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 133  :     return factory().entry(h);

	call	?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::factory
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?entry@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@PBV4523@@Z ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::entry
	add	esp, 4

; 134  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?entry@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABQBV5234@@Z ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@XZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type const &, COMDAT
; _this$ = ecx

; 67   :   operator const Value&()const{return x;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@XZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type const &
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?release_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?release_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release_deleter, COMDAT
; _this$ = ecx

; 80   :   bool release_deleter()const{return (--del_ref==0);}

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR [edx+36], eax
	xor	eax, eax
	cmp	DWORD PTR tv66[ebp], 0
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?release_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release_deleter
_TEXT	ENDS
PUBLIC	?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::spc_ptr
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
;	COMDAT ??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABVass_synth_priv@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABVass_synth_priv@@XZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator ass_synth_priv const &, COMDAT
; _this$ = ecx

; 85   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 86   :       /* This is always called after construct_value() or copy_value(),
; 87   :        * so we access spc directly rather than through value_ptr to
; 88   :        * save us an indirection.
; 89   :        */
; 90   : 
; 91   :       return *static_cast<value_type*>(spc_ptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::spc_ptr

; 92   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABVass_synth_priv@@XZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator ass_synth_priv const &
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ??B?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QBEABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QBEABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@XZ PROC ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::operator boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const * const &, COMDAT
; _this$ = ecx

; 117  :   operator const Handle&()const{return h;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QBEABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@XZ ENDP ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::operator boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const * const &
_TEXT	ENDS
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$312250 = -48					; size = 4
__Ptr$312243 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z PROC ; std::vector<int,std::allocator<int> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
	jmp	$LN7@reserve@2
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN7@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?allocate@?$allocator@H@std@@QAEPAHI@Z	; std::allocator<int>::allocate
	mov	DWORD PTR __Ptr$312243[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	eax, DWORD PTR __Ptr$312243[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
	jmp	SHORT $LN8@reserve@2
__catch$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$312243[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate

; 757  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 758  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$1
	ret	0
$LN8@reserve@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	DWORD PTR __Size$312250[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
$LN1@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$312243[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 770  : 			this->_Mylast = _Ptr + _Size;

	mov	eax, DWORD PTR __Size$312250[ebp]
	mov	ecx, DWORD PTR __Ptr$312243[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 771  : 			this->_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$312243[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN7@reserve@2:

; 772  : 			}
; 773  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::reserve
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 778  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z$0
__ehfuncinfo$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T329884 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T329884[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 802  : 		return (iterator(_Where._Ptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
	mov	edx, DWORD PTR $T329884[ebp]
	or	edx, 1
	mov	DWORD PTR $T329884[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z$1:
	mov	eax, DWORD PTR $T329884[ebp]
	and	eax, 1
	je	$LN5@Make_iter@2
	and	DWORD PTR $T329884[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
$LN5@Make_iter@2:
	ret	0
__ehhandler$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 880  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?max_size@?$allocator@H@std@@QBEIXZ	; std::allocator<int>::max_size

; 885  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
	add	esp, 12					; 0000000cH

; 1271 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Capacity$ = -20					; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to@2
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to@2:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

	mov	eax, DWORD PTR __Capacity$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to@2

; 1280 : 			_Capacity = _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to@2:

; 1281 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen@2:

; 1428 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 46   : 		this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 47   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??M?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator<, COMDAT
; _this$ = ecx

; 212  : 		{	// test if this < _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat

; 214  : 		return (this->_Ptr < _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	sbb	eax, eax
	neg	eax

; 215  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??M?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator<
_TEXT	ENDS
PUBLIC	??_C@_1LM@KOJMFFAN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
;	COMDAT ??_C@_1LM@KOJMFFAN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1LM@KOJMFFAN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H
	DB	':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 't', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat, COMDAT
; _this$ = ecx

; 234  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 		if (this->_Getcont() == 0
; 236  : 			|| this->_Getcont() != _Right._Getcont())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@Compat@2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	SHORT $LN3@Compat@2
$LN1@Compat@2:

; 237  : 			{	// report error
; 238  : 			_DEBUG_ERROR("vector iterators incompatible");

	push	238					; 000000eeH
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 239  : 			_SCL_SECURE_INVALID_ARGUMENT;

	mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
	test	eax, eax
	je	SHORT $LN5@Compat@2
	xor	ecx, ecx
	jne	SHORT $LN6@Compat@2
$LN5@Compat@2:
	push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN6@Compat@2
	int	3
$LN6@Compat@2:
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1IM@KADKFIFB@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1LM@KOJMFFAN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Compat@2:

; 240  : 			}
; 241  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?get_allocator@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$allocator@U?$pair@_K_K@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$allocator@U?$pair@_K_K@std@@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::get_allocator, COMDAT
; _this$ = ecx

; 893  : 		{	// return allocator object for values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 894  : 		return (this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 895  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_allocator@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$allocator@U?$pair@_K_K@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::get_allocator
_TEXT	ENDS
PUBLIC	?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
;	COMDAT ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
_BSS	SEGMENT
?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A DD 01H DUP (?) ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT ?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ
_TEXT	SEGMENT
?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::factory, COMDAT

; 147  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 148  :     return *static_factory_ptr;

	mov	eax, DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr

; 149  :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::factory
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\hashed_factory.hpp
_TEXT	ENDS
;	COMDAT ?entry@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@PBV4523@@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
?entry@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@PBV4523@@Z PROC ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::entry, COMDAT

; 80   :   static const Entry& entry(handle_type h){return *h;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _h$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?entry@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@PBV4523@@Z ENDP ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::entry
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
_TEXT	ENDS
;	COMDAT ?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::spc_ptr, COMDAT
; _this$ = ecx

; 97   :     void* spc_ptr()const{return static_cast<void*>(&spc);}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::spc_ptr
_TEXT	ENDS
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 220  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
PUBLIC	?swap@?$shared_ptr@E@boost@@QAEXAAV12@@Z	; boost::shared_ptr<unsigned char>::swap
PUBLIC	??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char><unsigned char>
PUBLIC	??_C@_1CE@MHKCGCHE@?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAp?$AAx?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CE@MHKCGCHE@?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAp?$AAx?$AA?$AA@
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\shared_ptr.hpp
CONST	SEGMENT
??_C@_1CE@MHKCGCHE@?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAp?$AAx?$AA?$AA@ DB 'p'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, 'p', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, 'p', 00H, 'x', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z$0
__ehfuncinfo$??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z
_TEXT	SEGMENT
tv78 = -240						; size = 4
tv79 = -236						; size = 4
$T329948 = -228						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z PROC		; boost::shared_ptr<unsigned char>::reset<unsigned char>, COMDAT
; _this$ = ecx

; 385  :     template<class Y> void reset(Y * p) // Y must be complete

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 386  :     {
; 387  :         BOOST_ASSERT(p == 0 || p != px); // catch self-reset errors

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@reset
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN3@reset
	push	387					; 00000183H
	push	OFFSET ??_C@_1LO@INIHHGBB@?$AAe?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAs?$AAa?$AAn?$AAd?$AAn?$AAo?$AAt?$AAe?$AAs?$AA?2?$AAx?$AAy?$AA?9?$AAv?$AAs?$AAf?$AAi?$AAl@
	push	OFFSET ??_C@_1CE@MHKCGCHE@?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAp?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@reset:

; 388  :         this_type(p).swap(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T329948[ebp]
	call	??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z	; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char><unsigned char>
	mov	DWORD PTR tv79[ebp], eax
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR tv78[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv78[ebp]
	call	?swap@?$shared_ptr@E@boost@@QAEXAAV12@@Z ; boost::shared_ptr<unsigned char>::swap
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T329948[ebp]
	call	??1?$shared_ptr@E@boost@@QAE@XZ

; 389  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z$0:
	lea	ecx, DWORD PTR $T329948[ebp]
	jmp	??1?$shared_ptr@E@boost@@QAE@XZ
__ehhandler$??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z ENDP		; boost::shared_ptr<unsigned char>::reset<unsigned char>
PUBLIC	??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char><unsigned char,void (__cdecl*)(void *)>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z$0
__ehfuncinfo$??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z
_TEXT	SEGMENT
tv73 = -240						; size = 4
tv74 = -236						; size = 4
$T329958 = -228						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_d$ = 12						; size = 4
??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z PROC ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>, COMDAT
; _this$ = ecx

; 391  :     template<class Y, class D> void reset( Y * p, D d )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 392  :     {
; 393  :         this_type( p, d ).swap( *this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T329958[ebp]
	call	??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char><unsigned char,void (__cdecl*)(void *)>
	mov	DWORD PTR tv74[ebp], eax
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR tv73[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv73[ebp]
	call	?swap@?$shared_ptr@E@boost@@QAEXAAV12@@Z ; boost::shared_ptr<unsigned char>::swap
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T329958[ebp]
	call	??1?$shared_ptr@E@boost@@QAE@XZ

; 394  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z$0:
	lea	ecx, DWORD PTR $T329958[ebp]
	jmp	??1?$shared_ptr@E@boost@@QAE@XZ
__ehhandler$??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ENDP ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>
PUBLIC	??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert<double>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\pp_perfect_fwd.hpp
;	COMDAT ??$?0N@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@AAN@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t0$ = 8						; size = 4
??$?0N@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@AAN@Z PROC ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_><double>, COMDAT
; _this$ = ecx

; 124  : BOOST_FLYWEIGHT_PERFECT_FWD_OVERLOADS

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _t0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert<double>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0N@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@AAN@Z ENDP ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_><double>
_TEXT	ENDS
PUBLIC	??$_Sort@PAHH@std@@YAXPAH0H@Z			; std::_Sort<int *,int>
PUBLIC	??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<int,std::allocator<int> > >
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator-
PUBLIC	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
PUBLIC	??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
;	COMDAT ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
CONST	SEGMENT
??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H, 'g'
	DB	00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z$2
__ehfuncinfo$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z
_TEXT	SEGMENT
tv183 = -268						; size = 4
tv182 = -264						; size = 4
tv175 = -264						; size = 4
tv179 = -260						; size = 4
tv172 = -260						; size = 4
tv186 = -256						; size = 4
tv178 = -256						; size = 4
$T329971 = -248						; size = 4
$T329972 = -236						; size = 4
$T329973 = -224						; size = 4
$T329974 = -212						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >, COMDAT

; 3640 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 3641 : 	_DEBUG_RANGE(_First, _Last);

	push	3641					; 00000e39H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329971[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv186[ebp], eax
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR tv172[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329972[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv175[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
	add	esp, 32					; 00000020H

; 3642 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??G?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator-
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329973[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv178[ebp], eax
	call	??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<int,std::allocator<int> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv179[ebp], eax
	mov	eax, DWORD PTR tv179[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T329974[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv182[ebp], eax
	call	??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<int,std::allocator<int> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv183[ebp], eax
	mov	eax, DWORD PTR tv183[ebp]
	push	eax
	call	??$_Sort@PAHH@std@@YAXPAH0H@Z		; std::_Sort<int *,int>
	add	esp, 12					; 0000000cH

; 3643 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z$2:
	mov	ecx, DWORD PTR $T329971[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$sort@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
PUBLIC	??$?0_J_J@?$_Pair_base@_K_K@std@@QAE@$$QA_J0@Z	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><__int64,__int64>
PUBLIC	??$forward@_J@std@@YA$$QA_JAA_J@Z		; std::forward<__int64>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0_J_J@?$pair@_K_K@std@@QAE@$$QAU?$pair@_J_J@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??$?0_J_J@?$pair@_K_K@std@@QAE@$$QAU?$pair@_J_J@1@@Z PROC ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><__int64,__int64>, COMDAT
; _this$ = ecx

; 255  : 		{	// construct from moved compatible pair

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	eax
	call	??$forward@_J@std@@YA$$QA_JAA_J@Z	; std::forward<__int64>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$forward@_J@std@@YA$$QA_JAA_J@Z	; std::forward<__int64>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0_J_J@?$_Pair_base@_K_K@std@@QAE@$$QA_J0@Z ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><__int64,__int64>

; 256  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0_J_J@?$pair@_K_K@std@@QAE@$$QAU?$pair@_J_J@1@@Z ENDP ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><__int64,__int64>
_TEXT	ENDS
PUBLIC	??$_Debug_lt@_K_K@std@@YA_NAB_K0PB_WI@Z		; std::_Debug_lt<unsigned __int64,unsigned __int64>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$max@_K@std@@YAAB_KAB_K0@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
$T329991 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@_K@std@@YAAB_KAB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 2079 : 	{	// return larger of _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2080 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	push	2080					; 00000820H
	push	OFFSET ??_C@_1JA@MAMBAKEI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$_Debug_lt@_K_K@std@@YA_NAB_K0PB_WI@Z	; std::_Debug_lt<unsigned __int64,unsigned __int64>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@max
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN4@max:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T329991[ebp], edx
	mov	eax, DWORD PTR $T329991[ebp]

; 2081 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$max@_K@std@@YAAB_KAB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
PUBLIC	??$?0AA_KAA_K@?$_Pair_base@_K_K@std@@QAE@AA_K0@Z ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>
PUBLIC	??$forward@AA_K@std@@YAAA_KAA_K@Z		; std::forward<unsigned __int64 &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AA_KAA_K@?$pair@_K_K@std@@QAE@AA_K0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AA_KAA_K@?$pair@_K_K@std@@QAE@AA_K0@Z PROC		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@AA_K@std@@YAAA_KAA_K@Z	; std::forward<unsigned __int64 &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val1$[ebp]
	push	ecx
	call	??$forward@AA_K@std@@YAAA_KAA_K@Z	; std::forward<unsigned __int64 &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0AA_KAA_K@?$_Pair_base@_K_K@std@@QAE@AA_K0@Z ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>

; 248  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AA_KAA_K@?$pair@_K_K@std@@QAE@AA_K0@Z ENDP		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>
_TEXT	ENDS
PUBLIC	??$?0$$CB_K$$CB_K@?$_Pair_base@_K_K@std@@QAE@$$QB_K0@Z ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >
PUBLIC	??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z		; std::forward<unsigned __int64 const >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?0$$CB_K$$CB_K@?$pair@_K_K@std@@QAE@$$QB_K0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0$$CB_K$$CB_K@?$pair@_K_K@std@@QAE@$$QB_K0@Z PROC	; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z	; std::forward<unsigned __int64 const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val1$[ebp]
	push	ecx
	call	??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z	; std::forward<unsigned __int64 const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$CB_K$$CB_K@?$_Pair_base@_K_K@std@@QAE@$$QB_K0@Z ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >

; 248  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0$$CB_K$$CB_K@?$pair@_K_K@std@@QAE@$$QB_K0@Z ENDP	; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAU10@@Z PROC ; std::addressof<std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 110  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 112  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAU10@@Z ENDP ; std::addressof<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z PROC ; std::forward<std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ENDP ; std::forward<std::pair<unsigned __int64,unsigned __int64> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@U32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@$$QAU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@U32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@$$QAU20@@Z PROC ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@U32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@$$QAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@@Z ; std::_Uninitialized_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@@Z ; std::_Uninitialized_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	add	esp, 16					; 00000010H

; 1326 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBU?$pair@_K_K@std@@@std@@YAPBU?$pair@_K_K@0@ABU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU?$pair@_K_K@std@@@std@@YAPBU?$pair@_K_K@0@ABU10@@Z PROC ; std::addressof<std::pair<unsigned __int64,unsigned __int64> const >, COMDAT

; 110  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 112  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@$$CBU?$pair@_K_K@std@@@std@@YAPBU?$pair@_K_K@0@ABU10@@Z ENDP ; std::addressof<std::pair<unsigned __int64,unsigned __int64> const >
_TEXT	ENDS
PUBLIC	??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct<std::pair<unsigned __int64,unsigned __int64> &>
PUBLIC	??$forward@AAU?$pair@_K_K@std@@@std@@YAAAU?$pair@_K_K@0@AAU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@AAU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@AAU20@@Z PROC ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> &>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@AAU?$pair@_K_K@std@@@std@@YAAAU?$pair@_K_K@0@AAU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct<std::pair<unsigned __int64,unsigned __int64> &>

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@AAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct
PUBLIC	??$forward@ABU?$pair@_K_K@std@@@std@@YAABU?$pair@_K_K@0@ABU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> const &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@ABU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@ABU20@@Z PROC ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@ABU?$pair@_K_K@std@@@std@@YAABU?$pair@_K_K@0@ABU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@ABU20@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z PROC ; std::operator==<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 262  : 	{	// test for allocator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 263  : 	return (true);

	mov	al, 1

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ENDP ; std::operator==<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
_TEXT	ENDS
PUBLIC	??$_Move@AAPAU?$pair@_K_K@std@@@std@@YA$$QAPAU?$pair@_K_K@0@AAPAU10@@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> * &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z PROC ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 102  : 	_Ty _Tmp = _Move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAPAU?$pair@_K_K@std@@@std@@YA$$QAPAU?$pair@_K_K@0@AAPAU10@@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> * &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 103  : 	_Left = _Move(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$_Move@AAPAU?$pair@_K_K@std@@@std@@YA$$QAPAU?$pair@_K_K@0@AAPAU10@@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 104  : 	_Right = _Move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$_Move@AAPAU?$pair@_K_K@std@@@std@@YA$$QAPAU?$pair@_K_K@0@AAPAU10@@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 105  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@swap@2:
	DD	1
	DD	$LN4@swap@2
$LN4@swap@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap@2
$LN3@swap@2:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z ENDP ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Move@AAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z PROC ; std::_Move<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > &>, COMDAT

; 94   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@AAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ENDP ; std::_Move<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > &>
_TEXT	ENDS
PUBLIC	?erase@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@@Z ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::erase
PUBLIC	?mutex@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAUmutex_type@no_locking@34@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::mutex
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
;	COMDAT ??$erase@P6A_NABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@@Z@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAXABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@P6A_N0@Z@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
_check$ = 12						; size = 4
??$erase@P6A_NABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@@Z@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAXABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@P6A_N0@Z@Z PROC ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::erase<bool (__cdecl*)(boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> > const &)>, COMDAT

; 66   :   static void erase(const handle_type& h,Checker check)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 67   :   {
; 68   :     typedef typename core::lock_type lock_type;
; 69   :     lock_type lock(core::mutex());

	call	?mutex@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAUmutex_type@no_locking@34@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::mutex

; 70   :     if(check(h))core::factory().erase(h);

	mov	esi, esp
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	DWORD PTR _check$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@erase@3
	mov	ecx, DWORD PTR _h$[ebp]
	call	??B?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QBEABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@XZ ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::operator boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const * const &
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::factory
	mov	ecx, eax
	call	?erase@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@@Z ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::erase
$LN2@erase@3:

; 71   :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@erase@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@erase@3:
	DD	1
	DD	$LN5@erase@3
$LN5@erase@3:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN4@erase@3
$LN4@erase@3:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
??$erase@P6A_NABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@@Z@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAXABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@P6A_N0@Z@Z ENDP ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::erase<bool (__cdecl*)(boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> > const &)>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBH@std@@YAPBHABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBH@std@@YAPBHABH@Z PROC			; std::addressof<int const >, COMDAT

; 110  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 112  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@$$CBH@std@@YAPBHABH@Z ENDP			; std::addressof<int const >
_TEXT	ENDS
PUBLIC	??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z ; std::allocator<int>::construct<int &>
PUBLIC	??$forward@AAH@std@@YAAAHAAH@Z			; std::forward<int &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int &>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@AAH@std@@YAAAHAAH@Z		; std::forward<int &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z ; std::allocator<int>::construct<int &>

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@H@std@@QAEXPAHABH@Z	; std::allocator<int>::construct
PUBLIC	??$forward@ABH@std@@YAABHABH@Z			; std::forward<int const &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int const &>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@ABH@std@@YAABHABH@Z		; std::forward<int const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@H@std@@QAEXPAHABH@Z ; std::allocator<int>::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int const &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$move@AA_J@std@@YA$$QA_JAA_J@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AA_J@std@@YA$$QA_JAA_J@Z PROC			; std::move<__int64 &>, COMDAT

; 86   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AA_J@std@@YA$$QA_JAA_J@Z ENDP			; std::move<__int64 &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ; std::allocator<std::_Container_proxy>::construct
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z PROC ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ; std::allocator<std::_Container_proxy>::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ; std::allocator<std::_Container_proxy>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z PROC ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>, COMDAT

; 286  : 	{	// destroy using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 287  : 	_Alval.destroy(_Pdest);

	mov	eax, DWORD PTR __Pdest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ; std::allocator<std::_Container_proxy>::destroy

; 288  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@V?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z PROC ; std::forward<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@V?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ENDP ; std::forward<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
_TEXT	ENDS
PUBLIC	??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Ptr_cat@U?$pair@_K_K@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@_K_K@0@0@Z ; std::_Ptr_cat<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z
_TEXT	SEGMENT
$T330042 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z PROC ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@U?$pair@_K_K@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@_K_K@0@0@Z ; std::_Ptr_cat<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 8
	mov	BYTE PTR $T330042[ebp], al
	movzx	edx, BYTE PTR $T330042[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
	add	esp, 16					; 00000010H

; 2536 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z ENDP ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@@Z
_TEXT	SEGMENT
$T330045 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@U?$pair@_K_K@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@_K_K@0@0@Z ; std::_Ptr_cat<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 8
	mov	BYTE PTR $T330045[ebp], al
	movzx	edx, BYTE PTR $T330045[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	add	esp, 16					; 00000010H

; 89   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@_K_K@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@_K_K@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0U?$pair@_K_K@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@_K_K@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$pair@_K_K@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@_K_K@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<unsigned __int64,unsigned __int64> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z
_TEXT	SEGMENT
$T330050 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z PROC ; std::_Allocate<std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 268435455	; 0fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T330050[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T330050[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z ENDP ; std::_Allocate<std::pair<unsigned __int64,unsigned __int64> >
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T330059 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAHPAH@std@@YAPAHPAH00@Z PROC			; std::_Move<int *,int *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T330059[ebp], al
	movzx	edx, BYTE PTR $T330059[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
	add	esp, 16					; 00000010H

; 2536 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@PAHPAH@std@@YAPAHPAH00@Z ENDP			; std::_Move<int *,int *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?9U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z PROC ; std::operator!=<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 270  : 	{	// test for allocator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 271  : 	return (!(_Left == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ; std::operator==<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 8
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 272  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?9U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ENDP ; std::operator!=<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H

; 1326 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
$T330068 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T330068[ebp], al
	movzx	edx, BYTE PTR $T330068[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
	add	esp, 16					; 00000010H

; 89   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
$T330071 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@2

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@2
$LN4@Allocate@2:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate@2
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T330071[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T330071[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@2:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@2:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T330074 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@3

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@3
$LN4@Allocate@3:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate@3
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T330074[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T330074[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@3:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@3:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z ; std::_Construct<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z ; std::_Construct<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>
	add	esp, 8

; 198  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??$?0_K_K@?$pair@_K_K@std@@QAE@$$QAU01@@Z	; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z$0
__ehfuncinfo$?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z
_TEXT	SEGMENT
tv76 = -244						; size = 4
$T330085 = -236						; size = 4
$T330086 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T330086[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T330086[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T330086[ebp]
	call	??$?0_K_K@?$pair@_K_K@std@@QAE@$$QAU01@@Z ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv76[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T330085[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T330086[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR __Where$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$swap@PAE@std@@YAXAAPAE0@Z			; std::swap<unsigned char *>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\shared_ptr.hpp
;	COMDAT ?swap@?$shared_ptr@E@boost@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
?swap@?$shared_ptr@E@boost@@QAEXAAV12@@Z PROC		; boost::shared_ptr<unsigned char>::swap, COMDAT
; _this$ = ecx

; 437  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 438  :         std::swap(px, other.px);

	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$swap@PAE@std@@YAXAAPAE0@Z		; std::swap<unsigned char *>
	add	esp, 8

; 439  :         pn.swap(other.pn);

	mov	eax, DWORD PTR _other$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?swap@shared_count@detail@boost@@QAEXAAV123@@Z ; boost::detail::shared_count::swap

; 440  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?swap@?$shared_ptr@E@boost@@QAEXAAV12@@Z ENDP		; boost::shared_ptr<unsigned char>::swap
_TEXT	ENDS
PUBLIC	?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_mutex_ptr
;	COMDAT ?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
_BSS	SEGMENT
?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A DD 01H DUP (?) ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_mutex_ptr
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT ?mutex@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAUmutex_type@no_locking@34@XZ
_TEXT	SEGMENT
?mutex@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAUmutex_type@no_locking@34@XZ PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::mutex, COMDAT

; 152  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 153  :     return *static_mutex_ptr;

	mov	eax, DWORD PTR ?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_mutex_ptr

; 154  :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?mutex@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAUmutex_type@no_locking@34@XZ ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::mutex
_TEXT	ENDS
PUBLIC	?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase
PUBLIC	?iterator_to@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::iterator_to
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\hashed_factory.hpp
;	COMDAT ?erase@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@@Z
_TEXT	SEGMENT
$T330107 = -232						; size = 8
$T330108 = -216						; size = 8
_this$ = -8						; size = 4
_h$ = 8							; size = 4
?erase@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@@Z PROC ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::erase, COMDAT
; _this$ = ecx

; 76   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 77   :     cont.erase(cont.iterator_to(*h));

	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T330107[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?iterator_to@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::iterator_to
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T330108[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase

; 78   :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@@Z ENDP ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::erase
_TEXT	ENDS
PUBLIC	??$_Construct@HABH@std@@YAXPAHABH@Z		; std::_Construct<int,int const &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@H@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@H@std@@QAEXPAHABH@Z PROC		; std::allocator<int>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@HABH@std@@YAXPAHABH@Z	; std::_Construct<int,int const &>
	add	esp, 8

; 198  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@H@std@@QAEXPAHABH@Z ENDP		; std::allocator<int>::construct
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator-
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator-, COMDAT
; _this$ = ecx

; 380  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		return (*(_Mybase *)this - _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??G?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator-

; 382  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator-
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z$0
__ehfuncinfo$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T330115 = -236						; size = 4
$T330116 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z PROC ; std::allocator<std::_Container_proxy>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T330116[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T330116[ebp], 0
	je	SHORT $LN3@construct@2
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T330116[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T330116[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct@2
$LN3@construct@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct@2:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T330115[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T330116[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ENDP ; std::allocator<std::_Container_proxy>::construct
PUBLIC	??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ; std::_Destroy<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z PROC ; std::allocator<std::_Container_proxy>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ; std::_Destroy<std::_Container_proxy>
	add	esp, 4

; 214  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy
_TEXT	ENDS
PUBLIC	?make_iterator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::make_iterator
PUBLIC	??$node_from_value@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@detail@multi_index@boost@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@012@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@0flyweights@2@@Z ; boost::multi_index::detail::node_from_value<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
;	COMDAT ?iterator_to@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
?iterator_to@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::iterator_to, COMDAT
; _this$ = ecx

; 238  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 239  :     return make_iterator(node_from_value<node_type>(&x));

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	??$node_from_value@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@detail@multi_index@boost@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@012@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@0flyweights@2@@Z ; boost::multi_index::detail::node_from_value<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?make_iterator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::make_iterator
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 240  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?iterator_to@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::iterator_to
_TEXT	ENDS
PUBLIC	?final_erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_erase_
PUBLIC	?get_node@?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::get_node
PUBLIC	??Eboost@@YA?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@0@AAV1230@H@Z ; boost::operator++
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z
_TEXT	SEGMENT
$T330132 = -216						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_position$ = 12						; size = 8
?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase, COMDAT
; _this$ = ecx

; 275  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 276  :     BOOST_MULTI_INDEX_CHECK_VALID_ITERATOR(position);
; 277  :     BOOST_MULTI_INDEX_CHECK_DEREFERENCEABLE_ITERATOR(position);
; 278  :     BOOST_MULTI_INDEX_CHECK_IS_OWNER(position,*this);
; 279  :     BOOST_MULTI_INDEX_HASHED_INDEX_CHECK_INVARIANT;
; 280  :     this->final_erase_(static_cast<final_node_type*>(position++.get_node()));

	push	0
	lea	eax, DWORD PTR _position$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T330132[ebp]
	push	ecx
	call	??Eboost@@YA?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@0@AAV1230@H@Z ; boost::operator++
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?get_node@?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::get_node
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final_erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_erase_

; 281  :     return position;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _position$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 282  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator-, COMDAT
; _this$ = ecx

; 190  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat

; 192  : 		return (this->_Ptr - _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2

; 193  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator-
_TEXT	ENDS
PUBLIC	??0?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAE@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@123@PAV?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@123@@Z ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
;	COMDAT ?make_iterator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_node$ = 12						; size = 4
?make_iterator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::make_iterator, COMDAT
; _this$ = ecx

; 655  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  :     return iterator(node,&buckets);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAE@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@123@PAV?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@123@@Z ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?make_iterator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::make_iterator
_TEXT	ENDS
PUBLIC	?erase_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_
PUBLIC	?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
;	COMDAT ?final_erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?final_erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_erase_, COMDAT
; _this$ = ecx

; 155  :   void final_erase_(final_node_type* x){final().erase_(x);}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
	mov	ecx, eax
	call	?erase_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?final_erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_erase_
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_iterator.hpp
_TEXT	ENDS
;	COMDAT ?get_node@?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_node@?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ PROC ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::get_node, COMDAT
; _this$ = ecx

; 90   :   Node* get_node()const{return node;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_node@?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ENDP ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::get_node
_TEXT	ENDS
PUBLIC	??E?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAEAAV0123@XZ ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator++
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\operators.hpp
;	COMDAT ??Eboost@@YA?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@0@AAV1230@H@Z
_TEXT	SEGMENT
_nrv$ = -12						; size = 8
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
___formal$ = 16						; size = 4
??Eboost@@YA?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@0@AAV1230@H@Z PROC ; boost::operator++, COMDAT

; 275  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 276  :     incrementable_type nrv(x);

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _nrv$[ebp], ecx
	mov	DWORD PTR _nrv$[ebp+4], edx

; 277  :     ++x;

	mov	ecx, DWORD PTR _x$[ebp]
	call	??E?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAEAAV0123@XZ ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator++

; 278  :     return nrv;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _nrv$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _nrv$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 279  :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@13
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@operator@13:
	DD	1
	DD	$LN4@operator@13
$LN4@operator@13:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@operator@13
$LN3@operator@13:
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	118					; 00000076H
	DB	0
??Eboost@@YA?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@0@AAV1230@H@Z ENDP ; boost::operator++
_TEXT	ENDS
PUBLIC	?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::deallocate_node
PUBLIC	?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase_
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
;	COMDAT ?erase_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?erase_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_, COMDAT
; _this$ = ecx

; 527  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 528  :     --node_count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 529  :     super::erase_(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase_

; 530  :     deallocate_node(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::deallocate_node

; 531  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?erase_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final, COMDAT
; _this$ = ecx

; 140  :   final_type&       final(){return *static_cast<final_type*>(this);}

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN3@final
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@final
$LN3@final:
	mov	DWORD PTR tv68[ebp], 0
$LN4@final:
	mov	eax, DWORD PTR tv68[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_iterator.hpp
_TEXT	ENDS
;	COMDAT ??0?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAE@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@123@PAV?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@123@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node_$ = 8						; size = 4
_buckets_$ = 12						; size = 4
??0?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAE@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@123@PAV?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@123@@Z PROC ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >, COMDAT
; _this$ = ecx

; 46   :   {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _node_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _buckets_$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAE@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@123@PAV?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@123@@Z ENDP ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
_TEXT	ENDS
PUBLIC	?increment@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAXAAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@1@Z ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::increment
PUBLIC	?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::begin
PUBLIC	?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??E?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAEAAV0123@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAEAAV0123@XZ PROC ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator++, COMDAT
; _this$ = ecx

; 54   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   :     Node::increment(node,buckets->begin(),buckets->end());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::begin
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?increment@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAXAAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@1@Z ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::increment
	add	esp, 12					; 0000000cH

; 56   :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 57   :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAEAAV0123@XZ ENDP ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator++
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::deallocate
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
;	COMDAT ?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::deallocate_node, COMDAT
; _this$ = ecx

; 464  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 465  :     typedef typename node_allocator::pointer node_pointer;
; 466  :     bfm_allocator::member.deallocate(static_cast<node_pointer>(x),1);

	push	1
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::deallocate

; 467  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::deallocate_node
_TEXT	ENDS
PUBLIC	?erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_
PUBLIC	?first_nonempty@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::first_nonempty
PUBLIC	?unlink@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unlink
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
;	COMDAT ?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase_, COMDAT
; _this$ = ecx

; 724  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 725  :     unlink(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?unlink@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unlink
	add	esp, 4

; 726  :     first_bucket=buckets.first_nonempty(first_bucket);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?first_nonempty@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::first_nonempty
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax

; 727  :     super::erase_(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_

; 728  : 
; 729  : #if defined(BOOST_MULTI_INDEX_ENABLE_SAFE_MODE)
; 730  :     detach_iterators(x);
; 731  : #endif
; 732  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase_
_TEXT	ENDS
PUBLIC	?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::from_impl
PUBLIC	?increment@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXAAPAU1234@PAU1234@1@Z ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::increment
PUBLIC	?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::impl
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_node.hpp
;	COMDAT ?increment@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAXAAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@1@Z
_TEXT	SEGMENT
_xi$ = -8						; size = 4
_x$ = 8							; size = 4
_bbegin$ = 12						; size = 4
_bend$ = 16						; size = 4
?increment@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAXAAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@1@Z PROC ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::increment, COMDAT

; 152  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 153  :     impl_pointer xi=x->impl();

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::impl
	mov	DWORD PTR _xi$[ebp], eax

; 154  :     trampoline::increment(xi,bbegin,bend);

	mov	eax, DWORD PTR _bend$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bbegin$[ebp]
	push	ecx
	lea	edx, DWORD PTR _xi$[ebp]
	push	edx
	call	?increment@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXAAPAU1234@PAU1234@1@Z ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::increment
	add	esp, 12					; 0000000cH

; 155  :     x=from_impl(xi);

	mov	eax, DWORD PTR _xi$[ebp]
	push	eax
	call	?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::from_impl
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], eax

; 156  :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@increment
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@increment:
	DD	1
	DD	$LN4@increment
$LN4@increment:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@increment
$LN3@increment:
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	0
?increment@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAXAAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@1@Z ENDP ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::increment
_TEXT	ENDS
PUBLIC	?buckets@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@ABEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::buckets
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
;	COMDAT ?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::begin, COMDAT
; _this$ = ecx

; 120  :   pointer begin()const{return buckets();}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buckets@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@ABEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::buckets
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::begin
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end, COMDAT
; _this$ = ecx

; 121  :   pointer end()const{return buckets()+size_;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buckets@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@ABEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::buckets
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end
_TEXT	ENDS
PUBLIC	??R?$less_equal@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QBE_NABQAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@0@Z ; std::less_equal<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > *>::operator()
PUBLIC	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_node.hpp
;	COMDAT ?increment@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXAAPAU1234@PAU1234@1@Z
_TEXT	SEGMENT
_leq$ = -5						; size = 1
_x$ = 8							; size = 4
_bbegin$ = 12						; size = 4
_bend$ = 16						; size = 4
?increment@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXAAPAU1234@PAU1234@1@Z PROC ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::increment, COMDAT

; 51   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 52   :     std::less_equal<pointer> leq;
; 53   : 
; 54   :     x=x->next();

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 55   :     if(leq(bbegin,x)&&leq(x,bend)){ /* bucket node */

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bbegin$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _leq$[ebp]
	call	??R?$less_equal@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QBE_NABQAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@0@Z ; std::less_equal<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > *>::operator()
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@increment@2
	lea	eax, DWORD PTR _bend$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _leq$[ebp]
	call	??R?$less_equal@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QBE_NABQAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@0@Z ; std::less_equal<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > *>::operator()
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@increment@2
$LN3@increment@2:

; 56   :       do{
; 57   :         ++x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx], ecx

; 58   :       }while(x->next()==x);

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN3@increment@2

; 59   :       x=x->next();

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN5@increment@2:

; 60   :     }
; 61   :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@increment@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@increment@2:
	DD	1
	DD	$LN8@increment@2
$LN8@increment@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN7@increment@2
$LN7@increment@2:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	0
?increment@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXAAPAU1234@PAU1234@1@Z ENDP ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::increment
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z PROC ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z ENDP ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::deallocate
_TEXT	ENDS
PUBLIC	?unlink@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXPAU1234@@Z ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::unlink
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
;	COMDAT ?unlink@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?unlink@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unlink, COMDAT

; 1018 :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1019 :     node_impl_type::unlink(x->impl());

	mov	ecx, DWORD PTR _x$[ebp]
	call	?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::impl
	push	eax
	call	?unlink@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXPAU1234@@Z ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::unlink
	add	esp, 4

; 1020 :   };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?unlink@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unlink
_TEXT	ENDS
PUBLIC	??$destroy@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z ; boost::detail::allocator::destroy<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
PUBLIC	?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
;	COMDAT ?erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_, COMDAT
; _this$ = ecx

; 99   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  :     boost::detail::allocator::destroy(&x->value());

	mov	ecx, DWORD PTR _x$[ebp]
	call	?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
	push	eax
	call	??$destroy@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z ; boost::detail::allocator::destroy<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
	add	esp, 4

; 101  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_node.hpp
_TEXT	ENDS
;	COMDAT ?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ PROC ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::impl, COMDAT
; _this$ = ecx

; 127  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  :     return static_cast<impl_pointer>(
; 129  :       static_cast<impl_type*>(static_cast<trampoline*>(this)));

	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN3@impl
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@impl
$LN3@impl:
	mov	DWORD PTR tv71[ebp], 0
$LN4@impl:
	mov	eax, DWORD PTR tv71[ebp]

; 130  :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ENDP ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::impl
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z
_TEXT	SEGMENT
tv72 = -196						; size = 4
_x$ = 8							; size = 4
?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z PROC ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::from_impl, COMDAT

; 139  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 140  :     return static_cast<hashed_index_node*>(
; 141  :       static_cast<trampoline*>(&*x));

	cmp	DWORD PTR _x$[ebp], 0
	je	SHORT $LN3@from_impl
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 40					; 00000028H
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@from_impl
$LN3@from_impl:
	mov	DWORD PTR tv72[ebp], 0
$LN4@from_impl:
	mov	eax, DWORD PTR tv72[ebp]

; 142  :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ENDP ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::from_impl
_TEXT	ENDS
PUBLIC	?at@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@I@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::at
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
;	COMDAT ?first_nonempty@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z
_TEXT	SEGMENT
_x$316159 = -20						; size = 4
_this$ = -8						; size = 4
_n$ = 8							; size = 4
?first_nonempty@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::first_nonempty, COMDAT
; _this$ = ecx

; 125  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 126  :     for(;;++n){

	jmp	SHORT $LN4@first_none
$LN3@first_none:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN4@first_none:

; 127  :       pointer x=at(n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?at@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@I@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::at
	mov	DWORD PTR _x$316159[ebp], eax

; 128  :       if(x->next()!=x)return n;

	mov	ecx, DWORD PTR _x$316159[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR _x$316159[ebp]
	je	SHORT $LN1@first_none
	mov	eax, DWORD PTR _n$[ebp]
	jmp	SHORT $LN5@first_none
$LN1@first_none:

; 129  :     }

	jmp	SHORT $LN3@first_none
$LN5@first_none:

; 130  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?first_nonempty@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::first_nonempty
_TEXT	ENDS
PUBLIC	?data@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?buckets@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@ABEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?buckets@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@ABEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::buckets, COMDAT
; _this$ = ecx

; 148  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 149  :     return spc.data();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?data@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data

; 150  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?buckets@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@ABEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::buckets
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_node.hpp
_TEXT	ENDS
;	COMDAT ?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ PROC ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next, COMDAT
; _this$ = ecx

; 45   :   pointer& next(){return next_;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ENDP ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?unlink@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXPAU1234@@Z
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = 8							; size = 4
?unlink@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXPAU1234@@Z PROC ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::unlink, COMDAT

; 70   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 71   :     pointer y=x->next();

	mov	ecx, DWORD PTR _x$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _y$[ebp], eax
$LN2@unlink:

; 72   :     while(y->next()!=x){y=y->next();}

	mov	ecx, DWORD PTR _y$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR _x$[ebp]
	je	SHORT $LN1@unlink
	mov	ecx, DWORD PTR _y$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _y$[ebp], eax
	jmp	SHORT $LN2@unlink
$LN1@unlink:

; 73   :     y->next()=x->next();

	mov	ecx, DWORD PTR _x$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	esi, eax
	mov	ecx, DWORD PTR _y$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 74   :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?unlink@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXPAU1234@@Z ENDP ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::unlink
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_node_base.hpp
_TEXT	ENDS
;	COMDAT ?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ PROC ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value, COMDAT
; _this$ = ecx

; 53   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   :     return *static_cast<value_type*>(
; 55   :       static_cast<void*>(&this->space));

	mov	eax, DWORD PTR _this$[ebp]

; 56   :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ ENDP ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ?at@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_n$ = 8							; size = 4
?at@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@I@Z PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::at, COMDAT
; _this$ = ecx

; 122  :   pointer at(std::size_t n)const{return buckets()+n;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buckets@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@ABEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::buckets
	mov	ecx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?at@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@I@Z ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::at
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\auto_space.hpp
_TEXT	ENDS
;	COMDAT ?data@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ PROC ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data, COMDAT
; _this$ = ecx

; 67   :   pointer data()const{return data_;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?data@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ENDP ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
_TEXT	ENDS
;	COMDAT ??R?$less_equal@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QBE_NABQAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less_equal@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QBE_NABQAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@0@Z PROC ; std::less_equal<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > *>::operator(), COMDAT
; _this$ = ecx

; 146  : 		{	// apply operator<= to operands

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		return (_Left <= _Right);

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], edx
	sbb	eax, eax
	add	eax, 1

; 148  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$less_equal@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QBE_NABQAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@0@Z ENDP ; std::less_equal<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > *>::operator()
_TEXT	ENDS
PUBLIC	?sp_enable_shared_from_this@detail@boost@@YAXZZ	; boost::detail::sp_enable_shared_from_this
PUBLIC	??$?0E@shared_count@detail@boost@@QAE@PAE@Z	; boost::detail::shared_count::shared_count<unsigned char>
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\shared_ptr.hpp
xdata$x	SEGMENT
__unwindtable$??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z$0
__ehfuncinfo$??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z PROC		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char><unsigned char>, COMDAT
; _this$ = ecx

; 184  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0E@shared_count@detail@boost@@QAE@PAE@Z ; boost::detail::shared_count::shared_count<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 185  :         boost::detail::sp_enable_shared_from_this( this, p, p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?sp_enable_shared_from_this@detail@boost@@YAXZZ ; boost::detail::sp_enable_shared_from_this
	add	esp, 12					; 0000000cH

; 186  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1shared_count@detail@boost@@QAE@XZ	; boost::detail::shared_count::~shared_count
__ehhandler$??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0E@?$shared_ptr@E@boost@@QAE@PAE@Z ENDP		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char><unsigned char>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sp_enable_shared_from_this@detail@boost@@YAXZZ
_TEXT	SEGMENT
?sp_enable_shared_from_this@detail@boost@@YAXZZ PROC	; boost::detail::sp_enable_shared_from_this, COMDAT

; 133  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sp_enable_shared_from_this@detail@boost@@YAXZZ ENDP	; boost::detail::sp_enable_shared_from_this
_TEXT	ENDS
PUBLIC	??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z ; boost::detail::shared_count::shared_count<unsigned char *,void (__cdecl*)(void *)>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z$0
__ehfuncinfo$??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_d$ = 12						; size = 4
??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z PROC ; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char><unsigned char,void (__cdecl*)(void *)>, COMDAT
; _this$ = ecx

; 195  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z ; boost::detail::shared_count::shared_count<unsigned char *,void (__cdecl*)(void *)>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 196  :         boost::detail::sp_enable_shared_from_this( this, p, p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?sp_enable_shared_from_this@detail@boost@@YAXZZ ; boost::detail::sp_enable_shared_from_this
	add	esp, 12					; 0000000cH

; 197  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1shared_count@detail@boost@@QAE@XZ	; boost::detail::shared_count::~shared_count
__ehhandler$??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0EP6AXPAX@Z@?$shared_ptr@E@boost@@QAE@PAEP6AXPAX@Z@Z ENDP ; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char><unsigned char,void (__cdecl*)(void *)>
PUBLIC	??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type
PUBLIC	?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert_rep
PUBLIC	??$?0N@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@AAN@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type<double>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\pp_perfect_fwd.hpp
xdata$x	SEGMENT
__unwindtable$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z$0
__ehfuncinfo$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z
_TEXT	SEGMENT
tv74 = -268						; size = 4
tv79 = -264						; size = 4
$T316816 = -256						; size = 32
$T330229 = -216						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_t0$ = 12						; size = 4
??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert<double>, COMDAT

; 124  : BOOST_FLYWEIGHT_PERFECT_FWD_OVERLOADS

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T330229[ebp], 0
	mov	eax, DWORD PTR _t0$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T316816[ebp]
	call	??$?0N@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@AAN@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type<double>
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert_rep
	add	esp, 8
	mov	ecx, DWORD PTR $T330229[ebp]
	or	ecx, 1
	mov	DWORD PTR $T330229[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T316816[ebp]
	call	??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z$0:
	lea	ecx, DWORD PTR $T316816[ebp]
	jmp	??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type
__unwindfunclet$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z$1:
	mov	eax, DWORD PTR $T330229[ebp]
	and	eax, 1
	je	$LN5@insert
	and	DWORD PTR $T330229[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::~refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
$LN5@insert:
	ret	0
__ehhandler$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert<double>
PUBLIC	??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
PUBLIC	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z$2
__ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z
_TEXT	SEGMENT
tv140 = -252						; size = 4
tv137 = -248						; size = 4
tv143 = -244						; size = 4
$T330239 = -233						; size = 1
$T330240 = -224						; size = 4
$T330241 = -212						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__File$ = 32						; size = 4
__Line$ = 36						; size = 4
??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z PROC ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >, COMDAT

; 727  : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 728  : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T330239[ebp]
	push	ecx
	call	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T330240[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv143[ebp], eax
	mov	eax, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv137[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T330241[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv140[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
	add	esp, 36					; 00000024H

; 729  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z$2:
	mov	ecx, DWORD PTR $T330240[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-256]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WI@Z ENDP ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Unchecked
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T330254 = -212						; size = 4
__$EHRec$ = -12						; size = 12
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<int,std::allocator<int> > >, COMDAT

; 393  : 	{	// convert to unchecked

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 394  : 	return (_Iter._Unchecked());

	lea	ecx, DWORD PTR __Iter$[ebp]
	call	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Unchecked
	mov	DWORD PTR $T330254[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T330254[ebp]

; 395  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Iter$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<int,std::allocator<int> > >
PUBLIC	??$_Insertion_sort@PAH@std@@YAXPAH0@Z		; std::_Insertion_sort<int *>
PUBLIC	??$sort_heap@PAH@std@@YAXPAH0@Z			; std::sort_heap<int *>
PUBLIC	??$make_heap@PAH@std@@YAXPAH0@Z			; std::make_heap<int *>
PUBLIC	??$_Unguarded_partition@PAH@std@@YA?AU?$pair@PAHPAH@0@PAH0@Z ; std::_Unguarded_partition<int *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAHH@std@@YAXPAH0H@Z
_TEXT	SEGMENT
__Mid$317007 = -24					; size = 8
__Count$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAHH@std@@YAXPAH0H@Z PROC			; std::_Sort<int *,int>, COMDAT

; 3609 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN7@Sort:

; 3610 : 	_Diff _Count;
; 3611 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	SHORT $LN6@Sort

; 3612 : 		{	// divide and conquer by quicksort
; 3613 : 		_STD pair<_RanIt, _RanIt> _Mid =
; 3614 : 			_Unguarded_partition(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Mid$317007[ebp]
	push	edx
	call	??$_Unguarded_partition@PAH@std@@YA?AU?$pair@PAHPAH@0@PAH0@Z ; std::_Unguarded_partition<int *>
	add	esp, 12					; 0000000cH

; 3615 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3616 : 
; 3617 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	eax, DWORD PTR __Mid$317007[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, DWORD PTR __Mid$317007[ebp+4]
	sar	ecx, 2
	cmp	eax, ecx
	jge	SHORT $LN5@Sort

; 3618 : 			{	// loop on second half
; 3619 : 			_Sort(_First, _Mid.first, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$317007[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAHH@std@@YAXPAH0H@Z		; std::_Sort<int *,int>
	add	esp, 12					; 0000000cH

; 3620 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$317007[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3621 : 			}
; 3622 : 		else

	jmp	SHORT $LN4@Sort
$LN5@Sort:

; 3623 : 			{	// loop on first half
; 3624 : 			_Sort(_Mid.second, _Last, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$317007[ebp+4]
	push	edx
	call	??$_Sort@PAHH@std@@YAXPAH0H@Z		; std::_Sort<int *,int>
	add	esp, 12					; 0000000cH

; 3625 : 			_Last = _Mid.first;

	mov	eax, DWORD PTR __Mid$317007[ebp]
	mov	DWORD PTR __Last$[ebp], eax
$LN4@Sort:

; 3626 : 			}
; 3627 : 		}

	jmp	$LN7@Sort
$LN6@Sort:

; 3628 : 
; 3629 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort

; 3630 : 		{	// heap sort if too many divisions
; 3631 : 		_STD make_heap(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$make_heap@PAH@std@@YAXPAH0@Z		; std::make_heap<int *>
	add	esp, 8

; 3632 : 		_STD sort_heap(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$sort_heap@PAH@std@@YAXPAH0@Z		; std::sort_heap<int *>
	add	esp, 8
	jmp	SHORT $LN8@Sort
$LN3@Sort:

; 3633 : 		}
; 3634 : 	else if (1 < _Count)

	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort

; 3635 : 		_Insertion_sort(_First, _Last);	// small

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Insertion_sort@PAH@std@@YAXPAH0@Z	; std::_Insertion_sort<int *>
	add	esp, 8
$LN8@Sort:

; 3636 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Sort
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@Sort:
	DD	1
	DD	$LN11@Sort
$LN11@Sort:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN10@Sort
$LN10@Sort:
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
??$_Sort@PAHH@std@@YAXPAH0H@Z ENDP			; std::_Sort<int *,int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@_J@std@@YA$$QA_JAA_J@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_J@std@@YA$$QA_JAA_J@Z PROC			; std::forward<__int64>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@_J@std@@YA$$QA_JAA_J@Z ENDP			; std::forward<__int64>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0_J_J@?$_Pair_base@_K_K@std@@QAE@$$QA_J0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0_J_J@?$_Pair_base@_K_K@std@@QAE@$$QA_J0@Z PROC	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><__int64,__int64>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@_J@std@@YA$$QA_JAA_J@Z	; std::forward<__int64>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_J@std@@YA$$QA_JAA_J@Z	; std::forward<__int64>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], eax

; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0_J_J@?$_Pair_base@_K_K@std@@QAE@$$QA_J0@Z ENDP	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><__int64,__int64>
_TEXT	ENDS
PUBLIC	??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_lt@_K_K@std@@YA_NAB_K0PB_WI@Z
_TEXT	SEGMENT
tv85 = -200						; size = 4
tv72 = -200						; size = 4
tv84 = -196						; size = 4
tv71 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_lt@_K_K@std@@YA_NAB_K0PB_WI@Z PROC		; std::_Debug_lt<unsigned __int64,unsigned __int64>, COMDAT

; 591  : 	{	// test if _Left < _Right and operator< is strict weak ordering

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 592  : 	if (!(_Left < _Right))

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN3@Debug_lt
	ja	SHORT $LN6@Debug_lt
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN3@Debug_lt
$LN6@Debug_lt:

; 593  : 		return (false);

	xor	al, al
	jmp	SHORT $LN4@Debug_lt
	jmp	SHORT $LN2@Debug_lt
$LN3@Debug_lt:

; 594  : 	else if (_Right < _Left)

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	DWORD PTR tv85[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	mov	eax, DWORD PTR tv85[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	ja	SHORT $LN2@Debug_lt
	jb	SHORT $LN7@Debug_lt
	mov	edx, DWORD PTR tv84[ebp]
	mov	eax, DWORD PTR tv85[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN2@Debug_lt
$LN7@Debug_lt:

; 595  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_lt:

; 596  : 	return (true);

	mov	al, 1
$LN4@Debug_lt:

; 597  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt@_K_K@std@@YA_NAB_K0PB_WI@Z ENDP		; std::_Debug_lt<unsigned __int64,unsigned __int64>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AA_K@std@@YAAA_KAA_K@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AA_K@std@@YAAA_KAA_K@Z PROC			; std::forward<unsigned __int64 &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AA_K@std@@YAAA_KAA_K@Z ENDP			; std::forward<unsigned __int64 &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0AA_KAA_K@?$_Pair_base@_K_K@std@@QAE@AA_K0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AA_KAA_K@?$_Pair_base@_K_K@std@@QAE@AA_K0@Z PROC	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@AA_K@std@@YAAA_KAA_K@Z	; std::forward<unsigned __int64 &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@AA_K@std@@YAAA_KAA_K@Z	; std::forward<unsigned __int64 &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], eax

; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AA_KAA_K@?$_Pair_base@_K_K@std@@QAE@AA_K0@Z ENDP	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z PROC		; std::forward<unsigned __int64 const >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z ENDP		; std::forward<unsigned __int64 const >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0$$CB_K$$CB_K@?$_Pair_base@_K_K@std@@QAE@$$QB_K0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0$$CB_K$$CB_K@?$_Pair_base@_K_K@std@@QAE@$$QB_K0@Z PROC ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z	; std::forward<unsigned __int64 const >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z	; std::forward<unsigned __int64 const >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], eax

; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0$$CB_K$$CB_K@?$_Pair_base@_K_K@std@@QAE@$$QB_K0@Z ENDP ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??$_Val_type@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@PAU10@@Z ; std::_Val_type<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@@Z
_TEXT	SEGMENT
$T330285 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@@Z PROC ; std::_Uninitialized_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@U?$pair@_K_K@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@_K_K@0@0@Z ; std::_Ptr_cat<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 8
	mov	BYTE PTR $T330285[ebp], al
	movzx	edx, BYTE PTR $T330285[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@PAU10@@Z ; std::_Val_type<std::pair<unsigned __int64,unsigned __int64> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 24					; 00000018H

; 472  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAU?$pair@_K_K@std@@@std@@YAAAU?$pair@_K_K@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@_K_K@std@@@std@@YAAAU?$pair@_K_K@0@AAU10@@Z PROC ; std::forward<std::pair<unsigned __int64,unsigned __int64> &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAU?$pair@_K_K@std@@@std@@YAAAU?$pair@_K_K@0@AAU10@@Z ENDP ; std::forward<std::pair<unsigned __int64,unsigned __int64> &>
_TEXT	ENDS
PUBLIC	??$?0_K_K@?$pair@_K_K@std@@QAE@AAU01@@Z		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z$0
__ehfuncinfo$??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z
_TEXT	SEGMENT
tv76 = -244						; size = 4
$T330290 = -236						; size = 4
$T330291 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct<std::pair<unsigned __int64,unsigned __int64> &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T330291[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T330291[ebp], 0
	je	SHORT $LN3@construct@3
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@AAU?$pair@_K_K@std@@@std@@YAAAU?$pair@_K_K@0@AAU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T330291[ebp]
	call	??$?0_K_K@?$pair@_K_K@std@@QAE@AAU01@@Z	; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@construct@3
$LN3@construct@3:
	mov	DWORD PTR tv76[ebp], 0
$LN4@construct@3:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T330290[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T330291[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct<std::pair<unsigned __int64,unsigned __int64> &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABU?$pair@_K_K@std@@@std@@YAABU?$pair@_K_K@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$pair@_K_K@std@@@std@@YAABU?$pair@_K_K@0@ABU10@@Z PROC ; std::forward<std::pair<unsigned __int64,unsigned __int64> const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABU?$pair@_K_K@std@@@std@@YAABU?$pair@_K_K@0@ABU10@@Z ENDP ; std::forward<std::pair<unsigned __int64,unsigned __int64> const &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Move@AAPAU?$pair@_K_K@std@@@std@@YA$$QAPAU?$pair@_K_K@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAU?$pair@_K_K@std@@@std@@YA$$QAPAU?$pair@_K_K@0@AAPAU10@@Z PROC ; std::_Move<std::pair<unsigned __int64,unsigned __int64> * &>, COMDAT

; 94   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@AAPAU?$pair@_K_K@std@@@std@@YA$$QAPAU?$pair@_K_K@0@AAPAU10@@Z ENDP ; std::_Move<std::pair<unsigned __int64,unsigned __int64> * &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z$0
__ehfuncinfo$??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
tv73 = -244						; size = 4
$T330309 = -236						; size = 4
$T330310 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z PROC	; std::allocator<int>::construct<int &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T330310[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T330310[ebp], 0
	je	SHORT $LN3@construct@4
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@AAH@std@@YAAAHAAH@Z		; std::forward<int &>
	add	esp, 4
	mov	edx, DWORD PTR $T330310[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T330310[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct@4
$LN3@construct@4:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct@4:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T330309[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T330310[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z ENDP	; std::allocator<int>::construct<int &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@U?$pair@_K_K@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@_K_K@0@0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U?$pair@_K_K@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@_K_K@0@0@Z PROC ; std::_Ptr_cat<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 516  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 519  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat:
	DD	1
	DD	$LN4@Ptr_cat
$LN4@Ptr_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat
$LN3@Ptr_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@U?$pair@_K_K@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@_K_K@0@0@Z ENDP ; std::_Ptr_cat<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
_TEXT	ENDS
PUBLIC	??4?$pair@_K_K@std@@QAEAAU01@$$QAU01@@Z		; std::pair<unsigned __int64,unsigned __int64>::operator=
PUBLIC	??$move@AAU?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ; std::move<std::pair<unsigned __int64,unsigned __int64> &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Move
$LN2@Move:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Move:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$move@AAU?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ; std::move<std::pair<unsigned __int64,unsigned __int64> &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	call	??4?$pair@_K_K@std@@QAEAAU01@$$QAU01@@Z	; std::pair<unsigned __int64,unsigned __int64>::operator=
	jmp	SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@@Z ; std::_Dest_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 96   : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Dest_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@@Z ; std::_Dest_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 8
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 516  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 519  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat@2:
	DD	1
	DD	$LN4@Ptr_cat@2
$LN4@Ptr_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat@2
$LN3@Ptr_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
EXTRN	_memmove:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<int *,int *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2523 : 	ptrdiff_t _Count = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 2526 : 	return (_Dest + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 2527 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
PUBLIC	??$_Val_type@PAH@std@@YAPAHPAH@Z		; std::_Val_type<int *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
$T330342 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::allocator<int> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T330342[ebp], al
	movzx	edx, BYTE PTR $T330342[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAH@std@@YAPAHPAH@Z	; std::_Val_type<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
	add	esp, 24					; 00000018H

; 472  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 104  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 105  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$pair@_K_K@std@@QAE@ABU01@@Z		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z$0
__ehfuncinfo$??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z
_TEXT	SEGMENT
tv76 = -244						; size = 4
$T330347 = -236						; size = 4
$T330348 = -224						; size = 4
__Vptr$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z PROC ; std::_Construct<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T330348[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T330348[ebp], 0
	je	SHORT $LN3@Construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@ABU?$pair@_K_K@std@@@std@@YAABU?$pair@_K_K@0@ABU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T330348[ebp]
	call	??0?$pair@_K_K@std@@QAE@ABU01@@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@Construct
$LN3@Construct:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Construct:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T330347[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T330348[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z ENDP ; std::_Construct<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>
PUBLIC	??0?$_Pair_base@_K_K@std@@QAE@$$QA_K0@Z		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>
PUBLIC	??$forward@_K@std@@YA$$QA_KAA_K@Z		; std::forward<unsigned __int64>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0_K_K@?$pair@_K_K@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??$?0_K_K@?$pair@_K_K@std@@QAE@$$QAU01@@Z PROC		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>, COMDAT
; _this$ = ecx

; 255  : 		{	// construct from moved compatible pair

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	eax
	call	??$forward@_K@std@@YA$$QA_KAA_K@Z	; std::forward<unsigned __int64>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$forward@_K@std@@YA$$QA_KAA_K@Z	; std::forward<unsigned __int64>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Pair_base@_K_K@std@@QAE@$$QA_K0@Z	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>

; 256  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0_K_K@?$pair@_K_K@std@@QAE@$$QAU01@@Z ENDP		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>
_TEXT	ENDS
PUBLIC	??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z		; std::_Move<unsigned char * &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$swap@PAE@std@@YAXAAPAE0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAE@std@@YAXAAPAE0@Z PROC			; std::swap<unsigned char *>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 102  : 	_Ty _Tmp = _Move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z	; std::_Move<unsigned char * &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 103  : 	_Left = _Move(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z	; std::_Move<unsigned char * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 104  : 	_Right = _Move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z	; std::_Move<unsigned char * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 105  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@swap@3:
	DD	1
	DD	$LN4@swap@3
$LN4@swap@3:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap@3
$LN3@swap@3:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@PAE@std@@YAXAAPAE0@Z ENDP			; std::swap<unsigned char *>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$_Construct@HABH@std@@YAXPAHABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@HABH@std@@YAXPAHABH@Z$0
__ehfuncinfo$??$_Construct@HABH@std@@YAXPAHABH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@HABH@std@@YAXPAHABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@HABH@std@@YAXPAHABH@Z
_TEXT	SEGMENT
tv73 = -244						; size = 4
$T330367 = -236						; size = 4
$T330368 = -224						; size = 4
__Vptr$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@HABH@std@@YAXPAHABH@Z PROC		; std::_Construct<int,int const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@HABH@std@@YAXPAHABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T330368[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T330368[ebp], 0
	je	SHORT $LN3@Construct@2
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@ABH@std@@YAABHABH@Z		; std::forward<int const &>
	add	esp, 4
	mov	edx, DWORD PTR $T330368[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T330368[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@Construct@2
$LN3@Construct@2:
	mov	DWORD PTR tv73[ebp], 0
$LN4@Construct@2:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T330367[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@HABH@std@@YAXPAHABH@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T330368[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@HABH@std@@YAXPAHABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@HABH@std@@YAXPAHABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@HABH@std@@YAXPAHABH@Z ENDP		; std::_Construct<int,int const &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z PROC ; std::_Destroy<std::_Container_proxy>, COMDAT

; 62   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ENDP ; std::_Destroy<std::_Container_proxy>
_TEXT	ENDS
PUBLIC	?from_value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@SAPAU1234@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::from_value
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_node_base.hpp
;	COMDAT ??$node_from_value@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@detail@multi_index@boost@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@012@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@0flyweights@2@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??$node_from_value@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@detail@multi_index@boost@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@012@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@0flyweights@2@@Z PROC ; boost::multi_index::detail::node_from_value<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 92   :   typedef typename Node::allocator_type allocator_type;
; 93   :   return static_cast<Node*>(
; 94   :     index_node_base<Value,allocator_type>::from_value(p));

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?from_value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@SAPAU1234@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::from_value
	add	esp, 4

; 95   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$node_from_value@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@detail@multi_index@boost@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@012@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@0flyweights@2@@Z ENDP ; boost::multi_index::detail::node_from_value<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
_TEXT	ENDS
PUBLIC	??_G?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAEPAXI@Z ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\detail\allocator_utilities.hpp
;	COMDAT ??$destroy@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??$destroy@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z PROC ; boost::detail::allocator::destroy<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 193  : 
; 194  : #if BOOST_WORKAROUND(__SUNPRO_CC,BOOST_TESTED_AT(0x590))
; 195  :   const_cast<Type*>(p)->~Type();
; 196  : #else
; 197  :   p->~Type();

	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	call	??_G?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAEPAXI@Z

; 198  : #endif
; 199  : 
; 200  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$destroy@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z ENDP ; boost::detail::allocator::destroy<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@_K_K@std@@QAE@ABU01@@Z		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$pair@_K_K@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$pair@_K_K@std@@QAE@ABU01@@Z PROC			; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Pair_base@_K_K@std@@QAE@ABU01@@Z	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$pair@_K_K@std@@QAE@ABU01@@Z ENDP			; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64>
_TEXT	ENDS
PUBLIC	??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::~refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAEPAXI@Z PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAEPAXI@Z ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::~refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::~refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
_TEXT	ENDS
PUBLIC	??$move@AA_K@std@@YA$$QA_KAA_K@Z		; std::move<unsigned __int64 &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??4?$pair@_K_K@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??4?$pair@_K_K@std@@QAEAAU01@$$QAU01@@Z PROC		; std::pair<unsigned __int64,unsigned __int64>::operator=, COMDAT
; _this$ = ecx

; 259  : 		{	// assign from moved pair

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 260  : 		this->first = _STD move(_Right.first);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$move@AA_K@std@@YA$$QA_KAA_K@Z	; std::move<unsigned __int64 &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax

; 261  : 		this->second = _STD move(_Right.second);

	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	eax
	call	??$move@AA_K@std@@YA$$QA_KAA_K@Z	; std::move<unsigned __int64 &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], eax

; 262  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 263  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$pair@_K_K@std@@QAEAAU01@$$QAU01@@Z ENDP		; std::pair<unsigned __int64,unsigned __int64>::operator=
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Pair_base@_K_K@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??0?$_Pair_base@_K_K@std@@QAE@ABU01@@Z PROC		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>, COMDAT
; _this$ = ecx

; 131  : 		{	// construct by copying _Pair_base

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 132  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Pair_base@_K_K@std@@QAE@ABU01@@Z ENDP		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Pair_base@_K_K@std@@QAE@$$QA_K0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@_K_K@std@@QAE@$$QA_K0@Z PROC		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$move@AA_K@std@@YA$$QA_KAA_K@Z	; std::move<unsigned __int64 &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$move@AA_K@std@@YA$$QA_KAA_K@Z	; std::move<unsigned __int64 &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], eax

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Pair_base@_K_K@std@@QAE@$$QA_K0@Z ENDP		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>
_TEXT	ENDS
PUBLIC	??0?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@ABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@@Z ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
PUBLIC	?construct_value@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@SAXABVrep_type@1234@@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::construct_value
PUBLIC	?insert@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@ABV4523@@Z ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::insert
PUBLIC	??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
PUBLIC	?init@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA_NXZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::init
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
xdata$x	SEGMENT
__catchsym$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$0
__tryblocktable$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$4
__unwindtable$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$2
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z
_TEXT	SEGMENT
tv93 = -304						; size = 4
tv65 = -300						; size = 4
$T330404 = -292						; size = 4
_h$ = -88						; size = 4
_e$ = -64						; size = 40
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert_rep, COMDAT

; 168  :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR $T330404[ebp], 0

; 169  :     init();

	call	?init@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA_NXZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::init

; 170  :     entry_type       e(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR _e$[ebp]
	call	??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
	mov	DWORD PTR __$EHRec$[ebp+12], 1

; 171  :     lock_type        lock(mutex());

	call	?mutex@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAUmutex_type@no_locking@34@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::mutex

; 172  :     base_handle_type h(factory().insert(e));

	lea	eax, DWORD PTR _e$[ebp]
	push	eax
	call	?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::factory
	mov	ecx, eax
	call	?insert@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@ABV4523@@Z ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::insert
	mov	DWORD PTR _h$[ebp], eax

; 173  :     BOOST_TRY{

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 174  :       ValuePolicy::construct_value(
; 175  :         static_cast<const rep_type&>(entry(h)));

	lea	eax, DWORD PTR _h$[ebp]
	push	eax
	call	?entry@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABQBV5234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
	add	esp, 4
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	call	??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@XZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type const &
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR tv93[ebp]
	push	ecx
	call	?construct_value@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@SAXABVrep_type@1234@@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::construct_value
	add	esp, 4

; 176  :     }

	jmp	SHORT $LN4@insert_rep
__catch$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$0:

; 177  :     BOOST_CATCH(...){
; 178  :       factory().erase(h);

	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::factory
	mov	ecx, eax
	call	?erase@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@@Z ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::erase

; 179  :       BOOST_RETHROW;

	push	0
	push	0
	call	__CxxThrowException@8

; 180  :     }

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$1
	ret	0
$LN4@insert_rep:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$1:

; 181  :     BOOST_CATCH_END
; 182  :     return static_cast<handle_type>(h);

	lea	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@ABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@@Z ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
	mov	ecx, DWORD PTR $T330404[ebp]
	or	ecx, 1
	mov	DWORD PTR $T330404[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _e$[ebp]
	call	??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@insert_rep:

; 183  :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@insert_rep
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@insert_rep:
	DD	3
	DD	$LN16@insert_rep
$LN16@insert_rep:
	DD	-64					; ffffffc0H
	DD	40					; 00000028H
	DD	$LN12@insert_rep
	DD	-73					; ffffffb7H
	DD	1
	DD	$LN13@insert_rep
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN14@insert_rep
$LN14@insert_rep:
	DB	104					; 00000068H
	DB	0
$LN13@insert_rep:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN12@insert_rep:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$2:
	lea	ecx, DWORD PTR _e$[ebp]
	jmp	??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ
__unwindfunclet$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$3:
	mov	eax, DWORD PTR $T330404[ebp]
	and	eax, 1
	je	$LN8@insert_rep
	and	DWORD PTR $T330404[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::~refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
$LN8@insert_rep:
	ret	0
__ehhandler$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-308]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert_rep
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_node_base.hpp
;	COMDAT ?from_value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@SAPAU1234@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?from_value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@SAPAU1234@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::from_value, COMDAT

; 65   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 66   :     return static_cast<index_node_base *>(
; 67   :       reinterpret_cast<pod_value_holder<Value>*>( /* std 9.2.17 */
; 68   :         const_cast<value_type*>(p))); 

	mov	eax, DWORD PTR _p$[ebp]

; 69   :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?from_value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@SAPAU1234@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::from_value
_TEXT	ENDS
PUBLIC	??_Gass_synth_priv@@QAEPAXI@Z			; ass_synth_priv::`scalar deleting destructor'
PUBLIC	?value_cted@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABE_NXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::value_cted
PUBLIC	?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
;	COMDAT ??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type, COMDAT
; _this$ = ecx

; 73   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 74   :       if(!value_ptr)       key_ptr()->~key_type();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN3@rep_type
	mov	ecx, DWORD PTR _this$[ebp]
	call	?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr
	jmp	SHORT $LN4@rep_type
$LN3@rep_type:

; 75   :       else if(value_cted())value_ptr->~value_type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?value_cted@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABE_NXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::value_cted
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@rep_type
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	??_Gass_synth_priv@@QAEPAXI@Z
$LN4@rep_type:

; 76   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Unchecked, COMDAT
; _this$ = ecx

; 316  : 		{	// make an unchecked iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 317  : 		return (_Unchecked_type(this->_Ptr));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 318  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Unchecked
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_Gass_synth_priv@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gass_synth_priv@@QAEPAXI@Z PROC			; ass_synth_priv::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ass_synth_priv@@QAE@XZ		; ass_synth_priv::~ass_synth_priv
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gass_synth_priv@@QAEPAXI@Z ENDP			; ass_synth_priv::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::construct_value
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
;	COMDAT ?construct_value@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@SAXABVrep_type@1234@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
?construct_value@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@SAXABVrep_type@1234@@Z PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::construct_value, COMDAT

; 141  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 142  :     r.construct_value();

	mov	ecx, DWORD PTR _r$[ebp]
	call	?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::construct_value

; 143  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?construct_value@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@SAXABVrep_type@1234@@Z ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::construct_value
_TEXT	ENDS
PUBLIC	?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ ; boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
;	COMDAT ?init@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA_NXZ
_TEXT	SEGMENT
_a$317598 = -8						; size = 4
?init@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA_NXZ PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::init, COMDAT

; 108  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 109  :     if(static_initializer)return true;

	movzx	eax, BYTE PTR ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
	test	eax, eax
	je	SHORT $LN2@init
	mov	al, 1
	jmp	SHORT $LN3@init

; 110  :     else{

	jmp	SHORT $LN3@init
$LN2@init:

; 111  :       holder_arg& a=holder_type::get();

	call	?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ ; boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get
	mov	DWORD PTR _a$317598[ebp], eax

; 112  :       static_factory_ptr=&a.factory;

	mov	eax, DWORD PTR _a$317598[ebp]
	mov	DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A, eax ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr

; 113  :       static_mutex_ptr=&a.mutex;

	mov	eax, DWORD PTR _a$317598[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR ?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A, eax ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_mutex_ptr

; 114  :       static_initializer=(static_factory_ptr!=0);

	xor	eax, eax
	cmp	DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A, 0 ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
	setne	al
	mov	BYTE PTR ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA, al ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer

; 115  :       return static_initializer;

	mov	al, BYTE PTR ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
$LN3@init:

; 116  :     }
; 117  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA_NXZ ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::init
_TEXT	ENDS
PUBLIC	??D?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@XZ ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator*
PUBLIC	?insert@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AU?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\hashed_factory.hpp
;	COMDAT ?insert@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@ABV4523@@Z
_TEXT	SEGMENT
$T330436 = -220						; size = 12
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?insert@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@ABV4523@@Z PROC ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::insert, COMDAT
; _this$ = ecx

; 71   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   :     return &*cont.insert(x).first;

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T330436[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?insert@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AU?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert
	mov	ecx, eax
	call	??D?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@XZ ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator*

; 73   :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?insert@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@ABV4523@@Z ENDP ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::insert
_TEXT	ENDS
PUBLIC	??0atomic_count@detail@boost@@QAE@J@Z		; boost::detail::atomic_count::atomic_count
PUBLIC	??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
xdata$x	SEGMENT
__unwindtable$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z$0
__ehfuncinfo$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_x_$ = 8						; size = 4
??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>, COMDAT
; _this$ = ecx

; 55   :   {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0atomic_count@detail@boost@@QAE@J@Z	; boost::detail::atomic_count::atomic_count
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type
__ehhandler$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\atomic_count_win32.hpp
;	COMDAT ??0atomic_count@detail@boost@@QAE@J@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??0atomic_count@detail@boost@@QAE@J@Z PROC		; boost::detail::atomic_count::atomic_count, COMDAT
; _this$ = ecx

; 33   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR [eax], ecx

; 34   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0atomic_count@detail@boost@@QAE@J@Z ENDP		; boost::detail::atomic_count::atomic_count
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
_TEXT	ENDS
;	COMDAT ?value_cted@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?value_cted@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABE_NXZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::value_cted, COMDAT
; _this$ = ecx

; 98   :     bool  value_cted()const{return value_ptr==spc_ptr();}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::spc_ptr
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+24], eax
	sete	dl
	mov	al, dl
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?value_cted@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABE_NXZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::value_cted
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr, COMDAT
; _this$ = ecx

; 101  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  :       return static_cast<key_type*>(static_cast<void*>(&spc));

	mov	eax, DWORD PTR _this$[ebp]

; 103  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr
_TEXT	ENDS
PUBLIC	?add_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEXXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_deleter
PUBLIC	?add_ref@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEJXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_ref
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
;	COMDAT ??0?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@ABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_h_$ = 8						; size = 4
??0?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@ABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@@Z PROC ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >, COMDAT
; _this$ = ecx

; 93   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h_$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 94   :     if(TrackingHelper::entry(*this).add_ref()==1){

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
	add	esp, 4
	mov	ecx, eax
	call	?add_ref@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEJXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_ref
	cmp	eax, 1
	jne	SHORT $LN2@refcounted@2

; 95   :       TrackingHelper::entry(*this).add_deleter();

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
	add	esp, 4
	mov	ecx, eax
	call	?add_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEXXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_deleter
$LN2@refcounted@2:

; 96   :     }
; 97   :   }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@ABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@@Z ENDP ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
_TEXT	ENDS
PUBLIC	??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z ; std::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>
PUBLIC	?final_insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_insert_
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
;	COMDAT ?insert@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AU?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
$T330456 = -232						; size = 8
_p$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
?insert@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AU?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert, COMDAT
; _this$ = ecx

; 250  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 251  :     BOOST_MULTI_INDEX_HASHED_INDEX_CHECK_INVARIANT;
; 252  :     std::pair<final_node_type*,bool> p=this->final_insert_(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final_insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_insert_

; 253  :     return std::pair<iterator,bool>(make_iterator(p.first),p.second);

	lea	eax, DWORD PTR _p$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T330456[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?make_iterator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::make_iterator
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z ; std::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 254  :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@insert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN5@insert@2:
	DD	1
	DD	$LN4@insert@2
$LN4@insert@2:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@insert@2
$LN3@insert@2:
	DB	112					; 00000070H
	DB	0
?insert@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AU?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert
_TEXT	ENDS
PUBLIC	??Eatomic_count@detail@boost@@QAEJXZ		; boost::detail::atomic_count::operator++
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
;	COMDAT ?add_ref@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?add_ref@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEJXZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_ref, COMDAT
; _this$ = ecx

; 76   :   long add_ref()const{return ++ref;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??Eatomic_count@detail@boost@@QAEJXZ	; boost::detail::atomic_count::operator++
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?add_ref@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEJXZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_ref
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\atomic_count_win32.hpp
_TEXT	ENDS
;	COMDAT ??Eatomic_count@detail@boost@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Eatomic_count@detail@boost@@QAEJXZ PROC		; boost::detail::atomic_count::operator++, COMDAT
; _this$ = ecx

; 37   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   :         return BOOST_INTERLOCKED_INCREMENT( &value_ );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 1
	lock	 xadd	 DWORD PTR [eax], ecx
	inc	ecx
	mov	eax, ecx

; 39   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Eatomic_count@detail@boost@@QAEJXZ ENDP		; boost::detail::atomic_count::operator++
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ?add_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?add_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEXXZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_deleter, COMDAT
; _this$ = ecx

; 79   :   void add_deleter()const{++del_ref;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?add_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEXXZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_deleter
_TEXT	ENDS
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
xdata$x	SEGMENT
__unwindtable$??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z
_TEXT	SEGMENT
tv79 = -256						; size = 4
$T330468 = -248						; size = 4
$T330469 = -236						; size = 4
$T330470 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 4
??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type, COMDAT
; _this$ = ecx

; 68   :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 69   :       if(!x.value_ptr)new(key_ptr())key_type(*x.key_ptr());

	mov	eax, DWORD PTR _x$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN1@rep_type@2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr
	mov	DWORD PTR $T330470[ebp], eax
	mov	eax, DWORD PTR $T330470[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T330469[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T330469[ebp], 0
	je	SHORT $LN4@rep_type@2
	mov	ecx, DWORD PTR _x$[ebp]
	call	?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr
	mov	ecx, DWORD PTR $T330469[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR $T330469[ebp]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN5@rep_type@2
$LN4@rep_type@2:
	mov	DWORD PTR tv79[ebp], 0
$LN5@rep_type@2:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T330468[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN1@rep_type@2:

; 70   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z$0:
	mov	eax, DWORD PTR $T330470[ebp]
	push	eax
	mov	ecx, DWORD PTR $T330469[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ$0
__ehfuncinfo$?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ
_TEXT	SEGMENT
tv88 = -272						; size = 4
$T330482 = -264						; size = 4
$T330483 = -252						; size = 4
$T330484 = -240						; size = 4
_k$317994 = -36						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::construct_value, COMDAT
; _this$ = ecx

; 112  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 113  :       if(!value_cted()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?value_cted@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABE_NXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::value_cted
	movzx	eax, al
	test	eax, eax
	jne	$LN1@construct_

; 114  :         /* value_ptr must be ==0, oherwise copy_value would have been called */
; 115  : 
; 116  :         key_type k(*key_ptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _k$317994[ebp]

; 117  :         key_ptr()->~key_type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr

; 118  :         value_ptr= /* guarantees key won't be re-dted at ~rep_type if the */
; 119  :           static_cast<value_type*>(spc_ptr())+1; /* next statement throws */

	mov	ecx, DWORD PTR _this$[ebp]
	call	?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::spc_ptr
	add	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 120  :         value_ptr=new(spc_ptr())value_type(k);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::spc_ptr
	mov	DWORD PTR $T330484[ebp], eax
	mov	eax, DWORD PTR $T330484[ebp]
	push	eax
	push	24					; 00000018H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T330483[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T330483[ebp], 0
	je	SHORT $LN4@construct_
	sub	esp, 8
	fld	QWORD PTR _k$317994[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR $T330483[ebp]
	call	??0ass_synth_priv@@QAE@N@Z		; ass_synth_priv::ass_synth_priv
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN5@construct_
$LN4@construct_:
	mov	DWORD PTR tv88[ebp], 0
$LN5@construct_:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR $T330482[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T330482[ebp]
	mov	DWORD PTR [edx+24], eax
$LN1@construct_:

; 121  :       }
; 122  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ$0:
	mov	eax, DWORD PTR $T330484[ebp]
	push	eax
	mov	ecx, DWORD PTR $T330483[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-276]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::construct_value
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_iterator.hpp
;	COMDAT ??D?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@XZ PROC ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator*, COMDAT
; _this$ = ecx

; 49   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   :     return node->value();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value

; 51   :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@XZ ENDP ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator*
_TEXT	ENDS
PUBLIC	??__Fc@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@YAXXZ ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`dynamic atexit destructor for 'c''
PUBLIC	??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::holder_arg
PUBLIC	?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
PUBLIC	??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51 ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`local static guard'
EXTRN	_atexit:PROC
;	COMDAT ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\static_holder.hpp
_BSS	SEGMENT
?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A DB 034H DUP (?) ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
_BSS	ENDS
;	COMDAT ??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51
_BSS	SEGMENT
??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51 DD 01H DUP (?) ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`local static guard'
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ$0
__ehfuncinfo$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ PROC ; boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get, COMDAT

; 32   :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 33   :     static C c;

	mov	eax, DWORD PTR ??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51
	and	eax, 1
	jne	SHORT $LN1@get
	mov	eax, DWORD PTR ??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51
	or	eax, 1
	mov	DWORD PTR ??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
	call	??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ
	push	OFFSET ??__Fc@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@YAXXZ ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`dynamic atexit destructor for 'c''
	call	_atexit
	add	esp, 4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN1@get:

; 34   :     return c;

	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c

; 35   :   }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ$0:
	mov	eax, DWORD PTR ??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51, eax
	ret	0
__ehhandler$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ ENDP ; boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get
PUBLIC	??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::holder_arg, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::holder_arg
_TEXT	ENDS
PUBLIC	??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	??0?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QAE@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>
PUBLIC	??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@XZ ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
$T330510 = -225						; size = 1
$T330511 = -216						; size = 8
_this$ = -8						; size = 4
??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T330510[ebp]
	call	??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@XZ ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
	push	eax
	lea	ecx, DWORD PTR $T330511[ebp]
	call	??0?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QAE@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>
_TEXT	ENDS
PUBLIC	??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
PUBLIC	??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
PUBLIC	??$?0U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@1@@Z ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> ><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
PUBLIC	??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
PUBLIC	??$?0V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@?$base_from_member@V?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@$0A@@boost@@IAE@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0>::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0><std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV01@@Z ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
xdata$x	SEGMENT
__unwindtable$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z$0
__ehfuncinfo$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
_TEXT	SEGMENT
$T330515 = -236						; size = 4
$T330516 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_args_list$ = 8						; size = 4
_al$ = 12						; size = 4
??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = ecx

; 195  :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T330515[ebp], esp
	mov	eax, DWORD PTR _al$[ebp]
	push	eax
	call	??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV01@@Z ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@?$base_from_member@V?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@$0A@@boost@@IAE@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0>::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0><std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T330516[ebp]
	call	??$?0U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@1@@Z ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> ><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
	lea	ecx, DWORD PTR $T330516[ebp]
	push	ecx
	mov	edx, DWORD PTR _args_list$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 196  :     BOOST_MULTI_INDEX_CHECK_INVARIANT;
; 197  :   }    

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
__ehhandler$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@XZ PROC ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@XZ ENDP ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
_TEXT	ENDS
PUBLIC	?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
;	COMDAT ?final_insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
?final_insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_insert_, COMDAT
; _this$ = ecx

; 150  :     {return final().insert_(x);}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
	mov	ecx, eax
	call	?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?final_insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_insert_
_TEXT	ENDS
PUBLIC	??0?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@QAE@XZ ; boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
;	COMDAT ??0?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QAE@XZ PROC ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>, COMDAT
; _this$ = ecx

; 369  :   cons() : head() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@QAE@XZ ; boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>
_TEXT	ENDS
PUBLIC	??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z ; std::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>
PUBLIC	?insert_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert_
PUBLIC	?allocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::allocate_node
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
xdata$x	SEGMENT
__catchsym$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z$0
__unwindtable$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z$2
__ehfuncinfo$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z
_TEXT	SEGMENT
tv91 = -272						; size = 4
$T330533 = -261						; size = 1
$T330534 = -249						; size = 1
_res$319396 = -48					; size = 4
_x$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_, COMDAT
; _this$ = ecx

; 485  :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 486  :     node_type* x=allocate_node();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::allocate_node
	mov	DWORD PTR _x$[ebp], eax

; 487  :     BOOST_TRY{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 488  :       node_type* res=super::insert_(v,x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?insert_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert_
	mov	DWORD PTR tv91[ebp], eax
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _res$319396[ebp], edx

; 489  :       if(res==x){

	mov	eax, DWORD PTR _res$319396[ebp]
	cmp	eax, DWORD PTR _x$[ebp]
	jne	SHORT $LN2@insert_

; 490  :         ++node_count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 491  :         return std::pair<node_type*,bool>(res,true);

	mov	BYTE PTR $T330533[ebp], 1
	lea	eax, DWORD PTR $T330533[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$319396[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z ; std::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@insert_

; 492  :       }
; 493  :       else{

	jmp	SHORT $LN1@insert_
$LN2@insert_:

; 494  :         deallocate_node(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::deallocate_node

; 495  :         return std::pair<node_type*,bool>(res,false);

	mov	BYTE PTR $T330534[ebp], 0
	lea	eax, DWORD PTR $T330534[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$319396[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z ; std::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@insert_
$LN1@insert_:

; 496  :       }
; 497  :     }

	jmp	SHORT $LN6@insert_
__catch$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z$0:

; 498  :     BOOST_CATCH(...){
; 499  :       deallocate_node(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::deallocate_node

; 500  :       BOOST_RETHROW;

	push	0
	push	0
	call	__CxxThrowException@8

; 501  :     }

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN5@insert_
	ret	0
$LN6@insert_:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN5@insert_:

; 502  :     BOOST_CATCH_END
; 503  :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@insert_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN14@insert_:
	DD	1
	DD	$LN13@insert_
$LN13@insert_:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN11@insert_
$LN11@insert_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-276]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV01@@Z PROC ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
_TEXT	ENDS
PUBLIC	??1noncopyable@noncopyable_@boost@@IAE@XZ	; boost::noncopyable_::noncopyable::~noncopyable
PUBLIC	?final@?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@AAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::final
PUBLIC	??0noncopyable@noncopyable_@boost@@IAE@XZ	; boost::noncopyable_::noncopyable::noncopyable
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\header_holder.hpp
xdata$x	SEGMENT
__unwindtable$??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ$0
__ehfuncinfo$??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >, COMDAT
; _this$ = ecx

; 35   :   header_holder():member(final().allocate_node()){}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::noncopyable
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final@?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@AAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::final
	mov	ecx, eax
	call	?allocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::allocate_node
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::~noncopyable
__ehhandler$??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\noncopyable.hpp
;	COMDAT ??0noncopyable@noncopyable_@boost@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0noncopyable@noncopyable_@boost@@IAE@XZ PROC		; boost::noncopyable_::noncopyable::noncopyable, COMDAT
; _this$ = ecx

; 24   :       noncopyable() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0noncopyable@noncopyable_@boost@@IAE@XZ ENDP		; boost::noncopyable_::noncopyable::noncopyable
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1noncopyable@noncopyable_@boost@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1noncopyable@noncopyable_@boost@@IAE@XZ PROC		; boost::noncopyable_::noncopyable::~noncopyable, COMDAT
; _this$ = ecx

; 25   :       ~noncopyable() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1noncopyable@noncopyable_@boost@@IAE@XZ ENDP		; boost::noncopyable_::noncopyable::~noncopyable
_TEXT	ENDS
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\header_holder.hpp
xdata$x	SEGMENT
__unwindtable$??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ$0
__ehfuncinfo$??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >, COMDAT
; _this$ = ecx

; 36   :   ~header_holder(){final().deallocate_node(&*member);}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final@?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@AAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::final
	mov	ecx, eax
	call	?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::deallocate_node
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::~noncopyable
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::~noncopyable
__ehhandler$??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
PUBLIC	??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	?calculate_max_load@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::calculate_max_load
PUBLIC	?size@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEIXZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size
PUBLIC	__real@3f800000
PUBLIC	??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	?header@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::header
PUBLIC	??$get@$0A@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABIABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<0,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
PUBLIC	??$get@$02IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$equal_to@N@std@@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<3,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
PUBLIC	??$get@$01IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$hash@N@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<2,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
PUBLIC	??$get@$00IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<1,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
PUBLIC	?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_head
PUBLIC	??0?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE@ABUnull_type@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	?get_tail@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBE?BUnull_type@23@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_tail
;	COMDAT __real@3f800000
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z$0
__ehfuncinfo$??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
_TEXT	SEGMENT
$T330577 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_args_list$ = 8						; size = 4
_al$ = 12						; size = 4
??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>, COMDAT
; _this$ = ecx

; 610  :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _al$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T330577[ebp]
	push	ecx
	mov	ecx, DWORD PTR _args_list$[ebp]
	call	?get_tail@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBE?BUnull_type@23@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_tail
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE@ABUnull_type@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
	mov	ecx, DWORD PTR _args_list$[ebp]
	call	?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_head
	push	eax
	call	??$get@$00IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<1,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
	add	esp, 4
	mov	ecx, DWORD PTR _args_list$[ebp]
	call	?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_head
	push	eax
	call	??$get@$01IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$hash@N@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<2,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
	add	esp, 4
	mov	ecx, DWORD PTR _args_list$[ebp]
	call	?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_head
	push	eax
	call	??$get@$02IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$equal_to@N@std@@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<3,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
	add	esp, 4
	mov	ecx, DWORD PTR _args_list$[ebp]
	call	?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_head
	push	eax
	call	??$get@$0A@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABIABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<0,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?header@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::header
	mov	ecx, eax
	call	?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::impl
	push	eax
	mov	ecx, DWORD PTR _al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?size@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEIXZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 611  :     calculate_max_load();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?calculate_max_load@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::calculate_max_load

; 612  :   }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
__ehhandler$??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
PUBLIC	??0?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@QAE@XZ ; boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
;	COMDAT ??0?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@QAE@XZ PROC ; boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>, COMDAT
; _this$ = ecx

; 481  :   tuple() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@QAE@XZ ; boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>
_TEXT	ENDS
PUBLIC	??1bucket_array_base@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::bucket_array_base::~bucket_array_base
PUBLIC	??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ$0
__ehfuncinfo$??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bucket_array_base@detail@multi_index@boost@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1bucket_array_base@detail@multi_index@boost@@QAE@XZ
__ehhandler$??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bucket_array_base@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bucket_array_base@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::bucket_array_base::~bucket_array_base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::~noncopyable
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bucket_array_base@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::bucket_array_base::~bucket_array_base
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocate
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
;	COMDAT ?allocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?allocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::allocate_node, COMDAT
; _this$ = ecx

; 459  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 460  :     return &*bfm_allocator::member.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocate

; 461  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?allocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::allocate_node
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\header_holder.hpp
_TEXT	ENDS
;	COMDAT ?final@?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@AAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?final@?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@AAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ PROC ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::final, COMDAT
; _this$ = ecx

; 41   :   Final& final(){return *static_cast<Final*>(this);}

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN3@final@2
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@final@2
$LN3@final@2:
	mov	DWORD PTR tv68[ebp], 0
$LN4@final@2:
	mov	eax, DWORD PTR tv68[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?final@?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@AAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ENDP ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::final
_TEXT	ENDS
PUBLIC	?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link
PUBLIC	?insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
PUBLIC	?link_point@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAE_NABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@Uhashed_unique_tag@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link_point
PUBLIC	?find_bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::find_bucket
PUBLIC	?reserve@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::reserve
PUBLIC	?size@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::size
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
;	COMDAT ?insert_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z
_TEXT	SEGMENT
$T330610 = -245						; size = 1
_res$ = -44						; size = 4
_pos$ = -32						; size = 4
_buc$ = -20						; size = 4
_this$ = -8						; size = 4
_v$ = 8							; size = 4
_x$ = 12						; size = 4
?insert_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert_, COMDAT
; _this$ = ecx

; 692  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 693  :     reserve(size()+1);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::size
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::reserve

; 694  : 
; 695  :     std::size_t       buc=find_bucket(v);

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?find_bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::find_bucket
	mov	DWORD PTR _buc$[ebp], eax

; 696  :     node_impl_pointer pos=buckets.at(buc);

	mov	eax, DWORD PTR _buc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?at@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@I@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::at
	mov	DWORD PTR _pos$[ebp], eax

; 697  :     if(!link_point(v,pos,Category()))return node_type::from_impl(pos);

	xor	eax, eax
	mov	BYTE PTR $T330610[ebp], al
	movzx	ecx, BYTE PTR $T330610[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?link_point@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAE_NABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@Uhashed_unique_tag@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link_point
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@insert_@2
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::from_impl
	add	esp, 4
	jmp	SHORT $LN4@insert_@2
$LN3@insert_@2:

; 698  : 
; 699  :     node_type* res=static_cast<node_type*>(super::insert_(v,x));

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
	mov	DWORD PTR _res$[ebp], eax

; 700  :     if(res==x){

	mov	eax, DWORD PTR _res$[ebp]
	cmp	eax, DWORD PTR _x$[ebp]
	jne	SHORT $LN2@insert_@2

; 701  :       link(x,pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link
	add	esp, 8

; 702  :       if(first_bucket>buc)first_bucket=buc;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR _buc$[ebp]
	jbe	SHORT $LN2@insert_@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _buc$[ebp]
	mov	DWORD PTR [eax+28], ecx
$LN2@insert_@2:

; 703  :     }
; 704  :     return res;

	mov	eax, DWORD PTR _res$[ebp]
$LN4@insert_@2:

; 705  :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@insert_@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN8@insert_@2:
	DD	1
	DD	$LN7@insert_@2
$LN7@insert_@2:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@insert_@2
$LN6@insert_@2:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?insert_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert_
_TEXT	ENDS
PUBLIC	?final_header@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_header
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?header@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?header@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::header, COMDAT
; _this$ = ecx

; 970  :   node_type* header()const{return this->final_header();}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final_header@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_header
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?header@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::header
_TEXT	ENDS
PUBLIC	?max@?$numeric_limits@I@std@@SAIXZ		; std::numeric_limits<unsigned int>::max
PUBLIC	?bucket_count@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket_count
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?calculate_max_load@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXXZ
_TEXT	SEGMENT
tv137 = -232						; size = 8
tv135 = -224						; size = 4
tv92 = -224						; size = 8
tv82 = -224						; size = 8
tv132 = -218						; size = 2
_fml$ = -20						; size = 4
_this$ = -8						; size = 4
?calculate_max_load@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXXZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::calculate_max_load, COMDAT
; _this$ = ecx

; 1038 :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1039 :     float fml=static_cast<float>(mlf*bucket_count());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?bucket_count@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket_count
	mov	DWORD PTR tv82[ebp], eax
	mov	DWORD PTR tv82[ebp+4], 0
	fild	QWORD PTR tv82[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	fstp	DWORD PTR _fml$[ebp]

; 1040 :     max_load=(std::numeric_limits<size_type>::max)();

	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 1041 :     if(max_load>fml)max_load=static_cast<size_type>(fml);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv92[ebp], ecx
	mov	DWORD PTR tv92[ebp+4], 0
	fild	QWORD PTR tv92[ebp]
	fld	DWORD PTR _fml$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@calculate_
	fld	DWORD PTR _fml$[ebp]
	fnstcw	WORD PTR tv132[ebp]
	movzx	eax, WORD PTR tv132[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv135[ebp], eax
	fldcw	WORD PTR tv135[ebp]
	fistp	QWORD PTR tv137[ebp]
	fldcw	WORD PTR tv132[ebp]
	mov	eax, DWORD PTR tv137[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN1@calculate_:

; 1042 :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?calculate_max_load@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXXZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::calculate_max_load
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\limits
_TEXT	ENDS
;	COMDAT ?max@?$numeric_limits@I@std@@SAIXZ
_TEXT	SEGMENT
?max@?$numeric_limits@I@std@@SAIXZ PROC			; std::numeric_limits<unsigned int>::max, COMDAT

; 777  : 	static _Ty (__CRTDECL max)() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 778  : 		{	// return maximum value
; 779  : 		return (UINT_MAX);

	or	eax, -1

; 780  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max@?$numeric_limits@I@std@@SAIXZ ENDP			; std::numeric_limits<unsigned int>::max
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ??0?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE@ABUnull_type@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??0?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE@ABUnull_type@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = ecx

; 80   :   explicit index_base(const ctor_args_list&,const Allocator&){}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE@ABUnull_type@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
_TEXT	ENDS
PUBLIC	?clear@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXXZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::clear
PUBLIC	??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	?next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z ; boost::multi_index::detail::bucket_array_base::next_prime
PUBLIC	??0bucket_array_base@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::bucket_array_base::bucket_array_base
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
xdata$x	SEGMENT
__unwindtable$??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z$1
__ehfuncinfo$??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_al$ = 8						; size = 4
_end_$ = 12						; size = 4
_size$ = 16						; size = 4
??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = ecx

; 104  :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bucket_array_base@detail@multi_index@boost@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	?next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z ; boost::multi_index::detail::bucket_array_base::next_prime
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _al$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 105  :     clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXXZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::clear

; 106  :     end()->next()=end_;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end
	mov	ecx, eax
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	ecx, DWORD PTR _end_$[ebp]
	mov	DWORD PTR [eax], ecx

; 107  :     end_->next()=end();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end
	mov	esi, eax
	mov	ecx, DWORD PTR _end_$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	DWORD PTR [eax], esi

; 108  :   }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1bucket_array_base@detail@multi_index@boost@@QAE@XZ
__unwindfunclet$??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
__ehhandler$??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	??$lower_bound@PBII@std@@YAPBIPBI0ABI@Z		; std::lower_bound<unsigned int const *,unsigned int>
PUBLIC	?prime_list@?1??next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z@4QBIB ; `boost::multi_index::detail::bucket_array_base::next_prime'::`2'::prime_list
;	COMDAT ?prime_list@?1??next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z@4QBIB
CONST	SEGMENT
?prime_list@?1??next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z@4QBIB DD 035H ; `boost::multi_index::detail::bucket_array_base::next_prime'::`2'::prime_list
	DD	061H
	DD	0c1H
	DD	0185H
	DD	0301H
	DD	0607H
	DD	0c07H
	DD	01807H
	DD	03001H
	DD	06011H
	DD	0c005H
	DD	01800dH
	DD	030005H
	DD	060019H
	DD	0c0001H
	DD	0180005H
	DD	030000bH
	DD	060000dH
	DD	0c00005H
	DD	01800013H
	DD	03000005H
	DD	06000017H
	DD	0c000013H
	DD	018000005H
	DD	030000059H
	DD	060000005H
	DD	0c0000001H
	DD	0fffffffbH
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z
_TEXT	SEGMENT
_bound$ = -8						; size = 4
_n$ = 8							; size = 4
?next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z PROC ; boost::multi_index::detail::bucket_array_base::next_prime, COMDAT

; 43   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 44   :     static const std::size_t prime_list[]={
; 45   :       53ul, 97ul, 193ul, 389ul, 769ul,
; 46   :       1543ul, 3079ul, 6151ul, 12289ul, 24593ul,
; 47   :       49157ul, 98317ul, 196613ul, 393241ul, 786433ul,
; 48   :       1572869ul, 3145739ul, 6291469ul, 12582917ul, 25165843ul,
; 49   :       50331653ul, 100663319ul, 201326611ul, 402653189ul, 805306457ul,
; 50   :       1610612741ul, 3221225473ul,
; 51   : 
; 52   : #if ((((ULONG_MAX>>16)>>16)>>16)>>15)==0 /* unsigned long less than 64 bits */
; 53   :       4294967291ul
; 54   : #else
; 55   :       /* obtained with aid from
; 56   :        *   http://javaboutique.internet.com/prime_numb/
; 57   :        *   http://www.rsok.com/~jrm/next_ten_primes.html
; 58   :        * and verified with
; 59   :        *   http://www.alpertron.com.ar/ECM.HTM
; 60   :        */
; 61   : 
; 62   :       6442450939ul, 12884901893ul, 25769803751ul, 51539607551ul,
; 63   :       103079215111ul, 206158430209ul, 412316860441ul, 824633720831ul,
; 64   :       1649267441651ul, 3298534883309ul, 6597069766657ul, 13194139533299ul,
; 65   :       26388279066623ul, 52776558133303ul, 105553116266489ul, 211106232532969ul,
; 66   :       422212465066001ul, 844424930131963ul, 1688849860263953ul,
; 67   :       3377699720527861ul, 6755399441055731ul, 13510798882111483ul,
; 68   :       27021597764222939ul, 54043195528445957ul, 108086391056891903ul,
; 69   :       216172782113783843ul, 432345564227567621ul, 864691128455135207ul,
; 70   :       1729382256910270481ul, 3458764513820540933ul, 6917529027641081903ul,
; 71   :       13835058055282163729ul, 18446744073709551557ul
; 72   : #endif
; 73   : 
; 74   :     };
; 75   :     static const std::size_t prime_list_size=
; 76   :       sizeof(prime_list)/sizeof(prime_list[0]);
; 77   : 
; 78   :     std::size_t const *bound=
; 79   :       std::lower_bound(prime_list,prime_list+prime_list_size,n);

	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	push	OFFSET ?prime_list@?1??next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z@4QBIB+112
	push	OFFSET ?prime_list@?1??next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z@4QBIB
	call	??$lower_bound@PBII@std@@YAPBIPBI0ABI@Z	; std::lower_bound<unsigned int const *,unsigned int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bound$[ebp], eax

; 80   :     if(bound==prime_list+prime_list_size)bound--;

	cmp	DWORD PTR _bound$[ebp], OFFSET ?prime_list@?1??next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z@4QBIB+112
	jne	SHORT $LN1@next_prime
	mov	eax, DWORD PTR _bound$[ebp]
	sub	eax, 4
	mov	DWORD PTR _bound$[ebp], eax
$LN1@next_prime:

; 81   :     return *bound;

	mov	eax, DWORD PTR _bound$[ebp]
	mov	eax, DWORD PTR [eax]

; 82   :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z ENDP ; boost::multi_index::detail::bucket_array_base::next_prime
_TEXT	ENDS
PUBLIC	??$_Rechecked@PBIPBI@std@@YAAAPBIAAPBIPBI@Z	; std::_Rechecked<unsigned int const *,unsigned int const *>
PUBLIC	??$_Lower_bound@PBIIH@std@@YAPBIPBI0ABIPAH@Z	; std::_Lower_bound<unsigned int const *,unsigned int,int>
PUBLIC	??$_Unchecked@PBI@std@@YAPBIPBI@Z		; std::_Unchecked<unsigned int const *>
PUBLIC	??$_Dist_type@PBI@std@@YAPAHPBI@Z		; std::_Dist_type<unsigned int const *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$lower_bound@PBII@std@@YAPBIPBI0ABI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$lower_bound@PBII@std@@YAPBIPBI0ABI@Z PROC		; std::lower_bound<unsigned int const *,unsigned int>, COMDAT

; 2745 : 	{	// find first element not before _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2746 : //	_DEBUG_ORDER(_First, _Last);
; 2747 : 	return (_Rechecked(_First,
; 2748 : 		_Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val,
; 2749 : 			_Dist_type(_First))));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Dist_type@PBI@std@@YAPAHPBI@Z	; std::_Dist_type<unsigned int const *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PBI@std@@YAPBIPBI@Z	; std::_Unchecked<unsigned int const *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PBI@std@@YAPBIPBI@Z	; std::_Unchecked<unsigned int const *>
	add	esp, 4
	push	eax
	call	??$_Lower_bound@PBIIH@std@@YAPBIPBI0ABIPAH@Z ; std::_Lower_bound<unsigned int const *,unsigned int,int>
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Rechecked@PBIPBI@std@@YAAAPBIAAPBIPBI@Z ; std::_Rechecked<unsigned int const *,unsigned int const *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 2750 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$lower_bound@PBII@std@@YAPBIPBI0ABI@Z ENDP		; std::lower_bound<unsigned int const *,unsigned int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked@PBI@std@@YAPBIPBI@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PBI@std@@YAPBIPBI@Z PROC			; std::_Unchecked<unsigned int const *>, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 267  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 268  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked@PBI@std@@YAPBIPBI@Z ENDP			; std::_Unchecked<unsigned int const *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Dist_type@PBI@std@@YAPAHPBI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PBI@std@@YAPAHPBI@Z PROC			; std::_Dist_type<unsigned int const *>, COMDAT

; 849  : 	{	// return distance type from arbitrary argument

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 850  : 	return (0);

	xor	eax, eax

; 851  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Dist_type@PBI@std@@YAPAHPBI@Z ENDP			; std::_Dist_type<unsigned int const *>
_TEXT	ENDS
PUBLIC	??$advance@PBIH@std@@YAXAAPBIH@Z		; std::advance<unsigned int const *,int>
PUBLIC	??$_Distance@PBIH@std@@YAXPBI0AAH@Z		; std::_Distance<unsigned int const *,int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Lower_bound@PBIIH@std@@YAPBIPBI0ABIPAH@Z
_TEXT	SEGMENT
__Mid$316542 = -32					; size = 4
__Count2$316541 = -20					; size = 4
__Count$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Lower_bound@PBIIH@std@@YAPBIPBI0ABIPAH@Z PROC	; std::_Lower_bound<unsigned int const *,unsigned int,int>, COMDAT

; 2720 : 	{	// find first element not before _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2721 : 	_Diff _Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 2722 : 	_Distance(_First, _Last, _Count);

	lea	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Distance@PBIH@std@@YAXPBI0AAH@Z	; std::_Distance<unsigned int const *,int>
	add	esp, 12					; 0000000cH
$LN4@Lower_boun:

; 2723 : 
; 2724 : 	for (; 0 < _Count; )

	cmp	DWORD PTR __Count$[ebp], 0
	jle	SHORT $LN3@Lower_boun

; 2725 : 		{	// divide and conquer, find half that contains answer
; 2726 : 		_Diff _Count2 = _Count / 2;

	mov	eax, DWORD PTR __Count$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2$316541[ebp], eax

; 2727 : 		_FwdIt _Mid = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$316542[ebp], eax

; 2728 : 		_STD advance(_Mid, _Count2);

	mov	eax, DWORD PTR __Count2$316541[ebp]
	push	eax
	lea	ecx, DWORD PTR __Mid$316542[ebp]
	push	ecx
	call	??$advance@PBIH@std@@YAXAAPBIH@Z	; std::advance<unsigned int const *,int>
	add	esp, 8

; 2729 : 
; 2730 : 		if (*_Mid < _Val)

	mov	eax, DWORD PTR __Mid$316542[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN2@Lower_boun

; 2731 : //		if (_DEBUG_LT(*_Mid, _Val))
; 2732 : 			{	// try top half
; 2733 : 			_First = ++_Mid;

	mov	eax, DWORD PTR __Mid$316542[ebp]
	add	eax, 4
	mov	DWORD PTR __Mid$316542[ebp], eax
	mov	ecx, DWORD PTR __Mid$316542[ebp]
	mov	DWORD PTR __First$[ebp], ecx

; 2734 : 			_Count -= _Count2 + 1;

	mov	eax, DWORD PTR __Count2$316541[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Count$[ebp], ecx

; 2735 : 			}
; 2736 : 		else

	jmp	SHORT $LN1@Lower_boun
$LN2@Lower_boun:

; 2737 : 			_Count = _Count2;

	mov	eax, DWORD PTR __Count2$316541[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN1@Lower_boun:

; 2738 : 		}

	jmp	SHORT $LN4@Lower_boun
$LN3@Lower_boun:

; 2739 : 	return (_First);

	mov	eax, DWORD PTR __First$[ebp]

; 2740 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Lower_boun
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Lower_boun:
	DD	2
	DD	$LN9@Lower_boun
$LN9@Lower_boun:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@Lower_boun
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@Lower_boun
$LN8@Lower_boun:
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN7@Lower_boun:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
??$_Lower_bound@PBIIH@std@@YAPBIPBI0ABIPAH@Z ENDP	; std::_Lower_bound<unsigned int const *,unsigned int,int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Rechecked@PBIPBI@std@@YAAAPBIAAPBIPBI@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PBIPBI@std@@YAAAPBIAAPBIPBI@Z PROC	; std::_Rechecked<unsigned int const *,unsigned int const *>, COMDAT

; 274  : 	{	// reset checked from unchecked, generic

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 275  : 	_Dest = _Src;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx

; 276  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 277  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Rechecked@PBIPBI@std@@YAAAPBIAAPBIPBI@Z ENDP	; std::_Rechecked<unsigned int const *,unsigned int const *>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ?size@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEIXZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size, COMDAT
; _this$ = ecx

; 111  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  :     return size_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 113  :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEIXZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::deallocate
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\auto_space.hpp
xdata$x	SEGMENT
__unwindtable$??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ$0
__ehfuncinfo$??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = ecx

; 61   :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 62   :     if(n_)al_.deallocate(data_,n_);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@auto_space
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::deallocate
$LN2@auto_space:

; 63   :   }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::~noncopyable
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::~noncopyable
__ehhandler$??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
;	COMDAT ?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ PROC ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_head, COMDAT
; _this$ = ecx

; 364  :   get_head() const { return head; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ ENDP ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_head
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_tail@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBE?BUnull_type@23@XZ
_TEXT	SEGMENT
$T330663 = -209						; size = 1
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_tail@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBE?BUnull_type@23@XZ PROC ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_tail, COMDAT
; _this$ = ecx

; 366  :   const null_type get_tail() const { return null_type(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	BYTE PTR $T330663[ebp], al
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?get_tail@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBE?BUnull_type@23@XZ ENDP ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_tail
_TEXT	ENDS
PUBLIC	??0?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@QAE@XZ ; boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@QAE@XZ PROC ; boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >, COMDAT
; _this$ = ecx

; 280  :   cons() : head(), tail() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@QAE@XZ ; boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0bucket_array_base@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0bucket_array_base@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::bucket_array_base::bucket_array_base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::noncopyable
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0bucket_array_base@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::bucket_array_base::bucket_array_base
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z PROC ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z ENDP ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@IPAU1234@@Z ; std::_Allocate<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z PROC ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@IPAU1234@@Z ; std::_Allocate<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z ENDP ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocate
_TEXT	ENDS
PUBLIC	?final_size_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEIXZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_size_
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
;	COMDAT ?size@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::size, COMDAT
; _this$ = ecx

; 214  :   size_type size()const{return this->final_size_();}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final_size_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEIXZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_size_
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::size
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?bucket_count@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?bucket_count@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket_count, COMDAT
; _this$ = ecx

; 520  :   size_type bucket_count()const{return buckets.size();}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?size@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEIXZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?bucket_count@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket_count
_TEXT	ENDS
PUBLIC	?bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket
PUBLIC	??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@ABV4153@H@Z ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?find_bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?find_bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::find_bucket, COMDAT
; _this$ = ecx

; 973  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 974  :     return bucket(key(v));

	push	0
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@ABV4153@H@Z ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket

; 975  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?find_bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::find_bucket
_TEXT	ENDS
PUBLIC	??R?$equal_to@N@std@@QBE_NABN0@Z		; std::equal_to<double>::operator()
PUBLIC	??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator double const &
PUBLIC	??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@AAV4153@@Z ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?link_point@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAE_NABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@Uhashed_unique_tag@234@@Z
_TEXT	SEGMENT
_x$ = -20						; size = 4
_this$ = -8						; size = 4
_v$ = 8							; size = 4
_pos$ = 12						; size = 4
___formal$ = 16						; size = 1
?link_point@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAE_NABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@Uhashed_unique_tag@234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link_point, COMDAT
; _this$ = ecx

; 979  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 980  :     node_impl_pointer x=pos->next();

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$[ebp], ecx
$LN3@link_point:

; 981  :     while(x!=pos){

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN2@link_point

; 982  :       if(eq(key(v),key(node_type::from_impl(x)->value()))){

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::from_impl
	add	esp, 4
	mov	ecx, eax
	call	?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@AAV4153@@Z ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
	mov	ecx, eax
	call	??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator double const &
	push	eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@ABV4153@H@Z ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
	mov	ecx, eax
	call	??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator double const &
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2
	call	??R?$equal_to@N@std@@QBE_NABN0@Z	; std::equal_to<double>::operator()
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@link_point

; 983  :         pos=x;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx

; 984  :         return false;

	xor	al, al
	jmp	SHORT $LN4@link_point
$LN1@link_point:

; 985  :       }
; 986  :       x=x->next();

	mov	ecx, DWORD PTR _x$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _x$[ebp], eax

; 987  :     }

	jmp	SHORT $LN3@link_point
$LN2@link_point:

; 988  :     return true;

	mov	al, 1
$LN4@link_point:

; 989  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?link_point@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAE_NABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@Uhashed_unique_tag@234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link_point
_TEXT	ENDS
PUBLIC	?link@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXPAU1234@0@Z ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::link
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_pos$ = 12						; size = 4
?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link, COMDAT

; 1008 :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1009 :     node_impl_type::link(x->impl(),pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	call	?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::impl
	push	eax
	call	?link@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXPAU1234@0@Z ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::link
	add	esp, 8

; 1010 :   };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link
_TEXT	ENDS
PUBLIC	?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unchecked_rehash
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z
_TEXT	SEGMENT
tv138 = -244						; size = 8
tv136 = -236						; size = 4
tv93 = -236						; size = 8
tv85 = -236						; size = 8
tv133 = -230						; size = 2
_fbc$319809 = -32					; size = 4
_bc$319807 = -20					; size = 4
_this$ = -8						; size = 4
_n$ = 8							; size = 4
?reserve@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::reserve, COMDAT
; _this$ = ecx

; 1045 :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1046 :     if(n>max_load){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	$LN2@reserve@3

; 1047 :       size_type bc =(std::numeric_limits<size_type>::max)();

	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	DWORD PTR _bc$319807[ebp], eax

; 1048 :       float     fbc=static_cast<float>(1+n/mlf);

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	mov	DWORD PTR tv85[ebp+4], 0
	fild	QWORD PTR tv85[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+20]
	fld1
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _fbc$319809[ebp]

; 1049 :       if(bc>fbc)bc =static_cast<size_type>(fbc);

	mov	eax, DWORD PTR _bc$319807[ebp]
	mov	DWORD PTR tv93[ebp], eax
	mov	DWORD PTR tv93[ebp+4], 0
	fild	QWORD PTR tv93[ebp]
	fld	DWORD PTR _fbc$319809[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@reserve@3
	fld	DWORD PTR _fbc$319809[ebp]
	fnstcw	WORD PTR tv133[ebp]
	movzx	eax, WORD PTR tv133[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv136[ebp], eax
	fldcw	WORD PTR tv136[ebp]
	fistp	QWORD PTR tv138[ebp]
	fldcw	WORD PTR tv133[ebp]
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR _bc$319807[ebp], eax
$LN1@reserve@3:

; 1050 :       unchecked_rehash(bc);

	mov	eax, DWORD PTR _bc$319807[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unchecked_rehash
$LN2@reserve@3:

; 1051 :     }
; 1052 :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::reserve
_TEXT	ENDS
PUBLIC	??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z ; boost::detail::allocator::construct<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
;	COMDAT ?insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
_x$ = 12						; size = 4
?insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_, COMDAT
; _this$ = ecx

; 87   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 88   :     boost::detail::allocator::construct(&x->value(),v);

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	call	?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
	push	eax
	call	??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z ; boost::detail::allocator::construct<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
	add	esp, 8

; 89   :     return x;

	mov	eax, DWORD PTR _x$[ebp]

; 90   :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
_TEXT	ENDS
PUBLIC	?header@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::header
PUBLIC	?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEABV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?final_header@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?final_header@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_header, COMDAT
; _this$ = ecx

; 143  :   final_node_type* final_header()const{return final().header();}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEABV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
	mov	ecx, eax
	call	?header@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::header
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?final_header@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_header
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ?clear@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXXZ
_TEXT	SEGMENT
_y$319827 = -32						; size = 4
_x$319826 = -20						; size = 4
_this$ = -8						; size = 4
?clear@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXXZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::clear, COMDAT
; _this$ = ecx

; 133  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  :     for(pointer x=begin(),y=end();x!=y;++x)x->next()=x;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::begin
	mov	DWORD PTR _x$319826[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end
	mov	DWORD PTR _y$319827[ebp], eax
	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	eax, DWORD PTR _x$319826[ebp]
	add	eax, 4
	mov	DWORD PTR _x$319826[ebp], eax
$LN3@clear:
	mov	eax, DWORD PTR _x$319826[ebp]
	cmp	eax, DWORD PTR _y$319827[ebp]
	je	SHORT $LN4@clear
	mov	ecx, DWORD PTR _x$319826[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	ecx, DWORD PTR _x$319826[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN2@clear
$LN4@clear:

; 135  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXXZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocate
PUBLIC	??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\auto_space.hpp
xdata$x	SEGMENT
__unwindtable$??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z$0
__ehfuncinfo$??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z
_TEXT	SEGMENT
tv85 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_al$ = 8						; size = 4
_n$ = 12						; size = 4
??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z PROC ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = ecx

; 58   :   {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::noncopyable
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@auto_space@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocate
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN4@auto_space@2
$LN3@auto_space@2:
	mov	DWORD PTR tv85[ebp], 0
$LN4@auto_space@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::~noncopyable
__ehhandler$??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z ENDP ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	??0?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@QAE@XZ ; boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
;	COMDAT ??0?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@QAE@XZ PROC ; boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >, COMDAT
; _this$ = ecx

; 280  :   cons() : head(), tail() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	??0?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@QAE@XZ ; boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_node.hpp
_TEXT	ENDS
;	COMDAT ?link@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXPAU1234@0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_pos$ = 12						; size = 4
?link@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXPAU1234@0@Z PROC ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::link, COMDAT

; 64   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 65   :     x->next()=pos->next();

	mov	ecx, DWORD PTR _pos$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	esi, eax
	mov	ecx, DWORD PTR _x$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 66   :     pos->next()=x;

	mov	ecx, DWORD PTR _pos$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx

; 67   :   };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?link@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXPAU1234@0@Z ENDP ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::link
_TEXT	ENDS
PUBLIC	??$_Allocate@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@IPAU1234@@Z ; std::_Allocate<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z PROC ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@IPAU1234@@Z ; std::_Allocate<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z ENDP ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocate
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
_TEXT	ENDS
;	COMDAT ?header@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?header@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::header, COMDAT
; _this$ = ecx

; 454  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 455  :     return &*bfm_header::member;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 456  :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?header@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::header
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\identity.hpp
_TEXT	ENDS
;	COMDAT ??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@ABV4153@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
___formal$ = 12						; size = 4
??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@ABV4153@H@Z PROC ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator(), COMDAT
; _this$ = ecx

; 112  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 113  :     return x;

	mov	eax, DWORD PTR _x$[ebp]

; 114  :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@ABV4153@H@Z ENDP ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@AAV4153@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@AAV4153@@Z PROC ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator(), COMDAT
; _this$ = ecx

; 117  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 118  :     return x;

	mov	eax, DWORD PTR _x$[ebp]

; 119  :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@AAV4153@@Z ENDP ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
_TEXT	ENDS
PUBLIC	?position@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::position
PUBLIC	??R?$hash@N@boost@@QBEIN@Z			; boost::hash<double>::operator()
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
;	COMDAT ?bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_k$ = 8							; size = 4
?bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket, COMDAT
; _this$ = ecx

; 536  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 537  :     return buckets.position(hash(k));

	mov	ecx, DWORD PTR _k$[ebp]
	call	??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator double const &
	sub	esp, 8
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	??R?$hash@N@boost@@QBEIN@Z		; boost::hash<double>::operator()
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?position@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::position

; 538  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket
_TEXT	ENDS
PUBLIC	?hash_value@boost@@YAIN@Z			; boost::hash_value
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\hash.hpp
;	COMDAT ??R?$hash@N@boost@@QBEIN@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 8
??R?$hash@N@boost@@QBEIN@Z PROC				; boost::hash<double>::operator(), COMDAT
; _this$ = ecx

; 440  :     BOOST_HASH_SPECIALIZE(double)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	sub	esp, 8
	fld	QWORD PTR _v$[ebp]
	fstp	QWORD PTR [esp]
	call	?hash_value@boost@@YAIN@Z		; boost::hash_value
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$hash@N@boost@@QBEIN@Z ENDP				; boost::hash<double>::operator()
_TEXT	ENDS
PUBLIC	??$float_hash_value@N@hash_detail@boost@@YAIN@Z	; boost::hash_detail::float_hash_value<double>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?hash_value@boost@@YAIN@Z
_TEXT	SEGMENT
_v$ = 8							; size = 8
?hash_value@boost@@YAIN@Z PROC				; boost::hash_value, COMDAT

; 333  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 334  :         return boost::hash_detail::float_hash_value(v);

	sub	esp, 8
	fld	QWORD PTR _v$[ebp]
	fstp	QWORD PTR [esp]
	call	??$float_hash_value@N@hash_detail@boost@@YAIN@Z ; boost::hash_detail::float_hash_value<double>
	add	esp, 8

; 335  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?hash_value@boost@@YAIN@Z ENDP				; boost::hash_value
_TEXT	ENDS
PUBLIC	??$float_hash_impl@N@hash_detail@boost@@YAIN@Z	; boost::hash_detail::float_hash_impl<double>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\detail\hash_float.hpp
;	COMDAT ??$float_hash_value@N@hash_detail@boost@@YAIN@Z
_TEXT	SEGMENT
tv67 = -196						; size = 4
_v$ = 8							; size = 8
??$float_hash_value@N@hash_detail@boost@@YAIN@Z PROC	; boost::hash_detail::float_hash_value<double>, COMDAT

; 91   :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 92   :             return v == 0 ? 0 : float_hash_impl(v);

	fld	QWORD PTR _v$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@float_hash
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN4@float_hash
$LN3@float_hash:
	sub	esp, 8
	fld	QWORD PTR _v$[ebp]
	fstp	QWORD PTR [esp]
	call	??$float_hash_impl@N@hash_detail@boost@@YAIN@Z ; boost::hash_detail::float_hash_impl<double>
	add	esp, 8
	mov	DWORD PTR tv67[ebp], eax
$LN4@float_hash:
	mov	eax, DWORD PTR tv67[ebp]

; 93   :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$float_hash_value@N@hash_detail@boost@@YAIN@Z ENDP	; boost::hash_detail::float_hash_value<double>
_TEXT	ENDS
PUBLIC	??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z	; boost::hash_detail::float_hash_impl2<double>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\detail\hash_float_generic.hpp
;	COMDAT ??$float_hash_impl@N@hash_detail@boost@@YAIN@Z
_TEXT	SEGMENT
_v$ = 8							; size = 8
??$float_hash_impl@N@hash_detail@boost@@YAIN@Z PROC	; boost::hash_detail::float_hash_impl<double>, COMDAT

; 80   :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 81   :             typedef BOOST_DEDUCED_TYPENAME select_hash_type<T>::type type;
; 82   :             return float_hash_impl2(static_cast<type>(v));

	sub	esp, 8
	fld	QWORD PTR _v$[ebp]
	fstp	QWORD PTR [esp]
	call	??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z ; boost::hash_detail::float_hash_impl2<double>
	add	esp, 8

; 83   :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$float_hash_impl@N@hash_detail@boost@@YAIN@Z ENDP	; boost::hash_detail::float_hash_impl<double>
_TEXT	ENDS
PUBLIC	??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	?swap@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAV1234@@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap
PUBLIC	?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@0@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link
PUBLIC	?data@?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAIXZ ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data
PUBLIC	??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	?get_allocator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::get_allocator
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
xdata$x	SEGMENT
__unwindtable$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z$1
__ehfuncinfo$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z
_TEXT	SEGMENT
tv175 = -384						; size = 4
$T330728 = -373						; size = 1
$T330729 = -361						; size = 1
_x1$320059 = -160					; size = 4
_buc1$320058 = -148					; size = 4
_z$320057 = -136					; size = 4
_y$320053 = -124					; size = 4
_y$320046 = -112					; size = 4
_x_end$ = -100						; size = 4
_x$ = -88						; size = 4
_i$ = -76						; size = 4
_hashes$ = -64						; size = 12
_buckets1$ = -44					; size = 16
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_n$ = 8							; size = 4
?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unchecked_rehash, COMDAT
; _this$ = ecx

; 1055 :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1056 :     bucket_array_type buckets1(get_allocator(),header()->impl(),n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?header@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::header
	mov	ecx, eax
	call	?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::impl
	push	eax
	lea	ecx, DWORD PTR $T330728[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_allocator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::get_allocator
	push	eax
	lea	ecx, DWORD PTR _buckets1$[ebp]
	call	??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1057 :     auto_space<std::size_t,allocator_type> hashes(get_allocator(),size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::size
	push	eax
	lea	eax, DWORD PTR $T330729[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_allocator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::get_allocator
	push	eax
	lea	ecx, DWORD PTR _hashes$[ebp]
	call	??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1058 : 
; 1059 :     std::size_t i=0;

	mov	DWORD PTR _i$[ebp], 0

; 1060 :     node_impl_pointer x=buckets.begin();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::begin
	mov	DWORD PTR _x$[ebp], eax

; 1061 :     node_impl_pointer x_end=buckets.end();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end
	mov	DWORD PTR _x_end$[ebp], eax
	jmp	SHORT $LN10@unchecked_
$LN9@unchecked_:

; 1062 :     for(;x!=x_end;++x){

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 4
	mov	DWORD PTR _x$[ebp], eax
$LN10@unchecked_:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _x_end$[ebp]
	je	SHORT $LN8@unchecked_

; 1063 :       node_impl_pointer y=x->next();

	mov	ecx, DWORD PTR _x$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _y$320046[ebp], eax
$LN7@unchecked_:

; 1064 :       while(y!=x){

	mov	eax, DWORD PTR _y$320046[ebp]
	cmp	eax, DWORD PTR _x$[ebp]
	je	SHORT $LN6@unchecked_

; 1065 :         hashes.data()[i++]=hash(key(node_type::from_impl(y)->value()));

	mov	eax, DWORD PTR _y$320046[ebp]
	push	eax
	call	?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::from_impl
	add	esp, 4
	mov	ecx, eax
	call	?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@AAV4153@@Z ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
	mov	ecx, eax
	call	??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator double const &
	sub	esp, 8
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	??R?$hash@N@boost@@QBEIN@Z		; boost::hash<double>::operator()
	mov	esi, eax
	lea	ecx, DWORD PTR _hashes$[ebp]
	call	?data@?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAIXZ ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], esi
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1066 :         y=y->next();

	mov	ecx, DWORD PTR _y$320046[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _y$320046[ebp], eax

; 1067 :       }

	jmp	SHORT $LN7@unchecked_
$LN6@unchecked_:

; 1068 :     }

	jmp	$LN9@unchecked_
$LN8@unchecked_:

; 1069 : 
; 1070 :     i=0;

	mov	DWORD PTR _i$[ebp], 0

; 1071 :     x=buckets.begin();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::begin
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN5@unchecked_
$LN4@unchecked_:

; 1072 :     for(;x!=x_end;++x){

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 4
	mov	DWORD PTR _x$[ebp], eax
$LN5@unchecked_:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _x_end$[ebp]
	je	$LN3@unchecked_

; 1073 :       node_impl_pointer y=x->next();

	mov	ecx, DWORD PTR _x$[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _y$320053[ebp], eax
$LN2@unchecked_:

; 1074 :       while(y!=x){

	mov	eax, DWORD PTR _y$320053[ebp]
	cmp	eax, DWORD PTR _x$[ebp]
	je	SHORT $LN1@unchecked_

; 1075 :         node_impl_pointer z=y->next();

	mov	ecx, DWORD PTR _y$320053[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _z$320057[ebp], eax

; 1076 :         std::size_t       buc1=buckets1.position(hashes.data()[i++]);

	lea	ecx, DWORD PTR _hashes$[ebp]
	call	?data@?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAIXZ ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv175[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR tv175[ebp]
	push	ecx
	lea	ecx, DWORD PTR _buckets1$[ebp]
	call	?position@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::position
	mov	DWORD PTR _buc1$320058[ebp], eax

; 1077 :         node_impl_pointer x1=buckets1.at(buc1);

	mov	eax, DWORD PTR _buc1$320058[ebp]
	push	eax
	lea	ecx, DWORD PTR _buckets1$[ebp]
	call	?at@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@I@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::at
	mov	DWORD PTR _x1$320059[ebp], eax

; 1078 :         link(y,x1);

	mov	eax, DWORD PTR _x1$320059[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$320053[ebp]
	push	ecx
	call	?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@0@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link
	add	esp, 8

; 1079 :         y=z;

	mov	eax, DWORD PTR _z$320057[ebp]
	mov	DWORD PTR _y$320053[ebp], eax

; 1080 :       }

	jmp	SHORT $LN2@unchecked_
$LN1@unchecked_:

; 1081 :     }

	jmp	$LN4@unchecked_
$LN3@unchecked_:

; 1082 : 
; 1083 :     buckets.swap(buckets1);

	lea	eax, DWORD PTR _buckets1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?swap@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAV1234@@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap

; 1084 :     calculate_max_load();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?calculate_max_load@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::calculate_max_load

; 1085 :     first_bucket=buckets.first_nonempty(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?first_nonempty@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::first_nonempty
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1086 :   }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hashes$[ebp]
	call	??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buckets1$[ebp]
	call	??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@unchecked_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN19@unchecked_:
	DD	2
	DD	$LN18@unchecked_
$LN18@unchecked_:
	DD	-44					; ffffffd4H
	DD	16					; 00000010H
	DD	$LN15@unchecked_
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$LN16@unchecked_
$LN16@unchecked_:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN15@unchecked_:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	49					; 00000031H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z$0:
	lea	ecx, DWORD PTR _buckets1$[ebp]
	jmp	??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
__unwindfunclet$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z$1:
	lea	ecx, DWORD PTR _hashes$[ebp]
	jmp	??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
__ehhandler$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-388]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unchecked_rehash
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
;	COMDAT ?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEABV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEABV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final, COMDAT
; _this$ = ecx

; 141  :   const final_type& final()const{return *static_cast<const final_type*>(this);}

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN3@final@3
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@final@3
$LN3@final@3:
	mov	DWORD PTR tv68[ebp], 0
$LN4@final@3:
	mov	eax, DWORD PTR tv68[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEABV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
_TEXT	ENDS
PUBLIC	?size_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEIXZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size_
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?final_size_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?final_size_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEIXZ PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_size_, COMDAT
; _this$ = ecx

; 146  :   std::size_t final_size_()const{return final().size_();}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEABV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
	mov	ecx, eax
	call	?size_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEIXZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size_
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?final_size_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEIXZ ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_size_
_TEXT	ENDS
PUBLIC	??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABNXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator double const &
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
;	COMDAT ??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator double const &, COMDAT
; _this$ = ecx

; 68   :   operator const Key&()const{return x;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABNXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator double const &
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator double const &
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
_TEXT	ENDS
;	COMDAT ??R?$equal_to@N@std@@QBE_NABN0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
_this$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$equal_to@N@std@@QBE_NABN0@Z PROC			; std::equal_to<double>::operator(), COMDAT
; _this$ = ecx

; 91   : 		{	// apply operator== to operands

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 		return (_Left == _Right);

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	fld	QWORD PTR [eax]
	fld	QWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@14
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator@14
$LN3@operator@14:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator@14:
	mov	al, BYTE PTR tv65[ebp]

; 93   : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$equal_to@N@std@@QBE_NABN0@Z ENDP			; std::equal_to<double>::operator()
_TEXT	ENDS
PUBLIC	??0?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@QAE@XZ ; boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type>::cons<std::equal_to<double>,boost::tuples::null_type>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
;	COMDAT ??0?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@QAE@XZ PROC ; boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >, COMDAT
; _this$ = ecx

; 280  :   cons() : head(), tail() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	??0?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@QAE@XZ ; boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type>::cons<std::equal_to<double>,boost::tuples::null_type>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
_TEXT	ENDS
;	COMDAT ?size_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEIXZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size_, COMDAT
; _this$ = ecx

; 475  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 476  :     return node_count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]

; 477  :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEIXZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size_
_TEXT	ENDS
PUBLIC	?get_allocator@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::get_allocator
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
;	COMDAT ?get_allocator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::get_allocator, COMDAT
; _this$ = ecx

; 207  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 208  :     return this->final().get_allocator();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEABV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
	mov	ecx, eax
	call	?get_allocator@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::get_allocator
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 209  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_allocator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::get_allocator
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_pos$ = 12						; size = 4
?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@0@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link, COMDAT

; 1013 :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1014 :     node_impl_type::link(x,pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	?link@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@SAXPAU1234@0@Z ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::link
	add	esp, 8

; 1015 :   };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@0@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link
_TEXT	ENDS
PUBLIC	?key_from_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@CAABNABVass_synth_priv@@@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_from_value
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
;	COMDAT ??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABNXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABNXZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator double const &, COMDAT
; _this$ = ecx

; 79   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   :       if(value_ptr)return key_from_value(*value_ptr);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN2@operator@15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	?key_from_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@CAABNABVass_synth_priv@@@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_from_value
	add	esp, 4
	jmp	SHORT $LN3@operator@15
	jmp	SHORT $LN3@operator@15
$LN2@operator@15:

; 81   :       else         return *key_ptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr
$LN3@operator@15:

; 82   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABNXZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator double const &
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ?position@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_hash$ = 8						; size = 4
?position@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::position, COMDAT
; _this$ = ecx

; 116  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  :     return hash%size_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _hash$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx]
	mov	eax, edx

; 118  :   }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?position@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::position
_TEXT	ENDS
PUBLIC	?swap@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAU1234@@Z ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap
PUBLIC	??$swap@I@std@@YAXAAI0@Z			; std::swap<unsigned int>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?swap@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAV1234@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?swap@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAV1234@@Z PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap, COMDAT
; _this$ = ecx

; 138  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 139  :     std::swap(size_,x.size_);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$swap@I@std@@YAXAAI0@Z		; std::swap<unsigned int>
	add	esp, 8

; 140  :     spc.swap(x.spc);

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?swap@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAU1234@@Z ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap

; 141  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?swap@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAV1234@@Z ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ??0?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@QAE@XZ PROC ; boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type>::cons<std::equal_to<double>,boost::tuples::null_type>, COMDAT
; _this$ = ecx

; 369  :   cons() : head() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type>::cons<std::equal_to<double>,boost::tuples::null_type>
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@I@std@@QAEPAII@Z		; std::allocator<unsigned int>::allocate
PUBLIC	??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@I@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ; std::allocator<unsigned int>::allocator<unsigned int><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\auto_space.hpp
xdata$x	SEGMENT
__unwindtable$??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z$0
__ehfuncinfo$??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z
_TEXT	SEGMENT
tv85 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_al$ = 8						; size = 4
_n$ = 12						; size = 4
??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z PROC ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = ecx

; 58   :   {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::noncopyable
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@I@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ; std::allocator<unsigned int>::allocator<unsigned int><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@auto_space@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@I@std@@QAEPAII@Z	; std::allocator<unsigned int>::allocate
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN4@auto_space@3
$LN3@auto_space@3:
	mov	DWORD PTR tv85[ebp], 0
$LN4@auto_space@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::~noncopyable
__ehhandler$??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z ENDP ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	?deallocate@?$allocator@I@std@@QAEXPAII@Z	; std::allocator<unsigned int>::deallocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ$0
__ehfuncinfo$??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = ecx

; 61   :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 62   :     if(n_)al_.deallocate(data_,n_);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@auto_space@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@I@std@@QAEXPAII@Z ; std::allocator<unsigned int>::deallocate
$LN2@auto_space@4:

; 63   :   }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::~noncopyable
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1noncopyable@noncopyable_@boost@@IAE@XZ ; boost::noncopyable_::noncopyable::~noncopyable
__ehhandler$??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?data@?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAIXZ PROC ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data, COMDAT
; _this$ = ecx

; 67   :   pointer data()const{return data_;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?data@?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAIXZ ENDP ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
_TEXT	ENDS
;	COMDAT ?get_allocator@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::get_allocator, COMDAT
; _this$ = ecx

; 281  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 282  :     return allocator_type(bfm_allocator::member);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@1@@Z ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> ><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 283  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_allocator@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::get_allocator
_TEXT	ENDS
PUBLIC	??Rass_synth_priv_key@@QBEABNABVass_synth_priv@@@Z ; ass_synth_priv_key::operator()
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
;	COMDAT ?key_from_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@CAABNABVass_synth_priv@@@Z
_TEXT	SEGMENT
_k$ = -5						; size = 1
_x$ = 8							; size = 4
?key_from_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@CAABNABVass_synth_priv@@@Z PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_from_value, COMDAT

; 106  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 107  :       KeyFromValue k;
; 108  :       return k(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	call	??Rass_synth_priv_key@@QBEABNABVass_synth_priv@@@Z ; ass_synth_priv_key::operator()

; 109  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@key_from_v
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@key_from_v:
	DD	1
	DD	$LN4@key_from_v
$LN4@key_from_v:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@key_from_v
$LN3@key_from_v:
	DB	107					; 0000006bH
	DB	0
?key_from_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@CAABNABVass_synth_priv@@@Z ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_from_value
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
_TEXT	ENDS
;	COMDAT ??Rass_synth_priv_key@@QBEABNABVass_synth_priv@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
??Rass_synth_priv_key@@QBEABNABVass_synth_priv@@@Z PROC	; ass_synth_priv_key::operator(), COMDAT
; _this$ = ecx

; 76   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 77   :         return x.sigma;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 16					; 00000010H

; 78   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Rass_synth_priv_key@@QBEABNABVass_synth_priv@@@Z ENDP	; ass_synth_priv_key::operator()
_TEXT	ENDS
PUBLIC	??$swap@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YAXAAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@0@Z ; std::swap<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > *>
PUBLIC	??$adl_swap@V?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@detail@multi_index@boost@@YAXAAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@0@Z ; boost::multi_index::detail::adl_swap<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > >
PUBLIC	??$?9U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@U0123@@std@@YA_NABV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z ; std::operator!=<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\auto_space.hpp
;	COMDAT ?swap@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAU1234@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?swap@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAU1234@@Z PROC ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap, COMDAT
; _this$ = ecx

; 70   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   :     if(al_!=x.al_)adl_swap(al_,x.al_);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$?9U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@U0123@@std@@YA_NABV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z ; std::operator!=<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@swap@4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$adl_swap@V?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@detail@multi_index@boost@@YAXAAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@0@Z ; boost::multi_index::detail::adl_swap<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > >
	add	esp, 8
$LN1@swap@4:

; 72   :     std::swap(n_,x.n_);

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$swap@I@std@@YAXAAI0@Z		; std::swap<unsigned int>
	add	esp, 8

; 73   :     std::swap(data_,x.data_);

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	call	??$swap@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YAXAAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@0@Z ; std::swap<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > *>
	add	esp, 8

; 74   :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?swap@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAU1234@@Z ENDP ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@I@std@@QAEXPAII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@I@std@@QAEXPAII@Z PROC		; std::allocator<unsigned int>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@I@std@@QAEXPAII@Z ENDP		; std::allocator<unsigned int>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@I@std@@YAPAIIPAI@Z			; std::_Allocate<unsigned int>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@I@std@@QAEPAII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@I@std@@QAEPAII@Z PROC		; std::allocator<unsigned int>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@I@std@@YAPAIIPAI@Z		; std::_Allocate<unsigned int>
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@I@std@@QAEPAII@Z ENDP		; std::allocator<unsigned int>::allocate
_TEXT	ENDS
PUBLIC	??$_Distance2@PBIH@std@@YAXPBI0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<unsigned int const *,int>
PUBLIC	??$_Iter_cat@PBI@std@@YA?AUrandom_access_iterator_tag@0@ABQBI@Z ; std::_Iter_cat<unsigned int const *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Distance@PBIH@std@@YAXPBI0AAH@Z
_TEXT	SEGMENT
$T330809 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
??$_Distance@PBIH@std@@YAXPBI0AAH@Z PROC		; std::_Distance<unsigned int const *,int>, COMDAT

; 909  : 	{	// add to _Off distance between iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 910  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T330809[ebp]
	push	ecx
	call	??$_Iter_cat@PBI@std@@YA?AUrandom_access_iterator_tag@0@ABQBI@Z ; std::_Iter_cat<unsigned int const *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Distance2@PBIH@std@@YAXPBI0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<unsigned int const *,int>
	add	esp, 16					; 00000010H

; 911  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Distance@PBIH@std@@YAXPBI0AAH@Z ENDP		; std::_Distance<unsigned int const *,int>
_TEXT	ENDS
PUBLIC	??$_Advance@PBIH@std@@YAXAAPBIHUrandom_access_iterator_tag@0@@Z ; std::_Advance<unsigned int const *,int>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$advance@PBIH@std@@YAXAAPBIH@Z
_TEXT	SEGMENT
$T330812 = -197						; size = 1
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
??$advance@PBIH@std@@YAXAAPBIH@Z PROC			; std::advance<unsigned int const *,int>, COMDAT

; 797  : 	{	// increment iterator by offset, arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 798  : 	_Advance(_Where, _Off, _Iter_cat(_Where));

	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T330812[ebp]
	push	ecx
	call	??$_Iter_cat@PBI@std@@YA?AUrandom_access_iterator_tag@0@ABQBI@Z ; std::_Iter_cat<unsigned int const *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$_Advance@PBIH@std@@YAXAAPBIHUrandom_access_iterator_tag@0@@Z ; std::_Advance<unsigned int const *,int>
	add	esp, 12					; 0000000cH

; 799  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$advance@PBIH@std@@YAXAAPBIH@Z ENDP			; std::advance<unsigned int const *,int>
_TEXT	ENDS
PUBLIC	?hash_float_combine@hash_detail@boost@@YAXAAII@Z ; boost::hash_detail::hash_float_combine
PUBLIC	??R?$call_ldexp@N@hash_detail@boost@@QBENNH@Z	; boost::hash_detail::call_ldexp<double>::operator()
PUBLIC	??R?$call_frexp@N@hash_detail@boost@@QBENNPAH@Z	; boost::hash_detail::call_frexp<double>::operator()
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\detail\hash_float_generic.hpp
;	COMDAT ??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z
_TEXT	SEGMENT
tv162 = -292						; size = 8
tv144 = -292						; size = 8
tv165 = -284						; size = 8
tv160 = -284						; size = 4
tv147 = -284						; size = 8
tv142 = -284						; size = 4
tv157 = -278						; size = 2
tv139 = -278						; size = 2
_part$320435 = -80					; size = 4
_i$320430 = -68						; size = 4
_length$ = -56						; size = 4
_seed$ = -44						; size = 4
_exp$ = -32						; size = 4
_ldexp$ = -17						; size = 1
_frexp$ = -5						; size = 1
_v$ = 8							; size = 8
??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z PROC	; boost::hash_detail::float_hash_impl2<double>, COMDAT

; 38   :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 39   :             boost::hash_detail::call_frexp<T> frexp;
; 40   :             boost::hash_detail::call_ldexp<T> ldexp;
; 41   :         
; 42   :             int exp = 0;

	mov	DWORD PTR _exp$[ebp], 0

; 43   : 
; 44   :             v = frexp(v, &exp);

	lea	eax, DWORD PTR _exp$[ebp]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _v$[ebp]
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR _frexp$[ebp]
	call	??R?$call_frexp@N@hash_detail@boost@@QBENNPAH@Z ; boost::hash_detail::call_frexp<double>::operator()
	fstp	QWORD PTR _v$[ebp]

; 45   : 
; 46   :             // A postive value is easier to hash, so combine the
; 47   :             // sign with the exponent and use the absolute value.
; 48   :             if(v < 0) {

	fldz
	fcomp	QWORD PTR _v$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@float_hash@2

; 49   :                 v = -v;

	fld	QWORD PTR _v$[ebp]
	fchs
	fstp	QWORD PTR _v$[ebp]

; 50   :                 exp += limits<T>::max_exponent -
; 51   :                     limits<T>::min_exponent;

	mov	eax, DWORD PTR _exp$[ebp]
	add	eax, 2045				; 000007fdH
	mov	DWORD PTR _exp$[ebp], eax
$LN4@float_hash@2:

; 52   :             }
; 53   : 
; 54   :             v = ldexp(v, limits<std::size_t>::digits);

	push	32					; 00000020H
	sub	esp, 8
	fld	QWORD PTR _v$[ebp]
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR _ldexp$[ebp]
	call	??R?$call_ldexp@N@hash_detail@boost@@QBENNH@Z ; boost::hash_detail::call_ldexp<double>::operator()
	fstp	QWORD PTR _v$[ebp]

; 55   :             std::size_t seed = static_cast<std::size_t>(v);

	fld	QWORD PTR _v$[ebp]
	fnstcw	WORD PTR tv139[ebp]
	movzx	eax, WORD PTR tv139[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv142[ebp], eax
	fldcw	WORD PTR tv142[ebp]
	fistp	QWORD PTR tv144[ebp]
	fldcw	WORD PTR tv139[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR _seed$[ebp], eax

; 56   :             v -= static_cast<T>(seed);

	mov	eax, DWORD PTR _seed$[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	DWORD PTR tv147[ebp+4], 0
	fild	QWORD PTR tv147[ebp]
	fsubr	QWORD PTR _v$[ebp]
	fstp	QWORD PTR _v$[ebp]

; 57   : 
; 58   :             // ceiling(digits(T) * log2(radix(T))/ digits(size_t)) - 1;
; 59   :             std::size_t const length
; 60   :                 = (limits<T>::digits *
; 61   :                         boost::static_log2<limits<T>::radix>::value
; 62   :                         + limits<std::size_t>::digits - 1)
; 63   :                 / limits<std::size_t>::digits;

	mov	DWORD PTR _length$[ebp], 2

; 64   : 
; 65   :             for(std::size_t i = 0; i != length; ++i)

	mov	DWORD PTR _i$320430[ebp], 0
	jmp	SHORT $LN3@float_hash@2
$LN2@float_hash@2:
	mov	eax, DWORD PTR _i$320430[ebp]
	add	eax, 1
	mov	DWORD PTR _i$320430[ebp], eax
$LN3@float_hash@2:
	cmp	DWORD PTR _i$320430[ebp], 2
	je	$LN1@float_hash@2

; 66   :             {
; 67   :                 v = ldexp(v, limits<std::size_t>::digits);

	push	32					; 00000020H
	sub	esp, 8
	fld	QWORD PTR _v$[ebp]
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR _ldexp$[ebp]
	call	??R?$call_ldexp@N@hash_detail@boost@@QBENNH@Z ; boost::hash_detail::call_ldexp<double>::operator()
	fstp	QWORD PTR _v$[ebp]

; 68   :                 std::size_t part = static_cast<std::size_t>(v);

	fld	QWORD PTR _v$[ebp]
	fnstcw	WORD PTR tv157[ebp]
	movzx	eax, WORD PTR tv157[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv160[ebp], eax
	fldcw	WORD PTR tv160[ebp]
	fistp	QWORD PTR tv162[ebp]
	fldcw	WORD PTR tv157[ebp]
	mov	eax, DWORD PTR tv162[ebp]
	mov	DWORD PTR _part$320435[ebp], eax

; 69   :                 v -= static_cast<T>(part);

	mov	eax, DWORD PTR _part$320435[ebp]
	mov	DWORD PTR tv165[ebp], eax
	mov	DWORD PTR tv165[ebp+4], 0
	fild	QWORD PTR tv165[ebp]
	fsubr	QWORD PTR _v$[ebp]
	fstp	QWORD PTR _v$[ebp]

; 70   :                 hash_float_combine(seed, part);

	mov	eax, DWORD PTR _part$320435[ebp]
	push	eax
	lea	ecx, DWORD PTR _seed$[ebp]
	push	ecx
	call	?hash_float_combine@hash_detail@boost@@YAXAAII@Z ; boost::hash_detail::hash_float_combine
	add	esp, 8

; 71   :             }

	jmp	$LN2@float_hash@2
$LN1@float_hash@2:

; 72   : 
; 73   :             hash_float_combine(seed, exp);

	mov	eax, DWORD PTR _exp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _seed$[ebp]
	push	ecx
	call	?hash_float_combine@hash_detail@boost@@YAXAAII@Z ; boost::hash_detail::hash_float_combine
	add	esp, 8

; 74   : 
; 75   :             return seed;

	mov	eax, DWORD PTR _seed$[ebp]

; 76   :         }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@float_hash@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@float_hash@2:
	DD	4
	DD	$LN11@float_hash@2
$LN11@float_hash@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN7@float_hash@2
	DD	-17					; ffffffefH
	DD	1
	DD	$LN8@float_hash@2
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN9@float_hash@2
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN10@float_hash@2
$LN10@float_hash@2:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN9@float_hash@2:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	0
$LN8@float_hash@2:
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	0
$LN7@float_hash@2:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	0
??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z ENDP	; boost::hash_detail::float_hash_impl2<double>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?hash_float_combine@hash_detail@boost@@YAXAAII@Z
_TEXT	SEGMENT
_seed$ = 8						; size = 4
_value$ = 12						; size = 4
?hash_float_combine@hash_detail@boost@@YAXAAII@Z PROC	; boost::hash_detail::hash_float_combine, COMDAT

; 32   :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 33   :             seed ^= value + (seed<<6) + (seed>>2);

	mov	eax, DWORD PTR _seed$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 6
	add	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _seed$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 2
	add	ecx, eax
	mov	edx, DWORD PTR _seed$[ebp]
	xor	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _seed$[ebp]
	mov	DWORD PTR [eax], ecx

; 34   :         }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?hash_float_combine@hash_detail@boost@@YAXAAII@Z ENDP	; boost::hash_detail::hash_float_combine
_TEXT	ENDS
PUBLIC	??$checked_delete@E@boost@@YAXPAE@Z		; boost::checked_delete<unsigned char>
PUBLIC	??0?$sp_counted_impl_p@E@detail@boost@@QAE@PAE@Z ; boost::detail::sp_counted_impl_p<unsigned char>::sp_counted_impl_p<unsigned char>
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\shared_count.hpp
xdata$x	SEGMENT
__catchsym$??$?0E@shared_count@detail@boost@@QAE@PAE@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?0E@shared_count@detail@boost@@QAE@PAE@Z$0
__tryblocktable$??$?0E@shared_count@detail@boost@@QAE@PAE@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?0E@shared_count@detail@boost@@QAE@PAE@Z$3
__unwindtable$??$?0E@shared_count@detail@boost@@QAE@PAE@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$?0E@shared_count@detail@boost@@QAE@PAE@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$?0E@shared_count@detail@boost@@QAE@PAE@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?0E@shared_count@detail@boost@@QAE@PAE@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?0E@shared_count@detail@boost@@QAE@PAE@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?0E@shared_count@detail@boost@@QAE@PAE@Z
_TEXT	SEGMENT
tv75 = -256						; size = 4
tv83 = -252						; size = 4
tv81 = -248						; size = 4
$T330825 = -240						; size = 4
$T330826 = -228						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_p$ = 8							; size = 4
??$?0E@shared_count@detail@boost@@QAE@PAE@Z PROC	; boost::detail::shared_count::shared_count<unsigned char>, COMDAT
; _this$ = ecx

; 86   :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0E@shared_count@detail@boost@@QAE@PAE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 87   : #ifndef BOOST_NO_EXCEPTIONS
; 88   : 
; 89   :         try
; 90   :         {

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 91   :             pi_ = new sp_counted_impl_p<Y>( p );

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv81[ebp], eax
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T330826[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T330826[ebp], 0
	je	SHORT $LN4@shared_cou@2
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T330826[ebp]
	call	??0?$sp_counted_impl_p@E@detail@boost@@QAE@PAE@Z ; boost::detail::sp_counted_impl_p<unsigned char>::sp_counted_impl_p<unsigned char>
	mov	DWORD PTR tv83[ebp], eax
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN5@shared_cou@2
$LN4@shared_cou@2:
	mov	DWORD PTR tv75[ebp], 0
$LN5@shared_cou@2:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T330825[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T330825[ebp]
	mov	DWORD PTR [ecx], edx

; 92   :         }

	jmp	SHORT $LN6@shared_cou@2
__catch$??$?0E@shared_count@detail@boost@@QAE@PAE@Z$0:

; 93   :         catch(...)
; 94   :         {
; 95   :             boost::checked_delete( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	??$checked_delete@E@boost@@YAXPAE@Z	; boost::checked_delete<unsigned char>
	add	esp, 4

; 96   :             throw;

	push	0
	push	0
	call	__CxxThrowException@8

; 97   :         }

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN2@shared_cou@2
	ret	0
$LN6@shared_cou@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN2@shared_cou@2:

; 98   : 
; 99   : #else
; 100  : 
; 101  :         pi_ = new sp_counted_impl_p<Y>( p );
; 102  : 
; 103  :         if( pi_ == 0 )
; 104  :         {
; 105  :             boost::checked_delete( p );
; 106  :             boost::throw_exception( std::bad_alloc() );
; 107  :         }
; 108  : 
; 109  : #endif
; 110  :     }

	mov	eax, DWORD PTR _this$[ebp]
$LN3@shared_cou@2:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0E@shared_count@detail@boost@@QAE@PAE@Z$2:
	mov	eax, DWORD PTR $T330826[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??$?0E@shared_count@detail@boost@@QAE@PAE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0E@shared_count@detail@boost@@QAE@PAE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0E@shared_count@detail@boost@@QAE@PAE@Z ENDP	; boost::detail::shared_count::shared_count<unsigned char>
PUBLIC	??0?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@QAE@PAEAAP6AXPAX@Z@Z ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z$0
__tryblocktable$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z$3
__unwindtable$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z
_TEXT	SEGMENT
tv76 = -256						; size = 4
tv84 = -252						; size = 4
tv82 = -248						; size = 4
$T330845 = -240						; size = 4
$T330846 = -228						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_p$ = 8							; size = 4
_d$ = 12						; size = 4
??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z PROC ; boost::detail::shared_count::shared_count<unsigned char *,void (__cdecl*)(void *)>, COMDAT
; _this$ = ecx

; 120  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 121  : #if defined( BOOST_MSVC ) && BOOST_WORKAROUND( BOOST_MSVC, <= 1200 )
; 122  :         typedef Y* P;
; 123  : #endif
; 124  : #ifndef BOOST_NO_EXCEPTIONS
; 125  : 
; 126  :         try
; 127  :         {

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 128  :             pi_ = new sp_counted_impl_pd<P, D>(p, d);

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv82[ebp], eax
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR $T330846[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T330846[ebp], 0
	je	SHORT $LN4@shared_cou@3
	lea	ecx, DWORD PTR _d$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T330846[ebp]
	call	??0?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@QAE@PAEAAP6AXPAX@Z@Z ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>
	mov	DWORD PTR tv84[ebp], eax
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN5@shared_cou@3
$LN4@shared_cou@3:
	mov	DWORD PTR tv76[ebp], 0
$LN5@shared_cou@3:
	mov	ecx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T330845[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T330845[ebp]
	mov	DWORD PTR [edx], eax

; 129  :         }

	jmp	SHORT $LN6@shared_cou@3
__catch$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z$0:

; 130  :         catch(...)
; 131  :         {
; 132  :             d(p); // delete p

	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	DWORD PTR _d$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 133  :             throw;

	push	0
	push	0
	call	__CxxThrowException@8

; 134  :         }

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN2@shared_cou@3
	ret	0
$LN6@shared_cou@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN2@shared_cou@3:

; 135  : 
; 136  : #else
; 137  : 
; 138  :         pi_ = new sp_counted_impl_pd<P, D>(p, d);
; 139  : 
; 140  :         if(pi_ == 0)
; 141  :         {
; 142  :             d(p); // delete p
; 143  :             boost::throw_exception(std::bad_alloc());
; 144  :         }
; 145  : 
; 146  : #endif
; 147  :     }

	mov	eax, DWORD PTR _this$[ebp]
$LN3@shared_cou@3:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z$2:
	mov	eax, DWORD PTR $T330846[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0PAEP6AXPAX@Z@shared_count@detail@boost@@QAE@PAEP6AXPAX@Z@Z ENDP ; boost::detail::shared_count::shared_count<unsigned char *,void (__cdecl*)(void *)>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\pp_perfect_fwd.hpp
;	COMDAT ??$?0N@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@AAN@Z
_TEXT	SEGMENT
tv71 = -220						; size = 4
$T330865 = -212						; size = 4
_this$ = -8						; size = 4
_t0$ = 8						; size = 4
??$?0N@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@AAN@Z PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type<double>, COMDAT
; _this$ = ecx

; 124  : BOOST_FLYWEIGHT_PERFECT_FWD_OVERLOADS

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::spc_ptr
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T330865[ebp], eax
	cmp	DWORD PTR $T330865[ebp], 0
	je	SHORT $LN3@rep_type@3
	mov	eax, DWORD PTR $T330865[ebp]
	mov	ecx, DWORD PTR _t0$[ebp]
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [eax]
	mov	edx, DWORD PTR $T330865[ebp]
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN4@rep_type@3
$LN3@rep_type@3:
	mov	DWORD PTR tv71[ebp], 0
$LN4@rep_type@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0N@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@AAN@Z ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type<double>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >, COMDAT

; 476  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat:
	DD	1
	DD	$LN4@Iter_cat
$LN4@Iter_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat
$LN3@Iter_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
_TEXT	ENDS
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1
__ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__File$ = 32						; size = 4
__Line$ = 36						; size = 4
___formal$ = 40						; size = 1
??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >, COMDAT

; 714  : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 715  : 	if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Debug_rang

; 716  : 		{	// check for non-null pointers, valid range
; 717  : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
	add	esp, 12					; 0000000cH

; 718  : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
	add	esp, 12					; 0000000cH

; 719  : 		if (_Last < _First)

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator<
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Debug_rang

; 720  : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_rang:

; 721  : 		}
; 722  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
PUBLIC	??$?0AAPAHAAPAH@?$pair@PAHPAH@std@@QAE@AAPAH0@Z	; std::pair<int *,int *>::pair<int *,int *><int * &,int * &>
PUBLIC	??$iter_swap@PAHPAH@std@@YAXPAH0@Z		; std::iter_swap<int *,int *>
PUBLIC	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z		; std::_Debug_lt<int,int>
PUBLIC	??$_Median@PAH@std@@YAXPAH00@Z			; std::_Median<int *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAH@std@@YA?AU?$pair@PAHPAH@0@PAH0@Z
_TEXT	SEGMENT
tv172 = -260						; size = 4
tv186 = -256						; size = 4
tv169 = -256						; size = 4
tv140 = -256						; size = 4
__Glast$ = -56						; size = 4
__Gfirst$ = -44						; size = 4
__Plast$ = -32						; size = 4
__Pfirst$ = -20						; size = 4
__Mid$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAH@std@@YA?AU?$pair@PAHPAH@0@PAH0@Z PROC ; std::_Unguarded_partition<int *>, COMDAT

; 3551 : 	{	// partition [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3552 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Mid$[ebp], edx

; 3553 : 	_Median(_First, _Mid, _Last - 1);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Median@PAH@std@@YAXPAH00@Z		; std::_Median<int *>
	add	esp, 12					; 0000000cH

; 3554 : 	_RanIt _Pfirst = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], eax

; 3555 : 	_RanIt _Plast = _Pfirst + 1;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	add	eax, 4
	mov	DWORD PTR __Plast$[ebp], eax
$LN27@Unguarded_:

; 3556 : 
; 3557 : 	while (_First < _Pfirst
; 3558 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3559 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN25@Unguarded_
	push	3558					; 00000de6H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 4
	push	ecx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN25@Unguarded_
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx-4]
	jl	SHORT $LN25@Unguarded_

; 3560 : 		--_Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 4
	mov	DWORD PTR __Pfirst$[ebp], eax
	jmp	SHORT $LN27@Unguarded_
$LN25@Unguarded_:

; 3561 : 	while (_Plast < _Last
; 3562 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3563 : 		&& !(*_Pfirst < *_Plast))

	mov	eax, DWORD PTR __Plast$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jae	SHORT $LN24@Unguarded_
	push	3562					; 00000deaH
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	push	ecx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN24@Unguarded_
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN24@Unguarded_

; 3564 : 		++_Plast;

	mov	eax, DWORD PTR __Plast$[ebp]
	add	eax, 4
	mov	DWORD PTR __Plast$[ebp], eax
	jmp	SHORT $LN25@Unguarded_
$LN24@Unguarded_:

; 3565 : 
; 3566 : 	_RanIt _Gfirst = _Plast;

	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], eax

; 3567 : 	_RanIt _Glast = _Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], eax
$LN23@Unguarded_:

; 3568 : 
; 3569 : 	for (; ; )
; 3570 : 		{	// partition
; 3571 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN21@Unguarded_
$LN20@Unguarded_:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	add	eax, 4
	mov	DWORD PTR __Gfirst$[ebp], eax
$LN21@Unguarded_:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jae	SHORT $LN19@Unguarded_

; 3572 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	push	3572					; 00000df4H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Gfirst$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN18@Unguarded_
	jmp	SHORT $LN17@Unguarded_
$LN18@Unguarded_:

; 3573 : 				;
; 3574 : 			else if (*_Gfirst < *_Pfirst)

	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN16@Unguarded_

; 3575 : 				break;

	jmp	SHORT $LN19@Unguarded_

; 3576 : 			else

	jmp	SHORT $LN17@Unguarded_
$LN16@Unguarded_:

; 3577 : 				_STD iter_swap(_Plast++, _Gfirst);

	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR tv140[ebp], eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Plast$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	push	edx
	mov	eax, DWORD PTR tv140[ebp]
	push	eax
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8
$LN17@Unguarded_:
	jmp	SHORT $LN20@Unguarded_
$LN19@Unguarded_:

; 3578 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN14@Unguarded_
$LN13@Unguarded_:
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 4
	mov	DWORD PTR __Glast$[ebp], eax
$LN14@Unguarded_:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Glast$[ebp]
	jae	SHORT $LN12@Unguarded_

; 3579 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	push	3579					; 00000dfbH
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 4
	push	ecx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@Unguarded_
	jmp	SHORT $LN10@Unguarded_
$LN11@Unguarded_:

; 3580 : 				;
; 3581 : 			else if (*_Pfirst < *(_Glast - 1))

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx-4]
	jge	SHORT $LN9@Unguarded_

; 3582 : 				break;

	jmp	SHORT $LN12@Unguarded_

; 3583 : 			else

	jmp	SHORT $LN10@Unguarded_
$LN9@Unguarded_:

; 3584 : 				_STD iter_swap(--_Pfirst, _Glast - 1);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 4
	mov	DWORD PTR __Pfirst$[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 4
	push	ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	push	edx
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8
$LN10@Unguarded_:
	jmp	SHORT $LN13@Unguarded_
$LN12@Unguarded_:

; 3585 : 		if (_Glast == _First && _Gfirst == _Last)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_

; 3586 : 			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	lea	eax, DWORD PTR __Plast$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0AAPAHAAPAH@?$pair@PAHPAH@std@@QAE@AAPAH0@Z ; std::pair<int *,int *>::pair<int *,int *><int * &,int * &>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_
$LN7@Unguarded_:

; 3587 : 
; 3588 : 		if (_Glast == _First)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN6@Unguarded_

; 3589 : 			{	// no room at bottom, rotate pivot upward
; 3590 : 			if (_Plast != _Gfirst)

	mov	eax, DWORD PTR __Plast$[ebp]
	cmp	eax, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_

; 3591 : 				_STD iter_swap(_Pfirst, _Plast);

	mov	eax, DWORD PTR __Plast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8
$LN5@Unguarded_:

; 3592 : 			++_Plast;

	mov	eax, DWORD PTR __Plast$[ebp]
	add	eax, 4
	mov	DWORD PTR __Plast$[ebp], eax

; 3593 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR tv169[ebp], eax
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Gfirst$[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR tv172[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	add	eax, 4
	mov	DWORD PTR __Pfirst$[ebp], eax
	mov	ecx, DWORD PTR tv169[ebp]
	push	ecx
	mov	edx, DWORD PTR tv172[ebp]
	push	edx
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8
	jmp	SHORT $LN4@Unguarded_
$LN6@Unguarded_:

; 3594 : 			}
; 3595 : 		else if (_Gfirst == _Last)

	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	SHORT $LN3@Unguarded_

; 3596 : 			{	// no room at top, rotate pivot downward
; 3597 : 			if (--_Glast != --_Pfirst)

	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 4
	mov	DWORD PTR __Glast$[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 4
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_

; 3598 : 				_STD iter_swap(_Glast, _Pfirst);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	push	ecx
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8
$LN2@Unguarded_:

; 3599 : 			_STD iter_swap(_Pfirst, --_Plast);

	mov	eax, DWORD PTR __Plast$[ebp]
	sub	eax, 4
	mov	DWORD PTR __Plast$[ebp], eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	push	edx
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8

; 3600 : 			}
; 3601 : 		else

	jmp	SHORT $LN4@Unguarded_
$LN3@Unguarded_:

; 3602 : 			_STD iter_swap(_Gfirst++, --_Glast);

	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 4
	mov	DWORD PTR __Glast$[ebp], eax
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR tv186[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 4
	mov	DWORD PTR __Gfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv186[ebp]
	push	ecx
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8
$LN4@Unguarded_:

; 3603 : 		}

	jmp	$LN23@Unguarded_
$LN28@Unguarded_:

; 3604 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@Unguarded_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN33@Unguarded_:
	DD	2
	DD	$LN32@Unguarded_
$LN32@Unguarded_:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN30@Unguarded_
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN31@Unguarded_
$LN31@Unguarded_:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN30@Unguarded_:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
??$_Unguarded_partition@PAH@std@@YA?AU?$pair@PAHPAH@0@PAH0@Z ENDP ; std::_Unguarded_partition<int *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAHHH@std@@YAXPAH000@Z		; std::_Make_heap<int *,int,int>
PUBLIC	??$_Unchecked@PAH@std@@YAPAHPAH@Z		; std::_Unchecked<int *>
PUBLIC	??$_Dist_type@PAH@std@@YAPAHPAH@Z		; std::_Dist_type<int *>
PUBLIC	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z		; std::_Debug_range<int *>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$make_heap@PAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAH@std@@YAXPAH0@Z PROC			; std::make_heap<int *>, COMDAT

; 2645 : 	{	// make [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2646 : 	_DEBUG_RANGE(_First, _Last);

	push	2646					; 00000a56H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H

; 2647 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	cmp	eax, 1
	jle	SHORT $LN2@make_heap

; 2648 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last),
; 2649 : 			_Dist_type(_First), _Val_type(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAH@std@@YAPAHPAH@Z	; std::_Val_type<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Dist_type@PAH@std@@YAPAHPAH@Z	; std::_Dist_type<int *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	call	??$_Make_heap@PAHHH@std@@YAXPAH000@Z	; std::_Make_heap<int *,int,int>
	add	esp, 16					; 00000010H
$LN2@make_heap:

; 2650 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$make_heap@PAH@std@@YAXPAH0@Z ENDP			; std::make_heap<int *>
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAH@std@@YAXPAH0@Z		; std::_Sort_heap<int *>
PUBLIC	??$_Debug_heap@PAH@std@@YAXPAH0@Z		; std::_Debug_heap<int *>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$sort_heap@PAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAH@std@@YAXPAH0@Z PROC			; std::sort_heap<int *>, COMDAT

; 2690 : 	{	// order heap by repeatedly popping, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2691 : 	_DEBUG_RANGE(_First, _Last);

	push	2691					; 00000a83H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H

; 2692 : 	_DEBUG_HEAP(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	call	??$_Debug_heap@PAH@std@@YAXPAH0@Z	; std::_Debug_heap<int *>
	add	esp, 8

; 2693 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	call	??$_Sort_heap@PAH@std@@YAXPAH0@Z	; std::_Sort_heap<int *>
	add	esp, 8

; 2694 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$sort_heap@PAH@std@@YAXPAH0@Z ENDP			; std::sort_heap<int *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAHH@std@@YAXPAH00@Z	; std::_Insertion_sort1<int *,int>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Insertion_sort@PAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAH@std@@YAXPAH0@Z PROC		; std::_Insertion_sort<int *>, COMDAT

; 3518 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3519 : 	_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAH@std@@YAPAHPAH@Z	; std::_Val_type<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Insertion_sort1@PAHH@std@@YAXPAH00@Z ; std::_Insertion_sort1<int *,int>
	add	esp, 12					; 0000000cH

; 3520 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort@PAH@std@@YAXPAH0@Z ENDP		; std::_Insertion_sort<int *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@PAU10@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@PAU10@@Z PROC ; std::_Val_type<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 790  : 	return (0);

	xor	eax, eax

; 791  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Val_type@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@PAU10@@Z ENDP ; std::_Val_type<std::pair<unsigned __int64,unsigned __int64> *>
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@PB_WI@Z ; std::_Debug_pointer<std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??$_Debug_range@PAU?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@0PB_WI@Z ; std::_Debug_range<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??_C@_1IM@NOOBNEFK@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
;	COMDAT ??_C@_1IM@NOOBNEFK@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
CONST	SEGMENT
??_C@_1IM@NOOBNEFK@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'm', 00H, 'e', 00H, 'm'
	DB	00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);

	push	425					; 000001a9H
	push	OFFSET ??_C@_1IM@NOOBNEFK@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAU?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@0PB_WI@Z ; std::_Debug_range<std::pair<unsigned __int64,unsigned __int64> *>
	add	esp, 16					; 00000010H

; 426  : 	_DEBUG_POINTER(_Dest);

	push	426					; 000001aaH
	push	OFFSET ??_C@_1IM@NOOBNEFK@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@PB_WI@Z ; std::_Debug_pointer<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 12					; 0000000cH

; 427  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@U32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
	jmp	SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

	jmp	SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Dest_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@@Z ; std::_Dest_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 8
	jmp	SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 436  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0_K_K@?$pair@_K_K@std@@QAE@AAU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??$?0_K_K@?$pair@_K_K@std@@QAE@AAU01@@Z PROC		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>, COMDAT
; _this$ = ecx

; 195  : 		{	// construct from compatible pair

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0AA_KAA_K@?$_Pair_base@_K_K@std@@QAE@AA_K0@Z ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>

; 196  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0_K_K@?$pair@_K_K@std@@QAE@AAU01@@Z ENDP		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$move@AAU?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z PROC ; std::move<std::pair<unsigned __int64,unsigned __int64> &>, COMDAT

; 86   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAU?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ENDP ; std::move<std::pair<unsigned __int64,unsigned __int64> &>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::destroy
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@@Z PROC ; std::_Dest_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 286  : 	{	// destroy using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 287  : 	_Alval.destroy(_Pdest);

	mov	eax, DWORD PTR __Pdest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?destroy@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::destroy

; 288  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Dest_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@@Z ENDP ; std::_Dest_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 790  : 	return (0);

	xor	eax, eax

; 791  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z		; std::_Debug_pointer<int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 457  : 	_DEBUG_RANGE(_First, _Last);

	push	457					; 000001c9H
	push	OFFSET ??_C@_1IM@NOOBNEFK@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H

; 458  : 	_DEBUG_POINTER(_Dest);

	push	458					; 000001caH
	push	OFFSET ??_C@_1IM@NOOBNEFK@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH

; 459  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 462  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@_K@std@@YA$$QA_KAA_K@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_K@std@@YA$$QA_KAA_K@Z PROC			; std::forward<unsigned __int64>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@_K@std@@YA$$QA_KAA_K@Z ENDP			; std::forward<unsigned __int64>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z PROC		; std::_Move<unsigned char * &>, COMDAT

; 94   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z ENDP		; std::_Move<unsigned char * &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$move@AA_K@std@@YA$$QA_KAA_K@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AA_K@std@@YA$$QA_KAA_K@Z PROC			; std::move<unsigned __int64 &>, COMDAT

; 86   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AA_K@std@@YA$$QA_KAA_K@Z ENDP			; std::move<unsigned __int64 &>
_TEXT	ENDS
PUBLIC	??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$_Pair_base@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z ; std::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>
PUBLIC	??$forward@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@@std@@YA$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AAV1234@@Z ; std::forward<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
PUBLIC	??$forward@AA_N@std@@YAAA_NAA_N@Z		; std::forward<bool &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z PROC ; std::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@AA_N@std@@YAAA_NAA_N@Z	; std::forward<bool &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val1$[ebp]
	push	ecx
	call	??$forward@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@@std@@YA$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AAV1234@@Z ; std::forward<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$_Pair_base@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z ; std::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>

; 248  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z ENDP ; std::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>
_TEXT	ENDS
PUBLIC	??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\utility\base_from_member.hpp
;	COMDAT ??$?0V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@?$base_from_member@V?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@$0A@@boost@@IAE@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x0$ = 8						; size = 1
??$?0V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@?$base_from_member@V?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@$0A@@boost@@IAE@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z PROC ; boost::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0>::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0><std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = ecx

; 75   :     BOOST_PP_REPEAT_FROM_TO( 1, BOOST_PP_INC(BOOST_BASE_FROM_MEMBER_MAX_ARITY),

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@?$base_from_member@V?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@$0A@@boost@@IAE@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ENDP ; boost::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0>::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0><std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@1@@Z PROC ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> ><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@1@@Z ENDP ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> ><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
_TEXT	ENDS
PUBLIC	??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$_Pair_base@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z ; std::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>
PUBLIC	??$forward@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAAAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@AAPAU1234@@Z ; std::forward<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &>
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z PROC ; std::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val1$[ebp]
	push	ecx
	call	??$forward@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAAAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@AAPAU1234@@Z ; std::forward<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$_Pair_base@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z ; std::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>

; 248  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z ENDP ; std::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>
_TEXT	ENDS
PUBLIC	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$00@detail@tuples@boost@@SAABU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ; boost::tuples::detail::drop_front<1>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
;	COMDAT ??$get@$00IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z
_TEXT	SEGMENT
_c$ = 8							; size = 4
??$get@$00IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z PROC ; boost::tuples::get<1,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >, COMDAT

; 225  : get(const cons<HT, TT>& c BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(int, N)) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 226  :   typedef BOOST_DEDUCED_TYPENAME detail::drop_front<N>::BOOST_NESTED_TEMPLATE
; 227  :       apply<cons<HT, TT> > impl;
; 228  :   typedef BOOST_DEDUCED_TYPENAME impl::type cons_element;
; 229  :   return impl::call(c).head;

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$00@detail@tuples@boost@@SAABU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ; boost::tuples::detail::drop_front<1>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
	add	esp, 4

; 230  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$get@$00IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ENDP ; boost::tuples::get<1,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
_TEXT	ENDS
PUBLIC	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$01@detail@tuples@boost@@SAABU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ; boost::tuples::detail::drop_front<2>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$get@$01IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$hash@N@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z
_TEXT	SEGMENT
_c$ = 8							; size = 4
??$get@$01IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$hash@N@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z PROC ; boost::tuples::get<2,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >, COMDAT

; 225  : get(const cons<HT, TT>& c BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(int, N)) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 226  :   typedef BOOST_DEDUCED_TYPENAME detail::drop_front<N>::BOOST_NESTED_TEMPLATE
; 227  :       apply<cons<HT, TT> > impl;
; 228  :   typedef BOOST_DEDUCED_TYPENAME impl::type cons_element;
; 229  :   return impl::call(c).head;

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$01@detail@tuples@boost@@SAABU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ; boost::tuples::detail::drop_front<2>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
	add	esp, 4

; 230  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$get@$01IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$hash@N@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ENDP ; boost::tuples::get<2,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
_TEXT	ENDS
PUBLIC	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$02@detail@tuples@boost@@SAABU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ; boost::tuples::detail::drop_front<3>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$get@$02IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$equal_to@N@std@@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z
_TEXT	SEGMENT
_c$ = 8							; size = 4
??$get@$02IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$equal_to@N@std@@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z PROC ; boost::tuples::get<3,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >, COMDAT

; 225  : get(const cons<HT, TT>& c BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(int, N)) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 226  :   typedef BOOST_DEDUCED_TYPENAME detail::drop_front<N>::BOOST_NESTED_TEMPLATE
; 227  :       apply<cons<HT, TT> > impl;
; 228  :   typedef BOOST_DEDUCED_TYPENAME impl::type cons_element;
; 229  :   return impl::call(c).head;

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$02@detail@tuples@boost@@SAABU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ; boost::tuples::detail::drop_front<3>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
	add	esp, 4

; 230  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$get@$02IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$equal_to@N@std@@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ENDP ; boost::tuples::get<3,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
_TEXT	ENDS
PUBLIC	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$0A@@detail@tuples@boost@@SAABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@ABU645@@Z ; boost::tuples::detail::drop_front<0>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$get@$0A@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABIABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z
_TEXT	SEGMENT
_c$ = 8							; size = 4
??$get@$0A@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABIABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z PROC ; boost::tuples::get<0,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >, COMDAT

; 225  : get(const cons<HT, TT>& c BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(int, N)) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 226  :   typedef BOOST_DEDUCED_TYPENAME detail::drop_front<N>::BOOST_NESTED_TEMPLATE
; 227  :       apply<cons<HT, TT> > impl;
; 228  :   typedef BOOST_DEDUCED_TYPENAME impl::type cons_element;
; 229  :   return impl::call(c).head;

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$0A@@detail@tuples@boost@@SAABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@ABU645@@Z ; boost::tuples::detail::drop_front<0>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
	add	esp, 4

; 230  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$get@$0A@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABIABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ENDP ; boost::tuples::get<0,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@IPAU1234@@Z
_TEXT	SEGMENT
$T330946 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@IPAU1234@@Z PROC ; std::_Allocate<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@4

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@4
$LN4@Allocate@4:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 89478485	; 05555555H
	ja	SHORT $LN1@Allocate@4
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 48					; 00000030H
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T330946[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T330946[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@4:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@4:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@IPAU1234@@Z ENDP ; std::_Allocate<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
_TEXT	ENDS
PUBLIC	??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\detail\allocator_utilities.hpp
xdata$x	SEGMENT
__unwindtable$??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z$0
__ehfuncinfo$??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z
_TEXT	SEGMENT
tv74 = -232						; size = 4
$T330949 = -224						; size = 4
$T330950 = -212						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_t$ = 12						; size = 4
??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z PROC ; boost::detail::allocator::construct<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT

; 177  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 178  :   new (p) Type(t);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	push	40					; 00000028H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T330950[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T330950[ebp], 0
	je	SHORT $LN3@construct@5
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T330950[ebp]
	call	??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@construct@5
$LN3@construct@5:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct@5:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T330949[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 179  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z$0:
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T330950[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-236]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z ENDP ; boost::detail::allocator::construct<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z PROC ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ENDP ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@IPAU1234@@Z
_TEXT	SEGMENT
$T330964 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@IPAU1234@@Z PROC ; std::_Allocate<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@5

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@5
$LN4@Allocate@5:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate@5
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@5
$LN1@Allocate@5:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T330964[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T330964[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@5:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@5:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@IPAU1234@@Z ENDP ; std::_Allocate<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Move@AAI@std@@YA$$QAIAAI@Z			; std::_Move<unsigned int &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@I@std@@YAXAAI0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@I@std@@YAXAAI0@Z PROC				; std::swap<unsigned int>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 102  : 	_Ty _Tmp = _Move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAI@std@@YA$$QAIAAI@Z		; std::_Move<unsigned int &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 103  : 	_Left = _Move(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$_Move@AAI@std@@YA$$QAIAAI@Z		; std::_Move<unsigned int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 104  : 	_Right = _Move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$_Move@AAI@std@@YA$$QAIAAI@Z		; std::_Move<unsigned int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 105  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@swap@5:
	DD	1
	DD	$LN4@swap@5
$LN4@swap@5:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap@5
$LN3@swap@5:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@I@std@@YAXAAI0@Z ENDP				; std::swap<unsigned int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@I@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@I@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z PROC ; std::allocator<unsigned int>::allocator<unsigned int><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@I@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ENDP ; std::allocator<unsigned int>::allocator<unsigned int><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
_TEXT	ENDS
PUBLIC	??$?8U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@U0123@@std@@YA_NABV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z ; std::operator==<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?9U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@U0123@@std@@YA_NABV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@U0123@@std@@YA_NABV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z PROC ; std::operator!=<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >, COMDAT

; 270  : 	{	// test for allocator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 271  : 	return (!(_Left == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$?8U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@U0123@@std@@YA_NABV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z ; std::operator==<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >
	add	esp, 8
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 272  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?9U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@U0123@@std@@YA_NABV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z ENDP ; std::operator!=<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$swap@V?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YAXAAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z ; std::swap<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\adl_swap.hpp
;	COMDAT ??$adl_swap@V?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@detail@multi_index@boost@@YAXAAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$adl_swap@V?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@detail@multi_index@boost@@YAXAAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@0@Z PROC ; boost::multi_index::detail::adl_swap<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > >, COMDAT

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 28   : 
; 29   : #if !defined(BOOST_FUNCTION_SCOPE_USING_DECLARATION_BREAKS_ADL)
; 30   :   using std::swap;
; 31   :   swap(x,y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	??$swap@V?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YAXAAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z ; std::swap<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > >
	add	esp, 8

; 32   : #else
; 33   :   std::swap(x,y);
; 34   : #endif
; 35   : 
; 36   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$adl_swap@V?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@detail@multi_index@boost@@YAXAAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@0@Z ENDP ; boost::multi_index::detail::adl_swap<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$_Move@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YA$$QAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@AAPAU1234@@Z ; std::_Move<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > * &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YAXAAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YAXAAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@0@Z PROC ; std::swap<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > *>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 102  : 	_Ty _Tmp = _Move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YA$$QAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@AAPAU1234@@Z ; std::_Move<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > * &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 103  : 	_Left = _Move(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$_Move@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YA$$QAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@AAPAU1234@@Z ; std::_Move<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 104  : 	_Right = _Move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$_Move@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YA$$QAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@AAPAU1234@@Z ; std::_Move<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 105  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@swap@6:
	DD	1
	DD	$LN4@swap@6
$LN4@swap@6:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap@6
$LN3@swap@6:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YAXAAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@0@Z ENDP ; std::swap<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@I@std@@YAPAIIPAI@Z
_TEXT	SEGMENT
$T330983 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@I@std@@YAPAIIPAI@Z PROC			; std::_Allocate<unsigned int>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@6

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@6
$LN4@Allocate@6:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate@6
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@6
$LN1@Allocate@6:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T330983[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T330983[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@6:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@6:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@I@std@@YAPAIIPAI@Z ENDP			; std::_Allocate<unsigned int>
_TEXT	ENDS
EXTRN	_ldexp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\detail\float_functions.hpp
;	COMDAT ??R?$call_ldexp@N@hash_detail@boost@@QBENNH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a$ = 8							; size = 8
_b$ = 16						; size = 4
??R?$call_ldexp@N@hash_detail@boost@@QBENNH@Z PROC	; boost::hash_detail::call_ldexp<double>::operator(), COMDAT
; _this$ = ecx

; 57   :             {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 58   :                 using namespace std;
; 59   :                 return ldexp(a, b);

	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _a$[ebp]
	fstp	QWORD PTR [esp]
	call	_ldexp
	add	esp, 12					; 0000000cH

; 60   :             }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??R?$call_ldexp@N@hash_detail@boost@@QBENNH@Z ENDP	; boost::hash_detail::call_ldexp<double>::operator()
_TEXT	ENDS
EXTRN	_frexp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??R?$call_frexp@N@hash_detail@boost@@QBENNPAH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a$ = 8							; size = 8
_b$ = 16						; size = 4
??R?$call_frexp@N@hash_detail@boost@@QBENNPAH@Z PROC	; boost::hash_detail::call_frexp<double>::operator(), COMDAT
; _this$ = ecx

; 72   :             {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 73   :                 using namespace std;
; 74   :                 return frexp(a, b);

	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _a$[ebp]
	fstp	QWORD PTR [esp]
	call	_frexp
	add	esp, 12					; 0000000cH

; 75   :             }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??R?$call_frexp@N@hash_detail@boost@@QBENNPAH@Z ENDP	; boost::hash_detail::call_frexp<double>::operator()
_TEXT	ENDS
PUBLIC	??$_Destroy@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@@Z ; std::_Destroy<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@@Z ; std::_Destroy<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 4

; 214  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::destroy
_TEXT	ENDS
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
xdata$x	SEGMENT
__unwindtable$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z$0
__ehfuncinfo$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_r$ = 8							; size = 4
??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>, COMDAT
; _this$ = ecx

; 59   :   {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0atomic_count@detail@boost@@QAE@J@Z	; boost::detail::atomic_count::atomic_count
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type
__ehhandler$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
;	COMDAT ?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$00@detail@tuples@boost@@SAABU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z
_TEXT	SEGMENT
_tup$ = 8						; size = 4
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$00@detail@tuples@boost@@SAABU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z PROC ; boost::tuples::detail::drop_front<1>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call, COMDAT

; 97   :         static const type& call(const Tuple& tup) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 98   :             return next::call(tup).tail;

	mov	eax, DWORD PTR _tup$[ebp]
	push	eax
	call	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$0A@@detail@tuples@boost@@SAABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@ABU645@@Z ; boost::tuples::detail::drop_front<0>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
	add	esp, 4
	add	eax, 4

; 99   :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$00@detail@tuples@boost@@SAABU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ENDP ; boost::tuples::detail::drop_front<1>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$0A@@detail@tuples@boost@@SAABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@ABU645@@Z
_TEXT	SEGMENT
_tup$ = 8						; size = 4
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$0A@@detail@tuples@boost@@SAABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@ABU645@@Z PROC ; boost::tuples::detail::drop_front<0>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call, COMDAT

; 108  :         static const type& call(const Tuple& tup) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 109  :             return tup;

	mov	eax, DWORD PTR _tup$[ebp]

; 110  :         }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$0A@@detail@tuples@boost@@SAABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@ABU645@@Z ENDP ; boost::tuples::detail::drop_front<0>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$01@detail@tuples@boost@@SAABU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z
_TEXT	SEGMENT
_tup$ = 8						; size = 4
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$01@detail@tuples@boost@@SAABU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z PROC ; boost::tuples::detail::drop_front<2>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call, COMDAT

; 97   :         static const type& call(const Tuple& tup) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 98   :             return next::call(tup).tail;

	mov	eax, DWORD PTR _tup$[ebp]
	push	eax
	call	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$00@detail@tuples@boost@@SAABU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ; boost::tuples::detail::drop_front<1>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
	add	esp, 4
	add	eax, 1

; 99   :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$01@detail@tuples@boost@@SAABU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ENDP ; boost::tuples::detail::drop_front<2>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$02@detail@tuples@boost@@SAABU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z
_TEXT	SEGMENT
_tup$ = 8						; size = 4
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$02@detail@tuples@boost@@SAABU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z PROC ; boost::tuples::detail::drop_front<3>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call, COMDAT

; 97   :         static const type& call(const Tuple& tup) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 98   :             return next::call(tup).tail;

	mov	eax, DWORD PTR _tup$[ebp]
	push	eax
	call	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$01@detail@tuples@boost@@SAABU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ; boost::tuples::detail::drop_front<2>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
	add	esp, 4
	add	eax, 1

; 99   :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$02@detail@tuples@boost@@SAABU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ENDP ; boost::tuples::detail::drop_front<3>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
_TEXT	ENDS
PUBLIC	??_7?$sp_counted_impl_p@E@detail@boost@@6B@	; boost::detail::sp_counted_impl_p<unsigned char>::`vftable'
PUBLIC	??0sp_counted_base@detail@boost@@QAE@XZ		; boost::detail::sp_counted_base::sp_counted_base
PUBLIC	??_R4?$sp_counted_impl_p@E@detail@boost@@6B@	; boost::detail::sp_counted_impl_p<unsigned char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$sp_counted_impl_p@E@detail@boost@@@8	; boost::detail::sp_counted_impl_p<unsigned char> `RTTI Type Descriptor'
PUBLIC	??_R3?$sp_counted_impl_p@E@detail@boost@@8	; boost::detail::sp_counted_impl_p<unsigned char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$sp_counted_impl_p@E@detail@boost@@8	; boost::detail::sp_counted_impl_p<unsigned char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$sp_counted_impl_p@E@detail@boost@@8 ; boost::detail::sp_counted_impl_p<unsigned char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@sp_counted_base@detail@boost@@8	; boost::detail::sp_counted_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVsp_counted_base@detail@boost@@@8	; boost::detail::sp_counted_base `RTTI Type Descriptor'
PUBLIC	??_R3sp_counted_base@detail@boost@@8		; boost::detail::sp_counted_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2sp_counted_base@detail@boost@@8		; boost::detail::sp_counted_base::`RTTI Base Class Array'
PUBLIC	?dispose@?$sp_counted_impl_p@E@detail@boost@@UAEXXZ ; boost::detail::sp_counted_impl_p<unsigned char>::dispose
PUBLIC	?destroy@sp_counted_base@detail@boost@@UAEXXZ	; boost::detail::sp_counted_base::destroy
PUBLIC	?get_deleter@?$sp_counted_impl_p@E@detail@boost@@UAEPAXABVtype_info@@@Z ; boost::detail::sp_counted_impl_p<unsigned char>::get_deleter
EXTRN	??_E?$sp_counted_impl_p@E@detail@boost@@UAEPAXI@Z:PROC ; boost::detail::sp_counted_impl_p<unsigned char>::`vector deleting destructor'
;	COMDAT ??_R2sp_counted_base@detail@boost@@8
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\sp_counted_impl.hpp
rdata$r	SEGMENT
??_R2sp_counted_base@detail@boost@@8 DD FLAT:??_R1A@?0A@EA@sp_counted_base@detail@boost@@8 ; boost::detail::sp_counted_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3sp_counted_base@detail@boost@@8
rdata$r	SEGMENT
??_R3sp_counted_base@detail@boost@@8 DD 00H		; boost::detail::sp_counted_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2sp_counted_base@detail@boost@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVsp_counted_base@detail@boost@@@8
_DATA	SEGMENT
??_R0?AVsp_counted_base@detail@boost@@@8 DD FLAT:??_7type_info@@6B@ ; boost::detail::sp_counted_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsp_counted_base@detail@boost@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@sp_counted_base@detail@boost@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@sp_counted_base@detail@boost@@8 DD FLAT:??_R0?AVsp_counted_base@detail@boost@@@8 ; boost::detail::sp_counted_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3sp_counted_base@detail@boost@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$sp_counted_impl_p@E@detail@boost@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$sp_counted_impl_p@E@detail@boost@@8 DD FLAT:??_R0?AV?$sp_counted_impl_p@E@detail@boost@@@8 ; boost::detail::sp_counted_impl_p<unsigned char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$sp_counted_impl_p@E@detail@boost@@8
rdata$r	ENDS
;	COMDAT ??_R2?$sp_counted_impl_p@E@detail@boost@@8
rdata$r	SEGMENT
??_R2?$sp_counted_impl_p@E@detail@boost@@8 DD FLAT:??_R1A@?0A@EA@?$sp_counted_impl_p@E@detail@boost@@8 ; boost::detail::sp_counted_impl_p<unsigned char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@sp_counted_base@detail@boost@@8
rdata$r	ENDS
;	COMDAT ??_R3?$sp_counted_impl_p@E@detail@boost@@8
rdata$r	SEGMENT
??_R3?$sp_counted_impl_p@E@detail@boost@@8 DD 00H	; boost::detail::sp_counted_impl_p<unsigned char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$sp_counted_impl_p@E@detail@boost@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$sp_counted_impl_p@E@detail@boost@@@8
_DATA	SEGMENT
??_R0?AV?$sp_counted_impl_p@E@detail@boost@@@8 DD FLAT:??_7type_info@@6B@ ; boost::detail::sp_counted_impl_p<unsigned char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$sp_counted_impl_p@E@detail@boost@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$sp_counted_impl_p@E@detail@boost@@6B@
rdata$r	SEGMENT
??_R4?$sp_counted_impl_p@E@detail@boost@@6B@ DD 00H	; boost::detail::sp_counted_impl_p<unsigned char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$sp_counted_impl_p@E@detail@boost@@@8
	DD	FLAT:??_R3?$sp_counted_impl_p@E@detail@boost@@8
rdata$r	ENDS
;	COMDAT ??_7?$sp_counted_impl_p@E@detail@boost@@6B@
CONST	SEGMENT
??_7?$sp_counted_impl_p@E@detail@boost@@6B@ DD FLAT:??_R4?$sp_counted_impl_p@E@detail@boost@@6B@ ; boost::detail::sp_counted_impl_p<unsigned char>::`vftable'
	DD	FLAT:??_E?$sp_counted_impl_p@E@detail@boost@@UAEPAXI@Z
	DD	FLAT:?dispose@?$sp_counted_impl_p@E@detail@boost@@UAEXXZ
	DD	FLAT:?destroy@sp_counted_base@detail@boost@@UAEXXZ
	DD	FLAT:?get_deleter@?$sp_counted_impl_p@E@detail@boost@@UAEPAXABVtype_info@@@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0?$sp_counted_impl_p@E@detail@boost@@QAE@PAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_px$ = 8						; size = 4
??0?$sp_counted_impl_p@E@detail@boost@@QAE@PAE@Z PROC	; boost::detail::sp_counted_impl_p<unsigned char>::sp_counted_impl_p<unsigned char>, COMDAT
; _this$ = ecx

; 67   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0sp_counted_base@detail@boost@@QAE@XZ	; boost::detail::sp_counted_base::sp_counted_base
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$sp_counted_impl_p@E@detail@boost@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _px$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 68   : #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
; 69   :         boost::sp_scalar_constructor_hook( px, sizeof(X), this );
; 70   : #endif
; 71   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$sp_counted_impl_p@E@detail@boost@@QAE@PAE@Z ENDP	; boost::detail::sp_counted_impl_p<unsigned char>::sp_counted_impl_p<unsigned char>
_TEXT	ENDS
PUBLIC	??_7sp_counted_base@detail@boost@@6B@		; boost::detail::sp_counted_base::`vftable'
PUBLIC	??_R4sp_counted_base@detail@boost@@6B@		; boost::detail::sp_counted_base::`RTTI Complete Object Locator'
EXTRN	??_Esp_counted_base@detail@boost@@UAEPAXI@Z:PROC ; boost::detail::sp_counted_base::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R4sp_counted_base@detail@boost@@6B@
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\sp_counted_base_w32.hpp
rdata$r	SEGMENT
??_R4sp_counted_base@detail@boost@@6B@ DD 00H		; boost::detail::sp_counted_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsp_counted_base@detail@boost@@@8
	DD	FLAT:??_R3sp_counted_base@detail@boost@@8
rdata$r	ENDS
;	COMDAT ??_7sp_counted_base@detail@boost@@6B@
CONST	SEGMENT
??_7sp_counted_base@detail@boost@@6B@ DD FLAT:??_R4sp_counted_base@detail@boost@@6B@ ; boost::detail::sp_counted_base::`vftable'
	DD	FLAT:??_Esp_counted_base@detail@boost@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?destroy@sp_counted_base@detail@boost@@UAEXXZ
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0sp_counted_base@detail@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0sp_counted_base@detail@boost@@QAE@XZ PROC		; boost::detail::sp_counted_base::sp_counted_base, COMDAT
; _this$ = ecx

; 50   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7sp_counted_base@detail@boost@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1

; 51   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sp_counted_base@detail@boost@@QAE@XZ ENDP		; boost::detail::sp_counted_base::sp_counted_base
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?destroy@sp_counted_base@detail@boost@@UAEXXZ
_TEXT	SEGMENT
tv70 = -232						; size = 4
$T331014 = -224						; size = 4
$T331015 = -212						; size = 4
_this$ = -8						; size = 4
?destroy@sp_counted_base@detail@boost@@UAEXXZ PROC	; boost::detail::sp_counted_base::destroy, COMDAT
; _this$ = ecx

; 65   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   :         delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T331015[ebp], eax
	mov	ecx, DWORD PTR $T331015[ebp]
	mov	DWORD PTR $T331014[ebp], ecx
	cmp	DWORD PTR $T331014[ebp], 0
	je	SHORT $LN3@destroy
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T331014[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T331014[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@destroy
$LN3@destroy:
	mov	DWORD PTR tv70[ebp], 0
$LN1@destroy:

; 67   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?destroy@sp_counted_base@detail@boost@@UAEXXZ ENDP	; boost::detail::sp_counted_base::destroy
_TEXT	ENDS
PUBLIC	??1sp_counted_base@detail@boost@@UAE@XZ		; boost::detail::sp_counted_base::~sp_counted_base
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gsp_counted_base@detail@boost@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gsp_counted_base@detail@boost@@UAEPAXI@Z PROC	; boost::detail::sp_counted_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1sp_counted_base@detail@boost@@UAE@XZ	; boost::detail::sp_counted_base::~sp_counted_base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gsp_counted_base@detail@boost@@UAEPAXI@Z ENDP	; boost::detail::sp_counted_base::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1sp_counted_base@detail@boost@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1sp_counted_base@detail@boost@@UAE@XZ PROC		; boost::detail::sp_counted_base::~sp_counted_base, COMDAT
; _this$ = ecx

; 54   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7sp_counted_base@detail@boost@@6B@

; 55   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1sp_counted_base@detail@boost@@UAE@XZ ENDP		; boost::detail::sp_counted_base::~sp_counted_base
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\sp_counted_impl.hpp
_TEXT	ENDS
;	COMDAT ?dispose@?$sp_counted_impl_p@E@detail@boost@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?dispose@?$sp_counted_impl_p@E@detail@boost@@UAEXXZ PROC ; boost::detail::sp_counted_impl_p<unsigned char>::dispose, COMDAT
; _this$ = ecx

; 74   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
; 76   :         boost::sp_scalar_destructor_hook( px_, sizeof(X), this );
; 77   : #endif
; 78   :         boost::checked_delete( px_ );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$checked_delete@E@boost@@YAXPAE@Z	; boost::checked_delete<unsigned char>
	add	esp, 4

; 79   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dispose@?$sp_counted_impl_p@E@detail@boost@@UAEXXZ ENDP ; boost::detail::sp_counted_impl_p<unsigned char>::dispose
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_deleter@?$sp_counted_impl_p@E@detail@boost@@UAEPAXABVtype_info@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?get_deleter@?$sp_counted_impl_p@E@detail@boost@@UAEPAXABVtype_info@@@Z PROC ; boost::detail::sp_counted_impl_p<unsigned char>::get_deleter, COMDAT
; _this$ = ecx

; 82   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   :         return 0;

	xor	eax, eax

; 84   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?get_deleter@?$sp_counted_impl_p@E@detail@boost@@UAEPAXABVtype_info@@@Z ENDP ; boost::detail::sp_counted_impl_p<unsigned char>::get_deleter
_TEXT	ENDS
PUBLIC	??_7?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@6B@ ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`vftable'
PUBLIC	??_R4?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@6B@ ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@@8 ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)> `RTTI Type Descriptor'
PUBLIC	??_R3?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8 ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8 ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8 ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?dispose@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEXXZ ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::dispose
PUBLIC	?get_deleter@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEPAXABVtype_info@@@Z ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::get_deleter
EXTRN	??_E?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEPAXI@Z:PROC ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8 DD FLAT:??_R0?AV?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@@8 ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8
rdata$r	ENDS
;	COMDAT ??_R2?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8
rdata$r	SEGMENT
??_R2?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8 DD FLAT:??_R1A@?0A@EA@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8 ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@sp_counted_base@detail@boost@@8
rdata$r	ENDS
;	COMDAT ??_R3?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8
rdata$r	SEGMENT
??_R3?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8 DD 00H ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@@8
_DATA	SEGMENT
??_R0?AV?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@@8 DD FLAT:??_7type_info@@6B@ ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@6B@
rdata$r	SEGMENT
??_R4?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@6B@ DD 00H ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@@8
	DD	FLAT:??_R3?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@8
rdata$r	ENDS
;	COMDAT ??_7?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@6B@
CONST	SEGMENT
??_7?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@6B@ DD FLAT:??_R4?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@6B@ ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`vftable'
	DD	FLAT:??_E?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEPAXI@Z
	DD	FLAT:?dispose@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEXXZ
	DD	FLAT:?destroy@sp_counted_base@detail@boost@@UAEXXZ
	DD	FLAT:?get_deleter@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEPAXABVtype_info@@@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@QAE@PAEAAP6AXPAX@Z@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_p$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@QAE@PAEAAP6AXPAX@Z@Z PROC ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>, COMDAT
; _this$ = ecx

; 139  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0sp_counted_base@detail@boost@@QAE@XZ	; boost::detail::sp_counted_base::sp_counted_base
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx

; 140  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@QAE@PAEAAP6AXPAX@Z@Z ENDP ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?dispose@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?dispose@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEXXZ PROC ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::dispose, COMDAT
; _this$ = ecx

; 147  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 148  :         del( ptr );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 149  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dispose@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEXXZ ENDP ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::dispose
_TEXT	ENDS
PUBLIC	??_R0P6AXPAX@Z@8				; void (__cdecl*)(void *) `RTTI Type Descriptor'
EXTRN	??8type_info@@QBE_NABV0@@Z:PROC			; type_info::operator==
;	COMDAT ??_R0P6AXPAX@Z@8
_DATA	SEGMENT
??_R0P6AXPAX@Z@8 DD FLAT:??_7type_info@@6B@		; void (__cdecl*)(void *) `RTTI Type Descriptor'
	DD	00H
	DB	'.P6AXPAX@Z', 00H
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?get_deleter@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEPAXABVtype_info@@@Z
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
_ti$ = 8						; size = 4
?get_deleter@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEPAXABVtype_info@@@Z PROC ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::get_deleter, COMDAT
; _this$ = ecx

; 152  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 153  :         return ti == BOOST_SP_TYPEID(D)? &reinterpret_cast<char&>( del ): 0;

	push	OFFSET ??_R0P6AXPAX@Z@8
	mov	ecx, DWORD PTR _ti$[ebp]
	call	??8type_info@@QBE_NABV0@@Z		; type_info::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@get_delete
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv70[ebp], ecx
	jmp	SHORT $LN4@get_delete
$LN3@get_delete:
	mov	DWORD PTR tv70[ebp], 0
$LN4@get_delete:
	mov	eax, DWORD PTR tv70[ebp]

; 154  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_deleter@?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEPAXABVtype_info@@@Z ENDP ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::get_deleter
_TEXT	ENDS
PUBLIC	??1?$sp_counted_impl_p@E@detail@boost@@UAE@XZ	; boost::detail::sp_counted_impl_p<unsigned char>::~sp_counted_impl_p<unsigned char>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$sp_counted_impl_p@E@detail@boost@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$sp_counted_impl_p@E@detail@boost@@UAEPAXI@Z PROC	; boost::detail::sp_counted_impl_p<unsigned char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$sp_counted_impl_p@E@detail@boost@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$sp_counted_impl_p@E@detail@boost@@UAEPAXI@Z ENDP	; boost::detail::sp_counted_impl_p<unsigned char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAE@XZ ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::~sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEPAXI@Z PROC ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAEPAXI@Z ENDP ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$sp_counted_impl_p@E@detail@boost@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$sp_counted_impl_p@E@detail@boost@@UAE@XZ PROC	; boost::detail::sp_counted_impl_p<unsigned char>::~sp_counted_impl_p<unsigned char>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1sp_counted_base@detail@boost@@UAE@XZ	; boost::detail::sp_counted_base::~sp_counted_base
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$sp_counted_impl_p@E@detail@boost@@UAE@XZ ENDP	; boost::detail::sp_counted_impl_p<unsigned char>::~sp_counted_impl_p<unsigned char>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAE@XZ PROC ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::~sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1sp_counted_base@detail@boost@@UAE@XZ	; boost::detail::sp_counted_base::~sp_counted_base
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$sp_counted_impl_pd@PAEP6AXPAX@Z@detail@boost@@UAE@XZ ENDP ; boost::detail::sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>::~sp_counted_impl_pd<unsigned char *,void (__cdecl*)(void *)>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PBI@std@@YA?AUrandom_access_iterator_tag@0@ABQBI@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PBI@std@@YA?AUrandom_access_iterator_tag@0@ABQBI@Z PROC ; std::_Iter_cat<unsigned int const *>, COMDAT

; 476  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat@2:
	DD	1
	DD	$LN4@Iter_cat@2
$LN4@Iter_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat@2
$LN3@Iter_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PBI@std@@YA?AUrandom_access_iterator_tag@0@ABQBI@Z ENDP ; std::_Iter_cat<unsigned int const *>
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@I@std@@YAXPBIPB_WI@Z		; std::_Debug_pointer<unsigned int>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Distance2@PBIH@std@@YAXPBI0AAHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@PBIH@std@@YAXPBI0AAHUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<unsigned int const *,int>, COMDAT

; 885  : 	{	// add to _Off distance between random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 886  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 887  : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Distance2

; 888  : 		{	// check for null pointers
; 889  : 		_DEBUG_POINTER(_First);

	push	889					; 00000379H
	push	OFFSET ??_C@_1JA@MAMBAKEI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@I@std@@YAXPBIPB_WI@Z	; std::_Debug_pointer<unsigned int>
	add	esp, 12					; 0000000cH

; 890  : 		_DEBUG_POINTER(_Last);

	push	890					; 0000037aH
	push	OFFSET ??_C@_1JA@MAMBAKEI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@I@std@@YAXPBIPB_WI@Z	; std::_Debug_pointer<unsigned int>
	add	esp, 12					; 0000000cH
$LN1@Distance2:

; 891  : 		}
; 892  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 893  : 
; 894  : 	_Off += _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR __Off$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [edx], eax

; 895  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Distance2@PBIH@std@@YAXPBI0AAHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<unsigned int const *,int>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Advance@PBIH@std@@YAXAAPBIHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Advance@PBIH@std@@YAXAAPBIHUrandom_access_iterator_tag@0@@Z PROC ; std::_Advance<unsigned int const *,int>, COMDAT

; 840  : 	{	// increment iterator by offset, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 841  : 	_Where += _Off;

	mov	eax, DWORD PTR __Where$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [ecx], eax

; 842  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Advance@PBIH@std@@YAXAAPBIHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance<unsigned int const *,int>
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\checked_delete.hpp
_TEXT	ENDS
;	COMDAT ??$checked_delete@E@boost@@YAXPAE@Z
_TEXT	SEGMENT
$T331056 = -200						; size = 4
_x$ = 8							; size = 4
??$checked_delete@E@boost@@YAXPAE@Z PROC		; boost::checked_delete<unsigned char>, COMDAT

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   :     // intentionally complex - simplification causes regressions
; 32   :     typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
; 33   :     (void) sizeof(type_must_be_complete);
; 34   :     delete x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR $T331056[ebp], eax
	mov	ecx, DWORD PTR $T331056[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 35   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$checked_delete@E@boost@@YAXPAE@Z ENDP		; boost::checked_delete<unsigned char>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@PB_WI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@PB_WI@Z PROC ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >, COMDAT

; 684  : 	{	// test pointer for non-singularity, arbitrary type

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 685  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@PB_WI@Z ENDP ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > >
_TEXT	ENDS
PUBLIC	??$_Med3@PAH@std@@YAXPAH00@Z			; std::_Med3<int *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Median@PAH@std@@YAXPAH00@Z
_TEXT	SEGMENT
__Step$321695 = -8					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAH@std@@YAXPAH00@Z PROC			; std::_Median<int *>, COMDAT

; 3535 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3536 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median

; 3537 : 		{	// median of nine
; 3538 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$321695[ebp], eax

; 3539 : 		_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	eax, DWORD PTR __Step$321695[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR __Step$321695[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAH@std@@YAXPAH00@Z		; std::_Med3<int *>
	add	esp, 12					; 0000000cH

; 3540 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	eax, DWORD PTR __Step$321695[ebp]
	mov	ecx, DWORD PTR __Mid$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$321695[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Mid$[ebp]
	sub	edx, ecx
	push	edx
	call	??$_Med3@PAH@std@@YAXPAH00@Z		; std::_Med3<int *>
	add	esp, 12					; 0000000cH

; 3541 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$321695[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Step$321695[ebp]
	shl	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	call	??$_Med3@PAH@std@@YAXPAH00@Z		; std::_Med3<int *>
	add	esp, 12					; 0000000cH

; 3542 : 		_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	eax, DWORD PTR __Step$321695[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$321695[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	??$_Med3@PAH@std@@YAXPAH00@Z		; std::_Med3<int *>
	add	esp, 12					; 0000000cH

; 3543 : 		}
; 3544 : 	else

	jmp	SHORT $LN3@Median
$LN2@Median:

; 3545 : 		_Med3(_First, _Mid, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Med3@PAH@std@@YAXPAH00@Z		; std::_Med3<int *>
	add	esp, 12					; 0000000cH
$LN3@Median:

; 3546 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAH@std@@YAXPAH00@Z ENDP			; std::_Median<int *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z PROC		; std::_Debug_lt<int,int>, COMDAT

; 624  : 	{	// test if _Left < _Right and operator< is strict weak ordering

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 625  : 	if (!(_Left < _Right))

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN3@Debug_lt@2

; 626  : 		return (false);

	xor	al, al
	jmp	SHORT $LN4@Debug_lt@2
	jmp	SHORT $LN2@Debug_lt@2
$LN3@Debug_lt@2:

; 627  : 	else if (_Right < _Left)

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN2@Debug_lt@2

; 628  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_lt@2:

; 629  : 	return (true);

	mov	al, 1
$LN4@Debug_lt@2:

; 630  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z ENDP		; std::_Debug_lt<int,int>
_TEXT	ENDS
PUBLIC	??$swap@H@std@@YAXAAH0@Z			; std::swap<int>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$iter_swap@PAHPAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAHPAH@std@@YAXPAH0@Z PROC			; std::iter_swap<int *,int *>, COMDAT

; 2133 : 	{	// swap *_Left and *_Right

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2134 : 	swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$swap@H@std@@YAXAAH0@Z		; std::swap<int>
	add	esp, 8

; 2135 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$iter_swap@PAHPAH@std@@YAXPAH0@Z ENDP			; std::iter_swap<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Move@AAH@std@@YA$$QAHAAH@Z			; std::_Move<int &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@H@std@@YAXAAH0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@H@std@@YAXAAH0@Z PROC				; std::swap<int>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 102  : 	_Ty _Tmp = _Move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 103  : 	_Left = _Move(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 104  : 	_Right = _Move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 105  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap@7
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@swap@7:
	DD	1
	DD	$LN4@swap@7
$LN4@swap@7:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap@7
$LN3@swap@7:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@H@std@@YAXAAH0@Z ENDP				; std::swap<int>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Move@AAH@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAH@std@@YA$$QAHAAH@Z PROC			; std::_Move<int &>, COMDAT

; 94   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@AAH@std@@YA$$QAHAAH@Z ENDP			; std::_Move<int &>
_TEXT	ENDS
PUBLIC	??$?0AAPAHAAPAH@?$_Pair_base@PAHPAH@std@@QAE@AAPAH0@Z ; std::_Pair_base<int *,int *>::_Pair_base<int *,int *><int * &,int * &>
PUBLIC	??$forward@AAPAH@std@@YAAAPAHAAPAH@Z		; std::forward<int * &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?0AAPAHAAPAH@?$pair@PAHPAH@std@@QAE@AAPAH0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAHAAPAH@?$pair@PAHPAH@std@@QAE@AAPAH0@Z PROC	; std::pair<int *,int *>::pair<int *,int *><int * &,int * &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@AAPAH@std@@YAAAPAHAAPAH@Z	; std::forward<int * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val1$[ebp]
	push	ecx
	call	??$forward@AAPAH@std@@YAAAPAHAAPAH@Z	; std::forward<int * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0AAPAHAAPAH@?$_Pair_base@PAHPAH@std@@QAE@AAPAH0@Z ; std::_Pair_base<int *,int *>::_Pair_base<int *,int *><int * &,int * &>

; 248  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AAPAHAAPAH@?$pair@PAHPAH@std@@QAE@AAPAH0@Z ENDP	; std::pair<int *,int *>::pair<int *,int *><int * &,int * &>
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<int *>
PUBLIC	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z
_TEXT	SEGMENT
$T331076 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z PROC		; std::_Debug_range<int *>, COMDAT

; 727  : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 728  : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T331076[ebp]
	push	ecx
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<int *>
	add	esp, 20					; 00000014H

; 729  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z ENDP		; std::_Debug_range<int *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Unchecked@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAH@std@@YAPAHPAH@Z PROC			; std::_Unchecked<int *>, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 267  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 268  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked@PAH@std@@YAPAHPAH@Z ENDP			; std::_Unchecked<int *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Dist_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Dist_type<int *>, COMDAT

; 849  : 	{	// return distance type from arbitrary argument

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 850  : 	return (0);

	xor	eax, eax

; 851  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Dist_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Dist_type<int *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAHHH@std@@YAXPAHHH$$QAH@Z	; std::_Adjust_heap<int *,int,int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Make_heap@PAHHH@std@@YAXPAH000@Z
_TEXT	SEGMENT
__Val$321764 = -32					; size = 4
__Hole$321760 = -20					; size = 4
__Bottom$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAHHH@std@@YAXPAH000@Z PROC		; std::_Make_heap<int *,int,int>, COMDAT

; 2631 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2632 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Bottom$[ebp], eax

; 2633 : 
; 2634 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$321760[ebp], eax
$LN2@Make_heap:
	cmp	DWORD PTR __Hole$321760[ebp], 0
	jle	SHORT $LN3@Make_heap

; 2635 : 		{	// reheap top half, bottom to top
; 2636 : 		--_Hole;

	mov	eax, DWORD PTR __Hole$321760[ebp]
	sub	eax, 1
	mov	DWORD PTR __Hole$321760[ebp], eax

; 2637 : 		_Ty _Val = _Move(*(_First + _Hole));

	mov	eax, DWORD PTR __Hole$321760[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Val$321764[ebp], eax

; 2638 : 		_Adjust_heap(_First, _Hole, _Bottom,
; 2639 : 			_Move(_Val));

	lea	eax, DWORD PTR __Val$321764[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Bottom$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Hole$321760[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Adjust_heap@PAHHH@std@@YAXPAHHH$$QAH@Z ; std::_Adjust_heap<int *,int,int>
	add	esp, 16					; 00000010H

; 2640 : 		}

	jmp	SHORT $LN2@Make_heap
$LN3@Make_heap:

; 2641 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Make_heap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@Make_heap:
	DD	1
	DD	$LN6@Make_heap
$LN6@Make_heap:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@Make_heap
$LN5@Make_heap:
	DB	95					; 0000005fH
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
??$_Make_heap@PAHHH@std@@YAXPAH000@Z ENDP		; std::_Make_heap<int *,int,int>
_TEXT	ENDS
PUBLIC	??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'p', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_heap@PAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__Root$321776 = -8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Debug_heap@PAH@std@@YAXPAH0@Z PROC			; std::_Debug_heap<int *>, COMDAT

; 2368 : 	{	// test if range is a heap ordered by operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2369 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN10@Debug_heap

; 2370 : 		for (_RanIt _Root = _First; ++_First != _Last; ++_Root)

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Root$321776[ebp], eax
	jmp	SHORT $LN8@Debug_heap
$LN7@Debug_heap:
	mov	eax, DWORD PTR __Root$321776[ebp]
	add	eax, 4
	mov	DWORD PTR __Root$321776[ebp], eax
$LN8@Debug_heap:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	$LN10@Debug_heap

; 2371 : 			if (_DEBUG_LT(*_Root, *_First))

	push	2371					; 00000943H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Root$321776[ebp]
	push	ecx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Debug_heap

; 2372 : 				_DEBUG_ERROR("invalid heap");

	push	2372					; 00000944H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN4@Debug_heap
$LN5@Debug_heap:

; 2373 : 			else if (++_First == _Last)

	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN3@Debug_heap

; 2374 : 				break;

	jmp	SHORT $LN10@Debug_heap
	jmp	SHORT $LN4@Debug_heap
$LN3@Debug_heap:

; 2375 : 			else if (_DEBUG_LT(*_Root, *_First))

	push	2375					; 00000947H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Root$321776[ebp]
	push	ecx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Debug_heap

; 2376 : 				_DEBUG_ERROR("invalid heap");

	push	2376					; 00000948H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN4@Debug_heap:

; 2377 : 	}

	jmp	$LN7@Debug_heap
$LN10@Debug_heap:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_heap@PAH@std@@YAXPAH0@Z ENDP			; std::_Debug_heap<int *>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAH@std@@YAXPAH0@Z			; std::_Pop_heap<int *>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Sort_heap@PAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAH@std@@YAXPAH0@Z PROC			; std::_Sort_heap<int *>, COMDAT

; 2683 : 	{	// order heap by repeatedly popping, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2684 : 	for (; 1 < _Last - _First; --_Last)

	jmp	SHORT $LN3@Sort_heap
$LN2@Sort_heap:
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 4
	mov	DWORD PTR __Last$[ebp], eax
$LN3@Sort_heap:
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	cmp	eax, 1
	jle	SHORT $LN4@Sort_heap

; 2685 : 		_Pop_heap(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap@PAH@std@@YAXPAH0@Z		; std::_Pop_heap<int *>
	add	esp, 8
	jmp	SHORT $LN2@Sort_heap
$LN4@Sort_heap:

; 2686 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_heap@PAH@std@@YAXPAH0@Z ENDP			; std::_Sort_heap<int *>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z	; std::_Move_backward<int *,int *>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Insertion_sort1@PAHH@std@@YAXPAH00@Z
_TEXT	SEGMENT
__First1$321812 = -44					; size = 4
__Val$321802 = -32					; size = 4
__Next1$321801 = -20					; size = 4
__Next$321797 = -8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAHH@std@@YAXPAH00@Z PROC		; std::_Insertion_sort1<int *,int>, COMDAT

; 3493 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3494 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 3495 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$321797[ebp], eax
$LN7@Insertion_:
	mov	eax, DWORD PTR __Next$321797[ebp]
	add	eax, 4
	mov	DWORD PTR __Next$321797[ebp], eax
	mov	ecx, DWORD PTR __Next$321797[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 3496 : 			{	// order next element
; 3497 : 			_BidIt _Next1 = _Next;

	mov	eax, DWORD PTR __Next$321797[ebp]
	mov	DWORD PTR __Next1$321801[ebp], eax

; 3498 : 			_Ty _Val = _Move(*_Next);

	mov	eax, DWORD PTR __Next$321797[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$321802[ebp], ecx

; 3499 : 
; 3500 : 			if (_DEBUG_LT(_Val, *_First))

	push	3500					; 00000dacH
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Val$321802[ebp]
	push	ecx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Insertion_

; 3501 : 				{	// found new earliest element, move to front
; 3502 : 				_Move_backward(_First, _Next, ++_Next1);

	mov	eax, DWORD PTR __Next1$321801[ebp]
	add	eax, 4
	mov	DWORD PTR __Next1$321801[ebp], eax
	mov	ecx, DWORD PTR __Next1$321801[ebp]
	push	ecx
	mov	edx, DWORD PTR __Next$321797[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z ; std::_Move_backward<int *,int *>
	add	esp, 12					; 0000000cH

; 3503 : 				*_First = _Move(_Val);

	lea	eax, DWORD PTR __Val$321802[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 3504 : 				}
; 3505 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 3506 : 				{	// look for insertion point after first
; 3507 : 				for (_BidIt _First1 = _Next1;

	mov	eax, DWORD PTR __Next1$321801[ebp]
	mov	DWORD PTR __First1$321812[ebp], eax
	jmp	SHORT $LN3@Insertion_
$LN2@Insertion_:

; 3508 : 					_DEBUG_LT(_Val, *--_First1);
; 3509 : 					_Next1 = _First1)

	mov	eax, DWORD PTR __First1$321812[ebp]
	mov	DWORD PTR __Next1$321801[ebp], eax
$LN3@Insertion_:
	mov	eax, DWORD PTR __First1$321812[ebp]
	sub	eax, 4
	mov	DWORD PTR __First1$321812[ebp], eax
	push	3508					; 00000db4H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __First1$321812[ebp]
	push	ecx
	lea	edx, DWORD PTR __Val$321802[ebp]
	push	edx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Insertion_

; 3510 : 					*_Next1 = _Move(*_First1);	// move hole down

	mov	eax, DWORD PTR __First1$321812[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Next1$321801[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN2@Insertion_
$LN1@Insertion_:

; 3511 : 				*_Next1 = _Move(_Val);	// insert element in hole

	lea	eax, DWORD PTR __Val$321802[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Next1$321801[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN4@Insertion_:

; 3512 : 				}
; 3513 : 			}

	jmp	$LN7@Insertion_
$LN9@Insertion_:

; 3514 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Insertion_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@Insertion_:
	DD	1
	DD	$LN12@Insertion_
$LN12@Insertion_:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN11@Insertion_
$LN11@Insertion_:
	DB	95					; 0000005fH
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
??$_Insertion_sort1@PAHH@std@@YAXPAH00@Z ENDP		; std::_Insertion_sort1<int *,int>
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAU?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Iter_cat@PAU?$pair@_K_K@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@_K_K@0@@Z ; std::_Iter_cat<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Debug_range@PAU?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@0PB_WI@Z
_TEXT	SEGMENT
$T331097 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAU?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@0PB_WI@Z PROC ; std::_Debug_range<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT

; 727  : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 728  : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T331097[ebp]
	push	ecx
	call	??$_Iter_cat@PAU?$pair@_K_K@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@_K_K@0@@Z ; std::_Iter_cat<std::pair<unsigned __int64,unsigned __int64> *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAU?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::pair<unsigned __int64,unsigned __int64> *>
	add	esp, 20					; 00000014H

; 729  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAU?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@0PB_WI@Z ENDP ; std::_Debug_range<std::pair<unsigned __int64,unsigned __int64> *>
_TEXT	ENDS
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_pointer@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@PB_WI@Z PROC ; std::_Debug_pointer<std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 696  : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 698  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:

; 699  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@PB_WI@Z ENDP ; std::_Debug_pointer<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z PROC		; std::_Debug_pointer<int>, COMDAT

; 696  : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@2

; 698  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin@2:

; 699  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z ENDP		; std::_Debug_pointer<int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@@std@@YA$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AAV1234@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@@std@@YA$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AAV1234@@Z PROC ; std::forward<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@@std@@YA$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AAV1234@@Z ENDP ; std::forward<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$forward@AA_N@std@@YAAA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AA_N@std@@YAAA_NAA_N@Z PROC			; std::forward<bool &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AA_N@std@@YAAA_NAA_N@Z ENDP			; std::forward<bool &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$_Pair_base@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$_Pair_base@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z PROC ; std::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@@std@@YA$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AAV1234@@Z ; std::forward<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@AA_N@std@@YAAA_NAA_N@Z	; std::forward<bool &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+8], dl

; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$_Pair_base@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z ENDP ; std::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z PROC ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ENDP ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAAAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@AAPAU1234@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAAAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@AAPAU1234@@Z PROC ; std::forward<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAAAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@AAPAU1234@@Z ENDP ; std::forward<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$_Pair_base@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$_Pair_base@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z PROC ; std::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAAAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@AAPAU1234@@Z ; std::forward<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl

; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$_Pair_base@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z ENDP ; std::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Move@AAI@std@@YA$$QAIAAI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAI@std@@YA$$QAIAAI@Z PROC			; std::_Move<unsigned int &>, COMDAT

; 94   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@AAI@std@@YA$$QAIAAI@Z ENDP			; std::_Move<unsigned int &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?8U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@U0123@@std@@YA_NABV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@U0123@@std@@YA_NABV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z PROC ; std::operator==<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >, COMDAT

; 262  : 	{	// test for allocator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 263  : 	return (true);

	mov	al, 1

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$?8U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@U0123@@std@@YA_NABV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z ENDP ; std::operator==<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV01@@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >
PUBLIC	??$_Move@AAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YA$$QAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@AAV10@@Z ; std::_Move<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@V?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YAXAAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z
_TEXT	SEGMENT
__Tmp$ = -5						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@V?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YAXAAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z PROC ; std::swap<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > >, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 102  : 	_Ty _Tmp = _Move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YA$$QAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@AAV10@@Z ; std::_Move<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV01@@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >

; 103  : 	_Left = _Move(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$_Move@AAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YA$$QAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@AAV10@@Z ; std::_Move<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > &>
	add	esp, 4

; 104  : 	_Right = _Move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$_Move@AAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YA$$QAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@AAV10@@Z ; std::_Move<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > &>
	add	esp, 4

; 105  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap@8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@swap@8:
	DD	1
	DD	$LN4@swap@8
$LN4@swap@8:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@swap@8
$LN3@swap@8:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@V?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YAXAAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@0@Z ENDP ; std::swap<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Move@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YA$$QAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@AAPAU1234@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YA$$QAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@AAPAU1234@@Z PROC ; std::_Move<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > * &>, COMDAT

; 94   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@YA$$QAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@AAPAU1234@@Z ENDP ; std::_Move<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > * &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@@Z PROC ; std::_Destroy<std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 62   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@@Z ENDP ; std::_Destroy<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV01@@Z PROC ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@I@std@@YAXPBIPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@I@std@@YAXPBIPB_WI@Z PROC		; std::_Debug_pointer<unsigned int>, COMDAT

; 689  : 	{	// test iterator for non-singularity, const pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 690  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@3

; 691  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin@3:

; 692  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@I@std@@YAXPBIPB_WI@Z ENDP		; std::_Debug_pointer<unsigned int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Med3@PAH@std@@YAXPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAH@std@@YAXPAH00@Z PROC			; std::_Med3<int *>, COMDAT

; 3524 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3525 : 	if (_DEBUG_LT(*_Mid, *_First))

	push	3525					; 00000dc5H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@Med3

; 3526 : 		_STD iter_swap(_Mid, _First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8
$LN3@Med3:

; 3527 : 	if (_DEBUG_LT(*_Last, *_Mid))

	push	3527					; 00000dc7H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Med3

; 3528 : 		_STD iter_swap(_Last, _Mid);

	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8
$LN2@Med3:

; 3529 : 	if (_DEBUG_LT(*_Mid, *_First))

	push	3529					; 00000dc9H
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Med3

; 3530 : 		_STD iter_swap(_Mid, _First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8
$LN4@Med3:

; 3531 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@PAH@std@@YAXPAH00@Z ENDP			; std::_Med3<int *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAPAH@std@@YAAAPAHAAPAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAH@std@@YAAAPAHAAPAH@Z PROC		; std::forward<int * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAPAH@std@@YAAAPAHAAPAH@Z ENDP		; std::forward<int * &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0AAPAHAAPAH@?$_Pair_base@PAHPAH@std@@QAE@AAPAH0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAHAAPAH@?$_Pair_base@PAHPAH@std@@QAE@AAPAH0@Z PROC ; std::_Pair_base<int *,int *>::_Pair_base<int *,int *><int * &,int * &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@AAPAH@std@@YAAAPAHAAPAH@Z	; std::forward<int * &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@AAPAH@std@@YAAAPAHAAPAH@Z	; std::forward<int * &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx

; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AAPAHAAPAH@?$_Pair_base@PAHPAH@std@@QAE@AAPAH0@Z ENDP ; std::_Pair_base<int *,int *>::_Pair_base<int *,int *><int * &,int * &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z PROC ; std::_Iter_cat<int *>, COMDAT

; 476  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat@3:
	DD	1
	DD	$LN4@Iter_cat@3
$LN4@Iter_cat@3:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat@3
$LN3@Iter_cat@3:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ENDP ; std::_Iter_cat<int *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<int *>, COMDAT

; 714  : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 715  : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang@2

; 716  : 		{	// check for non-null pointers, valid range
; 717  : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH

; 718  : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH

; 719  : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang@2

; 720  : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang@2:

; 721  : 		}
; 722  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<int *>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAHHH@std@@YAXPAHHH$$QAH@Z	; std::_Push_heap<int *,int,int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Adjust_heap@PAHHH@std@@YAXPAHHH$$QAH@Z
_TEXT	SEGMENT
__Idx$ = -20						; size = 4
__Top$ = -8						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
??$_Adjust_heap@PAHHH@std@@YAXPAHHH$$QAH@Z PROC		; std::_Adjust_heap<int *,int,int>, COMDAT

; 2502 : 	{	// percolate _Hole to _Bottom, then push _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2503 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2504 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	eax, DWORD PTR __Hole$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
	jmp	SHORT $LN5@Adjust_hea
$LN4@Adjust_hea:

; 2505 : 
; 2506 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea:
	mov	eax, DWORD PTR __Idx$[ebp]
	cmp	eax, DWORD PTR __Bottom$[ebp]
	jge	SHORT $LN3@Adjust_hea

; 2507 : 		{	// move _Hole down to larger child
; 2508 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	push	2508					; 000009ccH
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-4]
	push	edx
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Adjust_hea

; 2509 : 			--_Idx;

	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Idx$[ebp], eax
$LN2@Adjust_hea:

; 2510 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

	mov	eax, DWORD PTR __Idx$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 2511 : 		_Hole = _Idx;

	mov	eax, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2512 : 		}

	jmp	SHORT $LN4@Adjust_hea
$LN3@Adjust_hea:

; 2513 : 
; 2514 : 	if (_Idx == _Bottom)

	mov	eax, DWORD PTR __Idx$[ebp]
	cmp	eax, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea

; 2515 : 		{	// only child at bottom, move _Hole down to it
; 2516 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR __Bottom$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-4]
	push	edx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 2517 : 		_Hole = _Bottom - 1;

	mov	eax, DWORD PTR __Bottom$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Hole$[ebp], eax
$LN1@Adjust_hea:

; 2518 : 		}
; 2519 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Top$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Hole$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Push_heap@PAHHH@std@@YAXPAHHH$$QAH@Z ; std::_Push_heap<int *,int,int>
	add	esp, 16					; 00000010H

; 2520 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAHHH@std@@YAXPAHHH$$QAH@Z ENDP		; std::_Adjust_heap<int *,int,int>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAHH@std@@YAXPAH00@Z		; std::_Pop_heap_0<int *,int>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Pop_heap@PAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Pop_heap@PAH@std@@YAXPAH0@Z PROC			; std::_Pop_heap<int *>, COMDAT

; 2544 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2545 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last),
; 2546 : 		_Val_type(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAH@std@@YAPAHPAH@Z	; std::_Val_type<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	call	??$_Pop_heap_0@PAHH@std@@YAXPAH00@Z	; std::_Pop_heap_0<int *,int>
	add	esp, 12					; 0000000cH

; 2547 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap@PAH@std@@YAXPAH0@Z ENDP			; std::_Pop_heap<int *>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<int *,int *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T331152 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z PROC		; std::_Move_backward<int *,int *>, COMDAT

; 2638 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2639 : 	return (_Move_backward(_First, _Last,
; 2640 : 		_Dest, _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T331152[ebp], al
	movzx	edx, BYTE PTR $T331152[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<int *,int *>
	add	esp, 16					; 00000010H

; 2641 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z ENDP		; std::_Move_backward<int *,int *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAU?$pair@_K_K@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@_K_K@0@@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAU?$pair@_K_K@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@_K_K@0@@Z PROC ; std::_Iter_cat<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT

; 476  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat@4:
	DD	1
	DD	$LN4@Iter_cat@4
$LN4@Iter_cat@4:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat@4
$LN3@Iter_cat@4:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAU?$pair@_K_K@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@_K_K@0@@Z ENDP ; std::_Iter_cat<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_range2@PAU?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAU?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT

; 714  : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 715  : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang@3

; 716  : 		{	// check for non-null pointers, valid range
; 717  : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@PB_WI@Z ; std::_Debug_pointer<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 12					; 0000000cH

; 718  : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@PB_WI@Z ; std::_Debug_pointer<std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 12					; 0000000cH

; 719  : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang@3

; 720  : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang@3:

; 721  : 		}
; 722  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAU?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$_Move@AAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YA$$QAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YA$$QAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@AAV10@@Z PROC ; std::_Move<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > &>, COMDAT

; 94   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@AAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@@std@@YA$$QAV?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@0@AAV10@@Z ENDP ; std::_Move<std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > > &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Push_heap@PAHHH@std@@YAXPAHHH$$QAH@Z
_TEXT	SEGMENT
__Idx$322015 = -8					; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
??$_Push_heap@PAHHH@std@@YAXPAHHH$$QAH@Z PROC		; std::_Push_heap<int *,int,int>, COMDAT

; 2410 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2411 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	eax, DWORD PTR __Hole$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$322015[ebp], eax
	jmp	SHORT $LN3@Push_heap
$LN2@Push_heap:

; 2412 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 2413 : 		_Idx = (_Hole - 1) / 2)

	mov	eax, DWORD PTR __Hole$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$322015[ebp], eax
$LN3@Push_heap:
	mov	eax, DWORD PTR __Top$[ebp]
	cmp	eax, DWORD PTR __Hole$[ebp]
	jge	SHORT $LN1@Push_heap
	push	2412					; 0000096cH
	push	OFFSET ??_C@_1JC@MFGNOPCO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Idx$322015[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	??$_Debug_lt@HH@std@@YA_NAAH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Push_heap

; 2414 : 		{	// move _Hole up to parent
; 2415 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

	mov	eax, DWORD PTR __Idx$322015[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 2416 : 		_Hole = _Idx;

	mov	eax, DWORD PTR __Idx$322015[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2417 : 		}

	jmp	SHORT $LN2@Push_heap
$LN1@Push_heap:

; 2418 : 
; 2419 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 2420 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Push_heap@PAHHH@std@@YAXPAHHH$$QAH@Z ENDP		; std::_Push_heap<int *,int,int>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAHHH@std@@YAXPAH00$$QAH0@Z	; std::_Pop_heap<int *,int,int>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Pop_heap_0@PAHH@std@@YAXPAH00@Z
_TEXT	SEGMENT
__Val$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAHH@std@@YAXPAH00@Z PROC		; std::_Pop_heap_0<int *,int>, COMDAT

; 2536 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2537 : 	_Ty _Val = _Move(*(_Last - 1));

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 4
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$[ebp], ecx

; 2538 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2539 : 		_Move(_Val), _Dist_type(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Dist_type@PAH@std@@YAPAHPAH@Z	; std::_Dist_type<int *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, 4
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 4
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap@PAHHH@std@@YAXPAH00$$QAH0@Z ; std::_Pop_heap<int *,int,int>
	add	esp, 20					; 00000014H

; 2540 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Pop_heap_0
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Pop_heap_0:
	DD	1
	DD	$LN4@Pop_heap_0
$LN4@Pop_heap_0:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Pop_heap_0
$LN3@Pop_heap_0:
	DB	95					; 0000005fH
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
??$_Pop_heap_0@PAHH@std@@YAXPAH00@Z ENDP		; std::_Pop_heap_0<int *,int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<int *,int *>, COMDAT

; 2627 : 	{	// move [_First, _Last) backwards to [..., _Dest), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2628 : 	ptrdiff_t _Count = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 2629 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2630 : 		_Count * sizeof (*_First));

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR __Dest$[ebp]
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 2631 : 	return (_Dest - _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	eax, ecx

; 2632 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<int *,int *>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Pop_heap@PAHHH@std@@YAXPAH00$$QAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Pop_heap@PAHHH@std@@YAXPAH00$$QAH0@Z PROC		; std::_Pop_heap<int *,int,int>, COMDAT

; 2527 : 	{	// pop *_First to *_Dest and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2528 : 	*_Dest = _Move(*_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 2529 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2530 : 		_Move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Adjust_heap@PAHHH@std@@YAXPAHHH$$QAH@Z ; std::_Adjust_heap<int *,int,int>
	add	esp, 16					; 00000010H

; 2531 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap@PAHHH@std@@YAXPAH00$$QAH0@Z ENDP		; std::_Pop_heap<int *,int,int>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atldef.h
_TEXT	ENDS
;	COMDAT ??__Eclash@Inconsistent_definition_of_symbol__ATL_MIXED@@YAXXZ
text$yc	SEGMENT
$T331175 = -197						; size = 1
??__Eclash@Inconsistent_definition_of_symbol__ATL_MIXED@@YAXXZ PROC ; Inconsistent_definition_of_symbol__ATL_MIXED::`dynamic initializer for 'clash'', COMDAT

; 65   : 	__declspec(selectany) _Please_define_it_the_same_throughout_your_project clash = _Please_define_it_the_same_throughout_your_project ();

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	mov	BYTE PTR $T331175[ebp], al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eclash@Inconsistent_definition_of_symbol__ATL_MIXED@@YAXXZ ENDP ; Inconsistent_definition_of_symbol__ATL_MIXED::`dynamic initializer for 'clash''
text$yc	ENDS
PUBLIC	??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ ; Define_the_symbol__ATL_MIXED::Thank_you::Thank_you
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Eclash@Define_the_symbol__ATL_MIXED@@YAXXZ
text$yc	SEGMENT
??__Eclash@Define_the_symbol__ATL_MIXED@@YAXXZ PROC	; Define_the_symbol__ATL_MIXED::`dynamic initializer for 'clash'', COMDAT

; 81   : 	__declspec(selectany) Thank_you clash = Thank_you();

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?clash@Define_the_symbol__ATL_MIXED@@3UThank_you@1@A ; Define_the_symbol__ATL_MIXED::clash
	call	??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eclash@Define_the_symbol__ATL_MIXED@@YAXXZ ENDP	; Define_the_symbol__ATL_MIXED::`dynamic initializer for 'clash''
text$yc	ENDS
PUBLIC	??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@	; Define_the_symbol__ATL_MIXED::Thank_you::`vftable'
PUBLIC	??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@ ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8 ; Define_the_symbol__ATL_MIXED::Thank_you `RTTI Type Descriptor'
PUBLIC	??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8 ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ ; Define_the_symbol__ATL_MIXED::Thank_you::one
;	COMDAT ??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8 DD FLAT:??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8 ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	ENDS
;	COMDAT ??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	SEGMENT
??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8 DD FLAT:??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8 ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	SEGMENT
??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8 DD 00H	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8
_DATA	SEGMENT
??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8 DD FLAT:??_7type_info@@6B@ ; Define_the_symbol__ATL_MIXED::Thank_you `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUThank_you@Define_the_symbol__ATL_MIXED@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@
rdata$r	SEGMENT
??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@ DD 00H	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8
	DD	FLAT:??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	ENDS
;	COMDAT ??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@
CONST	SEGMENT
??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@ DD FLAT:??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@ ; Define_the_symbol__ATL_MIXED::Thank_you::`vftable'
	DD	FLAT:?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ PROC	; Define_the_symbol__ATL_MIXED::Thank_you::Thank_you, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ ENDP	; Define_the_symbol__ATL_MIXED::Thank_you::Thank_you
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ PROC ; Define_the_symbol__ATL_MIXED::Thank_you::one, COMDAT
; _this$ = ecx

; 79   : 	struct Thank_you { virtual void one(){} };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ ENDP ; Define_the_symbol__ATL_MIXED::Thank_you::one
_TEXT	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_node.hpp
;	COMDAT ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id'', COMDAT

; 45   :   pointer& next(){return next_;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id''
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
text$yc	ENDS
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 71   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 72   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_node.hpp
_TEXT	ENDS
;	COMDAT ??__E?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id'', COMDAT

; 45   :   pointer& next(){return next_;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 45   :   pointer& next(){return next_;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 45   :   pointer& next(){return next_;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
text$yc	ENDS
;	COMDAT ??__E?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA@@YAXXZ
text$yc	SEGMENT
??__E?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA@@YAXXZ PROC ; `dynamic initializer for 'boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer'', COMDAT

; 218  :       FactorySpecifier,LockingPolicy,HolderSpecifier>::init();

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	call	?init@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA_NXZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::init
	mov	BYTE PTR ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA, al ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA@@YAXXZ ENDP ; `dynamic initializer for 'boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer''
text$yc	ENDS
PUBLIC	??1holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::~holder_arg
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fc@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@YAXXZ
text$yd	SEGMENT
??__Fc@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@YAXXZ PROC ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`dynamic atexit destructor for 'c'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A
	call	??1holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fc@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@YAXXZ ENDP ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`dynamic atexit destructor for 'c''
text$yd	ENDS
PUBLIC	??1?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::~hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::~holder_arg, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::~holder_arg
_TEXT	ENDS
PUBLIC	??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::~hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::~hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>
_TEXT	ENDS
PUBLIC	??1?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::~hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
PUBLIC	?delete_all_nodes_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXXZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_all_nodes_
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
xdata$x	SEGMENT
__unwindtable$??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ$1
__ehfuncinfo$??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = ecx

; 268  :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 269  :     delete_all_nodes_();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?delete_all_nodes_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXXZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_all_nodes_

; 270  :   }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::~hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
__unwindfunclet$??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::~hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
__ehhandler$??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?delete_all_nodes_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?delete_all_nodes_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXXZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_all_nodes_, COMDAT
; _this$ = ecx

; 540  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 541  :     super::delete_all_nodes_();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_

; 542  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?delete_all_nodes_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXXZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_all_nodes_
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ??1?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@XZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::~hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>, COMDAT
; _this$ = ecx

; 636  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 637  :     /* the container is guaranteed to be empty by now */
; 638  :   }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@XZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::~hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
_TEXT	ENDS
PUBLIC	?final_delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_delete_node_
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ
_TEXT	SEGMENT
_z$319685 = -56						; size = 4
_y$319681 = -44						; size = 4
_x_end$319677 = -32					; size = 4
_x$319676 = -20						; size = 4
_this$ = -8						; size = 4
?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_, COMDAT
; _this$ = ecx

; 735  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 736  :     for(node_impl_pointer x=buckets.begin(),x_end=buckets.end();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::begin
	mov	DWORD PTR _x$319676[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end
	mov	DWORD PTR _x_end$319677[ebp], eax
	jmp	SHORT $LN5@delete_all
$LN4@delete_all:

; 737  :         x!=x_end;++x){

	mov	eax, DWORD PTR _x$319676[ebp]
	add	eax, 4
	mov	DWORD PTR _x$319676[ebp], eax
$LN5@delete_all:
	mov	eax, DWORD PTR _x$319676[ebp]
	cmp	eax, DWORD PTR _x_end$319677[ebp]
	je	SHORT $LN6@delete_all

; 738  :       node_impl_pointer y=x->next();

	mov	ecx, DWORD PTR _x$319676[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _y$319681[ebp], eax
$LN2@delete_all:

; 739  :       while(y!=x){

	mov	eax, DWORD PTR _y$319681[ebp]
	cmp	eax, DWORD PTR _x$319676[ebp]
	je	SHORT $LN1@delete_all

; 740  :         node_impl_pointer z=y->next();

	mov	ecx, DWORD PTR _y$319681[ebp]
	call	?next@?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@QAEAAPAU1234@XZ ; boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >::next
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _z$319685[ebp], eax

; 741  :         this->final_delete_node_(
; 742  :           static_cast<final_node_type*>(node_type::from_impl(y)));

	mov	eax, DWORD PTR _y$319681[ebp]
	push	eax
	call	?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::from_impl
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final_delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_delete_node_

; 743  :         y=z;

	mov	eax, DWORD PTR _z$319685[ebp]
	mov	DWORD PTR _y$319681[ebp], eax

; 744  :       }

	jmp	SHORT $LN2@delete_all
$LN1@delete_all:

; 745  :     }

	jmp	SHORT $LN4@delete_all
$LN6@delete_all:

; 746  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_
_TEXT	ENDS
PUBLIC	?delete_node_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
;	COMDAT ?final_delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?final_delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_delete_node_, COMDAT
; _this$ = ecx

; 157  :   void final_delete_node_(final_node_type* x){final().delete_node_(x);}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
	mov	ecx, eax
	call	?delete_node_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?final_delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_delete_node_
_TEXT	ENDS
PUBLIC	?delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
;	COMDAT ?delete_node_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?delete_node_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_, COMDAT
; _this$ = ecx

; 534  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 535  :     super::delete_node_(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_

; 536  :     deallocate_node(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::deallocate_node

; 537  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?delete_node_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ?delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_, COMDAT
; _this$ = ecx

; 104  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 105  :     boost::detail::allocator::destroy(&x->value());

	mov	ecx, DWORD PTR _x$[ebp]
	call	?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
	push	eax
	call	??$destroy@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z ; boost::detail::allocator::destroy<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
	add	esp, 4

; 106  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_
_TEXT	ENDS
PUBLIC	?clash@Define_the_symbol__ATL_MIXED@@3UThank_you@1@A ; Define_the_symbol__ATL_MIXED::clash
PUBLIC	?clash@Inconsistent_definition_of_symbol__ATL_MIXED@@3U_Please_define_it_the_same_throughout_your_project@1@A ; Inconsistent_definition_of_symbol__ATL_MIXED::clash
PUBLIC	?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
;	COMDAT ?clash@Define_the_symbol__ATL_MIXED@@3UThank_you@1@A
_BSS	SEGMENT
?clash@Define_the_symbol__ATL_MIXED@@3UThank_you@1@A DD 01H DUP (?) ; Define_the_symbol__ATL_MIXED::clash
_BSS	ENDS
;	COMDAT ?clash@Inconsistent_definition_of_symbol__ATL_MIXED@@3U_Please_define_it_the_same_throughout_your_project@1@A
_BSS	SEGMENT
?clash@Inconsistent_definition_of_symbol__ATL_MIXED@@3U_Please_define_it_the_same_throughout_your_project@1@A DB 01H DUP (?) ; Inconsistent_definition_of_symbol__ATL_MIXED::clash
_BSS	ENDS
;	COMDAT ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA
_BSS	SEGMENT
?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA DB 01H DUP (?) ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_clash$initializer$ DD FLAT:??__Eclash@Inconsistent_definition_of_symbol__ATL_MIXED@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_clash$initializer$ DD FLAT:??__Eclash@Define_the_symbol__ATL_MIXED@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?static_initializer$initializer$@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0P6AXXZA DD FLAT:??__E?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA@@YAXXZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer$initializer$
CRT$XCU	ENDS
END
