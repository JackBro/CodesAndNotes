; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	E:\GitHub\codesandnotes\xy-vsfilter\src\subtitles\Rasterizer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	E:\GitHub\codesandnotes\xy-vsfilter\src\subtitles\libssf\Rasterizer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4ScanLineData@@6B@				; ScanLineData::`RTTI Complete Object Locator'
PUBLIC	??_R3ScanLineData@@8				; ScanLineData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScanLineData@@8				; ScanLineData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScanLineData@@8			; ScanLineData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVScanLineData@@@8			; ScanLineData `RTTI Type Descriptor'
PUBLIC	?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::empty
PUBLIC	??D?$shared_ptr@$$CBVScanLineData@@@boost@@QBEABVScanLineData@@XZ ; boost::shared_ptr<ScanLineData const >::operator*
PUBLIC	??7?$shared_ptr@UOverlay@@@boost@@QBE_NXZ	; boost::shared_ptr<Overlay>::operator!
PUBLIC	??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABVass_synth_priv@@XZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator ass_synth_priv const &
PUBLIC	?value@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABVass_synth_priv@@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::value
PUBLIC	?get@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QBEABVass_synth_priv@@XZ ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::get
PUBLIC	??1?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@XZ ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>
PUBLIC	?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::construct_value
PUBLIC	?construct_value@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@SAXABVrep_type@1234@@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::construct_value
PUBLIC	??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
PUBLIC	??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z ; boost::detail::allocator::construct<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
PUBLIC	?insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
PUBLIC	?bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket
PUBLIC	?find_bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::find_bucket
PUBLIC	??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@ABV4153@H@Z ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
PUBLIC	??R?$equal_to@N@std@@QBE_NABN0@Z		; std::equal_to<double>::operator()
PUBLIC	?link_point@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAE_NABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@Uhashed_unique_tag@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link_point
PUBLIC	?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link
PUBLIC	??R?$call_ldexp@N@hash_detail@boost@@QBENNH@Z	; boost::hash_detail::call_ldexp<double>::operator()
PUBLIC	??R?$call_frexp@N@hash_detail@boost@@QBENNPAH@Z	; boost::hash_detail::call_frexp<double>::operator()
PUBLIC	?hash_float_combine@hash_detail@boost@@YAXAAII@Z ; boost::hash_detail::hash_float_combine
PUBLIC	??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z	; boost::hash_detail::float_hash_impl2<double>
PUBLIC	??$float_hash_impl@N@hash_detail@boost@@YAIN@Z	; boost::hash_detail::float_hash_impl<double>
PUBLIC	??$float_hash_value@N@hash_detail@boost@@YAIN@Z	; boost::hash_detail::float_hash_value<double>
PUBLIC	?hash_value@boost@@YAIN@Z			; boost::hash_value
PUBLIC	??R?$hash@N@boost@@QBEIN@Z			; boost::hash<double>::operator()
PUBLIC	??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@AAV4153@@Z ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
PUBLIC	??Rass_synth_priv_key@@QBEABNABVass_synth_priv@@@Z ; ass_synth_priv_key::operator()
PUBLIC	?key_from_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@CAABNABVass_synth_priv@@@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_from_value
PUBLIC	??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABNXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator double const &
PUBLIC	??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator double const &
PUBLIC	?get_allocator@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::get_allocator
PUBLIC	?get_allocator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::get_allocator
PUBLIC	?size_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEIXZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size_
PUBLIC	?final_size_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEIXZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_size_
PUBLIC	?size@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::size
PUBLIC	?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@0@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link
PUBLIC	?position@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::position
PUBLIC	?swap@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAU1234@@Z ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap
PUBLIC	?swap@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAV1234@@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap
PUBLIC	??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@I@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ; std::allocator<unsigned int>::allocator<unsigned int><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
PUBLIC	??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	?data@?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAIXZ ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data
PUBLIC	?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unchecked_rehash
PUBLIC	?reserve@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::reserve
PUBLIC	?insert_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert_
PUBLIC	??$forward@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAAAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@AAPAU1234@@Z ; std::forward<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &>
PUBLIC	??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$_Pair_base@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z ; std::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>
PUBLIC	??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z ; std::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>
PUBLIC	?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
PUBLIC	?final_insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_insert_
PUBLIC	??$forward@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@@std@@YA$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AAV1234@@Z ; std::forward<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
PUBLIC	??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$_Pair_base@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z ; std::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>
PUBLIC	??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z ; std::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>
PUBLIC	?insert@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AU?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert
PUBLIC	??D?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@XZ ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator*
PUBLIC	?insert@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@ABV4523@@Z ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::insert
PUBLIC	??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type
PUBLIC	??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
PUBLIC	??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@XZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type const &
PUBLIC	?add_ref@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEJXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_ref
PUBLIC	?add_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEXXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_deleter
PUBLIC	??0?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@ABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@@Z ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
PUBLIC	?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert_rep
PUBLIC	?release@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release
PUBLIC	?release_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release_deleter
PUBLIC	?check_erase@?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@CA_NABV1234@@Z ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::check_erase
PUBLIC	?entry@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@PBV4523@@Z ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::entry
PUBLIC	?entry@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABQBV5234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
PUBLIC	?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
PUBLIC	??0?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAE@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@123@PAV?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@123@@Z ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
PUBLIC	?make_iterator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::make_iterator
PUBLIC	?from_value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@SAPAU1234@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::from_value
PUBLIC	??$node_from_value@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@detail@multi_index@boost@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@012@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@0flyweights@2@@Z ; boost::multi_index::detail::node_from_value<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
PUBLIC	?iterator_to@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::iterator_to
PUBLIC	?erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_
PUBLIC	?unlink@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unlink
PUBLIC	?at@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@I@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::at
PUBLIC	?first_nonempty@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::first_nonempty
PUBLIC	?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase_
PUBLIC	?erase_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_
PUBLIC	?final_erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_erase_
PUBLIC	?increment@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAXAAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@1@Z ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::increment
PUBLIC	??E?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAEAAV0123@XZ ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator++
PUBLIC	??Eboost@@YA?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@0@AAV1230@H@Z ; boost::operator++
PUBLIC	?get_node@?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::get_node
PUBLIC	?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase
PUBLIC	?erase@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@@Z ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::erase
PUBLIC	?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::factory
PUBLIC	?mutex@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAUmutex_type@no_locking@34@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::mutex
PUBLIC	??B?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QBEABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@XZ ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::operator boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const * const &
PUBLIC	??$erase@P6A_NABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@@Z@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAXABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@P6A_N0@Z@Z ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::erase<bool (__cdecl*)(boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> > const &)>
PUBLIC	??1?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::~refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
PUBLIC	??$?0N@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@AAN@Z ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type<double>
PUBLIC	??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert<double>
PUBLIC	??$?0N@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@AAN@Z ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_><double>
PUBLIC	??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
PUBLIC	??B?$shared_ptr@E@boost@@QBEPQ01@PAEXZ		; boost::shared_ptr<unsigned char>::operator unsigned char * boost::shared_ptr<unsigned char>::*
PUBLIC	??7?$shared_ptr@E@boost@@QBE_NXZ		; boost::shared_ptr<unsigned char>::operator!
PUBLIC	??_GScanLineData@@UAEPAXI@Z			; ScanLineData::`scalar deleting destructor'
PUBLIC	??0CPoint@@QAE@UtagPOINT@@@Z			; CPoint::CPoint
PUBLIC	??9CPoint@@QBEHUtagPOINT@@@Z			; CPoint::operator!=
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
PUBLIC	??$addressof@$$CBH@std@@YAPBHABH@Z		; std::addressof<int const >
PUBLIC	??$forward@AAH@std@@YAAAHAAH@Z			; std::forward<int &>
PUBLIC	??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z ; std::allocator<int>::construct<int &>
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ; std::_Cons_val<std::allocator<int>,int,int &>
PUBLIC	??$_Construct@HABH@std@@YAXPAHABH@Z		; std::_Construct<int,int const &>
PUBLIC	?construct@?$allocator@H@std@@QAEXPAHABH@Z	; std::allocator<int>::construct
PUBLIC	??$forward@ABH@std@@YAABHABH@Z			; std::forward<int const &>
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ; std::_Cons_val<std::allocator<int>,int,int const &>
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
PUBLIC	??0?$_Pair_base@_J_J@std@@QAE@$$QA_J0@Z		; std::_Pair_base<__int64,__int64>::_Pair_base<__int64,__int64>
PUBLIC	??$move@AA_J@std@@YA$$QA_JAA_J@Z		; std::move<__int64 &>
PUBLIC	??0?$pair@_J_J@std@@QAE@$$QA_J0@Z		; std::pair<__int64,__int64>::pair<__int64,__int64>
PUBLIC	??$forward@_J@std@@YA$$QA_JAA_J@Z		; std::forward<__int64>
PUBLIC	??$?0_J_J@?$_Pair_base@_K_K@std@@QAE@$$QA_J0@Z	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><__int64,__int64>
PUBLIC	??$?0_J_J@?$pair@_K_K@std@@QAE@$$QAU?$pair@_J_J@1@@Z ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><__int64,__int64>
PUBLIC	?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
PUBLIC	?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
PUBLIC	??$addressof@$$CBU?$pair@_K_K@std@@@std@@YAPBU?$pair@_K_K@0@ABU10@@Z ; std::addressof<std::pair<unsigned __int64,unsigned __int64> const >
PUBLIC	??$?0_K_K@?$pair@_K_K@std@@QAE@AAU01@@Z		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>
PUBLIC	??$forward@AAU?$pair@_K_K@std@@@std@@YAAAU?$pair@_K_K@0@AAU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> &>
PUBLIC	??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct<std::pair<unsigned __int64,unsigned __int64> &>
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@AAU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> &>
PUBLIC	??0?$_Pair_base@_K_K@std@@QAE@ABU01@@Z		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>
PUBLIC	??0?$pair@_K_K@std@@QAE@ABU01@@Z		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64>
PUBLIC	??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z ; std::_Construct<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>
PUBLIC	?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct
PUBLIC	??$forward@ABU?$pair@_K_K@std@@@std@@YAABU?$pair@_K_K@0@ABU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> const &>
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@ABU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>
PUBLIC	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
PUBLIC	??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z	; std::_Container_base0::_Swap_all
PUBLIC	?_Inside@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBE_NPBU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Inside
PUBLIC	??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate
PUBLIC	??$_Val_type@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@PAU10@@Z ; std::_Val_type<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??$_Uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@@Z ; std::_Uninitialized_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
PUBLIC	?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size
PUBLIC	?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity
PUBLIC	?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::max_size
PUBLIC	?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size
PUBLIC	?_Grow_to@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEII@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Grow_to
PUBLIC	?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
PUBLIC	?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
PUBLIC	?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Orphan_range
PUBLIC	??$addressof@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAU10@@Z ; std::addressof<std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??0?$_Pair_base@_K_K@std@@QAE@$$QA_K0@Z		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>
PUBLIC	??$forward@_K@std@@YA$$QA_KAA_K@Z		; std::forward<unsigned __int64>
PUBLIC	??$?0_K_K@?$pair@_K_K@std@@QAE@$$QAU01@@Z	; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>
PUBLIC	?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@U32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
PUBLIC	?get_allocator@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$allocator@U?$pair@_K_K@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::get_allocator
PUBLIC	??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ; std::forward<std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??$?9U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ; std::operator!=<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Assign_rv
PUBLIC	??$forward@V?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ; std::forward<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
PUBLIC	??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator=
PUBLIC	??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ; std::operator==<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??$_Move@AAPAU?$pair@_K_K@std@@@std@@YA$$QAPAU?$pair@_K_K@0@AAPAU10@@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> * &>
PUBLIC	??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Move@AAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ; std::_Move<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > &>
PUBLIC	?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::swap
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
PUBLIC	??$max@_K@std@@YAAB_KAB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??$forward@AA_K@std@@YAAA_KAA_K@Z		; std::forward<unsigned __int64 &>
PUBLIC	??$?0AA_KAA_K@?$_Pair_base@_K_K@std@@QAE@AA_K0@Z ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>
PUBLIC	??$?0AA_KAA_K@?$pair@_K_K@std@@QAE@AA_K0@Z	; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>
PUBLIC	??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z		; std::forward<unsigned __int64 const >
PUBLIC	??$?0$$CB_K$$CB_K@?$_Pair_base@_K_K@std@@QAE@$$QB_K0@Z ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >
PUBLIC	??$?0$$CB_K$$CB_K@?$pair@_K_K@std@@QAE@$$QB_K0@Z ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >
PUBLIC	_sqrtf
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
PUBLIC	?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
PUBLIC	?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Compat
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
PUBLIC	??$move@AA_K@std@@YA$$QA_KAA_K@Z		; std::move<unsigned __int64 &>
PUBLIC	??4?$pair@_K_K@std@@QAEAAU01@$$QAU01@@Z		; std::pair<unsigned __int64,unsigned __int64>::operator=
PUBLIC	??$move@AAU?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ; std::move<std::pair<unsigned __int64,unsigned __int64> &>
PUBLIC	??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase
PUBLIC	?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear
PUBLIC	??C?$shared_ptr@$$CBVScanLineData@@@boost@@QBEPBVScanLineData@@XZ ; boost::shared_ptr<ScanLineData const >::operator->
PUBLIC	??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@XZ ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
PUBLIC	??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV01@@Z ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
PUBLIC	??$_Allocate@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@IPAU1234@@Z ; std::_Allocate<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
PUBLIC	?allocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocate
PUBLIC	?allocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::allocate_node
PUBLIC	??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
PUBLIC	??0?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE@ABUnull_type@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::impl
PUBLIC	?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEABV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
PUBLIC	?header@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::header
PUBLIC	?final_header@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_header
PUBLIC	?header@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::header
PUBLIC	?bucket_count@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket_count
PUBLIC	?calculate_max_load@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::calculate_max_load
PUBLIC	?clear@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXXZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::clear
PUBLIC	??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
PUBLIC	??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	?size@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEIXZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size
PUBLIC	?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_head
PUBLIC	?get_tail@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBE?BUnull_type@23@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_tail
PUBLIC	??$get@$00IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<1,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
PUBLIC	??$get@$01IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$hash@N@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<2,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
PUBLIC	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$00@detail@tuples@boost@@SAABU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ; boost::tuples::detail::drop_front<1>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
PUBLIC	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$01@detail@tuples@boost@@SAABU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ; boost::tuples::detail::drop_front<2>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
PUBLIC	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$02@detail@tuples@boost@@SAABU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ; boost::tuples::detail::drop_front<3>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
PUBLIC	??$get@$02IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$equal_to@N@std@@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<3,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
PUBLIC	?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$0A@@detail@tuples@boost@@SAABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@ABU645@@Z ; boost::tuples::detail::drop_front<0>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
PUBLIC	??$get@$0A@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABIABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ; boost::tuples::get<0,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
PUBLIC	??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
PUBLIC	??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
PUBLIC	??$?0V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@?$base_from_member@V?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@$0A@@boost@@IAE@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0>::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0><std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	??$?0U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@1@@Z ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> ><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
PUBLIC	??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	??0?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@QAE@XZ ; boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type>::cons<std::equal_to<double>,boost::tuples::null_type>
PUBLIC	??0?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@QAE@XZ ; boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >
PUBLIC	??0?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@QAE@XZ ; boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >
PUBLIC	??0?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@QAE@XZ ; boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
PUBLIC	??0?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@QAE@XZ ; boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>
PUBLIC	??0?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QAE@XZ ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>
PUBLIC	??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>
PUBLIC	??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::holder_arg
PUBLIC	?final@?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@AAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::final
PUBLIC	??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
PUBLIC	??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	??1?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@XZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::~hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
PUBLIC	?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
PUBLIC	?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
PUBLIC	??_Gass_synth_priv@@QAEPAXI@Z			; ass_synth_priv::`scalar deleting destructor'
PUBLIC	?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::spc_ptr
PUBLIC	?value_cted@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABE_NXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::value_cted
PUBLIC	?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr
PUBLIC	??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type
PUBLIC	??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::~refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
PUBLIC	??_G?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAEPAXI@Z ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::`scalar deleting destructor'
PUBLIC	??$destroy@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z ; boost::detail::allocator::destroy<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
PUBLIC	?delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_
PUBLIC	?deallocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::deallocate
PUBLIC	?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::deallocate_node
PUBLIC	?delete_node_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_
PUBLIC	?final_delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_delete_node_
PUBLIC	?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::from_impl
PUBLIC	?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::begin
PUBLIC	?data@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data
PUBLIC	?buckets@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@ABEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::buckets
PUBLIC	?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end
PUBLIC	?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_
PUBLIC	?delete_all_nodes_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXXZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_all_nodes_
PUBLIC	??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
PUBLIC	??1?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::~hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>
PUBLIC	??1holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::~holder_arg
PUBLIC	??__Fc@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@YAXXZ ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`dynamic atexit destructor for 'c''
PUBLIC	?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ ; boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get
PUBLIC	?init@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA_NXZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::init
PUBLIC	?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
PUBLIC	?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_mutex_ptr
PUBLIC	??_7ScanLineData@@6B@				; ScanLineData::`vftable'
EXTRN	_ceil:PROC
EXTRN	_ldexp:PROC
EXTRN	_frexp:PROC
EXTRN	__imp__BeginPath@4:PROC
EXTRN	__imp__DebugBreak@0:PROC
EXTRN	__imp__AbortPath@4:PROC
EXTRN	__imp__CloseFigure@4:PROC
EXTRN	__imp__EndPath@4:PROC
EXTRN	__imp__GetPath@16:PROC
EXTRN	??_EScanLineData@@UAEPAXI@Z:PROC		; ScanLineData::`vector deleting destructor'
;	COMDAT ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A
_BSS	SEGMENT
?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A DD 01H DUP (?) ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
_BSS	ENDS
;	COMDAT ?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A
_BSS	SEGMENT
?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A DD 01H DUP (?) ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_mutex_ptr
PUBLIC	??_R4?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@	; ssf::Array<ssf::Rasterizer::Span>::`RTTI Complete Object Locator'
PUBLIC	??_R3?$Array@TSpan@Rasterizer@ssf@@@ssf@@8	; ssf::Array<ssf::Rasterizer::Span>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Array@TSpan@Rasterizer@ssf@@@ssf@@8	; ssf::Array<ssf::Rasterizer::Span>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Array@TSpan@Rasterizer@ssf@@@ssf@@8 ; ssf::Array<ssf::Rasterizer::Span>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$Array@TSpan@Rasterizer@ssf@@@ssf@@@8	; ssf::Array<ssf::Rasterizer::Span> `RTTI Type Descriptor'
PUBLIC	??_R4Rasterizer@ssf@@6B@			; ssf::Rasterizer::`RTTI Complete Object Locator'
PUBLIC	??_R3Rasterizer@ssf@@8				; ssf::Rasterizer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Rasterizer@ssf@@8				; ssf::Rasterizer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Rasterizer@ssf@@8			; ssf::Rasterizer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVRasterizer@ssf@@@8			; ssf::Rasterizer `RTTI Type Descriptor'
PUBLIC	??0?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAE@XZ	; ssf::Array<ssf::Rasterizer::Span>::Array<ssf::Rasterizer::Span>
PUBLIC	??_G?$Array@TSpan@Rasterizer@ssf@@@ssf@@UAEPAXI@Z ; ssf::Array<ssf::Rasterizer::Span>::`scalar deleting destructor'
PUBLIC	??1?$Array@TSpan@Rasterizer@ssf@@@ssf@@UAE@XZ	; ssf::Array<ssf::Rasterizer::Span>::~Array<ssf::Rasterizer::Span>
PUBLIC	??_GRasterizer@ssf@@UAEPAXI@Z			; ssf::Rasterizer::`scalar deleting destructor'
PUBLIC	?RemoveAll@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXXZ ; ssf::Array<ssf::Rasterizer::Span>::RemoveAll
PUBLIC	??0Span@Rasterizer@ssf@@QAE@XZ			; ssf::Rasterizer::Span::Span
PUBLIC	??0Span@Rasterizer@ssf@@QAE@HHHH@Z		; ssf::Rasterizer::Span::Span
PUBLIC	??0Span@Rasterizer@ssf@@QAE@_K0@Z		; ssf::Rasterizer::Span::Span
PUBLIC	?Add@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXABTSpan@Rasterizer@2@@Z ; ssf::Array<ssf::Rasterizer::Span>::Add
PUBLIC	?Append@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXPBTSpan@Rasterizer@2@II@Z ; ssf::Array<ssf::Rasterizer::Span>::Append
PUBLIC	??$mymax@_K@ssf@@YA_K_K0@Z			; ssf::mymax<unsigned __int64>
PUBLIC	?GetCount@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QBEIXZ ; ssf::Array<ssf::Rasterizer::Span>::GetCount
PUBLIC	?IsEmpty@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QBE_NXZ ; ssf::Array<ssf::Rasterizer::Span>::IsEmpty
PUBLIC	?GetData@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEPATSpan@Rasterizer@2@XZ ; ssf::Array<ssf::Rasterizer::Span>::GetData
PUBLIC	?SetCount@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXII@Z ; ssf::Array<ssf::Rasterizer::Span>::SetCount
PUBLIC	?Swap@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXAAV12@@Z ; ssf::Array<ssf::Rasterizer::Span>::Swap
PUBLIC	?Move@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXAAV12@@Z ; ssf::Array<ssf::Rasterizer::Span>::Move
PUBLIC	??_7Rasterizer@ssf@@6B@				; ssf::Rasterizer::`vftable'
PUBLIC	??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@	; ssf::Array<ssf::Rasterizer::Span>::`vftable'
EXTRN	__aligned_free:PROC
EXTRN	??_E?$Array@TSpan@Rasterizer@ssf@@@ssf@@UAEPAXI@Z:PROC ; ssf::Array<ssf::Rasterizer::Span>::`vector deleting destructor'
EXTRN	??_ERasterizer@ssf@@UAEPAXI@Z:PROC		; ssf::Rasterizer::`vector deleting destructor'
EXTRN	__aligned_malloc:PROC
EXTRN	__aligned_realloc:PROC
;	COMDAT ??_7ScanLineData@@6B@
CONST	SEGMENT
??_7ScanLineData@@6B@ DD FLAT:??_R4ScanLineData@@6B@	; ScanLineData::`vftable'
	DD	FLAT:??_EScanLineData@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4ScanLineData@@6B@
rdata$r	SEGMENT
??_R4ScanLineData@@6B@ DD 00H				; ScanLineData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScanLineData@@@8
	DD	FLAT:??_R3ScanLineData@@8
rdata$r	ENDS
;	COMDAT ??_R3ScanLineData@@8
rdata$r	SEGMENT
??_R3ScanLineData@@8 DD 00H				; ScanLineData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ScanLineData@@8
rdata$r	ENDS
;	COMDAT ??_R2ScanLineData@@8
rdata$r	SEGMENT
??_R2ScanLineData@@8 DD FLAT:??_R1A@?0A@EA@ScanLineData@@8 ; ScanLineData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScanLineData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScanLineData@@8 DD FLAT:??_R0?AVScanLineData@@@8 ; ScanLineData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScanLineData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScanLineData@@@8
_DATA	SEGMENT
??_R0?AVScanLineData@@@8 DD FLAT:??_7type_info@@6B@	; ScanLineData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScanLineData@@', 00H
;	COMDAT ??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@
CONST	SEGMENT
??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@ DD FLAT:??_R4?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@ ; ssf::Array<ssf::Rasterizer::Span>::`vftable'
	DD	FLAT:??_E?$Array@TSpan@Rasterizer@ssf@@@ssf@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@
rdata$r	SEGMENT
??_R4?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@ DD 00H	; ssf::Array<ssf::Rasterizer::Span>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$Array@TSpan@Rasterizer@ssf@@@ssf@@@8
	DD	FLAT:??_R3?$Array@TSpan@Rasterizer@ssf@@@ssf@@8
rdata$r	ENDS
;	COMDAT ??_R3?$Array@TSpan@Rasterizer@ssf@@@ssf@@8
rdata$r	SEGMENT
??_R3?$Array@TSpan@Rasterizer@ssf@@@ssf@@8 DD 00H	; ssf::Array<ssf::Rasterizer::Span>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$Array@TSpan@Rasterizer@ssf@@@ssf@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Array@TSpan@Rasterizer@ssf@@@ssf@@8
rdata$r	SEGMENT
??_R2?$Array@TSpan@Rasterizer@ssf@@@ssf@@8 DD FLAT:??_R1A@?0A@EA@?$Array@TSpan@Rasterizer@ssf@@@ssf@@8 ; ssf::Array<ssf::Rasterizer::Span>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$Array@TSpan@Rasterizer@ssf@@@ssf@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Array@TSpan@Rasterizer@ssf@@@ssf@@8 DD FLAT:??_R0?AV?$Array@TSpan@Rasterizer@ssf@@@ssf@@@8 ; ssf::Array<ssf::Rasterizer::Span>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Array@TSpan@Rasterizer@ssf@@@ssf@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Array@TSpan@Rasterizer@ssf@@@ssf@@@8
_DATA	SEGMENT
??_R0?AV?$Array@TSpan@Rasterizer@ssf@@@ssf@@@8 DD FLAT:??_7type_info@@6B@ ; ssf::Array<ssf::Rasterizer::Span> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Array@TSpan@Rasterizer@ssf@@@ssf@@', 00H
_DATA	ENDS
;	COMDAT ??_7Rasterizer@ssf@@6B@
CONST	SEGMENT
??_7Rasterizer@ssf@@6B@ DD FLAT:??_R4Rasterizer@ssf@@6B@ ; ssf::Rasterizer::`vftable'
	DD	FLAT:??_ERasterizer@ssf@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4Rasterizer@ssf@@6B@
rdata$r	SEGMENT
??_R4Rasterizer@ssf@@6B@ DD 00H				; ssf::Rasterizer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRasterizer@ssf@@@8
	DD	FLAT:??_R3Rasterizer@ssf@@8
rdata$r	ENDS
;	COMDAT ??_R3Rasterizer@ssf@@8
rdata$r	SEGMENT
??_R3Rasterizer@ssf@@8 DD 00H				; ssf::Rasterizer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Rasterizer@ssf@@8
rdata$r	ENDS
;	COMDAT ??_R2Rasterizer@ssf@@8
rdata$r	SEGMENT
??_R2Rasterizer@ssf@@8 DD FLAT:??_R1A@?0A@EA@Rasterizer@ssf@@8 ; ssf::Rasterizer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Rasterizer@ssf@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Rasterizer@ssf@@8 DD FLAT:??_R0?AVRasterizer@ssf@@@8 ; ssf::Rasterizer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Rasterizer@ssf@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRasterizer@ssf@@@8
_DATA	SEGMENT
??_R0?AVRasterizer@ssf@@@8 DD FLAT:??_7type_info@@6B@	; ssf::Rasterizer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRasterizer@ssf@@', 00H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\libssf\rasterizer.cpp
_DATA	ENDS
;	COMDAT ??$mymax@_K@ssf@@YA_K_K0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
??$mymax@_K@ssf@@YA_K_K0@Z PROC				; ssf::mymax<unsigned __int64>, COMDAT

; 37   : 	template<class T> T mymax(T a, T b) {return a > b ? a : b;}

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR _a$[ebp+4]
	mov	edx, DWORD PTR _b$[ebp+4]
	push	esi
	mov	esi, DWORD PTR _b$[ebp]
	cmp	ecx, edx
	jb	SHORT $LN3@mymax
	mov	eax, DWORD PTR _a$[ebp]
	ja	SHORT $LN5@mymax
	cmp	eax, esi
	jbe	SHORT $LN3@mymax
$LN5@mymax:
	mov	edx, ecx
	pop	esi
	pop	ebp
	ret	0
$LN3@mymax:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	0
??$mymax@_K@ssf@@YA_K_K0@Z ENDP				; ssf::mymax<unsigned __int64>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\libssf\array.h
_TEXT	ENDS
;	COMDAT ?Swap@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXAAV12@@Z
_TEXT	SEGMENT
?Swap@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXAAV12@@Z PROC ; ssf::Array<ssf::Rasterizer::Span>::Swap, COMDAT
; _this$ = ecx
; _v$ = eax

; 102  : 			T* pData = m_pData; m_pData = v.m_pData; v.m_pData = pData;

	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], esi

; 103  : 			size_t nSize = m_nSize; m_nSize = v.m_nSize; v.m_nSize = nSize;

	mov	esi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+8], esi

; 104  : 			size_t nMaxSize = m_nMaxSize; m_nMaxSize = v.m_nMaxSize; v.m_nMaxSize = nMaxSize;

	mov	esi, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx+12], esi

; 105  : 			size_t nGrowBy = m_nGrowBy; m_nGrowBy = v.m_nGrowBy; v.m_nGrowBy = nGrowBy;

	mov	esi, DWORD PTR [eax+16]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [ecx+16], esi
	mov	DWORD PTR [eax+16], edx
	pop	esi

; 106  : 		}

	ret	0
?Swap@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXAAV12@@Z ENDP ; ssf::Array<ssf::Rasterizer::Span>::Swap
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetData@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEPATSpan@Rasterizer@2@XZ
_TEXT	SEGMENT
?GetData@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEPATSpan@Rasterizer@2@XZ PROC ; ssf::Array<ssf::Rasterizer::Span>::GetData, COMDAT
; _this$ = eax

; 63   : 		T* GetData() {return m_pData;}

	mov	eax, DWORD PTR [eax+4]
	ret	0
?GetData@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEPATSpan@Rasterizer@2@XZ ENDP ; ssf::Array<ssf::Rasterizer::Span>::GetData
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QBE_NXZ
_TEXT	SEGMENT
?IsEmpty@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QBE_NXZ PROC ; ssf::Array<ssf::Rasterizer::Span>::IsEmpty, COMDAT
; _this$ = ecx

; 61   : 		bool IsEmpty() const {return m_nSize == 0;}

	xor	eax, eax
	cmp	DWORD PTR [ecx+8], eax
	sete	al
	ret	0
?IsEmpty@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QBE_NXZ ENDP ; ssf::Array<ssf::Rasterizer::Span>::IsEmpty
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXXZ PROC ; ssf::Array<ssf::Rasterizer::Span>::RemoveAll, COMDAT
; _this$ = eax

; 60   : 		void RemoveAll() {m_nSize = 0;}

	mov	DWORD PTR [eax+8], 0
	ret	0
?RemoveAll@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXXZ ENDP ; ssf::Array<ssf::Rasterizer::Span>::RemoveAll
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetCount@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QBEIXZ
_TEXT	SEGMENT
?GetCount@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QBEIXZ PROC ; ssf::Array<ssf::Rasterizer::Span>::GetCount, COMDAT
; _this$ = eax

; 58   : 		size_t GetCount() const {return m_nSize;}

	mov	eax, DWORD PTR [eax+8]
	ret	0
?GetCount@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QBEIXZ ENDP ; ssf::Array<ssf::Rasterizer::Span>::GetCount
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?SetCount@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXII@Z
_TEXT	SEGMENT
?SetCount@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXII@Z PROC ; ssf::Array<ssf::Rasterizer::Span>::SetCount, COMDAT
; _this$ = esi
; _nSize$ = edi
; _nGrowBy$ = eax

; 43   : 			if(nGrowBy > 0)

	test	eax, eax
	je	SHORT $LN2@SetCount

; 44   : 			{
; 45   : 				m_nGrowBy = nGrowBy;

	mov	DWORD PTR [esi+16], eax
$LN2@SetCount:

; 46   : 			}
; 47   : 
; 48   : 			if(nSize > m_nMaxSize)

	cmp	edi, DWORD PTR [esi+12]
	jbe	SHORT $LN9@SetCount

; 49   : 			{
; 50   : 				m_nMaxSize = nSize + max(m_nGrowBy, m_nSize);

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+8]
	cmp	eax, ecx
	ja	SHORT $LN6@SetCount
	mov	eax, ecx
$LN6@SetCount:

; 51   : 				size_t nBytes = m_nMaxSize * sizeof(T);
; 52   : 				m_pData = m_pData ? (T*)_aligned_realloc(m_pData, nBytes, 16) : (T*)_aligned_malloc(nBytes, 16);

	mov	ecx, DWORD PTR [esi+4]
	add	eax, edi
	mov	DWORD PTR [esi+12], eax
	shl	eax, 4
	push	16					; 00000010H
	push	eax
	test	ecx, ecx
	je	SHORT $LN7@SetCount
	push	ecx
	call	__aligned_realloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+4], eax

; 53   : 			}
; 54   : 
; 55   : 			m_nSize = nSize;

	mov	DWORD PTR [esi+8], edi

; 56   : 		}

	ret	0
$LN7@SetCount:

; 51   : 				size_t nBytes = m_nMaxSize * sizeof(T);
; 52   : 				m_pData = m_pData ? (T*)_aligned_realloc(m_pData, nBytes, 16) : (T*)_aligned_malloc(nBytes, 16);

	call	__aligned_malloc
	add	esp, 8
	mov	DWORD PTR [esi+4], eax
$LN9@SetCount:

; 53   : 			}
; 54   : 
; 55   : 			m_nSize = nSize;

	mov	DWORD PTR [esi+8], edi

; 56   : 		}

	ret	0
?SetCount@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXII@Z ENDP ; ssf::Array<ssf::Rasterizer::Span>::SetCount
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1?$Array@TSpan@Rasterizer@ssf@@@ssf@@UAE@XZ
_TEXT	SEGMENT
??1?$Array@TSpan@Rasterizer@ssf@@@ssf@@UAE@XZ PROC	; ssf::Array<ssf::Rasterizer::Span>::~Array<ssf::Rasterizer::Span>, COMDAT
; _this$ = ecx

; 39   : 		virtual ~Array() {if(m_pData) _aligned_free(m_pData);}

	mov	DWORD PTR [ecx], OFFSET ??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@
	mov	ecx, DWORD PTR [ecx+4]
	test	ecx, ecx
	je	SHORT $LN1@Array
	push	ecx
	call	__aligned_free
	pop	ecx
$LN1@Array:
	ret	0
??1?$Array@TSpan@Rasterizer@ssf@@@ssf@@UAE@XZ ENDP	; ssf::Array<ssf::Rasterizer::Span>::~Array<ssf::Rasterizer::Span>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAE@XZ
_TEXT	SEGMENT
??0?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAE@XZ PROC	; ssf::Array<ssf::Rasterizer::Span>::Array<ssf::Rasterizer::Span>, COMDAT
; _this$ = eax

; 38   : 		Array() {m_pData = NULL; m_nSize = m_nMaxSize = 0; m_nGrowBy = 4096;}

	xor	ecx, ecx
	mov	DWORD PTR [eax], OFFSET ??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+16], 4096		; 00001000H
	ret	0
??0?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAE@XZ ENDP	; ssf::Array<ssf::Rasterizer::Span>::Array<ssf::Rasterizer::Span>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\libssf\rasterizer.cpp
_TEXT	ENDS
;	COMDAT ?pixmix_sse2@ssf@@YAXPAKKK@Z
_TEXT	SEGMENT
_alpha$ = 8						; size = 4
?pixmix_sse2@ssf@@YAXPAKKK@Z PROC			; ssf::pixmix_sse2, COMDAT
; _dst$ = edx
; _color$ = ecx

; 620  : 	{

	push	ebp
	mov	ebp, esp

; 621  : 		alpha = ((alpha * (color>>24)) >> 6) & 0xff;

	mov	eax, ecx
	shr	eax, 24					; 00000018H
	imul	eax, DWORD PTR _alpha$[ebp]

; 622  : 		color &= 0xffffff;

	and	ecx, 16777215				; 00ffffffH
	shr	eax, 6

; 623  : 
; 624  : 		__m128i zero = _mm_setzero_si128();
; 625  : 		__m128i a = _mm_set1_epi32((alpha << 16) | (0xff - alpha));
; 626  : 		__m128i d = _mm_unpacklo_epi8(_mm_cvtsi32_si128(*dst), zero);
; 627  : 		__m128i s = _mm_unpacklo_epi8(_mm_cvtsi32_si128(color), zero);

	movd	xmm2, ecx
	and	eax, 255				; 000000ffH
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	push	esi
	mov	esi, DWORD PTR [edx]
	pxor	xmm1, xmm1
	shl	eax, 16					; 00000010H
	movd	xmm0, esi
	punpcklbw xmm0, xmm1
	punpcklbw xmm2, xmm1
	or	ecx, eax

; 628  : 		__m128i r = _mm_unpacklo_epi16(d, s);

	punpcklwd xmm0, xmm2
	movd	xmm1, ecx
	pshufd	xmm1, xmm1, 0

; 629  : 
; 630  : 		r = _mm_madd_epi16(r, a);

	pmaddwd	xmm0, xmm1

; 631  : 		r = _mm_srli_epi32(r, 8);

	psrld	xmm0, 8

; 632  : 		r = _mm_packs_epi32(r, r);

	packssdw xmm0, xmm0

; 633  : 		r = _mm_packus_epi16(r, r);

	packuswb xmm0, xmm0

; 634  : 
; 635  : 		*dst = (DWORD)_mm_cvtsi128_si32(r);

	movd	eax, xmm0
	mov	DWORD PTR [edx], eax

; 636  : 	}

	pop	esi
	pop	ebp
	ret	0
?pixmix_sse2@ssf@@YAXPAKKK@Z ENDP			; ssf::pixmix_sse2
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?pixmix_c@ssf@@YAXPAKKK@Z
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_ia$ = 12						; size = 4
_alpha$ = 12						; size = 4
?pixmix_c@ssf@@YAXPAKKK@Z PROC				; ssf::pixmix_c, COMDAT
; _color$ = edx

; 611  : 	{

	push	ebp
	mov	ebp, esp

; 612  : 		int a = ((alpha * (color>>24)) >> 6) & 0xff;
; 613  : 		int ia = 0xff - a;
; 614  : 
; 615  : 		*dst = ((((*dst & 0x00ff00ff)*ia + (color & 0x00ff00ff)*a) & 0xff00ff00) >> 8)
; 616  : 			| ((((*dst>>8) & 0x00ff00ff)*ia + ((color>>8) & 0x000000ff)*a) & 0xff00ff00);

	mov	ecx, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, edx
	push	ebx
	shr	eax, 24					; 00000018H
	imul	eax, DWORD PTR _alpha$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	shr	edi, 8
	mov	ebx, edx
	shr	ebx, 8
	and	ebx, 255				; 000000ffH
	shr	eax, 6
	and	eax, 255				; 000000ffH
	and	edi, -65281				; ffff00ffH
	imul	ebx, eax
	mov	esi, 255				; 000000ffH
	sub	esi, eax
	imul	edi, esi
	add	edi, ebx
	mov	ebx, ecx
	and	ebx, 16711935				; 00ff00ffH
	imul	ebx, esi
	mov	DWORD PTR _ia$[ebp], esi
	mov	esi, edx
	and	esi, 16711935				; 00ff00ffH
	imul	esi, eax
	shr	ecx, 8
	shr	edx, 8
	and	ecx, 16711935				; 00ff00ffH
	imul	ecx, DWORD PTR _ia$[ebp]
	and	edx, 255				; 000000ffH
	imul	edx, eax
	add	ebx, esi
	shr	ebx, 8
	xor	edi, ebx
	and	edi, 16711935				; 00ff00ffH
	add	ecx, edx
	mov	edx, DWORD PTR _dst$[ebp]
	xor	edi, ecx
	mov	DWORD PTR [edx], edi
	pop	edi
	pop	esi
	pop	ebx

; 617  : 	}

	pop	ebp
	ret	0
?pixmix_c@ssf@@YAXPAKKK@Z ENDP				; ssf::pixmix_c
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	__real@00000000
PUBLIC	?Blur@Rasterizer@ssf@@QAEXMH@Z			; ssf::Rasterizer::Blur
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Blur@Rasterizer@ssf@@QAEXMH@Z
_TEXT	SEGMENT
_yq$172582 = -28					; size = 4
_q0$ = -24						; size = 4
tv905 = -20						; size = 4
tv304 = -16						; size = 4
tv684 = -12						; size = 4
tv259 = -12						; size = 4
_pass$172560 = -8					; size = 4
tv327 = -4						; size = 4
_this$ = 8						; size = 4
_q$172567 = 12						; size = 4
_n$ = 12						; size = 4
_plane$ = 16						; size = 4
?Blur@Rasterizer@ssf@@QAEXMH@Z PROC			; ssf::Rasterizer::Blur, COMDAT

; 558  : 	{

	push	ebp
	mov	ebp, esp

; 559  : 		if(n <= 0 || !mOverlayWidth || !mOverlayHeight || !mpOverlayBuffer)

	fldz
	sub	esp, 28					; 0000001cH
	fcomp	DWORD PTR _n$[ebp]
	fnstsw	ax
	test	ah, 1
	je	$LN16@Blur
	push	esi
	push	edi
	mov	edi, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edi+116]
	test	esi, esi
	je	$LN32@Blur
	push	ebx
	mov	ebx, DWORD PTR [edi+120]
	mov	DWORD PTR tv327[ebp], ebx
	test	ebx, ebx
	je	$LN34@Blur
	cmp	DWORD PTR [edi+112], 0
	je	$LN34@Blur

; 560  : 			return;
; 561  : 
; 562  : 		int w = mOverlayWidth;
; 563  : 		int h = mOverlayHeight;
; 564  : 		int pitch = w*4;
; 565  : 		BYTE* q0 = new BYTE[w*h];

	mov	eax, ebx
	imul	eax, esi
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	mov	edx, eax

; 566  : 
; 567  : 		for(int pass = 0, limit = (int)(n + 0.5); pass < n; pass++)

	fld	DWORD PTR _n$[ebp]
	add	esp, 4
	fcom	QWORD PTR __real@0000000000000000
	mov	DWORD PTR _q0$[ebp], edx
	mov	DWORD PTR _pass$172560[ebp], 0
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN62@Blur
	jmp	SHORT $LN15@Blur
$LN31@Blur:
	mov	edi, DWORD PTR _this$[ebp]
$LN15@Blur:

; 568  : 		{
; 569  : 			BYTE* p = mpOverlayBuffer + plane;

	mov	edi, DWORD PTR [edi+112]
	add	edi, DWORD PTR _plane$[ebp]

; 570  : 			BYTE* q = q0;

	mov	DWORD PTR _q$172567[ebp], edx

; 571  : 
; 572  : 			for(int y = 0; y < h; y++, p += pitch, q += w)

	test	ebx, ebx
	jle	SHORT $LN10@Blur

; 568  : 		{
; 569  : 			BYTE* p = mpOverlayBuffer + plane;

	mov	DWORD PTR tv259[ebp], ebx
$LN12@Blur:

; 573  : 			{
; 574  : 				q[0] = (2*p[0] + p[4]) >> 2;

	movzx	eax, BYTE PTR [edi+4]
	movzx	ecx, BYTE PTR [edi]
	lea	ecx, DWORD PTR [eax+ecx*2]
	sar	ecx, 2
	mov	BYTE PTR [edx], cl

; 575  : 				int x = 0;
; 576  : 				for(x = 1; x < w-1; x++)

	mov	eax, 1
	lea	ecx, DWORD PTR [esi-1]
	cmp	ecx, eax
	jle	SHORT $LN7@Blur

; 571  : 
; 572  : 			for(int y = 0; y < h; y++, p += pitch, q += w)

	lea	ecx, DWORD PTR [edi+8]
$LN9@Blur:

; 577  : 					q[x] = (p[(x-1)*4] + 2*p[x*4] + p[(x+1)*4]) >> 2;

	movzx	edx, BYTE PTR [ecx-4]
	movzx	ebx, BYTE PTR [ecx-8]
	lea	ebx, DWORD PTR [ebx+edx*2]
	movzx	edx, BYTE PTR [ecx]
	add	ebx, edx
	mov	edx, DWORD PTR _q$172567[ebp]
	sar	ebx, 2
	mov	BYTE PTR [eax+edx], bl
	inc	eax
	lea	ebx, DWORD PTR [esi-1]
	add	ecx, 4
	cmp	eax, ebx
	jl	SHORT $LN9@Blur
$LN7@Blur:

; 578  : 				q[x] = (p[(x-1)*4] + 2*p[x*4]) >> 2;

	movzx	ecx, BYTE PTR [edi+eax*4]
	movzx	ebx, BYTE PTR [edi+eax*4-4]
	lea	ecx, DWORD PTR [ebx+ecx*2]
	sar	ecx, 2
	mov	BYTE PTR [eax+edx], cl
	lea	eax, DWORD PTR [esi*4]
	add	edx, esi
	add	edi, eax
	dec	DWORD PTR tv259[ebp]
	mov	DWORD PTR _q$172567[ebp], edx
	jne	SHORT $LN12@Blur

; 571  : 
; 572  : 			for(int y = 0; y < h; y++, p += pitch, q += w)

	mov	ebx, DWORD PTR tv327[ebp]
	mov	edx, DWORD PTR _q0$[ebp]
$LN10@Blur:

; 579  : 			}
; 580  : 
; 581  : 			p = mpOverlayBuffer + plane;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	add	ecx, DWORD PTR _plane$[ebp]

; 582  : 			q = q0;

	mov	DWORD PTR _q$172567[ebp], edx

; 583  : 
; 584  : 			for(int x = 0; x < w; x++, p += 4, q++)

	test	esi, esi
	jle	$LN14@Blur

; 579  : 			}
; 580  : 
; 581  : 			p = mpOverlayBuffer + plane;

	mov	DWORD PTR tv905[ebp], esi
$LN6@Blur:

; 585  : 			{
; 586  : 				p[0] = (2*q[0] + q[w]) >> 2;

	movzx	edi, BYTE PTR [edx+esi]
	movzx	eax, BYTE PTR [edx]
	lea	eax, DWORD PTR [edi+eax*2]
	sar	eax, 2

; 587  : 				int y = 0, yp, yq;
; 588  : 				for(y = 1, yp = y*pitch, yq = y*w; y < h-1; y++, yp += pitch, yq += w)

	dec	ebx
	mov	BYTE PTR [ecx], al
	lea	edi, DWORD PTR [esi*4]
	mov	eax, esi
	cmp	ebx, 1
	jle	SHORT $LN1@Blur

; 585  : 			{
; 586  : 				p[0] = (2*q[0] + q[w]) >> 2;

	dec	ebx
	mov	DWORD PTR tv304[ebp], ebx

; 587  : 				int y = 0, yp, yq;
; 588  : 				for(y = 1, yp = y*pitch, yq = y*w; y < h-1; y++, yp += pitch, yq += w)

	inc	ebx
	imul	ebx, esi
	lea	eax, DWORD PTR [edx+esi]
	mov	DWORD PTR tv684[ebp], edx
	mov	DWORD PTR _yq$172582[ebp], ebx
$LN3@Blur:

; 589  : 					p[yp] = (q[yq-w] + 2*q[yq] + q[yq+w]) >> 2;

	movzx	edx, BYTE PTR [edx]
	movzx	ebx, BYTE PTR [eax]
	lea	edx, DWORD PTR [edx+ebx*2]
	movzx	ebx, BYTE PTR [eax+esi]
	add	edx, ebx
	sar	edx, 2
	mov	BYTE PTR [edi+ecx], dl
	lea	edx, DWORD PTR [esi*4]
	add	edi, edx
	mov	edx, DWORD PTR tv684[ebp]
	add	edx, esi
	add	eax, esi
	dec	DWORD PTR tv304[ebp]
	mov	DWORD PTR tv684[ebp], edx
	jne	SHORT $LN3@Blur

; 587  : 				int y = 0, yp, yq;
; 588  : 				for(y = 1, yp = y*pitch, yq = y*w; y < h-1; y++, yp += pitch, yq += w)

	mov	edx, DWORD PTR _q$172567[ebp]
	mov	eax, DWORD PTR _yq$172582[ebp]
$LN1@Blur:

; 590  : 				p[yp] = (q[yq-w] + 2*q[yq]) >> 2;

	mov	ebx, eax
	movzx	eax, BYTE PTR [eax+edx]
	sub	ebx, esi
	movzx	ebx, BYTE PTR [ebx+edx]
	lea	eax, DWORD PTR [ebx+eax*2]
	mov	ebx, DWORD PTR tv327[ebp]
	sar	eax, 2
	mov	BYTE PTR [edi+ecx], al
	inc	edx
	add	ecx, 4
	dec	DWORD PTR tv905[ebp]
	mov	DWORD PTR _q$172567[ebp], edx
	jne	$LN6@Blur

; 583  : 
; 584  : 			for(int x = 0; x < w; x++, p += 4, q++)

	mov	edx, DWORD PTR _q0$[ebp]
$LN14@Blur:

; 566  : 
; 567  : 		for(int pass = 0, limit = (int)(n + 0.5); pass < n; pass++)

	inc	DWORD PTR _pass$172560[ebp]
	fild	DWORD PTR _pass$172560[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	$LN31@Blur
$LN62@Blur:

; 591  : 			}
; 592  : 		}
; 593  : 
; 594  : 		delete [] q0;

	push	edx
	fstp	ST(0)
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN34@Blur:
	pop	ebx
$LN32@Blur:
	pop	edi
	pop	esi
$LN16@Blur:

; 595  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Blur@Rasterizer@ssf@@QAEXMH@Z ENDP			; ssf::Rasterizer::Blur
_TEXT	ENDS
PUBLIC	?_ReallocEdgeBuffer@Rasterizer@ssf@@AAEXH@Z	; ssf::Rasterizer::_ReallocEdgeBuffer
; Function compile flags: /Ogtp
;	COMDAT ?_ReallocEdgeBuffer@Rasterizer@ssf@@AAEXH@Z
_TEXT	SEGMENT
?_ReallocEdgeBuffer@Rasterizer@ssf@@AAEXH@Z PROC	; ssf::Rasterizer::_ReallocEdgeBuffer, COMDAT
; _this$ = esi
; _edges$ = eax

; 61   : 		mEdgeHeapSize = edges;
; 62   : 		mpEdgeBuffer = (Edge*)realloc(mpEdgeBuffer, sizeof(Edge)*edges);

	mov	ecx, DWORD PTR [esi+96]
	mov	DWORD PTR [esi+100], eax
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	push	ecx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR [esi+96], eax

; 63   : 	}

	ret	0
?_ReallocEdgeBuffer@Rasterizer@ssf@@AAEXH@Z ENDP	; ssf::Rasterizer::_ReallocEdgeBuffer
_TEXT	ENDS
PUBLIC	?_TrashOverlay@Rasterizer@ssf@@AAEXXZ		; ssf::Rasterizer::_TrashOverlay
; Function compile flags: /Ogtp
;	COMDAT ?_TrashOverlay@Rasterizer@ssf@@AAEXXZ
_TEXT	SEGMENT
?_TrashOverlay@Rasterizer@ssf@@AAEXXZ PROC		; ssf::Rasterizer::_TrashOverlay, COMDAT
; _this$ = esi

; 55   : 		if(mpOverlayBuffer) delete [] mpOverlayBuffer;

	mov	eax, DWORD PTR [esi+112]
	test	eax, eax
	je	SHORT $LN4@TrashOverl
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN4@TrashOverl:

; 56   : 		mpOverlayBuffer = NULL;

	mov	DWORD PTR [esi+112], 0

; 57   : 	}

	ret	0
?_TrashOverlay@Rasterizer@ssf@@AAEXXZ ENDP		; ssf::Rasterizer::_TrashOverlay
_TEXT	ENDS
PUBLIC	??1Rasterizer@ssf@@UAE@XZ			; ssf::Rasterizer::~Rasterizer
; Function compile flags: /Ogtp
;	COMDAT ??1Rasterizer@ssf@@UAE@XZ
_TEXT	SEGMENT
??1Rasterizer@ssf@@UAE@XZ PROC				; ssf::Rasterizer::~Rasterizer, COMDAT
; _this$ = ecx

; 49   : 	{

	push	esi
	mov	esi, ecx

; 50   : 		_TrashOverlay();

	mov	eax, DWORD PTR [esi+112]
	mov	DWORD PTR [esi], OFFSET ??_7Rasterizer@ssf@@6B@
	test	eax, eax
	je	SHORT $LN3@Rasterizer
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN3@Rasterizer:
	mov	DWORD PTR [esi+112], 0

; 51   : 	}

	mov	eax, DWORD PTR [esi+76]
	mov	DWORD PTR [esi+72], OFFSET ??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@
	test	eax, eax
	je	SHORT $LN6@Rasterizer
	push	eax
	call	__aligned_free
	add	esp, 4
$LN6@Rasterizer:
	mov	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [esi+52], OFFSET ??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@
	test	eax, eax
	je	SHORT $LN9@Rasterizer
	push	eax
	call	__aligned_free
	add	esp, 4
$LN9@Rasterizer:
	mov	DWORD PTR [esi+32], OFFSET ??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@
	mov	esi, DWORD PTR [esi+36]
	test	esi, esi
	je	SHORT $LN12@Rasterizer
	push	esi
	call	__aligned_free
	add	esp, 4
$LN12@Rasterizer:
	pop	esi
	ret	0
??1Rasterizer@ssf@@UAE@XZ ENDP				; ssf::Rasterizer::~Rasterizer
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GRasterizer@ssf@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GRasterizer@ssf@@UAEPAXI@Z PROC			; ssf::Rasterizer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1Rasterizer@ssf@@UAE@XZ		; ssf::Rasterizer::~Rasterizer
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GRasterizer@ssf@@UAEPAXI@Z ENDP			; ssf::Rasterizer::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\libssf\rasterizer.h
_TEXT	ENDS
;	COMDAT ??0Span@Rasterizer@ssf@@QAE@_K0@Z
_TEXT	SEGMENT
__first$ = 8						; size = 8
__second$ = 16						; size = 8
??0Span@Rasterizer@ssf@@QAE@_K0@Z PROC			; ssf::Rasterizer::Span::Span, COMDAT
; _this$ = eax

; 46   : 			union Span(unsigned __int64 _first, unsigned __int64 _second) {first = _first; second = _second;}

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR __first$[ebp]
	mov	edx, DWORD PTR __first$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR __second$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR __second$[ebp+4]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	pop	ebp
	ret	16					; 00000010H
??0Span@Rasterizer@ssf@@QAE@_K0@Z ENDP			; ssf::Rasterizer::Span::Span
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0Span@Rasterizer@ssf@@QAE@HHHH@Z
_TEXT	SEGMENT
__y1$ = 8						; size = 4
__x2$ = 12						; size = 4
__y2$ = 16						; size = 4
??0Span@Rasterizer@ssf@@QAE@HHHH@Z PROC			; ssf::Rasterizer::Span::Span, COMDAT
; _this$ = eax
; __x1$ = ecx

; 45   : 			union Span(int _x1, int _y1, int _x2, int _y2) {x1 = _x1; y1 = _y1; x2 = _x2; y2 = _y2;}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR __y1$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR __x2$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR __y2$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	pop	ebp
	ret	12					; 0000000cH
??0Span@Rasterizer@ssf@@QAE@HHHH@Z ENDP			; ssf::Rasterizer::Span::Span
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0Span@Rasterizer@ssf@@QAE@XZ
_TEXT	SEGMENT
??0Span@Rasterizer@ssf@@QAE@XZ PROC			; ssf::Rasterizer::Span::Span, COMDAT
; _this$ = eax

; 44   : 			union Span() {}

	ret	0
??0Span@Rasterizer@ssf@@QAE@XZ ENDP			; ssf::Rasterizer::Span::Span
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltypes.inl
;	COMDAT ??9CPoint@@QBEHUtagPOINT@@@Z
_TEXT	SEGMENT
_point$ = 8						; size = 8
??9CPoint@@QBEHUtagPOINT@@@Z PROC			; CPoint::operator!=, COMDAT
; _this$ = eax

; 188  : {

	push	ebp
	mov	ebp, esp

; 189  : 	return (x != point.x || y != point.y);

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _point$[ebp]
	jne	SHORT $LN3@operator
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR _point$[ebp+4]
	jne	SHORT $LN3@operator
	xor	eax, eax

; 190  : }

	pop	ebp
	ret	8
$LN3@operator:

; 189  : 	return (x != point.x || y != point.y);

	mov	eax, 1

; 190  : }

	pop	ebp
	ret	8
??9CPoint@@QBEHUtagPOINT@@@Z ENDP			; CPoint::operator!=
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@UtagPOINT@@@Z
_TEXT	SEGMENT
_initPt$ = 8						; size = 8
??0CPoint@@QAE@UtagPOINT@@@Z PROC			; CPoint::CPoint, COMDAT
; _this$ = ecx

; 139  : {

	push	ebp
	mov	ebp, esp

; 140  : 	*(POINT*)this = initPt;

	mov	edx, DWORD PTR _initPt$[ebp+4]
	mov	eax, ecx
	mov	ecx, DWORD PTR _initPt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 141  : }

	pop	ebp
	ret	8
??0CPoint@@QAE@UtagPOINT@@@Z ENDP			; CPoint::CPoint
_TEXT	ENDS
EXTRN	__CIsqrt:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __X$[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv69[ebp]
	fld	DWORD PTR tv69[ebp]
	pop	ebp
	ret	0
_sqrtf	ENDP
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT

; 42   : 		}

	ret	0
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\detail\hash_float_generic.hpp
_TEXT	ENDS
;	COMDAT ?hash_float_combine@hash_detail@boost@@YAXAAII@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?hash_float_combine@hash_detail@boost@@YAXAAII@Z PROC	; boost::hash_detail::hash_float_combine, COMDAT
; _seed$ = ecx

; 32   :         {

	push	ebp
	mov	ebp, esp

; 33   :             seed ^= value + (seed<<6) + (seed>>2);

	mov	eax, DWORD PTR [ecx]
	push	esi
	mov	edx, eax
	shl	edx, 6
	add	edx, DWORD PTR _value$[ebp]
	mov	esi, eax
	shr	esi, 2
	add	esi, edx
	xor	esi, eax
	mov	DWORD PTR [ecx], esi
	pop	esi

; 34   :         }

	pop	ebp
	ret	0
?hash_float_combine@hash_detail@boost@@YAXAAII@Z ENDP	; boost::hash_detail::hash_float_combine
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\detail\float_functions.hpp
_TEXT	ENDS
;	COMDAT ??R?$call_ldexp@N@hash_detail@boost@@QBENNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
??R?$call_ldexp@N@hash_detail@boost@@QBENNH@Z PROC	; boost::hash_detail::call_ldexp<double>::operator(), COMDAT

; 57   :             {

	push	ebp
	mov	ebp, esp

; 58   :                 using namespace std;
; 59   :                 return ldexp(a, b);

	fld	QWORD PTR _a$[ebp]
	push	32					; 00000020H
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_ldexp
	add	esp, 12					; 0000000cH

; 60   :             }

	pop	ebp
	ret	8
??R?$call_ldexp@N@hash_detail@boost@@QBENNH@Z ENDP	; boost::hash_detail::call_ldexp<double>::operator()
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??R?$call_frexp@N@hash_detail@boost@@QBENNPAH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
??R?$call_frexp@N@hash_detail@boost@@QBENNPAH@Z PROC	; boost::hash_detail::call_frexp<double>::operator(), COMDAT
; _b$ = eax

; 72   :             {

	push	ebp
	mov	ebp, esp

; 73   :                 using namespace std;
; 74   :                 return frexp(a, b);

	fld	QWORD PTR _a$[ebp]
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_frexp
	add	esp, 12					; 0000000cH

; 75   :             }

	pop	ebp
	ret	8
??R?$call_frexp@N@hash_detail@boost@@QBENNPAH@Z ENDP	; boost::hash_detail::call_frexp<double>::operator()
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAAAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@AAPAU1234@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAAAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@AAPAU1234@@Z PROC ; std::forward<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &>, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAAAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@AAPAU1234@@Z ENDP ; std::forward<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &>
_TEXT	ENDS
PUBLIC	?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
;	COMDAT ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_BSS	SEGMENT
?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A DB 034H DUP (?) ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT ??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z
_TEXT	SEGMENT
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z PROC ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
	ret	0
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ENDP ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@@std@@YA$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AAV1234@@Z
_TEXT	SEGMENT
??$forward@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@@std@@YA$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AAV1234@@Z PROC ; std::forward<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@@std@@YA$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AAV1234@@Z ENDP ; std::forward<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$0A@@detail@tuples@boost@@SAABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@ABU645@@Z
_TEXT	SEGMENT
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$0A@@detail@tuples@boost@@SAABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@ABU645@@Z PROC ; boost::tuples::detail::drop_front<0>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call, COMDAT
; _tup$ = eax

; 109  :             return tup;
; 110  :         }

	ret	0
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$0A@@detail@tuples@boost@@SAABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@ABU645@@Z ENDP ; boost::tuples::detail::drop_front<0>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$00@detail@tuples@boost@@SAABU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z
_TEXT	SEGMENT
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$00@detail@tuples@boost@@SAABU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z PROC ; boost::tuples::detail::drop_front<1>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call, COMDAT
; _tup$ = eax

; 98   :             return next::call(tup).tail;

	add	eax, 4

; 99   :         }

	ret	0
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$00@detail@tuples@boost@@SAABU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ENDP ; boost::tuples::detail::drop_front<1>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@I@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z
_TEXT	SEGMENT
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@I@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z PROC ; std::allocator<unsigned int>::allocator<unsigned int><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _this$ = eax

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	ret	0
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@I@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ENDP ; std::allocator<unsigned int>::allocator<unsigned int><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z
_TEXT	SEGMENT
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z PROC ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _this$ = eax

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	ret	0
??$?0V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@1@@Z ENDP ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > ><boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ??$get@$0A@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABIABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z
_TEXT	SEGMENT
??$get@$0A@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABIABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z PROC ; boost::tuples::get<0,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >, COMDAT
; _c$ = eax

; 226  :   typedef BOOST_DEDUCED_TYPENAME detail::drop_front<N>::BOOST_NESTED_TEMPLATE
; 227  :       apply<cons<HT, TT> > impl;
; 228  :   typedef BOOST_DEDUCED_TYPENAME impl::type cons_element;
; 229  :   return impl::call(c).head;
; 230  : }

	ret	0
??$get@$0A@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABIABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ENDP ; boost::tuples::get<0,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$get@$00IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z
_TEXT	SEGMENT
??$get@$00IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z PROC ; boost::tuples::get<1,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >, COMDAT
; _c$ = eax

; 226  :   typedef BOOST_DEDUCED_TYPENAME detail::drop_front<N>::BOOST_NESTED_TEMPLATE
; 227  :       apply<cons<HT, TT> > impl;
; 228  :   typedef BOOST_DEDUCED_TYPENAME impl::type cons_element;
; 229  :   return impl::call(c).head;

	add	eax, 4

; 230  : }

	ret	0
??$get@$00IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ENDP ; boost::tuples::get<1,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@1@@Z
_TEXT	SEGMENT
??$?0U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@1@@Z PROC ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> ><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >, COMDAT
; _this$ = eax

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	ret	0
??$?0U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@1@@Z ENDP ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> ><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\utility\base_from_member.hpp
_TEXT	ENDS
;	COMDAT ??$?0V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@?$base_from_member@V?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@$0A@@boost@@IAE@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 1
??$?0V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@?$base_from_member@V?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@$0A@@boost@@IAE@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z PROC ; boost::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0>::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0><std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT

; 75   :     BOOST_PP_REPEAT_FROM_TO( 1, BOOST_PP_INC(BOOST_BASE_FROM_MEMBER_MAX_ARITY),

	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
	ret	4
??$?0V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@?$base_from_member@V?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@$0A@@boost@@IAE@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ENDP ; boost::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0>::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >,0><std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$move@AA_K@std@@YA$$QA_KAA_K@Z
_TEXT	SEGMENT
??$move@AA_K@std@@YA$$QA_KAA_K@Z PROC			; std::move<unsigned __int64 &>, COMDAT
; __Arg$ = eax

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
; 88   : 	}

	ret	0
??$move@AA_K@std@@YA$$QA_KAA_K@Z ENDP			; std::move<unsigned __int64 &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$forward@_K@std@@YA$$QA_KAA_K@Z
_TEXT	SEGMENT
??$forward@_K@std@@YA$$QA_KAA_K@Z PROC			; std::forward<unsigned __int64>, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@_K@std@@YA$$QA_KAA_K@Z ENDP			; std::forward<unsigned __int64>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$move@AAU?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z
_TEXT	SEGMENT
??$move@AAU?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z PROC ; std::move<std::pair<unsigned __int64,unsigned __int64> &>, COMDAT
; __Arg$ = eax

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
; 88   : 	}

	ret	0
??$move@AAU?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ENDP ; std::move<std::pair<unsigned __int64,unsigned __int64> &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@PAU10@@Z
_TEXT	SEGMENT
??$_Val_type@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@PAU10@@Z PROC ; std::_Val_type<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT

; 790  : 	return (0);

	xor	eax, eax

; 791  : 	}

	ret	0
??$_Val_type@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@PAU10@@Z ENDP ; std::_Val_type<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
_TEXT	ENDS
;	COMDAT ?get_allocator@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ
_TEXT	SEGMENT
?get_allocator@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 282  :     return allocator_type(bfm_allocator::member);
; 283  :   }

	ret	0
?get_allocator@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::get_allocator
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\auto_space.hpp
_TEXT	ENDS
;	COMDAT ?data@?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAIXZ
_TEXT	SEGMENT
?data@?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAIXZ PROC ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data, COMDAT
; _this$ = eax

; 67   :   pointer data()const{return data_;}

	mov	eax, DWORD PTR [eax+8]
	ret	0
?data@?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAIXZ ENDP ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ??0?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
??0?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@QAE@XZ PROC ; boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type>::cons<std::equal_to<double>,boost::tuples::null_type>, COMDAT
; _this$ = eax

; 369  :   cons() : head() {}

	ret	0
??0?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type>::cons<std::equal_to<double>,boost::tuples::null_type>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ?position@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z
_TEXT	SEGMENT
?position@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::position, COMDAT
; _this$ = ecx
; _hash$ = eax

; 117  :     return hash%size_;

	xor	edx, edx
	div	DWORD PTR [ecx]
	mov	eax, edx

; 118  :   }

	ret	0
?position@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::position
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
_TEXT	ENDS
;	COMDAT ?size_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEIXZ
_TEXT	SEGMENT
?size_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEIXZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size_, COMDAT
; _this$ = eax

; 476  :     return node_count;

	mov	eax, DWORD PTR [eax+44]

; 477  :   }

	ret	0
?size_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEIXZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size_
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ??0?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
??0?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@QAE@XZ PROC ; boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >, COMDAT
; _this$ = eax

; 280  :   cons() : head(), tail() {}

	ret	0
??0?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
_TEXT	ENDS
;	COMDAT ??R?$equal_to@N@std@@QBE_NABN0@Z
_TEXT	SEGMENT
??R?$equal_to@N@std@@QBE_NABN0@Z PROC			; std::equal_to<double>::operator(), COMDAT
; __Left$ = eax
; __Right$ = ecx

; 92   : 		return (_Left == _Right);

	fld	QWORD PTR [eax]
	fld	QWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@2
	mov	eax, 1

; 93   : 		}

	ret	0
$LN3@operator@2:

; 92   : 		return (_Left == _Right);

	xor	eax, eax

; 93   : 		}

	ret	0
??R?$equal_to@N@std@@QBE_NABN0@Z ENDP			; std::equal_to<double>::operator()
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEABV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ
_TEXT	SEGMENT
?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEABV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final, COMDAT
; _this$ = eax

; 141  :   const final_type& final()const{return *static_cast<const final_type*>(this);}

	test	eax, eax
	je	SHORT $LN3@final
	add	eax, -12				; fffffff4H
	ret	0
$LN3@final:
	xor	eax, eax
	ret	0
?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEABV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\identity.hpp
_TEXT	ENDS
;	COMDAT ??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@AAV4153@@Z
_TEXT	SEGMENT
??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@AAV4153@@Z PROC ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator(), COMDAT
; _x$ = eax

; 118  :     return x;
; 119  :   }

	ret	0
??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@AAV4153@@Z ENDP ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@ABV4153@H@Z
_TEXT	SEGMENT
??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@ABV4153@H@Z PROC ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator(), COMDAT
; _x$ = eax

; 113  :     return x;
; 114  :   }

	ret	0
??R?$non_const_identity_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@ABV4153@H@Z ENDP ; boost::multi_index::detail::non_const_identity_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::operator()
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
_TEXT	ENDS
;	COMDAT ?header@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ
_TEXT	SEGMENT
?header@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::header, COMDAT
; _this$ = eax

; 455  :     return &*bfm_header::member;

	mov	eax, DWORD PTR [eax+4]

; 456  :   }

	ret	0
?header@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::header
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ??0?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
??0?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@QAE@XZ PROC ; boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >, COMDAT
; _this$ = eax

; 280  :   cons() : head(), tail() {}

	ret	0
??0?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ?final_header@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ
_TEXT	SEGMENT
?final_header@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_header, COMDAT
; _this$ = eax

; 143  :   final_node_type* final_header()const{return final().header();}

	test	eax, eax
	je	SHORT $LN5@final_head
	mov	eax, DWORD PTR [eax-8]
	ret	0
$LN5@final_head:
	xor	eax, eax
	mov	eax, DWORD PTR [eax+4]
	ret	0
?final_header@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_header
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ??0?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
??0?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@QAE@XZ PROC ; boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >, COMDAT
; _this$ = eax

; 280  :   cons() : head(), tail() {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?get_tail@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBE?BUnull_type@23@XZ
_TEXT	SEGMENT
?get_tail@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBE?BUnull_type@23@XZ PROC ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_tail, COMDAT
; ___$ReturnUdt$ = eax

; 366  :   const null_type get_tail() const { return null_type(); }

	ret	0
?get_tail@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBE?BUnull_type@23@XZ ENDP ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_tail
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ
_TEXT	SEGMENT
?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ PROC ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_head, COMDAT
; _this$ = eax

; 364  :   get_head() const { return head; }

	ret	0
?get_head@?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QBEABV?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@23@XZ ENDP ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::get_head
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ?size@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEIXZ
_TEXT	SEGMENT
?size@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEIXZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size, COMDAT
; _this$ = eax

; 112  :     return size_;

	mov	eax, DWORD PTR [eax]

; 113  :   }

	ret	0
?size@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEIXZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::size
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ??0?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE@ABUnull_type@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
_TEXT	SEGMENT
??0?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE@ABUnull_type@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = eax

; 80   :   explicit index_base(const ctor_args_list&,const Allocator&){}

	ret	0
??0?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE@ABUnull_type@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ?header@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ
_TEXT	SEGMENT
?header@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::header, COMDAT
; _this$ = eax

; 970  :   node_type* header()const{return this->final_header();}

	test	eax, eax
	je	SHORT $LN7@header
	mov	eax, DWORD PTR [eax-8]
	ret	0
$LN7@header:
	xor	eax, eax
	mov	eax, DWORD PTR [eax+4]
	ret	0
?header@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::header
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\header_holder.hpp
_TEXT	ENDS
;	COMDAT ?final@?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@AAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ
_TEXT	SEGMENT
?final@?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@AAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ PROC ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::final, COMDAT
; _this$ = eax

; 41   :   Final& final(){return *static_cast<Final*>(this);}

	test	eax, eax
	je	SHORT $LN3@final@2
	add	eax, -4					; fffffffcH
	ret	0
$LN3@final@2:
	xor	eax, eax
	ret	0
?final@?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@AAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ENDP ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::final
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ??0?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
??0?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@QAE@XZ PROC ; boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>, COMDAT
; _this$ = eax

; 481  :   tuple() {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV01@@Z PROC ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _this$ = eax

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	ret	0
??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ??0?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QAE@XZ
_TEXT	SEGMENT
??0?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QAE@XZ PROC ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>, COMDAT
; _this$ = eax

; 369  :   cons() : head() {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@boost@@QAE@XZ ENDP ; boost::tuples::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>::cons<boost::tuples::tuple<unsigned int,boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@XZ PROC ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _this$ = eax

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

	ret	0
??0?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@QAE@XZ ENDP ; std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ?add_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEXXZ
_TEXT	SEGMENT
?add_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEXXZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_deleter, COMDAT
; _this$ = eax

; 79   :   void add_deleter()const{++del_ref;}

	inc	DWORD PTR [eax+36]
	ret	0
?add_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEXXZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_deleter
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
_TEXT	ENDS
;	COMDAT ?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ
_TEXT	SEGMENT
?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr, COMDAT
; _this$ = eax

; 102  :       return static_cast<key_type*>(static_cast<void*>(&spc));
; 103  :     }

	ret	0
?key_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPANXZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_ptr
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_node_base.hpp
_TEXT	ENDS
;	COMDAT ?from_value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@SAPAU1234@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
?from_value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@SAPAU1234@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::from_value, COMDAT
; _p$ = eax

; 66   :     return static_cast<index_node_base *>(
; 67   :       reinterpret_cast<pod_value_holder<Value>*>( /* std 9.2.17 */
; 68   :         const_cast<value_type*>(p))); 
; 69   :   }

	ret	0
?from_value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@SAPAU1234@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::from_value
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??0?$_Pair_base@_K_K@std@@QAE@$$QA_K0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??0?$_Pair_base@_K_K@std@@QAE@$$QA_K0@Z PROC		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>, COMDAT
; __Val1$ = edx
; __Val2$ = ecx

; 145  : 		{	// construct from specified values

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], ecx
	pop	esi

; 146  : 		}

	pop	ebp
	ret	4
??0?$_Pair_base@_K_K@std@@QAE@$$QA_K0@Z ENDP		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$_Pair_base@_K_K@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
??0?$_Pair_base@_K_K@std@@QAE@ABU01@@Z PROC		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>, COMDAT
; _this$ = eax
; __Right$ = ecx

; 131  : 		{	// construct by copying _Pair_base

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 132  : 		}

	ret	0
??0?$_Pair_base@_K_K@std@@QAE@ABU01@@Z ENDP		; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??4?$pair@_K_K@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
??4?$pair@_K_K@std@@QAEAAU01@$$QAU01@@Z PROC		; std::pair<unsigned __int64,unsigned __int64>::operator=, COMDAT
; _this$ = eax
; __Right$ = ecx

; 260  : 		this->first = _STD move(_Right.first);

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 261  : 		this->second = _STD move(_Right.second);

	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 262  : 		return (*this);
; 263  : 		}

	ret	0
??4?$pair@_K_K@std@@QAEAAU01@$$QAU01@@Z ENDP		; std::pair<unsigned __int64,unsigned __int64>::operator=
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$pair@_K_K@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
??0?$pair@_K_K@std@@QAE@ABU01@@Z PROC			; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64>, COMDAT
; _this$ = eax
; ___that$ = ecx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
	ret	0
??0?$pair@_K_K@std@@QAE@ABU01@@Z ENDP			; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_node_base.hpp
_TEXT	ENDS
;	COMDAT ??$node_from_value@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@detail@multi_index@boost@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@012@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@0flyweights@2@@Z
_TEXT	SEGMENT
??$node_from_value@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@detail@multi_index@boost@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@012@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@0flyweights@2@@Z PROC ; boost::multi_index::detail::node_from_value<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _p$ = eax

; 92   :   typedef typename Node::allocator_type allocator_type;
; 93   :   return static_cast<Node*>(
; 94   :     index_node_base<Value,allocator_type>::from_value(p));
; 95   : }

	ret	0
??$node_from_value@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@detail@multi_index@boost@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@012@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@0flyweights@2@@Z ENDP ; boost::multi_index::detail::node_from_value<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$?0_K_K@?$pair@_K_K@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
??$?0_K_K@?$pair@_K_K@std@@QAE@$$QAU01@@Z PROC		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>, COMDAT
; _this$ = eax
; __Right$ = ecx

; 255  : 		{	// construct from moved compatible pair

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 256  : 		}

	ret	0
??$?0_K_K@?$pair@_K_K@std@@QAE@$$QAU01@@Z ENDP		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __Last$ = edx
; __Dest$ = eax

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR __First$[ebp]

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

	cmp	ecx, edx
	je	SHORT $LN1@Move
	push	esi
	npad	5
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	add	ecx, 16					; 00000010H
	add	eax, 16					; 00000010H
	cmp	ecx, edx
	jne	SHORT $LL3@Move
	pop	esi
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

	pop	ebp
	ret	0
??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$_Move@AAPAU?$pair@_K_K@std@@@std@@YA$$QAPAU?$pair@_K_K@0@AAPAU10@@Z
_TEXT	SEGMENT
??$_Move@AAPAU?$pair@_K_K@std@@@std@@YA$$QAPAU?$pair@_K_K@0@AAPAU10@@Z PROC ; std::_Move<std::pair<unsigned __int64,unsigned __int64> * &>, COMDAT
; __Arg$ = eax

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
; 96   : 	}

	ret	0
??$_Move@AAPAU?$pair@_K_K@std@@@std@@YA$$QAPAU?$pair@_K_K@0@AAPAU10@@Z ENDP ; std::_Move<std::pair<unsigned __int64,unsigned __int64> * &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$forward@ABU?$pair@_K_K@std@@@std@@YAABU?$pair@_K_K@0@ABU10@@Z
_TEXT	SEGMENT
??$forward@ABU?$pair@_K_K@std@@@std@@YAABU?$pair@_K_K@0@ABU10@@Z PROC ; std::forward<std::pair<unsigned __int64,unsigned __int64> const &>, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@ABU?$pair@_K_K@std@@@std@@YAABU?$pair@_K_K@0@ABU10@@Z ENDP ; std::forward<std::pair<unsigned __int64,unsigned __int64> const &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$forward@AAU?$pair@_K_K@std@@@std@@YAAAU?$pair@_K_K@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@AAU?$pair@_K_K@std@@@std@@YAAAU?$pair@_K_K@0@AAU10@@Z PROC ; std::forward<std::pair<unsigned __int64,unsigned __int64> &>, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@AAU?$pair@_K_K@std@@@std@@YAAAU?$pair@_K_K@0@AAU10@@Z ENDP ; std::forward<std::pair<unsigned __int64,unsigned __int64> &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z
_TEXT	SEGMENT
??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z PROC		; std::forward<unsigned __int64 const >, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@$$CB_K@std@@YA$$QB_KAB_K@Z ENDP		; std::forward<unsigned __int64 const >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$forward@AA_K@std@@YAAA_KAA_K@Z
_TEXT	SEGMENT
??$forward@AA_K@std@@YAAA_KAA_K@Z PROC			; std::forward<unsigned __int64 &>, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@AA_K@std@@YAAA_KAA_K@Z ENDP			; std::forward<unsigned __int64 &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$forward@_J@std@@YA$$QA_JAA_J@Z
_TEXT	SEGMENT
??$forward@_J@std@@YA$$QA_JAA_J@Z PROC			; std::forward<__int64>, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@_J@std@@YA$$QA_JAA_J@Z ENDP			; std::forward<__int64>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\auto_space.hpp
_TEXT	ENDS
;	COMDAT ?data@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ
_TEXT	SEGMENT
?data@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ PROC ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data, COMDAT
; _this$ = eax

; 67   :   pointer data()const{return data_;}

	mov	eax, DWORD PTR [eax+8]
	ret	0
?data@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ENDP ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::data
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_node_base.hpp
_TEXT	ENDS
;	COMDAT ?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ
_TEXT	SEGMENT
?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ PROC ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value, COMDAT
; _this$ = eax

; 54   :     return *static_cast<value_type*>(
; 55   :       static_cast<void*>(&this->space));
; 56   :   }

	ret	0
?value@?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEAAV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@XZ ENDP ; boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::value
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ?buckets@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@ABEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ
_TEXT	SEGMENT
?buckets@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@ABEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::buckets, COMDAT
; _this$ = eax

; 149  :     return spc.data();

	mov	eax, DWORD PTR [eax+12]

; 150  :   }

	ret	0
?buckets@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@ABEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::buckets
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_node.hpp
_TEXT	ENDS
;	COMDAT ?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z
_TEXT	SEGMENT
?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z PROC ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::from_impl, COMDAT
; _x$ = eax

; 140  :     return static_cast<hashed_index_node*>(
; 141  :       static_cast<trampoline*>(&*x));

	test	eax, eax
	je	SHORT $LN3@from_impl
	add	eax, -40				; ffffffd8H

; 142  :   }

	ret	0
$LN3@from_impl:

; 140  :     return static_cast<hashed_index_node*>(
; 141  :       static_cast<trampoline*>(&*x));

	xor	eax, eax

; 142  :   }

	ret	0
?from_impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ENDP ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::from_impl
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ
_TEXT	SEGMENT
?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ PROC ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::impl, COMDAT
; _this$ = eax

; 128  :     return static_cast<impl_pointer>(
; 129  :       static_cast<impl_type*>(static_cast<trampoline*>(this)));

	test	eax, eax
	je	SHORT $LN3@impl
	add	eax, 40					; 00000028H

; 130  :   }

	ret	0
$LN3@impl:

; 128  :     return static_cast<impl_pointer>(
; 129  :       static_cast<impl_type*>(static_cast<trampoline*>(this)));

	xor	eax, eax

; 130  :   }

	ret	0
?impl@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ENDP ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::impl
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z
_TEXT	SEGMENT
?deallocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z PROC ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::deallocate, COMDAT
; __Ptr$ = eax

; 182  : 		::operator delete(_Ptr);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 183  : 		}

	ret	0
?deallocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z ENDP ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::deallocate
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ
_TEXT	SEGMENT
?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end, COMDAT
; _this$ = eax

; 121  :   pointer end()const{return buckets()+size_;}

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+12]
	lea	eax, DWORD PTR [edx+ecx*4]
	ret	0
?end@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::end
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ
_TEXT	SEGMENT
?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::begin, COMDAT
; _this$ = eax

; 120  :   pointer begin()const{return buckets();}

	mov	eax, DWORD PTR [eax+12]
	ret	0
?begin@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@XZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::begin
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
_TEXT	ENDS
;	COMDAT ?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z
_TEXT	SEGMENT
?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::deallocate_node, COMDAT
; _x$ = eax

; 465  :     typedef typename node_allocator::pointer node_pointer;
; 466  :     bfm_allocator::member.deallocate(static_cast<node_pointer>(x),1);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 467  :   }

	ret	0
?deallocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::deallocate_node
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_iterator.hpp
_TEXT	ENDS
;	COMDAT ??0?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAE@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@123@PAV?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@123@@Z
_TEXT	SEGMENT
_buckets_$ = 8						; size = 4
??0?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAE@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@123@PAV?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@123@@Z PROC ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >, COMDAT
; _this$ = eax
; _node_$ = ecx

; 46   :   {}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _buckets_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	pop	ebp
	ret	4
??0?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAE@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@123@PAV?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@123@@Z ENDP ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ
_TEXT	SEGMENT
?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final, COMDAT
; _this$ = eax

; 140  :   final_type&       final(){return *static_cast<final_type*>(this);}

	test	eax, eax
	je	SHORT $LN3@final@3
	add	eax, -12				; fffffff4H
	ret	0
$LN3@final@3:
	xor	eax, eax
	ret	0
?final@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEAAV?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@XZ ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_iterator.hpp
_TEXT	ENDS
;	COMDAT ?get_node@?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ
_TEXT	SEGMENT
?get_node@?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ PROC ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::get_node, COMDAT
; _this$ = eax

; 90   :   Node* get_node()const{return node;}

	mov	eax, DWORD PTR [eax]
	ret	0
?get_node@?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@XZ ENDP ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::get_node
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ?make_iterator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?make_iterator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::make_iterator, COMDAT
; ___$ReturnUdt$ = eax
; _node$ = ecx

; 655  :   {

	push	ebp
	mov	ebp, esp

; 656  :     return iterator(node,&buckets);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 657  :   }

	pop	ebp
	ret	4
?make_iterator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::make_iterator
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?iterator_to@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?iterator_to@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::iterator_to, COMDAT
; ___$ReturnUdt$ = eax
; _x$ = ecx

; 238  :   {

	push	ebp
	mov	ebp, esp

; 239  :     return make_iterator(node_from_value<node_type>(&x));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 240  :   }

	pop	ebp
	ret	4
?iterator_to@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::iterator_to
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
_TEXT	ENDS
;	COMDAT ?mutex@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAUmutex_type@no_locking@34@XZ
_TEXT	SEGMENT
?mutex@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAUmutex_type@no_locking@34@XZ PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::mutex, COMDAT

; 153  :     return *static_mutex_ptr;

	mov	eax, DWORD PTR ?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_mutex_ptr

; 154  :   }

	ret	0
?mutex@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAUmutex_type@no_locking@34@XZ ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::mutex
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@V?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z PROC ; std::forward<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@V?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ENDP ; std::forward<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$move@AA_J@std@@YA$$QA_JAA_J@Z
_TEXT	SEGMENT
??$move@AA_J@std@@YA$$QA_JAA_J@Z PROC			; std::move<__int64 &>, COMDAT
; __Arg$ = eax

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
; 88   : 	}

	ret	0
??$move@AA_J@std@@YA$$QA_JAA_J@Z ENDP			; std::move<__int64 &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBH@std@@YAPBHABH@Z
_TEXT	SEGMENT
??$addressof@$$CBH@std@@YAPBHABH@Z PROC			; std::addressof<int const >, COMDAT
; __Val$ = eax

; 111  : 	return ((_Ty *) &(char&)_Val);
; 112  : 	}

	ret	0
??$addressof@$$CBH@std@@YAPBHABH@Z ENDP			; std::addressof<int const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$_Move@AAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z
_TEXT	SEGMENT
??$_Move@AAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z PROC ; std::_Move<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > &>, COMDAT
; __Arg$ = eax

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
; 96   : 	}

	ret	0
??$_Move@AAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YA$$QAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAV10@@Z ENDP ; std::_Move<std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z
_TEXT	SEGMENT
??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z PROC ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __Left$ = ecx
; __Right$ = eax

; 102  : 	_Ty _Tmp = _Move(_Left);

	mov	edx, DWORD PTR [ecx]
	push	esi

; 103  : 	_Left = _Move(_Right);

	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 104  : 	_Right = _Move(_Tmp);

	mov	DWORD PTR [eax], edx
	pop	esi

; 105  : 	}

	ret	0
??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z ENDP ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z
_TEXT	SEGMENT
??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z PROC ; std::operator==<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 263  : 	return (true);

	mov	al, 1

; 264  : 	}

	ret	0
??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ENDP ; std::operator==<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBU?$pair@_K_K@std@@@std@@YAPBU?$pair@_K_K@0@ABU10@@Z
_TEXT	SEGMENT
??$addressof@$$CBU?$pair@_K_K@std@@@std@@YAPBU?$pair@_K_K@0@ABU10@@Z PROC ; std::addressof<std::pair<unsigned __int64,unsigned __int64> const >, COMDAT
; __Val$ = eax

; 111  : 	return ((_Ty *) &(char&)_Val);
; 112  : 	}

	ret	0
??$addressof@$$CBU?$pair@_K_K@std@@@std@@YAPBU?$pair@_K_K@0@ABU10@@Z ENDP ; std::addressof<std::pair<unsigned __int64,unsigned __int64> const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z PROC ; std::forward<std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; __Arg$ = eax

; 79   : 	return ((_Ty&&)_Arg);
; 80   : 	}

	ret	0
??$forward@U?$pair@_K_K@std@@@std@@YA$$QAU?$pair@_K_K@0@AAU10@@Z ENDP ; std::forward<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAU10@@Z
_TEXT	SEGMENT
??$addressof@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAU10@@Z PROC ; std::addressof<std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; __Val$ = eax

; 111  : 	return ((_Ty *) &(char&)_Val);
; 112  : 	}

	ret	0
??$addressof@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAU10@@Z ENDP ; std::addressof<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$max@_K@std@@YAAB_KAB_K0@Z
_TEXT	SEGMENT
??$max@_K@std@@YAAB_KAB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT
; __Left$ = ecx
; __Right$ = eax

; 2080 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+4]
	ja	SHORT $LN3@max
	jb	SHORT $LN4@max
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax]
	jb	SHORT $LN4@max
$LN3@max:
	mov	eax, ecx
$LN4@max:

; 2081 : 	}

	ret	0
??$max@_K@std@@YAAB_KAB_K0@Z ENDP			; std::max<unsigned __int64>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
_TEXT	ENDS
;	COMDAT ?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ
_TEXT	SEGMENT
?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::spc_ptr, COMDAT
; _this$ = eax

; 97   :     void* spc_ptr()const{return static_cast<void*>(&spc);}

	ret	0
?spc_ptr@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEPAXXZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::spc_ptr
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\hashed_factory.hpp
_TEXT	ENDS
;	COMDAT ?entry@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@PBV4523@@Z
_TEXT	SEGMENT
?entry@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@PBV4523@@Z PROC ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::entry, COMDAT
; _h$ = eax

; 80   :   static const Entry& entry(handle_type h){return *h;}

	ret	0
?entry@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@PBV4523@@Z ENDP ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::entry
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
_TEXT	ENDS
;	COMDAT ?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ
_TEXT	SEGMENT
?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::factory, COMDAT

; 148  :     return *static_factory_ptr;

	mov	eax, DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr

; 149  :   }

	ret	0
?factory@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAAAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@XZ ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::factory
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ??B?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QBEABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@XZ
_TEXT	SEGMENT
??B?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QBEABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@XZ PROC ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::operator boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const * const &, COMDAT
; _this$ = eax

; 117  :   operator const Handle&()const{return h;}

	ret	0
??B?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QBEABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@XZ ENDP ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::operator boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const * const &
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
_TEXT	ENDS
;	COMDAT ??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABVass_synth_priv@@XZ
_TEXT	SEGMENT
??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABVass_synth_priv@@XZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator ass_synth_priv const &, COMDAT
; _this$ = eax

; 86   :       /* This is always called after construct_value() or copy_value(),
; 87   :        * so we access spc directly rather than through value_ptr to
; 88   :        * save us an indirection.
; 89   :        */
; 90   : 
; 91   :       return *static_cast<value_type*>(spc_ptr());
; 92   :     }

	ret	0
??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABVass_synth_priv@@XZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator ass_synth_priv const &
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ?release_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ
_TEXT	SEGMENT
?release_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release_deleter, COMDAT
; _this$ = eax

; 80   :   bool release_deleter()const{return (--del_ref==0);}

	dec	DWORD PTR [eax+36]
	mov	eax, 0
	sete	al
	ret	0
?release_deleter@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release_deleter
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@XZ
_TEXT	SEGMENT
??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@XZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type const &, COMDAT
; _this$ = eax

; 67   :   operator const Value&()const{return x;}

	ret	0
??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@XZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type const &
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
_TEXT	ENDS
;	COMDAT ?entry@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABQBV5234@@Z
_TEXT	SEGMENT
?entry@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABQBV5234@@Z PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry, COMDAT
; _h$ = eax

; 133  :     return factory().entry(h);

	mov	eax, DWORD PTR [eax]

; 134  :   }

	ret	0
?entry@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABQBV5234@@Z ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::max_size, COMDAT

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 268435455				; 0fffffffH

; 220  : 		}

	ret	0
?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::max_size
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
_TEXT	ENDS
;	COMDAT ?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z
_TEXT	SEGMENT
?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z PROC ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry, COMDAT
; _h$ = eax

; 62   :     return core::entry(h);

	mov	eax, DWORD PTR [eax]

; 63   :   }

	ret	0
?entry@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@234@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ENDP ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::entry
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??0?$_Pair_base@_J_J@std@@QAE@$$QA_J0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??0?$_Pair_base@_J_J@std@@QAE@$$QA_J0@Z PROC		; std::_Pair_base<__int64,__int64>::_Pair_base<__int64,__int64>, COMDAT
; __Val1$ = edx
; __Val2$ = ecx

; 145  : 		{	// construct from specified values

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], ecx
	pop	esi

; 146  : 		}

	pop	ebp
	ret	4
??0?$_Pair_base@_J_J@std@@QAE@$$QA_J0@Z ENDP		; std::_Pair_base<__int64,__int64>::_Pair_base<__int64,__int64>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++, COMDAT
; _this$ = eax

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

	add	DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*, COMDAT
; _this$ = eax

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

	mov	eax, DWORD PTR [eax]

; 85   : 		}

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT

; 1454 : 		}

	ret	0
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx
; __Ptr$ = eax

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside
	mov	eax, 1

; 1287 : 		}

	ret	0
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	xor	eax, eax

; 1287 : 		}

	ret	0
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ?check_erase@?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@CA_NABV1234@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?check_erase@?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@CA_NABV1234@@Z PROC ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::check_erase, COMDAT

; 126  :   {

	push	ebp
	mov	ebp, esp

; 127  :     return TrackingHelper::entry(x).release_deleter();

	mov	eax, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax]
	dec	DWORD PTR [eax+36]
	mov	eax, 0
	sete	al

; 128  :   }

	pop	ebp
	ret	0
?check_erase@?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@CA_NABV1234@@Z ENDP ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::check_erase
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
_TEXT	ENDS
;	COMDAT ?value@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABVass_synth_priv@@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z
_TEXT	SEGMENT
?value@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABVass_synth_priv@@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::value, COMDAT
; _h$ = eax

; 138  :     return static_cast<const rep_type&>(entry(h));

	mov	eax, DWORD PTR [eax]

; 139  :   }

	ret	0
?value@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAABVass_synth_priv@@ABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@@Z ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::value
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Compat, COMDAT

; 253  : 		}

	ret	0
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Compat
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z
_TEXT	SEGMENT
?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Orphan_range, COMDAT

; 1454 : 		}

	ret	0
?_Orphan_range@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXPAU?$pair@_K_K@2@0@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Orphan_range
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen, COMDAT

; 1427 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEXXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBE_NPBU?$pair@_K_K@2@@Z
_TEXT	SEGMENT
?_Inside@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBE_NPBU?$pair@_K_K@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Inside, COMDAT
; _this$ = ecx
; __Ptr$ = eax

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside@2
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside@2
	mov	eax, 1

; 1287 : 		}

	ret	0
$LN3@Inside@2:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	xor	eax, eax

; 1287 : 		}

	ret	0
?_Inside@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBE_NPBU?$pair@_K_K@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Inside
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size, COMDAT

; 884  : 		return (this->_Alval.max_size());

	mov	eax, 268435455				; 0fffffffH

; 885  : 		}

	ret	0
?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 4

; 778  : 		}

	ret	0
?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??0?$pair@_J_J@std@@QAE@$$QA_J0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??0?$pair@_J_J@std@@QAE@$$QA_J0@Z PROC			; std::pair<__int64,__int64>::pair<__int64,__int64>, COMDAT
; __Val1$ = edx
; __Val2$ = ecx

; 227  : 		{	// construct from specified values

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], ecx
	pop	esi

; 228  : 		}

	pop	ebp
	ret	4
??0?$pair@_J_J@std@@QAE@$$QA_J0@Z ENDP			; std::pair<__int64,__int64>::pair<__int64,__int64>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++, COMDAT
; _this$ = eax

; 332  : 		++*(_Mybase *)this;

	add	DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

	ret	0
??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*, COMDAT
; _this$ = eax

; 322  : 		return ((reference)**(_Mybase *)this);

	mov	eax, DWORD PTR [eax]

; 323  : 		}

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\flyweight.hpp
_TEXT	ENDS
;	COMDAT ?get@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QBEABVass_synth_priv@@XZ
_TEXT	SEGMENT
?get@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QBEABVass_synth_priv@@XZ PROC ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::get, COMDAT
; _this$ = eax

; 202  :   const value_type& get()const{return core::value(h);}

	mov	eax, DWORD PTR [eax]
	ret	0
?get@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QBEABVass_synth_priv@@XZ ENDP ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::get
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator==, COMDAT
; _this$ = eax
; __Right$ = edx

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	sete	al

; 204  : 		}

	ret	0
??8?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator==
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++, COMDAT
; _this$ = eax

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

	add	DWORD PTR [eax], 16			; 00000010H

; 111  : 		return (*this);
; 112  : 		}

	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*, COMDAT
; _this$ = eax

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

	mov	eax, DWORD PTR [eax]

; 85   : 		}

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEABU?$pair@_K_K@1@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\operator_bool.hpp
_TEXT	ENDS
;	COMDAT ??7?$shared_ptr@UOverlay@@@boost@@QBE_NXZ
_TEXT	SEGMENT
??7?$shared_ptr@UOverlay@@@boost@@QBE_NXZ PROC		; boost::shared_ptr<Overlay>::operator!, COMDAT
; _this$ = ecx

; 55   :         return px == 0;

	xor	eax, eax
	cmp	DWORD PTR [ecx], eax
	sete	al

; 56   :     }

	ret	0
??7?$shared_ptr@UOverlay@@@boost@@QBE_NXZ ENDP		; boost::shared_ptr<Overlay>::operator!
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??7?$shared_ptr@E@boost@@QBE_NXZ
_TEXT	SEGMENT
??7?$shared_ptr@E@boost@@QBE_NXZ PROC			; boost::shared_ptr<unsigned char>::operator!, COMDAT
; _this$ = ecx

; 55   :         return px == 0;

	xor	eax, eax
	cmp	DWORD PTR [ecx], eax
	sete	al

; 56   :     }

	ret	0
??7?$shared_ptr@E@boost@@QBE_NXZ ENDP			; boost::shared_ptr<unsigned char>::operator!
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??B?$shared_ptr@E@boost@@QBEPQ01@PAEXZ
_TEXT	SEGMENT
??B?$shared_ptr@E@boost@@QBEPQ01@PAEXZ PROC		; boost::shared_ptr<unsigned char>::operator unsigned char * boost::shared_ptr<unsigned char>::*, COMDAT
; _this$ = eax

; 47   :         return px == 0? 0: &this_type::px;

	mov	eax, DWORD PTR [eax]
	neg	eax
	sbb	eax, eax
	neg	eax
	dec	eax

; 48   :     }

	ret	0
??B?$shared_ptr@E@boost@@QBEPQ01@PAEXZ ENDP		; boost::shared_ptr<unsigned char>::operator unsigned char * boost::shared_ptr<unsigned char>::*
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\shared_ptr.hpp
_TEXT	ENDS
;	COMDAT ??C?$shared_ptr@$$CBVScanLineData@@@boost@@QBEPBVScanLineData@@XZ
_TEXT	SEGMENT
??C?$shared_ptr@$$CBVScanLineData@@@boost@@QBEPBVScanLineData@@XZ PROC ; boost::shared_ptr<ScanLineData const >::operator->, COMDAT
; _this$ = eax

; 414  :         BOOST_ASSERT(px != 0);
; 415  :         return px;

	mov	eax, DWORD PTR [eax]

; 416  :     }

	ret	0
??C?$shared_ptr@$$CBVScanLineData@@@boost@@QBEPBVScanLineData@@XZ ENDP ; boost::shared_ptr<ScanLineData const >::operator->
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??D?$shared_ptr@$$CBVScanLineData@@@boost@@QBEABVScanLineData@@XZ
_TEXT	SEGMENT
??D?$shared_ptr@$$CBVScanLineData@@@boost@@QBEABVScanLineData@@XZ PROC ; boost::shared_ptr<ScanLineData const >::operator*, COMDAT
; _this$ = eax

; 408  :         BOOST_ASSERT(px != 0);
; 409  :         return *px;

	mov	eax, DWORD PTR [eax]

; 410  :     }

	ret	0
??D?$shared_ptr@$$CBVScanLineData@@@boost@@QBEABVScanLineData@@XZ ENDP ; boost::shared_ptr<ScanLineData const >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::empty, COMDAT
; _this$ = eax

; 889  : 		return (this->_Myfirst == this->_Mylast);

	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	sete	al

; 890  : 		}

	ret	0
?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::empty
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 4

; 880  : 		}

	ret	0
?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size
_TEXT	ENDS
PUBLIC	?_ReallocEdgeBuffer@ScanLineData@@AAEXH@Z	; ScanLineData::_ReallocEdgeBuffer
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
;	COMDAT ?_ReallocEdgeBuffer@ScanLineData@@AAEXH@Z
_TEXT	SEGMENT
?_ReallocEdgeBuffer@ScanLineData@@AAEXH@Z PROC		; ScanLineData::_ReallocEdgeBuffer, COMDAT
; _this$ = esi
; _edges$ = eax

; 2269 :     mEdgeHeapSize = edges;
; 2270 :     mpEdgeBuffer = (Edge*)realloc(mpEdgeBuffer, sizeof(Edge)*edges);

	mov	ecx, DWORD PTR [esi+48]
	mov	DWORD PTR [esi+52], eax
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	push	ecx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR [esi+48], eax

; 2271 : }

	ret	0
?_ReallocEdgeBuffer@ScanLineData@@AAEXH@Z ENDP		; ScanLineData::_ReallocEdgeBuffer
PUBLIC	?PartialEndPath@PathData@@QAE_NPAUHDC__@@JJ@Z	; PathData::PartialEndPath
; Function compile flags: /Ogtp
;	COMDAT ?PartialEndPath@PathData@@QAE_NPAUHDC__@@JJ@Z
_TEXT	SEGMENT
_pNewPoints$318707 = -20				; size = 4
_pNewTypes$318706 = -16					; size = 4
_hdc$ = -12						; size = 4
_pPoints$318718 = -8					; size = 4
_pTypes$318715 = -4					; size = 4
_dx$ = 8						; size = 4
?PartialEndPath@PathData@@QAE_NPAUHDC__@@JJ@Z PROC	; PathData::PartialEndPath, COMDAT
; _this$ = esi

; 2179 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	edi

; 2198 :         {
; 2199 :             for(int i = 0; i < nPoints; ++i)

	mov	edi, DWORD PTR _g_hDC
	push	edi

; 2209 :         }
; 2210 :         else
; 2211 :             DebugBreak();

	mov	DWORD PTR _hdc$[ebp], edi
	call	DWORD PTR __imp__CloseFigure@4
	push	edi
	call	DWORD PTR __imp__EndPath@4
	test	eax, eax
	je	$LN9@PartialEnd

; 2180 :     ::CloseFigure(hdc);
; 2181 :     if(::EndPath(hdc))
; 2182 :     {
; 2183 :         int nPoints;
; 2184 :         BYTE* pNewTypes;
; 2185 :         POINT* pNewPoints;
; 2186 :         nPoints = GetPath(hdc, NULL, NULL, 0);

	push	0
	push	0
	push	0
	push	edi
	call	DWORD PTR __imp__GetPath@16
	mov	edi, eax

; 2187 :         if(!nPoints)

	test	edi, edi

; 2188 :             return true;

	je	$LN16@PartialEnd

; 2189 :         pNewTypes = (BYTE*)realloc(mpPathTypes, (mPathPoints + nPoints) * sizeof(BYTE));

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [esi]
	add	eax, edi
	push	eax
	push	ecx
	call	_realloc

; 2190 :         pNewPoints = (POINT*)realloc(mpPathPoints, (mPathPoints + nPoints) * sizeof(POINT));

	mov	edx, DWORD PTR [esi+8]
	add	edx, edi
	add	edx, edx
	add	edx, edx
	mov	ebx, eax
	mov	eax, DWORD PTR [esi+4]
	add	edx, edx
	push	edx
	push	eax
	mov	DWORD PTR _pNewTypes$318706[ebp], ebx
	call	_realloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pNewPoints$318707[ebp], eax

; 2191 :         if(pNewTypes)

	test	ebx, ebx
	je	SHORT $LN7@PartialEnd

; 2192 :             mpPathTypes = pNewTypes;

	mov	DWORD PTR [esi], ebx
$LN7@PartialEnd:

; 2193 :         if(pNewPoints)

	test	eax, eax
	je	SHORT $LN6@PartialEnd

; 2194 :             mpPathPoints = pNewPoints;

	mov	DWORD PTR [esi+4], eax
$LN6@PartialEnd:

; 2195 :         BYTE* pTypes = new BYTE[nPoints];

	push	edi
	call	??_U@YAPAXI@Z				; operator new[]
	mov	DWORD PTR _pTypes$318715[ebp], eax

; 2196 :         POINT* pPoints = new POINT[nPoints];

	xor	ecx, ecx
	mov	eax, edi
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 8

; 2197 :         if(pNewTypes && pNewPoints && nPoints == GetPath(hdc, pPoints, pTypes, nPoints))

	cmp	DWORD PTR _pNewTypes$318706[ebp], 0
	mov	ebx, eax
	mov	DWORD PTR _pPoints$318718[ebp], ebx
	je	$LN5@PartialEnd
	cmp	DWORD PTR _pNewPoints$318707[ebp], 0
	je	SHORT $LN5@PartialEnd
	mov	eax, DWORD PTR _pTypes$318715[ebp]
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	edi
	push	eax
	push	ebx
	push	ecx
	call	DWORD PTR __imp__GetPath@16
	cmp	edi, eax
	jne	SHORT $LN5@PartialEnd

; 2198 :         {
; 2199 :             for(int i = 0; i < nPoints; ++i)

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN15@PartialEnd
	npad	4
$LL14@PartialEnd:

; 2200 :             {
; 2201 :                 mpPathPoints[mPathPoints + i].x = pPoints[i].x + dx;

	mov	edx, DWORD PTR [ebx+eax*8]
	add	edx, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR [esi+8]
	mov	ebx, DWORD PTR [esi+4]
	add	ecx, eax
	mov	DWORD PTR [ebx+ecx*8], edx

; 2202 :                 mpPathPoints[mPathPoints + i].y = pPoints[i].y + dy;

	mov	edx, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [esi+4]
	mov	ebx, DWORD PTR _pPoints$318718[ebp]
	mov	ebx, DWORD PTR [ebx+eax*8+4]
	add	edx, eax
	mov	DWORD PTR [ecx+edx*8+4], ebx

; 2203 :                 mpPathTypes[mPathPoints + i] = pTypes[i];

	mov	edx, DWORD PTR [esi+8]
	add	edx, DWORD PTR [esi]
	mov	ecx, DWORD PTR _pTypes$318715[ebp]
	mov	cl, BYTE PTR [eax+ecx]
	mov	ebx, DWORD PTR _pPoints$318718[ebp]
	mov	BYTE PTR [edx+eax], cl
	inc	eax
	cmp	eax, edi
	jl	SHORT $LL14@PartialEnd
$LN15@PartialEnd:

; 2204 :             }
; 2205 :             mPathPoints += nPoints;
; 2206 :             delete[] pTypes;

	mov	edx, DWORD PTR _pTypes$318715[ebp]
	add	DWORD PTR [esi+8], edi
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]

; 2207 :             delete[] pPoints;

	push	ebx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 8
$LN16@PartialEnd:

; 2208 :             return true;

	pop	edi
	mov	al, 1
	pop	ebx

; 2217 : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN5@PartialEnd:

; 2209 :         }
; 2210 :         else
; 2211 :             DebugBreak();

	call	DWORD PTR __imp__DebugBreak@0

; 2212 :         delete[] pTypes;

	mov	eax, DWORD PTR _pTypes$318715[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]

; 2213 :         delete[] pPoints;

	push	ebx
	call	??_V@YAXPAX@Z				; operator delete[]
	mov	edi, DWORD PTR _hdc$[ebp]
	add	esp, 8
$LN9@PartialEnd:

; 2214 :     }
; 2215 :     ::AbortPath(hdc);

	push	edi
	call	DWORD PTR __imp__AbortPath@4
	pop	edi

; 2216 :     return false;

	xor	al, al
	pop	ebx

; 2217 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?PartialEndPath@PathData@@QAE_NPAUHDC__@@JJ@Z ENDP	; PathData::PartialEndPath
_TEXT	ENDS
PUBLIC	?EndPath@PathData@@QAE_NPAUHDC__@@@Z		; PathData::EndPath
; Function compile flags: /Ogtp
;	COMDAT ?EndPath@PathData@@QAE_NPAUHDC__@@@Z
_TEXT	SEGMENT
_hdc$ = -4						; size = 4
?EndPath@PathData@@QAE_NPAUHDC__@@@Z PROC		; PathData::EndPath, COMDAT
; _this$ = edi

; 2155 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, DWORD PTR _g_hDC

; 2156 :     ::CloseFigure(hdc);

	push	esi

; 2162 :         mpPathTypes = (BYTE*)malloc(sizeof(BYTE) * mPathPoints);

	mov	DWORD PTR _hdc$[ebp], esi
	call	DWORD PTR __imp__CloseFigure@4
	push	esi
	call	DWORD PTR __imp__EndPath@4
	test	eax, eax
	je	SHORT $LN1@EndPath

; 2157 :     if(::EndPath(hdc))
; 2158 :     {
; 2159 :         mPathPoints = GetPath(hdc, NULL, NULL, 0);

	push	0
	push	0
	push	0
	push	esi
	call	DWORD PTR __imp__GetPath@16
	mov	esi, eax
	mov	DWORD PTR [edi+8], esi

; 2160 :         if(!mPathPoints)

	test	esi, esi
	jne	SHORT $LN2@EndPath
$LN7@EndPath:

; 2161 :             return true;

	mov	al, 1
	pop	esi

; 2169 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@EndPath:
	push	ebx

; 2162 :         mpPathTypes = (BYTE*)malloc(sizeof(BYTE) * mPathPoints);

	push	esi
	call	_malloc
	mov	ebx, eax

; 2163 :         mpPathPoints = (POINT*)malloc(sizeof(POINT) * mPathPoints);

	lea	eax, DWORD PTR [esi*8]
	push	eax
	mov	DWORD PTR [edi], ebx
	call	_malloc

; 2164 :         if(mPathPoints == GetPath(hdc, mpPathPoints, mpPathTypes, mPathPoints))

	mov	ecx, DWORD PTR _hdc$[ebp]
	add	esp, 8
	push	esi
	push	ebx
	push	eax
	push	ecx
	mov	DWORD PTR [edi+4], eax
	call	DWORD PTR __imp__GetPath@16
	pop	ebx
	cmp	DWORD PTR [edi+8], eax

; 2165 :             return true;

	je	SHORT $LN7@EndPath

; 2164 :         if(mPathPoints == GetPath(hdc, mpPathPoints, mpPathTypes, mPathPoints))

	mov	esi, DWORD PTR _hdc$[ebp]
$LN1@EndPath:

; 2166 :     }
; 2167 :     ::AbortPath(hdc);

	push	esi
	call	DWORD PTR __imp__AbortPath@4

; 2168 :     return false;

	xor	al, al
	pop	esi

; 2169 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EndPath@PathData@@QAE_NPAUHDC__@@@Z ENDP		; PathData::EndPath
_TEXT	ENDS
PUBLIC	?_TrashPath@PathData@@QAEXXZ			; PathData::_TrashPath
; Function compile flags: /Ogtp
;	COMDAT ?_TrashPath@PathData@@QAEXXZ
_TEXT	SEGMENT
?_TrashPath@PathData@@QAEXXZ PROC			; PathData::_TrashPath, COMDAT
; _this$ = esi

; 2135 :     if (mpPathTypes)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@TrashPath

; 2136 :     {
; 2137 :         free(mpPathTypes);

	push	eax
	call	_free
	add	esp, 4

; 2138 :         mpPathTypes = NULL;

	mov	DWORD PTR [esi], 0
$LN2@TrashPath:

; 2139 :     }
; 2140 :     if (mpPathPoints)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN5@TrashPath

; 2141 :     {
; 2142 :         free(mpPathPoints);

	push	eax
	call	_free
	add	esp, 4

; 2143 :         mpPathPoints = NULL;

	mov	DWORD PTR [esi+4], 0
$LN5@TrashPath:

; 2144 :     }
; 2145 :     mPathPoints = 0;

	mov	DWORD PTR [esi+8], 0

; 2146 : }

	ret	0
?_TrashPath@PathData@@QAEXXZ ENDP			; PathData::_TrashPath
_TEXT	ENDS
PUBLIC	??8PathData@@QBE_NABU0@@Z			; PathData::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8PathData@@QBE_NABU0@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??8PathData@@QBE_NABU0@@Z PROC				; PathData::operator==, COMDAT
; _rhs$ = edx

; 2125 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	esi, DWORD PTR _this$[ebp]
	push	edi

; 2126 :     return (this==&rhs) || (
; 2127 :         mPathPoints==rhs.mPathPoints 
; 2128 :         && !memcmp(mpPathTypes, rhs.mpPathTypes, mPathPoints * sizeof(BYTE) ) 
; 2129 :         && !memcmp(mpPathPoints, rhs.mpPathPoints, mPathPoints * sizeof(POINT) )
; 2130 :         );

	cmp	esi, edx
	je	$LN25@operator@3
	mov	edi, DWORD PTR [esi+8]
	cmp	edi, DWORD PTR [edx+8]
	jne	$LN24@operator@3
	mov	ecx, DWORD PTR [edx]
	mov	esi, DWORD PTR [esi]
	mov	eax, edi
	cmp	eax, 4
	jb	SHORT $LN18@operator@3
	npad	8
$LL7@operator@3:
	mov	ebx, DWORD PTR [esi]
	cmp	ebx, DWORD PTR [ecx]
	jne	$LN24@operator@3
	sub	eax, 4
	add	ecx, 4
	add	esi, 4
	cmp	eax, 4
	jae	SHORT $LL7@operator@3
$LN18@operator@3:
	test	eax, eax
	je	SHORT $LN22@operator@3
	mov	bl, BYTE PTR [ecx]
	cmp	bl, BYTE PTR [esi]
	jne	SHORT $LN24@operator@3
	cmp	eax, 1
	jbe	SHORT $LN22@operator@3
	mov	bl, BYTE PTR [ecx+1]
	cmp	bl, BYTE PTR [esi+1]
	jne	SHORT $LN24@operator@3
	cmp	eax, 2
	jbe	SHORT $LN22@operator@3
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [esi+2]
	jne	SHORT $LN24@operator@3
$LN22@operator@3:
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+4]
	lea	eax, DWORD PTR [edi*8]
	cmp	eax, 4
	jb	SHORT $LN19@operator@3
$LL11@operator@3:
	mov	edx, DWORD PTR [esi]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN24@operator@3
	sub	eax, 4
	add	ecx, 4
	add	esi, 4
	cmp	eax, 4
	jae	SHORT $LL11@operator@3
$LN19@operator@3:
	test	eax, eax
	je	SHORT $LN25@operator@3
	mov	dl, BYTE PTR [ecx]
	cmp	dl, BYTE PTR [esi]
	jne	SHORT $LN24@operator@3
	cmp	eax, 1
	jbe	SHORT $LN25@operator@3
	mov	dl, BYTE PTR [ecx+1]
	cmp	dl, BYTE PTR [esi+1]
	jne	SHORT $LN24@operator@3
	cmp	eax, 2
	jbe	SHORT $LN25@operator@3
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [esi+2]
	je	SHORT $LN25@operator@3
$LN24@operator@3:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 2131 : }

	pop	ebp
	ret	4
$LN25@operator@3:
	pop	edi
	pop	esi

; 2126 :     return (this==&rhs) || (
; 2127 :         mPathPoints==rhs.mPathPoints 
; 2128 :         && !memcmp(mpPathTypes, rhs.mpPathTypes, mPathPoints * sizeof(BYTE) ) 
; 2129 :         && !memcmp(mpPathPoints, rhs.mpPathPoints, mPathPoints * sizeof(POINT) )
; 2130 :         );

	mov	eax, 1
	pop	ebx

; 2131 : }

	pop	ebp
	ret	4
??8PathData@@QBE_NABU0@@Z ENDP				; PathData::operator==
_TEXT	ENDS
PUBLIC	??1PathData@@QAE@XZ				; PathData::~PathData
; Function compile flags: /Ogtp
;	COMDAT ??1PathData@@QAE@XZ
_TEXT	SEGMENT
??1PathData@@QAE@XZ PROC				; PathData::~PathData, COMDAT
; _this$ = esi

; 2121 :     _TrashPath();

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN4@PathData
	push	eax
	call	_free
	add	esp, 4
	mov	DWORD PTR [esi], 0
$LN4@PathData:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN7@PathData
	push	eax
	call	_free
	add	esp, 4
	mov	DWORD PTR [esi+4], 0
$LN7@PathData:
	mov	DWORD PTR [esi+8], 0

; 2122 : }

	ret	0
??1PathData@@QAE@XZ ENDP				; PathData::~PathData
_TEXT	ENDS
PUBLIC	??0PathData@@QAE@ABU0@@Z			; PathData::PathData
; Function compile flags: /Ogtp
;	COMDAT ??0PathData@@QAE@ABU0@@Z
_TEXT	SEGMENT
??0PathData@@QAE@ABU0@@Z PROC				; PathData::PathData, COMDAT
; _this$ = esi
; _src$ = edi

; 2085 : {

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax

; 2086 :     //TODO: deal with the case that src.mPathPoints<0 
; 2087 :     if(mPathPoints>0)

	test	eax, eax
	jle	SHORT $LN2@PathData@2

; 2088 :     {
; 2089 :         mpPathTypes = static_cast<BYTE*>(malloc(mPathPoints * sizeof(BYTE)));

	push	eax
	call	_malloc
	mov	DWORD PTR [esi], eax

; 2090 :         mpPathPoints = static_cast<POINT*>(malloc(mPathPoints * sizeof(POINT)));

	mov	eax, DWORD PTR [esi+8]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	call	_malloc
	add	esp, 8
	mov	DWORD PTR [esi+4], eax
$LN2@PathData@2:

; 2091 :     }
; 2092 :     if(mPathPoints>0)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jle	SHORT $LN5@PathData@2

; 2093 :     {
; 2094 :         memcpy(mpPathTypes, src.mpPathTypes, mPathPoints*sizeof(BYTE));

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	edx
	call	_memcpy

; 2095 :         memcpy(mpPathPoints, src.mpPathPoints, mPathPoints*sizeof(POINT));

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [esi+4]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	push	ecx
	push	edx
	call	_memcpy
	add	esp, 24					; 00000018H
$LN5@PathData@2:

; 2096 :     }
; 2097 : }

	mov	eax, esi
	ret	0
??0PathData@@QAE@ABU0@@Z ENDP				; PathData::PathData
_TEXT	ENDS
PUBLIC	??0PathData@@QAE@XZ				; PathData::PathData
; Function compile flags: /Ogtp
;	COMDAT ??0PathData@@QAE@XZ
_TEXT	SEGMENT
??0PathData@@QAE@XZ PROC				; PathData::PathData, COMDAT
; _this$ = eax

; 2081 : {

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx

; 2082 : }

	ret	0
??0PathData@@QAE@XZ ENDP				; PathData::PathData
_TEXT	ENDS
PUBLIC	?_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z ; Overlay::_DoFillAlphaMash_c
; Function compile flags: /Ogtp
;	COMDAT ?_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z
_TEXT	SEGMENT
tv748 = -8						; size = 4
tv510 = -4						; size = 4
_this$ = 8						; size = 4
tv770 = 12						; size = 4
_outputAlphaMask$ = 12					; size = 4
_src1$318544 = 16					; size = 4
_pBody$ = 16						; size = 4
tv626 = 20						; size = 4
tv547 = 20						; size = 4
_pBorder$ = 20						; size = 4
_w$ = 24						; size = 4
_h$ = 28						; size = 4
tv647 = 32						; size = 4
tv156 = 32						; size = 4
_pAlphaMask$ = 32					; size = 4
_pitch$ = 36						; size = 4
_color_alpha$ = 40					; size = 4
?_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z PROC	; Overlay::_DoFillAlphaMash_c, COMDAT
; _x$ = edx
; _y$ = eax

; 1862 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR _pAlphaMask$[ebp]
	sub	esp, 8
	push	ebx
	push	esi
	mov	esi, DWORD PTR _pBody$[ebp]
	push	edi
	mov	edi, DWORD PTR _pBorder$[ebp]

; 1863 :     pBody = pBody!=NULL ? pBody + y*mOverlayPitch + x: NULL;

	test	esi, esi
	je	SHORT $LN36@DoFillAlph
	mov	ebx, DWORD PTR _this$[ebp]
	mov	ebx, DWORD PTR [ebx+40]
	imul	ebx, eax
	add	ebx, edx
	add	esi, ebx
	jmp	SHORT $LN74@DoFillAlph
$LN36@DoFillAlph:
	xor	esi, esi
$LN74@DoFillAlph:
	mov	DWORD PTR _pBody$[ebp], esi

; 1864 :     pBorder = pBorder!=NULL ? pBorder + y*mOverlayPitch + x: NULL;

	test	edi, edi
	je	SHORT $LN38@DoFillAlph
	mov	ebx, DWORD PTR _this$[ebp]
	mov	ebx, DWORD PTR [ebx+40]
	imul	ebx, eax
	add	ebx, edx
	add	edi, ebx
	jmp	SHORT $LN39@DoFillAlph
$LN38@DoFillAlph:
	xor	edi, edi
$LN39@DoFillAlph:

; 1865 :     byte* dst = outputAlphaMask + y*mOverlayPitch + x;

	mov	ebx, DWORD PTR _this$[ebp]
	mov	ebx, DWORD PTR [ebx+40]
	imul	ebx, eax
	add	ebx, DWORD PTR _outputAlphaMask$[ebp]
	add	ebx, edx

; 1866 : 
; 1867 :     if(pAlphaMask==NULL && pBody!=NULL && pBorder!=NULL)

	test	ecx, ecx
	jne	SHORT $LN33@DoFillAlph
	test	esi, esi
	je	SHORT $LN33@DoFillAlph
	test	edi, edi
	je	SHORT $LN33@DoFillAlph

; 1868 :     {
; 1869 :         while(h--)

	cmp	DWORD PTR _h$[ebp], ecx
	je	$LN67@DoFillAlph
$LL32@DoFillAlph:

; 1870 :         {
; 1871 :             int j=0;
; 1872 :             for( ;j<w;j++)

	mov	edx, DWORD PTR _w$[ebp]
	dec	DWORD PTR _h$[ebp]
	test	edx, edx
	jle	SHORT $LN28@DoFillAlph
	mov	ecx, ebx
	sub	esi, edi
	sub	ecx, edi
	mov	eax, edi
	mov	DWORD PTR tv547[ebp], ecx
	mov	DWORD PTR tv156[ebp], edx
	npad	6
$LL30@DoFillAlph:

; 1873 :             {
; 1874 :                 int temp = pBorder[j]-pBody[j];

	movzx	edx, BYTE PTR [esi+eax]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, edx

; 1875 :                 temp = temp<0 ? 0 : temp;

	mov	edx, 0
	sets	dl
	inc	eax
	dec	edx
	and	edx, ecx

; 1876 :                 dst[j] = (temp * color_alpha)>>6;

	imul	edx, DWORD PTR _color_alpha$[ebp]
	mov	ecx, DWORD PTR tv547[ebp]
	shr	edx, 6
	dec	DWORD PTR tv156[ebp]
	mov	BYTE PTR [ecx+eax-1], dl
	jne	SHORT $LL30@DoFillAlph

; 1870 :         {
; 1871 :             int j=0;
; 1872 :             for( ;j<w;j++)

	mov	esi, DWORD PTR _pBody$[ebp]
$LN28@DoFillAlph:

; 1877 :             }
; 1878 :             pBody += mOverlayPitch;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	add	esi, eax

; 1879 :             pBorder += mOverlayPitch;

	add	edi, eax

; 1880 :             //pAlphaMask += pitch;
; 1881 :             dst += mOverlayPitch;

	add	ebx, eax
	cmp	DWORD PTR _h$[ebp], 0
	mov	DWORD PTR _pBody$[ebp], esi
	jne	SHORT $LL32@DoFillAlph
	pop	edi
	pop	esi
	pop	ebx

; 1942 :         }
; 1943 :     }
; 1944 : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
$LN33@DoFillAlph:

; 1882 :         }
; 1883 :     }
; 1884 :     else if( ((pBody==NULL) + (pBorder==NULL))==1 && pAlphaMask==NULL)

	xor	eax, eax
	test	esi, esi
	sete	al
	xor	edx, edx
	test	edi, edi
	sete	dl
	add	eax, edx
	cmp	eax, 1
	jne	$LN19@DoFillAlph
	test	ecx, ecx
	jne	SHORT $LN71@DoFillAlph

; 1885 :     {
; 1886 :         const BYTE* src1 = pBody!=NULL ? pBody : pBorder;

	mov	ecx, esi
	test	esi, esi
	jne	SHORT $LN41@DoFillAlph
	mov	ecx, edi
$LN41@DoFillAlph:

; 1887 :         while(h--)

	cmp	DWORD PTR _h$[ebp], 0
	je	$LN67@DoFillAlph
$LL25@DoFillAlph:

; 1888 :         {
; 1889 :             int j=0;
; 1890 :             for( ; j<w; j++ )

	mov	edi, DWORD PTR _w$[ebp]
	dec	DWORD PTR _h$[ebp]
	test	edi, edi
	jle	SHORT $LN21@DoFillAlph
	mov	esi, ecx
	mov	eax, ebx
	sub	esi, ebx
	npad	8
$LL23@DoFillAlph:

; 1891 :             {
; 1892 :                 dst[j] = (src1[j] * color_alpha)>>6;

	movzx	edx, BYTE PTR [esi+eax]
	imul	edx, DWORD PTR _color_alpha$[ebp]
	shr	edx, 6
	mov	BYTE PTR [eax], dl
	inc	eax
	dec	edi
	jne	SHORT $LL23@DoFillAlph
$LN21@DoFillAlph:

; 1893 :             }
; 1894 :             src1 += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	add	ecx, eax

; 1895 :             //pAlphaMask += pitch;
; 1896 :             dst += mOverlayPitch;

	add	ebx, eax
	cmp	DWORD PTR _h$[ebp], 0
	jne	SHORT $LL25@DoFillAlph
	pop	edi
	pop	esi
	pop	ebx

; 1942 :         }
; 1943 :     }
; 1944 : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
$LN71@DoFillAlph:

; 1897 :         }
; 1898 :     }
; 1899 :     else if( ((pBody==NULL) + (pBorder==NULL))==1 && pAlphaMask!=NULL)

	cmp	eax, 1
	jne	$LN19@DoFillAlph
	test	ecx, ecx
	je	$LN52@DoFillAlph

; 1900 :     {
; 1901 :         const BYTE* src1 = pBody!=NULL ? pBody : pBorder;

	test	esi, esi
	je	SHORT $LN42@DoFillAlph
	mov	DWORD PTR _src1$318544[ebp], esi
	jmp	SHORT $LN43@DoFillAlph
$LN42@DoFillAlph:
	mov	esi, edi
	mov	DWORD PTR _src1$318544[ebp], edi
$LN43@DoFillAlph:

; 1902 :         while(h--)

	cmp	DWORD PTR _h$[ebp], 0
	je	$LN67@DoFillAlph
$LL18@DoFillAlph:

; 1903 :         {
; 1904 :             int j=0;
; 1905 :             for( ; j<w; j++ )

	mov	edi, DWORD PTR _w$[ebp]
	dec	DWORD PTR _h$[ebp]
	test	edi, edi
	jle	SHORT $LN14@DoFillAlph
	mov	edx, ebx
	sub	esi, ecx
	sub	edx, ecx
	mov	eax, ecx
	mov	DWORD PTR tv626[ebp], edx
	mov	DWORD PTR tv647[ebp], edi
	npad	5
$LL16@DoFillAlph:

; 1906 :             {
; 1907 :                 dst[j] = (src1[j] * pAlphaMask[j] * color_alpha)>>12;

	movzx	edi, BYTE PTR [eax]
	movzx	edx, BYTE PTR [esi+eax]
	imul	edx, edi
	imul	edx, DWORD PTR _color_alpha$[ebp]
	mov	edi, DWORD PTR tv626[ebp]
	shr	edx, 12					; 0000000cH
	mov	BYTE PTR [edi+eax], dl
	inc	eax
	dec	DWORD PTR tv647[ebp]
	jne	SHORT $LL16@DoFillAlph
$LN14@DoFillAlph:

; 1908 :             }
; 1909 :             src1 += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esi, DWORD PTR _src1$318544[ebp]

; 1910 :             pAlphaMask += pitch;

	add	ecx, DWORD PTR _pitch$[ebp]
	add	esi, eax

; 1911 :             dst += mOverlayPitch;

	add	ebx, eax
	cmp	DWORD PTR _h$[ebp], 0
	mov	DWORD PTR _src1$318544[ebp], esi
	jne	SHORT $LL18@DoFillAlph
	pop	edi
	pop	esi
	pop	ebx

; 1942 :         }
; 1943 :     }
; 1944 : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
$LN19@DoFillAlph:

; 1912 :         }
; 1913 :     }
; 1914 :     else if( pAlphaMask!=NULL && pBody!=NULL && pBorder!=NULL )

	test	ecx, ecx
	je	$LN52@DoFillAlph
	test	esi, esi
	je	$LN52@DoFillAlph
	test	edi, edi
	je	$LN52@DoFillAlph

; 1915 :     {
; 1916 :         while(h--)

	cmp	DWORD PTR _h$[ebp], 0
	je	$LN67@DoFillAlph
$LL11@DoFillAlph:
	dec	DWORD PTR _h$[ebp]

; 1917 :         {
; 1918 :             int j=0;
; 1919 :             for( ; j<w; j++ )

	cmp	DWORD PTR _w$[ebp], 0
	jle	SHORT $LN7@DoFillAlph
	sub	esi, edi
	sub	ecx, edi
	mov	edx, ebx
	sub	edx, edi
	mov	DWORD PTR tv547[ebp], edx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, edi
	mov	DWORD PTR tv510[ebp], esi
	mov	DWORD PTR tv748[ebp], ecx
	mov	DWORD PTR tv770[ebp], edx
	jmp	SHORT $LN9@DoFillAlph
$LL69@DoFillAlph:

; 1915 :     {
; 1916 :         while(h--)

	mov	esi, DWORD PTR tv510[ebp]
	mov	ecx, DWORD PTR tv748[ebp]
$LN9@DoFillAlph:

; 1920 :             {
; 1921 :                 int temp = pBorder[j]-pBody[j];

	movzx	edx, BYTE PTR [eax+esi]
	movzx	esi, BYTE PTR [eax]

; 1922 :                 temp = temp<0 ? 0 : temp;
; 1923 :                 dst[j] = (temp * pAlphaMask[j] * color_alpha)>>12;

	movzx	ecx, BYTE PTR [ecx+eax]
	sub	esi, edx
	mov	edx, 0
	sets	dl
	inc	eax
	dec	edx
	and	edx, esi
	imul	ecx, edx
	imul	ecx, DWORD PTR _color_alpha$[ebp]
	mov	edx, DWORD PTR tv547[ebp]
	shr	ecx, 12					; 0000000cH
	dec	DWORD PTR tv770[ebp]
	mov	BYTE PTR [eax+edx-1], cl
	jne	SHORT $LL69@DoFillAlph

; 1917 :         {
; 1918 :             int j=0;
; 1919 :             for( ; j<w; j++ )

	mov	ecx, DWORD PTR _pAlphaMask$[ebp]
	mov	esi, DWORD PTR _pBody$[ebp]
$LN7@DoFillAlph:

; 1924 :             }
; 1925 :             pBody += mOverlayPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]

; 1926 :             pBorder += mOverlayPitch;
; 1927 :             pAlphaMask += pitch;

	add	ecx, DWORD PTR _pitch$[ebp]
	add	esi, eax
	add	edi, eax

; 1928 :             dst += mOverlayPitch;

	add	ebx, eax
	cmp	DWORD PTR _h$[ebp], 0
	mov	DWORD PTR _pBody$[ebp], esi
	mov	DWORD PTR _pAlphaMask$[ebp], ecx
	jne	SHORT $LL11@DoFillAlph
	pop	edi
	pop	esi
	pop	ebx

; 1942 :         }
; 1943 :     }
; 1944 : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
$LN52@DoFillAlph:

; 1929 :         }
; 1930 :     }
; 1931 :     else
; 1932 :     {
; 1933 :         //should NOT happen!
; 1934 :         ASSERT(0);
; 1935 :         while(h--)

	mov	esi, DWORD PTR _h$[ebp]
	test	esi, esi
	je	SHORT $LN67@DoFillAlph
	npad	5
$LL5@DoFillAlph:

; 1936 :         {
; 1937 :             for(int j=0;j<w;j++)

	mov	eax, DWORD PTR _w$[ebp]
	dec	esi
	test	eax, eax
	jle	SHORT $LN3@DoFillAlph

; 1929 :         }
; 1930 :     }
; 1931 :     else
; 1932 :     {
; 1933 :         //should NOT happen!
; 1934 :         ASSERT(0);
; 1935 :         while(h--)

	push	eax
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
$LN3@DoFillAlph:

; 1938 :             {
; 1939 :                 dst[j] = 0;
; 1940 :             }
; 1941 :             dst += mOverlayPitch;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ebx, DWORD PTR [ecx+40]
	test	esi, esi
	jne	SHORT $LL5@DoFillAlph
$LN67@DoFillAlph:
	pop	edi
	pop	esi
	pop	ebx

; 1942 :         }
; 1943 :     }
; 1944 : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z ENDP	; Overlay::_DoFillAlphaMash_c
_TEXT	ENDS
PUBLIC	?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z	; Overlay::_DoFillAlphaMash
; Function compile flags: /Ogtp
;	COMDAT ?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z
_TEXT	SEGMENT
tv3177 = -32						; size = 4
tv2829 = -32						; size = 4
tv3569 = -28						; size = 4
tv3387 = -28						; size = 4
tv3234 = -28						; size = 4
tv3113 = -28						; size = 4
tv2927 = -28						; size = 4
tv1706 = -28						; size = 4
tv3037 = -24						; size = 4
tv2895 = -24						; size = 4
tv2670 = -24						; size = 4
tv2464 = -24						; size = 4
tv2296 = -24						; size = 4
_x_end00$318203 = -20					; size = 4
_x_end0$318206 = -16					; size = 4
tv3459 = -12						; size = 4
_j$318417 = -12						; size = 4
_x00$318198 = -8					; size = 4
_x0$318193 = -4						; size = 4
_this$ = 8						; size = 4
tv1674 = 12						; size = 4
tv1614 = 12						; size = 4
_src1$318340 = 12					; size = 4
_outputAlphaMask$ = 12					; size = 4
tv2802 = 16						; size = 4
tv2567 = 16						; size = 4
tv1669 = 16						; size = 4
tv1619 = 16						; size = 4
_j$318344 = 16						; size = 4
_pBody$ = 16						; size = 4
tv2305 = 20						; size = 4
_src1$318284 = 20					; size = 4
_pBorder$ = 20						; size = 4
_w$ = 24						; size = 4
_h$ = 28						; size = 4
tv2310 = 32						; size = 4
tv1851 = 32						; size = 4
tv1583 = 32						; size = 4
tv1540 = 32						; size = 4
_j$318218 = 32						; size = 4
_pAlphaMask$ = 32					; size = 4
tv1798 = 36						; size = 4
tv655 = 36						; size = 4
tv456 = 36						; size = 4
tv365 = 36						; size = 4
tv183 = 36						; size = 4
_pitch$ = 36						; size = 4
_color_alpha$ = 40					; size = 4
?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z PROC	; Overlay::_DoFillAlphaMash, COMDAT
; _x$ = edx
; _y$ = eax

; 1564 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR _pBorder$[ebp]
	sub	esp, 32					; 00000020H

; 1565 :     if (g_cpuid.m_flags & CCpuID::sse2)

	test	BYTE PTR ?g_cpuid@@3VCCpuID@@A, 8
	push	esi
	mov	esi, DWORD PTR _pBody$[ebp]
	push	edi
	je	$LN83@DoFillAlph@2

; 1566 :     {
; 1567 :         pBody = pBody!=NULL ? pBody + y*mOverlayPitch + x: NULL;

	test	esi, esi
	je	SHORT $LN86@DoFillAlph@2
	mov	edi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [edi+40]
	imul	edi, eax
	add	edi, edx
	add	esi, edi
	jmp	SHORT $LN87@DoFillAlph@2
$LN86@DoFillAlph@2:
	xor	esi, esi
$LN87@DoFillAlph@2:

; 1568 :         pBorder = pBorder!=NULL ? pBorder + y*mOverlayPitch + x: NULL;

	test	ecx, ecx
	je	SHORT $LN88@DoFillAlph@2
	mov	edi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [edi+40]
	imul	edi, eax
	add	edi, edx
	add	ecx, edi
	jmp	SHORT $LN185@DoFillAlph@2
$LN88@DoFillAlph@2:
	xor	ecx, ecx
$LN185@DoFillAlph@2:

; 1569 :         byte* dst = outputAlphaMask + y*mOverlayPitch + x;

	mov	edi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [edi+40]
	imul	edi, eax
	add	edi, DWORD PTR _outputAlphaMask$[ebp]
	mov	DWORD PTR _pBorder$[ebp], ecx
	add	edi, edx

; 1570 : 
; 1571 :         const int x0 = ((reinterpret_cast<int>(dst)+3)&~3) - reinterpret_cast<int>(dst) < w ?
; 1572 :             ((reinterpret_cast<int>(dst)+3)&~3) - reinterpret_cast<int>(dst) : w; //IMPORTANT! Should not exceed w.

	lea	eax, DWORD PTR [edi+3]
	and	eax, -4					; fffffffcH
	sub	eax, edi
	cmp	eax, DWORD PTR _w$[ebp]
	jl	SHORT $LN186@DoFillAlph@2
	mov	eax, DWORD PTR _w$[ebp]
$LN186@DoFillAlph@2:
	mov	DWORD PTR _x0$318193[ebp], eax

; 1573 :         const int x00 = ((reinterpret_cast<int>(dst)+15)&~15) - reinterpret_cast<int>(dst) < w ?
; 1574 :             ((reinterpret_cast<int>(dst)+15)&~15) - reinterpret_cast<int>(dst) : w;//IMPORTANT! Should not exceed w.

	lea	eax, DWORD PTR [edi+15]
	and	eax, -16				; fffffff0H
	sub	eax, edi
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN92@DoFillAlph@2
	mov	DWORD PTR _x00$318198[ebp], eax
	jmp	SHORT $LN93@DoFillAlph@2
$LN92@DoFillAlph@2:
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _x00$318198[ebp], edx
$LN93@DoFillAlph@2:

; 1575 :         const int x_end00  = ((reinterpret_cast<int>(dst)+w)&~15) - reinterpret_cast<int>(dst);

	mov	eax, DWORD PTR _w$[ebp]
	add	eax, edi
	mov	edx, eax

; 1576 :         const int x_end0 = ((reinterpret_cast<int>(dst)+w)&~3) - reinterpret_cast<int>(dst);

	and	eax, -4					; fffffffcH
	and	edx, -16				; fffffff0H
	sub	eax, edi
	sub	edx, edi

; 1577 :         const int x_end = w;
; 1578 : 
; 1579 :         __m64 color_alpha_64 = _mm_set1_pi16(color_alpha);
; 1580 :         __m128i color_alpha_128 = _mm_set1_epi16(color_alpha);
; 1581 : 
; 1582 :         if(pAlphaMask==NULL && pBody!=NULL && pBorder!=NULL)

	cmp	DWORD PTR _pAlphaMask$[ebp], 0
	mov	DWORD PTR _x_end0$318206[ebp], eax
	mov	eax, DWORD PTR _color_alpha$[ebp]
	mov	DWORD PTR _x_end00$318203[ebp], edx
	movsx	edx, ax
	movd	mm0, ax
	movd	xmm0, edx
	punpcklwd mm0, mm0
	punpcklwd xmm0, xmm0
	punpcklwd mm0, mm0
	pshufd	xmm1, xmm0, 0
	jne	$LN82@DoFillAlph@2
	test	esi, esi
	je	$LN82@DoFillAlph@2
	test	ecx, ecx
	je	$LN82@DoFillAlph@2

; 1583 :         {
; 1584 :             while(h--)

	cmp	DWORD PTR _h$[ebp], 0
	je	$LN1@DoFillAlph@2
	pxor	xmm2, xmm2
$LN81@DoFillAlph@2:
	dec	DWORD PTR _h$[ebp]

; 1585 :             {
; 1586 :                 int j=0;

	xor	eax, eax

; 1587 :                 for( ; j<x0; j++ )

	cmp	DWORD PTR _x0$318193[ebp], eax
	jle	SHORT $LN77@DoFillAlph@2
	mov	eax, esi
	sub	eax, ecx
	mov	DWORD PTR tv1614[ebp], eax
	mov	eax, edi
	sub	eax, ecx
	mov	DWORD PTR tv1619[ebp], eax
	mov	eax, DWORD PTR _x0$318193[ebp]
	mov	DWORD PTR tv655[ebp], eax
	mov	DWORD PTR _j$318218[ebp], eax
$LN79@DoFillAlph@2:

; 1588 :                 {
; 1589 :                     int temp = pBorder[j]-pBody[j];

	mov	eax, DWORD PTR tv1614[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	movzx	eax, BYTE PTR [ecx]
	sub	eax, edx

; 1590 :                     temp = temp<0 ? 0 : temp;

	mov	edx, 0
	sets	dl
	inc	ecx
	dec	edx
	and	edx, eax

; 1591 :                     dst[j] = (temp * color_alpha)>>6;

	imul	edx, DWORD PTR _color_alpha$[ebp]
	mov	eax, DWORD PTR tv1619[ebp]
	shr	edx, 6
	dec	DWORD PTR tv655[ebp]
	mov	BYTE PTR [eax+ecx-1], dl
	jne	SHORT $LN79@DoFillAlph@2

; 1587 :                 for( ; j<x0; j++ )

	mov	ecx, DWORD PTR _pBorder$[ebp]
	mov	eax, DWORD PTR _j$318218[ebp]
$LN77@DoFillAlph@2:

; 1592 :                 }
; 1593 :                 for( ;j<x00;j+=4 )

	cmp	eax, DWORD PTR _x00$318198[ebp]
	jge	SHORT $LN74@DoFillAlph@2
	sub	ecx, esi
	mov	DWORD PTR tv1669[ebp], ecx
	mov	ecx, edi
	sub	ecx, esi
	mov	DWORD PTR tv1674[ebp], ecx
	mov	ecx, DWORD PTR _x00$318198[ebp]
	sub	ecx, eax
	dec	ecx
	shr	ecx, 2
	inc	ecx
	mov	DWORD PTR tv456[ebp], ecx
	lea	ecx, DWORD PTR [eax+ecx*4]
	lea	edx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR tv1674[ebp]
	pxor	mm2, mm2
	mov	DWORD PTR _j$318218[ebp], ecx
$LN76@DoFillAlph@2:

; 1594 :                 {
; 1595 :                     __m64 border = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBorder+j));

	mov	ecx, DWORD PTR tv1669[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	movd	mm1, ecx

; 1596 :                     __m64 body = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBody+j));

	mov	ecx, DWORD PTR [edx]
	movd	mm3, ecx

; 1597 :                     border = _mm_subs_pu8(border, body);                    

	psubusb	mm1, mm3

; 1598 :                     __m64 zero = _mm_setzero_si64();
; 1599 :                     border = _mm_unpacklo_pi8(border, zero);

	punpcklbw mm1, mm2

; 1600 :                     border = _mm_mullo_pi16(border, color_alpha_64);

	pmullw	mm1, mm0

; 1601 :                     border = _mm_srli_pi16(border, 6);

	psrlw	mm1, 6

; 1602 :                     border = _mm_packs_pu16(border,border);

	movq	mm3, mm1
	packuswb mm3, mm1

; 1603 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(border);

	movd	ecx, mm3
	mov	DWORD PTR [eax+edx], ecx
	add	edx, 4
	dec	DWORD PTR tv456[ebp]
	jne	SHORT $LN76@DoFillAlph@2

; 1592 :                 }
; 1593 :                 for( ;j<x00;j+=4 )

	mov	ecx, DWORD PTR _pBorder$[ebp]
	mov	eax, DWORD PTR _j$318218[ebp]
$LN74@DoFillAlph@2:

; 1606 :                 for( ;j<x_end00;j+=16)

	cmp	eax, DWORD PTR _x_end00$318203[ebp]
	jge	SHORT $LN71@DoFillAlph@2

; 1604 :                 }
; 1605 :                 __m128i zero = _mm_setzero_si128();

	lea	edx, DWORD PTR [eax+esi]
	mov	DWORD PTR tv1706[ebp], edx

; 1606 :                 for( ;j<x_end00;j+=16)

	mov	edx, ecx
	sub	edx, esi
	mov	DWORD PTR tv1669[ebp], edx
	mov	edx, edi
	sub	edx, esi
	mov	DWORD PTR tv1674[ebp], edx
	mov	edx, DWORD PTR _x_end00$318203[ebp]
	sub	edx, eax
	dec	edx
	shr	edx, 4
	inc	edx
	mov	DWORD PTR tv365[ebp], edx
	shl	edx, 4
	add	eax, edx
	mov	DWORD PTR _j$318218[ebp], eax
	mov	eax, DWORD PTR tv1706[ebp]
$LL73@DoFillAlph@2:

; 1607 :                 {
; 1608 :                     __m128i border = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pBorder+j));

	mov	edx, DWORD PTR tv1669[ebp]
	movdqu	xmm0, XMMWORD PTR [eax+edx]

; 1609 :                     __m128i body = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pBody+j));

	movdqu	xmm3, XMMWORD PTR [eax]

; 1610 :                     border = _mm_subs_epu8(border,body);
; 1611 :                     __m128i srchi = border;   
; 1612 :                     border = _mm_unpacklo_epi8(border, zero);
; 1613 :                     srchi = _mm_unpackhi_epi8(srchi, zero);
; 1614 :                     border = _mm_mullo_epi16(border, color_alpha_128);
; 1615 :                     srchi = _mm_mullo_epi16(srchi, color_alpha_128);
; 1616 :                     border = _mm_srli_epi16(border, 6);
; 1617 :                     srchi = _mm_srli_epi16(srchi, 6);
; 1618 :                     border = _mm_packus_epi16(border, srchi);
; 1619 :                     _mm_storeu_si128(reinterpret_cast<__m128i*>(dst+j), border);

	mov	edx, DWORD PTR tv1674[ebp]
	psubusb	xmm0, xmm3
	movdqa	xmm3, xmm0
	punpcklbw xmm3, xmm2
	punpckhbw xmm0, xmm2
	pmullw	xmm3, xmm1
	pmullw	xmm0, xmm1
	psrlw	xmm3, 6
	psrlw	xmm0, 6
	packuswb xmm3, xmm0
	movdqu	XMMWORD PTR [eax+edx], xmm3
	add	eax, 16					; 00000010H
	dec	DWORD PTR tv365[ebp]
	jne	SHORT $LL73@DoFillAlph@2

; 1606 :                 for( ;j<x_end00;j+=16)

	mov	eax, DWORD PTR _j$318218[ebp]
$LN71@DoFillAlph@2:

; 1620 :                 }
; 1621 :                 for( ;j<x_end0;j+=4)

	cmp	eax, DWORD PTR _x_end0$318206[ebp]
	jge	SHORT $LN68@DoFillAlph@2
	sub	ecx, esi
	mov	DWORD PTR tv1669[ebp], ecx
	mov	ecx, edi
	sub	ecx, esi
	mov	DWORD PTR tv1674[ebp], ecx
	mov	ecx, DWORD PTR _x_end0$318206[ebp]
	sub	ecx, eax
	dec	ecx
	shr	ecx, 2
	inc	ecx
	lea	edx, DWORD PTR [eax+esi]
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _j$318218[ebp], eax
	mov	eax, DWORD PTR tv1674[ebp]
	pxor	mm2, mm2
	mov	DWORD PTR tv183[ebp], ecx
$LN70@DoFillAlph@2:

; 1622 :                 {
; 1623 :                     __m64 border = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBorder+j));

	mov	ecx, DWORD PTR tv1669[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	movd	mm1, ecx

; 1624 :                     __m64 body = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBody+j));

	mov	ecx, DWORD PTR [edx]
	movd	mm3, ecx

; 1625 :                     border = _mm_subs_pu8(border, body);                    

	psubusb	mm1, mm3

; 1626 :                     __m64 zero = _mm_setzero_si64();
; 1627 :                     border = _mm_unpacklo_pi8(border, zero);

	punpcklbw mm1, mm2

; 1628 :                     border = _mm_mullo_pi16(border, color_alpha_64);

	pmullw	mm1, mm0

; 1629 :                     border = _mm_srli_pi16(border, 6);

	psrlw	mm1, 6

; 1630 :                     border = _mm_packs_pu16(border,border);

	movq	mm3, mm1
	packuswb mm3, mm1

; 1631 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(border);

	movd	ecx, mm3
	mov	DWORD PTR [edx+eax], ecx
	add	edx, 4
	dec	DWORD PTR tv183[ebp]
	jne	SHORT $LN70@DoFillAlph@2

; 1620 :                 }
; 1621 :                 for( ;j<x_end0;j+=4)

	mov	ecx, DWORD PTR _pBorder$[ebp]
	mov	eax, DWORD PTR _j$318218[ebp]
$LN68@DoFillAlph@2:

; 1632 :                 }
; 1633 :                 for( ;j<x_end;j++)

	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN65@DoFillAlph@2
	lea	edx, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv1798[ebp], edx
	mov	edx, esi
	sub	edx, ecx
	mov	DWORD PTR tv1614[ebp], edx
	mov	edx, edi
	sub	edx, ecx
	mov	ecx, DWORD PTR _w$[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv1540[ebp], ecx
	mov	ecx, DWORD PTR tv1798[ebp]
	mov	DWORD PTR tv1619[ebp], edx
$LN67@DoFillAlph@2:

; 1634 :                 {
; 1635 :                     int temp = pBorder[j]-pBody[j];

	mov	eax, DWORD PTR tv1614[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	movzx	eax, BYTE PTR [ecx]
	sub	eax, edx

; 1636 :                     temp = temp<0 ? 0 : temp;

	mov	edx, 0
	sets	dl
	inc	ecx
	dec	edx
	and	edx, eax

; 1637 :                     dst[j] = (temp * color_alpha)>>6;

	imul	edx, DWORD PTR _color_alpha$[ebp]
	mov	eax, DWORD PTR tv1619[ebp]
	shr	edx, 6
	dec	DWORD PTR tv1540[ebp]
	mov	BYTE PTR [ecx+eax-1], dl
	jne	SHORT $LN67@DoFillAlph@2

; 1632 :                 }
; 1633 :                 for( ;j<x_end;j++)

	mov	ecx, DWORD PTR _pBorder$[ebp]
$LN65@DoFillAlph@2:

; 1638 :                 }
; 1639 :                 pBody += mOverlayPitch;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]

; 1640 :                 pBorder += mOverlayPitch;

	add	ecx, eax
	add	esi, eax

; 1641 :                 //pAlphaMask += pitch;
; 1642 :                 dst += mOverlayPitch;

	add	edi, eax
	cmp	DWORD PTR _h$[ebp], 0
	mov	DWORD PTR _pBorder$[ebp], ecx
	jne	$LN81@DoFillAlph@2

; 1856 :         return;
; 1857 :     }
; 1858 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
$LN82@DoFillAlph@2:

; 1643 :             }
; 1644 :         }
; 1645 :         else if( ((pBody==NULL) + (pBorder==NULL))==1 && pAlphaMask==NULL)

	xor	eax, eax
	test	esi, esi
	sete	al
	xor	edx, edx
	test	ecx, ecx
	sete	dl
	add	edx, eax
	mov	eax, DWORD PTR _pAlphaMask$[ebp]
	cmp	edx, 1
	jne	$LN44@DoFillAlph@2
	test	eax, eax
	jne	$LN63@DoFillAlph@2

; 1646 :         {
; 1647 :             const BYTE* src1 = pBody!=NULL ? pBody : pBorder;

	mov	DWORD PTR _src1$318284[ebp], esi
	test	esi, esi
	jne	SHORT $LN95@DoFillAlph@2
	mov	DWORD PTR _src1$318284[ebp], ecx
$LN95@DoFillAlph@2:

; 1648 :             while(h--)

	cmp	DWORD PTR _h$[ebp], 0
	je	$LN1@DoFillAlph@2
	pxor	xmm2, xmm2
$LL182@DoFillAlph@2:

; 1664 :                 }
; 1665 :                 __m128i zero = _mm_setzero_si128();

	mov	edx, DWORD PTR _x0$318193[ebp]
	dec	DWORD PTR _h$[ebp]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN58@DoFillAlph@2

; 1648 :             while(h--)

	mov	ecx, DWORD PTR _src1$318284[ebp]
	mov	esi, edi

; 1649 :             {
; 1650 :                 int j=0;
; 1651 :                 for( ; j<x0; j++ )

	sub	ecx, edi
	mov	DWORD PTR tv1583[ebp], edx
	mov	eax, edx
	npad	1
$LL60@DoFillAlph@2:

; 1652 :                 {
; 1653 :                     dst[j] = (src1[j] * color_alpha)>>6;

	movzx	edx, BYTE PTR [ecx+esi]
	imul	edx, DWORD PTR _color_alpha$[ebp]
	shr	edx, 6
	mov	BYTE PTR [esi], dl
	inc	esi
	dec	DWORD PTR tv1583[ebp]
	jne	SHORT $LL60@DoFillAlph@2
$LN58@DoFillAlph@2:

; 1654 :                 }
; 1655 :                 for( ;j<x00;j+=4 )

	cmp	eax, DWORD PTR _x00$318198[ebp]
	jge	SHORT $LN55@DoFillAlph@2
	mov	edx, DWORD PTR _x00$318198[ebp]
	mov	esi, DWORD PTR _src1$318284[ebp]
	sub	edx, eax
	dec	edx
	sub	esi, edi
	shr	edx, 2
	inc	edx
	lea	ecx, DWORD PTR [eax+edi]
	pxor	mm2, mm2
	mov	DWORD PTR tv1851[ebp], esi
	lea	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN57@DoFillAlph@2
$LL181@DoFillAlph@2:
	mov	esi, DWORD PTR tv1851[ebp]
$LN57@DoFillAlph@2:

; 1656 :                 {
; 1657 :                     __m64 src = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(src1+j));

	mov	esi, DWORD PTR [ecx+esi]
	movd	mm1, esi

; 1658 :                     __m64 zero = _mm_setzero_si64();
; 1659 :                     src = _mm_unpacklo_pi8(src, zero);

	punpcklbw mm1, mm2

; 1660 :                     src = _mm_mullo_pi16(src, color_alpha_64);

	pmullw	mm1, mm0

; 1661 :                     src = _mm_srli_pi16(src, 6);

	psrlw	mm1, 6

; 1662 :                     src = _mm_packs_pu16(src,src);

	movq	mm3, mm1
	packuswb mm3, mm1

; 1663 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(src);

	movd	esi, mm3
	mov	DWORD PTR [ecx], esi
	add	ecx, 4
	dec	edx
	jne	SHORT $LL181@DoFillAlph@2
$LN55@DoFillAlph@2:

; 1666 :                 for( ;j<x_end00;j+=16)

	mov	ecx, DWORD PTR _x_end00$318203[ebp]
	cmp	eax, ecx
	jge	SHORT $LN52@DoFillAlph@2
	mov	esi, DWORD PTR _src1$318284[ebp]
	sub	ecx, eax
	dec	ecx
	sub	esi, edi
	shr	ecx, 4
	mov	DWORD PTR tv1851[ebp], esi
	inc	ecx
	mov	esi, ecx
	shl	esi, 4
	lea	edx, DWORD PTR [eax+edi]
	add	eax, esi
	mov	esi, DWORD PTR tv1851[ebp]
	npad	4
$LL54@DoFillAlph@2:

; 1667 :                 {
; 1668 :                     __m128i src = _mm_loadu_si128(reinterpret_cast<const __m128i*>(src1+j));

	movdqu	xmm0, XMMWORD PTR [edx+esi]

; 1669 :                     __m128i srchi = src;
; 1670 :                     src = _mm_unpacklo_epi8(src, zero);

	movdqa	xmm3, xmm0
	punpcklbw xmm3, xmm2

; 1671 :                     srchi = _mm_unpackhi_epi8(srchi, zero);

	punpckhbw xmm0, xmm2

; 1672 :                     src = _mm_mullo_epi16(src, color_alpha_128);

	pmullw	xmm3, xmm1

; 1673 :                     srchi = _mm_mullo_epi16(srchi, color_alpha_128);

	pmullw	xmm0, xmm1

; 1674 :                     src = _mm_srli_epi16(src, 6);

	psrlw	xmm3, 6

; 1675 :                     srchi = _mm_srli_epi16(srchi, 6);

	psrlw	xmm0, 6

; 1676 :                     src = _mm_packus_epi16(src, srchi);

	packuswb xmm3, xmm0

; 1677 :                     _mm_storeu_si128(reinterpret_cast<__m128i*>(dst+j), src);

	movdqu	XMMWORD PTR [edx], xmm3
	add	edx, 16					; 00000010H
	dec	ecx
	jne	SHORT $LL54@DoFillAlph@2
$LN52@DoFillAlph@2:

; 1678 :                 }
; 1679 :                 for( ;j<x_end0;j+=4)

	cmp	eax, DWORD PTR _x_end0$318206[ebp]
	jge	SHORT $LN49@DoFillAlph@2
	mov	edx, DWORD PTR _x_end0$318206[ebp]
	mov	esi, DWORD PTR _src1$318284[ebp]
	sub	edx, eax
	dec	edx
	sub	esi, edi
	shr	edx, 2
	inc	edx
	lea	ecx, DWORD PTR [eax+edi]
	pxor	mm2, mm2
	mov	DWORD PTR tv1851[ebp], esi
	lea	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN51@DoFillAlph@2
$LL180@DoFillAlph@2:
	mov	esi, DWORD PTR tv1851[ebp]
$LN51@DoFillAlph@2:

; 1680 :                 {
; 1681 :                     __m64 src = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(src1+j));

	mov	esi, DWORD PTR [ecx+esi]
	movd	mm1, esi

; 1682 :                     __m64 zero = _mm_setzero_si64();
; 1683 :                     src = _mm_unpacklo_pi8(src, zero);

	punpcklbw mm1, mm2

; 1684 :                     src = _mm_mullo_pi16(src, color_alpha_64);

	pmullw	mm1, mm0

; 1685 :                     src = _mm_srli_pi16(src, 6);

	psrlw	mm1, 6

; 1686 :                     src = _mm_packs_pu16(src,src);

	movq	mm3, mm1
	packuswb mm3, mm1

; 1687 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(src);

	movd	esi, mm3
	mov	DWORD PTR [ecx], esi
	add	ecx, 4
	dec	edx
	jne	SHORT $LL180@DoFillAlph@2
$LN49@DoFillAlph@2:

; 1688 :                 }
; 1689 :                 for( ;j<x_end;j++)

	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN46@DoFillAlph@2
	mov	edx, DWORD PTR _src1$318284[ebp]
	mov	esi, DWORD PTR _w$[ebp]
	sub	edx, edi
	lea	ecx, DWORD PTR [eax+edi]
	sub	esi, eax
	npad	7
$LL48@DoFillAlph@2:

; 1690 :                 {
; 1691 :                     dst[j] = (src1[j] * color_alpha)>>6;

	movzx	eax, BYTE PTR [edx+ecx]
	imul	eax, DWORD PTR _color_alpha$[ebp]
	shr	eax, 6
	mov	BYTE PTR [ecx], al
	inc	ecx
	dec	esi
	jne	SHORT $LL48@DoFillAlph@2
$LN46@DoFillAlph@2:

; 1692 :                 }
; 1693 :                 src1 += mOverlayPitch;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	add	DWORD PTR _src1$318284[ebp], eax

; 1694 :                 //pAlphaMask += pitch;
; 1695 :                 dst += mOverlayPitch;

	add	edi, eax
	cmp	DWORD PTR _h$[ebp], 0
	jne	$LL182@DoFillAlph@2

; 1856 :         return;
; 1857 :     }
; 1858 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
$LN63@DoFillAlph@2:

; 1696 :             }
; 1697 :         }
; 1698 :         else if( ((pBody==NULL) + (pBorder==NULL))==1 && pAlphaMask!=NULL)

	cmp	edx, 1
	jne	$LN44@DoFillAlph@2
	test	eax, eax
	je	$LN122@DoFillAlph@2

; 1699 :         {
; 1700 :             const BYTE* src1 = pBody!=NULL ? pBody : pBorder;

	mov	DWORD PTR _src1$318340[ebp], esi
	test	esi, esi
	jne	SHORT $LN97@DoFillAlph@2
	mov	DWORD PTR _src1$318340[ebp], ecx
$LN97@DoFillAlph@2:

; 1701 :             while(h--)

	cmp	DWORD PTR _h$[ebp], 0
	je	$LN1@DoFillAlph@2
	pxor	xmm2, xmm2
$LN43@DoFillAlph@2:
	dec	DWORD PTR _h$[ebp]

; 1702 :             {
; 1703 :                 int j=0;

	xor	edx, edx

; 1704 :                 for( ; j<x0; j++ )

	cmp	DWORD PTR _x0$318193[ebp], edx
	jle	SHORT $LN39@DoFillAlph@2
	mov	ecx, DWORD PTR _src1$318340[ebp]
	sub	ecx, eax
	mov	edx, edi
	sub	edx, eax
	mov	DWORD PTR tv2310[ebp], edx
	mov	edx, DWORD PTR _x0$318193[ebp]
	mov	esi, eax
	mov	DWORD PTR tv2305[ebp], ecx
	mov	DWORD PTR tv2296[ebp], edx
	mov	DWORD PTR _j$318344[ebp], edx
	jmp	SHORT $LN41@DoFillAlph@2
	npad	3
$LL170@DoFillAlph@2:
	mov	ecx, DWORD PTR tv2305[ebp]
$LN41@DoFillAlph@2:

; 1705 :                 {
; 1706 :                     dst[j] = (src1[j] * pAlphaMask[j] * color_alpha)>>12;

	movzx	edx, BYTE PTR [ecx+esi]
	movzx	ecx, BYTE PTR [esi]
	imul	edx, ecx
	imul	edx, DWORD PTR _color_alpha$[ebp]
	mov	ecx, DWORD PTR tv2310[ebp]
	shr	edx, 12					; 0000000cH
	mov	BYTE PTR [ecx+esi], dl
	inc	esi
	dec	DWORD PTR tv2296[ebp]
	jne	SHORT $LL170@DoFillAlph@2

; 1704 :                 for( ; j<x0; j++ )

	mov	edx, DWORD PTR _j$318344[ebp]
$LN39@DoFillAlph@2:

; 1707 :                 }
; 1708 :                 for( ;j<x00;j+=4 )

	cmp	edx, DWORD PTR _x00$318198[ebp]
	jge	SHORT $LN36@DoFillAlph@2
	mov	ecx, DWORD PTR _src1$318340[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv2305[ebp], ecx
	mov	ecx, edi
	sub	ecx, eax
	mov	DWORD PTR tv2310[ebp], ecx
	mov	ecx, DWORD PTR _x00$318198[ebp]
	sub	ecx, edx
	dec	ecx
	shr	ecx, 2
	inc	ecx
	lea	esi, DWORD PTR [edx+eax]
	lea	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv2464[ebp], ecx
	mov	ecx, DWORD PTR tv2310[ebp]
	pxor	mm2, mm2
	mov	DWORD PTR _j$318344[ebp], edx
$LN38@DoFillAlph@2:

; 1709 :                 {
; 1710 :                     __m64 src = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(src1+j));

	mov	edx, DWORD PTR tv2305[ebp]
	mov	edx, DWORD PTR [esi+edx]
	movd	mm1, edx

; 1711 :                     __m64 mask = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pAlphaMask+j));

	mov	edx, DWORD PTR [esi]

; 1712 :                     __m64 zero = _mm_setzero_si64();
; 1713 :                     src = _mm_unpacklo_pi8(src, zero);

	punpcklbw mm1, mm2

; 1714 :                     src = _mm_mullo_pi16(src, color_alpha_64);

	pmullw	mm1, mm0
	movd	mm4, edx

; 1715 :                     mask = _mm_unpacklo_pi8(zero, mask); //important!

	movq	mm3, mm2
	punpcklbw mm3, mm4

; 1716 :                     src = _mm_mulhi_pi16(src, mask); //important!

	pmulhw	mm1, mm3

; 1717 :                     src = _mm_srli_pi16(src, 12+8-16); //important!

	psrlw	mm1, 4

; 1718 :                     src = _mm_packs_pu16(src,src);

	movq	mm3, mm1
	packuswb mm3, mm1

; 1719 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(src);

	movd	edx, mm3
	mov	DWORD PTR [esi+ecx], edx
	add	esi, 4
	dec	DWORD PTR tv2464[ebp]
	jne	SHORT $LN38@DoFillAlph@2

; 1707 :                 }
; 1708 :                 for( ;j<x00;j+=4 )

	mov	edx, DWORD PTR _j$318344[ebp]
$LN36@DoFillAlph@2:

; 1720 :                 }
; 1721 :                 __m128i zero = _mm_setzero_si128();
; 1722 :                 for( ;j<x_end00;j+=16)

	cmp	edx, DWORD PTR _x_end00$318203[ebp]
	jge	SHORT $LN33@DoFillAlph@2
	mov	ecx, DWORD PTR _src1$318340[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv2305[ebp], ecx
	mov	ecx, edi
	sub	ecx, eax
	mov	DWORD PTR tv2310[ebp], ecx
	mov	ecx, DWORD PTR _x_end00$318203[ebp]
	sub	ecx, edx
	dec	ecx
	shr	ecx, 4
	inc	ecx
	mov	DWORD PTR tv2567[ebp], ecx
	shl	ecx, 4
	lea	esi, DWORD PTR [edx+eax]
	add	edx, ecx
$LN35@DoFillAlph@2:

; 1723 :                 {
; 1724 :                     __m128i src = _mm_loadu_si128(reinterpret_cast<const __m128i*>(src1+j));

	mov	ecx, DWORD PTR tv2305[ebp]
	movdqu	xmm0, XMMWORD PTR [esi+ecx]

; 1725 :                     __m128i mask = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pAlphaMask+j));

	movdqu	xmm3, XMMWORD PTR [esi]

; 1726 :                     __m128i srchi = src;
; 1727 :                     __m128i maskhi = mask;                 
; 1728 :                     src = _mm_unpacklo_epi8(src, zero);
; 1729 :                     srchi = _mm_unpackhi_epi8(srchi, zero);
; 1730 :                     mask = _mm_unpacklo_epi8(zero, mask); //important!
; 1731 :                     maskhi = _mm_unpackhi_epi8(zero, maskhi);
; 1732 :                     src = _mm_mullo_epi16(src, color_alpha_128);
; 1733 :                     srchi = _mm_mullo_epi16(srchi, color_alpha_128);
; 1734 :                     src = _mm_mulhi_epu16(src, mask); //important!
; 1735 :                     srchi = _mm_mulhi_epu16(srchi, maskhi);
; 1736 :                     src = _mm_srli_epi16(src, 12+8-16); //important!
; 1737 :                     srchi = _mm_srli_epi16(srchi, 12+8-16);
; 1738 :                     src = _mm_packus_epi16(src, srchi);
; 1739 :                     _mm_storeu_si128(reinterpret_cast<__m128i*>(dst+j), src);

	mov	ecx, DWORD PTR tv2310[ebp]
	movdqa	xmm4, xmm0
	punpcklbw xmm4, xmm2
	pmullw	xmm4, xmm1
	movdqa	xmm5, xmm2
	punpcklbw xmm5, xmm3
	pmulhuw	xmm4, xmm5
	punpckhbw xmm0, xmm2
	pmullw	xmm0, xmm1
	movdqa	xmm5, xmm2
	punpckhbw xmm5, xmm3
	pmulhuw	xmm0, xmm5
	psrlw	xmm4, 4
	psrlw	xmm0, 4
	packuswb xmm4, xmm0
	movdqu	XMMWORD PTR [esi+ecx], xmm4
	add	esi, 16					; 00000010H
	dec	DWORD PTR tv2567[ebp]
	jne	SHORT $LN35@DoFillAlph@2
$LN33@DoFillAlph@2:

; 1740 :                 }
; 1741 :                 for( ;j<x_end0;j+=4)

	cmp	edx, DWORD PTR _x_end0$318206[ebp]
	jge	SHORT $LN30@DoFillAlph@2
	mov	ecx, DWORD PTR _src1$318340[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv2305[ebp], ecx
	mov	ecx, edi
	sub	ecx, eax
	mov	DWORD PTR tv2310[ebp], ecx
	mov	ecx, DWORD PTR _x_end0$318206[ebp]
	sub	ecx, edx
	dec	ecx
	shr	ecx, 2
	inc	ecx
	lea	esi, DWORD PTR [edx+eax]
	lea	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv2670[ebp], ecx
	mov	ecx, DWORD PTR tv2310[ebp]
	pxor	mm2, mm2
	mov	DWORD PTR _j$318344[ebp], edx
$LN32@DoFillAlph@2:

; 1742 :                 {
; 1743 :                     __m64 src = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(src1+j));

	mov	edx, DWORD PTR tv2305[ebp]
	mov	edx, DWORD PTR [esi+edx]
	movd	mm1, edx

; 1744 :                     __m64 mask = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pAlphaMask+j));

	mov	edx, DWORD PTR [esi]

; 1745 :                     __m64 zero = _mm_setzero_si64();
; 1746 :                     src = _mm_unpacklo_pi8(src, zero);

	punpcklbw mm1, mm2

; 1747 :                     src = _mm_mullo_pi16(src, color_alpha_64);

	pmullw	mm1, mm0
	movd	mm4, edx

; 1748 :                     mask = _mm_unpacklo_pi8(zero, mask); //important!

	movq	mm3, mm2
	punpcklbw mm3, mm4

; 1749 :                     src = _mm_mulhi_pi16(src, mask); //important!

	pmulhw	mm1, mm3

; 1750 :                     src = _mm_srli_pi16(src, 12+8-16); //important!

	psrlw	mm1, 4

; 1751 :                     src = _mm_packs_pu16(src,src);

	movq	mm3, mm1
	packuswb mm3, mm1

; 1752 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(src);

	movd	edx, mm3
	mov	DWORD PTR [esi+ecx], edx
	add	esi, 4
	dec	DWORD PTR tv2670[ebp]
	jne	SHORT $LN32@DoFillAlph@2

; 1740 :                 }
; 1741 :                 for( ;j<x_end0;j+=4)

	mov	edx, DWORD PTR _j$318344[ebp]
$LN30@DoFillAlph@2:

; 1753 :                 }
; 1754 :                 for( ;j<x_end;j++)

	cmp	edx, DWORD PTR _w$[ebp]
	jge	SHORT $LN27@DoFillAlph@2
	mov	ecx, DWORD PTR _src1$318340[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv2305[ebp], ecx
	mov	ecx, edi
	sub	ecx, eax
	mov	DWORD PTR tv2310[ebp], ecx
	mov	ecx, DWORD PTR _w$[ebp]
	sub	ecx, edx
	lea	esi, DWORD PTR [edx+eax]
	mov	DWORD PTR tv2802[ebp], ecx
$LN29@DoFillAlph@2:

; 1755 :                 {
; 1756 :                     dst[j] = (src1[j] * pAlphaMask[j] * color_alpha)>>12;

	mov	ecx, DWORD PTR tv2305[ebp]
	movzx	edx, BYTE PTR [esi+ecx]
	movzx	ecx, BYTE PTR [esi]
	imul	edx, ecx
	imul	edx, DWORD PTR _color_alpha$[ebp]
	mov	ecx, DWORD PTR tv2310[ebp]
	shr	edx, 12					; 0000000cH
	mov	BYTE PTR [esi+ecx], dl
	inc	esi
	dec	DWORD PTR tv2802[ebp]
	jne	SHORT $LN29@DoFillAlph@2
$LN27@DoFillAlph@2:

; 1757 :                 }
; 1758 :                 src1 += mOverlayPitch;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	add	DWORD PTR _src1$318340[ebp], ecx

; 1759 :                 pAlphaMask += pitch;

	add	eax, DWORD PTR _pitch$[ebp]

; 1760 :                 dst += mOverlayPitch;

	add	edi, ecx
	cmp	DWORD PTR _h$[ebp], 0
	jne	$LN43@DoFillAlph@2

; 1856 :         return;
; 1857 :     }
; 1858 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
$LN44@DoFillAlph@2:

; 1761 :             }
; 1762 :         }
; 1763 :         else if( pAlphaMask!=NULL && pBody!=NULL && pBorder!=NULL )

	test	eax, eax
	je	$LN122@DoFillAlph@2
	test	esi, esi
	je	$LN122@DoFillAlph@2
	test	ecx, ecx
	je	$LN122@DoFillAlph@2

; 1764 :         {
; 1765 :             while(h--)

	cmp	DWORD PTR _h$[ebp], 0
	je	$LN1@DoFillAlph@2
	pxor	xmm2, xmm2
$LN24@DoFillAlph@2:
	dec	DWORD PTR _h$[ebp]

; 1766 :             {
; 1767 :                 int j=0;
; 1768 :                 for( ; j<x0; j++ )

	cmp	DWORD PTR _x0$318193[ebp], 0
	mov	DWORD PTR _j$318417[ebp], 0
	jle	SHORT $LN175@DoFillAlph@2
	sub	eax, ecx
	mov	DWORD PTR tv2895[ebp], eax
	mov	edx, esi
	sub	edx, ecx
	mov	eax, edi
	sub	eax, ecx
	mov	DWORD PTR tv1619[ebp], eax
	mov	eax, DWORD PTR _x0$318193[ebp]
	mov	DWORD PTR tv2927[ebp], eax
	mov	DWORD PTR _j$318417[ebp], eax
	mov	DWORD PTR tv2829[ebp], ecx
	mov	DWORD PTR tv1614[ebp], edx
	mov	eax, ecx
	jmp	SHORT $LN22@DoFillAlph@2
	npad	6
$LL160@DoFillAlph@2:
	mov	edx, DWORD PTR tv1614[ebp]
$LN22@DoFillAlph@2:

; 1769 :                 {
; 1770 :                     int temp = pBorder[j]-pBody[j];

	movzx	edx, BYTE PTR [eax+edx]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, edx

; 1771 :                     temp = temp<0 ? 0 : temp;

	mov	edx, 0
	sets	dl
	inc	eax
	dec	edx
	and	edx, ecx

; 1772 :                     dst[j] = (temp * pAlphaMask[j] * color_alpha)>>12;

	mov	ecx, DWORD PTR tv2895[ebp]
	movzx	ecx, BYTE PTR [ecx+eax-1]
	imul	edx, ecx
	imul	edx, DWORD PTR _color_alpha$[ebp]
	mov	ecx, DWORD PTR tv1619[ebp]
	shr	edx, 12					; 0000000cH
	dec	DWORD PTR tv2927[ebp]
	mov	BYTE PTR [eax+ecx-1], dl
	jne	SHORT $LL160@DoFillAlph@2

; 1766 :             {
; 1767 :                 int j=0;
; 1768 :                 for( ; j<x0; j++ )

	mov	ecx, DWORD PTR _pBorder$[ebp]
$LN175@DoFillAlph@2:
	mov	eax, DWORD PTR _j$318417[ebp]

; 1773 :                 }
; 1774 :                 for( ;j<x00;j+=4 )

	cmp	eax, DWORD PTR _x00$318198[ebp]
	jge	SHORT $LN17@DoFillAlph@2
	sub	ecx, esi
	mov	DWORD PTR tv1669[ebp], ecx
	mov	ecx, DWORD PTR _pAlphaMask$[ebp]
	sub	ecx, esi
	mov	DWORD PTR tv3037[ebp], ecx
	mov	ecx, edi
	sub	ecx, esi
	mov	DWORD PTR tv1674[ebp], ecx
	mov	ecx, DWORD PTR _x00$318198[ebp]
	sub	ecx, eax
	dec	ecx
	shr	ecx, 2
	inc	ecx
	lea	edx, DWORD PTR [eax+esi]
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _j$318417[ebp], eax
	mov	eax, DWORD PTR tv1674[ebp]
	pxor	mm2, mm2
	mov	DWORD PTR tv3113[ebp], ecx
$LN19@DoFillAlph@2:

; 1775 :                 {
; 1776 :                     __m64 border = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBorder+j));

	mov	ecx, DWORD PTR tv1669[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	movd	mm1, ecx

; 1777 :                     __m64 body = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBody+j));

	mov	ecx, DWORD PTR [edx]
	movd	mm3, ecx

; 1778 :                     border = _mm_subs_pu8(border, body);
; 1779 :                     __m64 mask = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pAlphaMask+j));

	mov	ecx, DWORD PTR tv3037[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	psubusb	mm1, mm3

; 1780 :                     __m64 zero = _mm_setzero_si64();
; 1781 :                     border = _mm_unpacklo_pi8(border, zero);

	punpcklbw mm1, mm2

; 1782 :                     border = _mm_mullo_pi16(border, color_alpha_64);

	pmullw	mm1, mm0
	movd	mm4, ecx

; 1783 :                     mask = _mm_unpacklo_pi8(zero, mask); //important!

	movq	mm3, mm2
	punpcklbw mm3, mm4

; 1784 :                     border = _mm_mulhi_pi16(border, mask); //important!

	pmulhw	mm1, mm3

; 1785 :                     border = _mm_srli_pi16(border, 12+8-16); //important!

	psrlw	mm1, 4

; 1786 :                     border = _mm_packs_pu16(border,border);

	movq	mm3, mm1
	packuswb mm3, mm1

; 1787 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(border);

	movd	ecx, mm3
	mov	DWORD PTR [edx+eax], ecx
	add	edx, 4
	dec	DWORD PTR tv3113[ebp]
	jne	SHORT $LN19@DoFillAlph@2

; 1773 :                 }
; 1774 :                 for( ;j<x00;j+=4 )

	mov	ecx, DWORD PTR _pBorder$[ebp]
	mov	eax, DWORD PTR _j$318417[ebp]
$LN17@DoFillAlph@2:

; 1790 :                 for( ;j<x_end00;j+=16)

	cmp	eax, DWORD PTR _x_end00$318203[ebp]
	jge	$LN14@DoFillAlph@2

; 1788 :                 }
; 1789 :                 __m128i zero = _mm_setzero_si128();

	lea	edx, DWORD PTR [eax+esi]
	mov	DWORD PTR tv3177[ebp], edx

; 1790 :                 for( ;j<x_end00;j+=16)

	mov	edx, ecx
	sub	edx, esi
	mov	DWORD PTR tv1669[ebp], edx
	mov	edx, DWORD PTR _pAlphaMask$[ebp]
	sub	edx, esi
	mov	DWORD PTR tv3037[ebp], edx
	mov	edx, edi
	sub	edx, esi
	mov	DWORD PTR tv1674[ebp], edx
	mov	edx, DWORD PTR _x_end00$318203[ebp]
	sub	edx, eax
	dec	edx
	shr	edx, 4
	inc	edx
	mov	DWORD PTR tv3234[ebp], edx
	shl	edx, 4
	add	eax, edx
	mov	DWORD PTR _j$318417[ebp], eax
	mov	eax, DWORD PTR tv3177[ebp]
	npad	11
$LL16@DoFillAlph@2:

; 1791 :                 {
; 1792 :                     __m128i border = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pBorder+j));

	mov	edx, DWORD PTR tv1669[ebp]
	movdqu	xmm0, XMMWORD PTR [edx+eax]

; 1793 :                     __m128i body = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pBody+j));

	movdqu	xmm3, XMMWORD PTR [eax]

; 1794 :                     border = _mm_subs_epu8(border,body);
; 1795 : 
; 1796 :                     __m128i mask = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pAlphaMask+j));

	mov	edx, DWORD PTR tv3037[ebp]
	psubusb	xmm0, xmm3
	movdqu	xmm3, XMMWORD PTR [edx+eax]

; 1797 :                     __m128i srchi = border;
; 1798 :                     __m128i maskhi = mask;                 
; 1799 :                     border = _mm_unpacklo_epi8(border, zero);
; 1800 :                     srchi = _mm_unpackhi_epi8(srchi, zero);
; 1801 :                     mask = _mm_unpacklo_epi8(zero, mask); //important!
; 1802 :                     maskhi = _mm_unpackhi_epi8(zero, maskhi);
; 1803 :                     border = _mm_mullo_epi16(border, color_alpha_128);
; 1804 :                     srchi = _mm_mullo_epi16(srchi, color_alpha_128);
; 1805 :                     border = _mm_mulhi_epu16(border, mask); //important!
; 1806 :                     srchi = _mm_mulhi_epu16(srchi, maskhi);
; 1807 :                     border = _mm_srli_epi16(border, 12+8-16); //important!
; 1808 :                     srchi = _mm_srli_epi16(srchi, 12+8-16);
; 1809 :                     border = _mm_packus_epi16(border, srchi);
; 1810 :                     _mm_storeu_si128(reinterpret_cast<__m128i*>(dst+j), border);

	mov	edx, DWORD PTR tv1674[ebp]
	movdqa	xmm4, xmm0
	punpcklbw xmm4, xmm2
	pmullw	xmm4, xmm1
	movdqa	xmm5, xmm2
	punpcklbw xmm5, xmm3
	pmulhuw	xmm4, xmm5
	punpckhbw xmm0, xmm2
	pmullw	xmm0, xmm1
	movdqa	xmm5, xmm2
	punpckhbw xmm5, xmm3
	pmulhuw	xmm0, xmm5
	psrlw	xmm4, 4
	psrlw	xmm0, 4
	packuswb xmm4, xmm0
	movdqu	XMMWORD PTR [edx+eax], xmm4
	add	eax, 16					; 00000010H
	dec	DWORD PTR tv3234[ebp]
	jne	SHORT $LL16@DoFillAlph@2

; 1790 :                 for( ;j<x_end00;j+=16)

	mov	eax, DWORD PTR _j$318417[ebp]
$LN14@DoFillAlph@2:

; 1811 :                 }
; 1812 :                 for( ;j<x_end0;j+=4)

	cmp	eax, DWORD PTR _x_end0$318206[ebp]
	jge	SHORT $LN11@DoFillAlph@2
	sub	ecx, esi
	mov	DWORD PTR tv1669[ebp], ecx
	mov	ecx, DWORD PTR _pAlphaMask$[ebp]
	sub	ecx, esi
	mov	DWORD PTR tv3037[ebp], ecx
	mov	ecx, edi
	sub	ecx, esi
	mov	DWORD PTR tv1674[ebp], ecx
	mov	ecx, DWORD PTR _x_end0$318206[ebp]
	sub	ecx, eax
	dec	ecx
	shr	ecx, 2
	inc	ecx
	lea	edx, DWORD PTR [eax+esi]
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _j$318417[ebp], eax
	mov	eax, DWORD PTR tv1674[ebp]
	pxor	mm2, mm2
	mov	DWORD PTR tv3387[ebp], ecx
$LN13@DoFillAlph@2:

; 1813 :                 {
; 1814 :                     __m64 border = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBorder+j));

	mov	ecx, DWORD PTR tv1669[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	movd	mm1, ecx

; 1815 :                     __m64 body = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pBody+j));

	mov	ecx, DWORD PTR [edx]
	movd	mm3, ecx

; 1816 :                     border = _mm_subs_pu8(border, body);
; 1817 :                     __m64 mask = _mm_cvtsi32_si64(*reinterpret_cast<const int*>(pAlphaMask+j));

	mov	ecx, DWORD PTR tv3037[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	psubusb	mm1, mm3

; 1818 :                     __m64 zero = _mm_setzero_si64();
; 1819 :                     border = _mm_unpacklo_pi8(border, zero);

	punpcklbw mm1, mm2

; 1820 :                     border = _mm_mullo_pi16(border, color_alpha_64);

	pmullw	mm1, mm0
	movd	mm4, ecx

; 1821 :                     mask = _mm_unpacklo_pi8(zero, mask); //important!

	movq	mm3, mm2
	punpcklbw mm3, mm4

; 1822 :                     border = _mm_mulhi_pi16(border, mask); //important!

	pmulhw	mm1, mm3

; 1823 :                     border = _mm_srli_pi16(border, 12+8-16); //important!

	psrlw	mm1, 4

; 1824 :                     border = _mm_packs_pu16(border,border);

	movq	mm3, mm1
	packuswb mm3, mm1

; 1825 :                     *reinterpret_cast<int*>(dst+j) = _mm_cvtsi64_si32(border);

	movd	ecx, mm3
	mov	DWORD PTR [eax+edx], ecx
	add	edx, 4
	dec	DWORD PTR tv3387[ebp]
	jne	SHORT $LN13@DoFillAlph@2

; 1811 :                 }
; 1812 :                 for( ;j<x_end0;j+=4)

	mov	ecx, DWORD PTR _pBorder$[ebp]
	mov	eax, DWORD PTR _j$318417[ebp]
$LN11@DoFillAlph@2:

; 1826 :                 }
; 1827 :                 for( ;j<x_end;j++)

	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN169@DoFillAlph@2
	lea	edx, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv3459[ebp], edx
	mov	edx, esi
	sub	edx, ecx
	mov	DWORD PTR tv1614[ebp], edx
	mov	edx, DWORD PTR _pAlphaMask$[ebp]
	sub	edx, ecx
	mov	DWORD PTR tv2895[ebp], edx
	mov	edx, edi
	sub	edx, ecx
	mov	ecx, DWORD PTR _w$[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv3569[ebp], ecx
	mov	ecx, DWORD PTR tv3459[ebp]
	mov	DWORD PTR tv1619[ebp], edx
$LN10@DoFillAlph@2:

; 1828 :                 {
; 1829 :                     int temp = pBorder[j]-pBody[j];

	mov	eax, DWORD PTR tv1614[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	movzx	eax, BYTE PTR [ecx]
	sub	eax, edx

; 1830 :                     temp = temp<0 ? 0 : temp;
; 1831 :                     dst[j] = (temp * pAlphaMask[j] * color_alpha)>>12;

	mov	edx, DWORD PTR tv2895[ebp]
	movzx	edx, BYTE PTR [edx+ecx]
	mov	ecx, 0
	sets	cl
	dec	ecx
	and	ecx, eax
	mov	eax, DWORD PTR tv1619[ebp]
	imul	edx, ecx
	imul	edx, DWORD PTR _color_alpha$[ebp]
	mov	ecx, DWORD PTR tv3459[ebp]
	shr	edx, 12					; 0000000cH
	mov	BYTE PTR [eax+ecx], dl
	inc	ecx
	dec	DWORD PTR tv3569[ebp]
	mov	DWORD PTR tv3459[ebp], ecx
	jne	SHORT $LN10@DoFillAlph@2

; 1826 :                 }
; 1827 :                 for( ;j<x_end;j++)

	mov	ecx, DWORD PTR _pBorder$[ebp]
$LN169@DoFillAlph@2:
	mov	eax, DWORD PTR _pAlphaMask$[ebp]

; 1832 :                 }
; 1833 :                 pBody += mOverlayPitch;

	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+40]

; 1834 :                 pBorder += mOverlayPitch;
; 1835 :                 pAlphaMask += pitch;

	add	eax, DWORD PTR _pitch$[ebp]
	add	ecx, edx
	add	esi, edx

; 1836 :                 dst += mOverlayPitch;

	add	edi, edx
	cmp	DWORD PTR _h$[ebp], 0
	mov	DWORD PTR _pBorder$[ebp], ecx
	mov	DWORD PTR _pAlphaMask$[ebp], eax
	jne	$LN24@DoFillAlph@2

; 1856 :         return;
; 1857 :     }
; 1858 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
$LN122@DoFillAlph@2:

; 1837 :             }
; 1838 :         }
; 1839 :         else
; 1840 :         {
; 1841 :             //should NOT happen!
; 1842 :             ASSERT(0);
; 1843 :             while(h--)

	cmp	DWORD PTR _h$[ebp], 0
	je	SHORT $LN1@DoFillAlph@2
	npad	6
$LL6@DoFillAlph@2:
	dec	DWORD PTR _h$[ebp]

; 1844 :             {
; 1845 :                 for(int j=0;j<x_end;j++)

	cmp	DWORD PTR _w$[ebp], 0
	jle	SHORT $LN4@DoFillAlph@2

; 1837 :             }
; 1838 :         }
; 1839 :         else
; 1840 :         {
; 1841 :             //should NOT happen!
; 1842 :             ASSERT(0);
; 1843 :             while(h--)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
$LN4@DoFillAlph@2:

; 1846 :                 {
; 1847 :                     dst[j] = 0;
; 1848 :                 }
; 1849 :                 dst += mOverlayPitch;

	mov	ecx, DWORD PTR _this$[ebp]
	add	edi, DWORD PTR [ecx+40]
	cmp	DWORD PTR _h$[ebp], 0
	jne	SHORT $LL6@DoFillAlph@2

; 1856 :         return;
; 1857 :     }
; 1858 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
$LN83@DoFillAlph@2:

; 1850 :             }
; 1851 :         }
; 1852 :     }
; 1853 :     else
; 1854 :     {
; 1855 :         _DoFillAlphaMash_c(outputAlphaMask, pBody, pBorder, x, y, w, h, pAlphaMask, pitch, color_alpha);

	mov	edi, DWORD PTR _color_alpha$[ebp]
	push	edi
	mov	edi, DWORD PTR _pitch$[ebp]
	push	edi
	mov	edi, DWORD PTR _pAlphaMask$[ebp]
	push	edi
	mov	edi, DWORD PTR _h$[ebp]
	push	edi
	mov	edi, DWORD PTR _w$[ebp]
	push	edi
	push	ecx
	mov	ecx, DWORD PTR _outputAlphaMask$[ebp]
	push	esi
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?_DoFillAlphaMash_c@Overlay@@AAEXPAEPBE1HHHH1HK@Z ; Overlay::_DoFillAlphaMash_c
$LN1@DoFillAlph@2:

; 1856 :         return;
; 1857 :     }
; 1858 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z ENDP	; Overlay::_DoFillAlphaMash
_TEXT	ENDS
PUBLIC	?AlphaBltC@@YAXPAEEEHHH@Z			; AlphaBltC
; Function compile flags: /Ogtp
;	COMDAT ?AlphaBltC@@YAXPAEEEHHH@Z
_TEXT	SEGMENT
_Y$ = 8							; size = 1
_w$ = 12						; size = 4
?AlphaBltC@@YAXPAEEEHHH@Z PROC				; AlphaBltC, COMDAT
; _pY$ = eax
; _alpha$ = edx

; 1152 : {   

	push	ebp
	mov	ebp, esp
	push	esi

; 1153 :     int yPremul = Y*(alpha+1);

	movzx	esi, BYTE PTR _Y$[ebp]
	movzx	edx, dl
	lea	ecx, DWORD PTR [edx+1]
	imul	ecx, esi

; 1154 :     int dstAlpha = 0x100 - alpha;

	mov	esi, 256				; 00000100H
	sub	esi, edx

; 1155 : 
; 1156 :     for( ; h>0; h--, pY += dst_stride )
; 1157 :     {
; 1158 :         BYTE* dy = pY;
; 1159 :         const BYTE* dy_end = pY + w;

	mov	edx, DWORD PTR _w$[ebp]
	push	edi
	lea	edi, DWORD PTR [eax+edx]

; 1160 : 
; 1161 :         for(;dy < dy_end; dy++)

	cmp	eax, edi
	jae	SHORT $LN5@AlphaBltC
$LL3@AlphaBltC:

; 1162 :         {
; 1163 :             *dy = (*dy * dstAlpha + yPremul)>>8;

	movzx	edx, BYTE PTR [eax]
	imul	edx, esi
	add	edx, ecx
	sar	edx, 8
	mov	BYTE PTR [eax], dl
	inc	eax
	cmp	eax, edi
	jb	SHORT $LL3@AlphaBltC
$LN5@AlphaBltC:
	pop	edi
	pop	esi

; 1164 :         }
; 1165 :     }
; 1166 : }

	pop	ebp
	ret	0
?AlphaBltC@@YAXPAEEEHHH@Z ENDP				; AlphaBltC
_TEXT	ENDS
PUBLIC	?AlphaBlt@@YAXPAEEEHHH@Z			; AlphaBlt
; Function compile flags: /Ogtp
;	COMDAT ?AlphaBlt@@YAXPAEEEHHH@Z
_TEXT	SEGMENT
tv268 = -4						; size = 4
_dy_first_mod16$317781 = 8				; size = 4
_Y$ = 8							; size = 1
_dy_end_mod16$317784 = 12				; size = 4
_w$ = 12						; size = 4
?AlphaBlt@@YAXPAEEEHHH@Z PROC				; AlphaBlt, COMDAT
; _pY$ = eax
; _alpha$ = ecx

; 1084 : {   

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	esi
	push	edi

; 1085 :     int yPremul = Y*(alpha+1);

	movzx	edi, BYTE PTR _Y$[ebp]
	movzx	ecx, cl
	lea	esi, DWORD PTR [ecx+1]
	imul	esi, edi

; 1086 :     int dstAlpha = 0x100 - alpha;

	mov	edi, 256				; 00000100H
	sub	edi, ecx

; 1087 :     if( w>32 )//IMPORTANT! The result of the following code is undefined with w<15.

	cmp	edx, 32					; 00000020H
	jle	$LN36@AlphaBlt

; 1088 :     {
; 1089 :         __m128i zero = _mm_setzero_si128();
; 1090 :         __m128i s = _mm_set1_epi16(yPremul);    //s = c  0  c  0  c  0  c  0  c  0  c  0  c  0  c  0            

	movsx	ecx, si
	movd	xmm0, ecx

; 1091 :         __m128i ia = _mm_set1_epi16(dstAlpha);
; 1092 :         for( ; h>0; h--, pY += dst_stride )
; 1093 :         {   
; 1094 :             BYTE* dy = pY;
; 1095 :             const BYTE* dy_first_mod16 = reinterpret_cast<BYTE*>((reinterpret_cast<int>(pY)+15)&~15);  //IMPORTANT! w must >= 15

	lea	ecx, DWORD PTR [eax+15]
	and	ecx, -16				; fffffff0H
	mov	DWORD PTR _dy_first_mod16$317781[ebp], ecx

; 1096 :             const BYTE* dy_end_mod16 = reinterpret_cast<BYTE*>(reinterpret_cast<int>(pY+w)&~15);

	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, eax
	mov	DWORD PTR tv268[ebp], ecx
	and	ecx, -16				; fffffff0H
	punpcklwd xmm0, xmm0
	movsx	edx, di
	pshufd	xmm2, xmm0, 0
	mov	DWORD PTR _dy_end_mod16$317784[ebp], ecx

; 1097 :             const BYTE* dy_end = pY + w;   
; 1098 : 
; 1099 :             for(;dy < dy_first_mod16; dy++)

	mov	ecx, DWORD PTR _dy_first_mod16$317781[ebp]
	movd	xmm0, edx
	punpcklwd xmm0, xmm0
	pxor	xmm1, xmm1
	pshufd	xmm3, xmm0, 0
	cmp	eax, ecx
	jae	SHORT $LN14@AlphaBlt
$LL16@AlphaBlt:

; 1100 :             {
; 1101 :                 *dy = (*dy * dstAlpha + yPremul)>>8;

	movzx	edx, BYTE PTR [eax]
	imul	edx, edi
	add	edx, esi
	sar	edx, 8
	mov	BYTE PTR [eax], dl
	inc	eax
	cmp	eax, ecx
	jb	SHORT $LL16@AlphaBlt
$LN14@AlphaBlt:

; 1102 :             }
; 1103 :             for(; dy < dy_end_mod16; dy+=16)

	mov	ecx, DWORD PTR _dy_end_mod16$317784[ebp]
	cmp	eax, ecx
	jae	SHORT $LN11@AlphaBlt
$LL13@AlphaBlt:

; 1104 :             {
; 1105 :                 //Y
; 1106 :                 __m128i d = _mm_load_si128(reinterpret_cast<const __m128i*>(dy));

	movdqa	xmm0, XMMWORD PTR [eax]

; 1107 :                 __m128i dl = _mm_unpacklo_epi8(d,zero);        //d    = b0 0  b1 0  b2 0  b3 0  b4 0  b5 0  b6 0  b7 0                 

	movdqa	xmm4, xmm0
	punpcklbw xmm4, xmm1

; 1108 : 
; 1109 :                 dl = _mm_mullo_epi16(dl,ia);                   //d    = b0*~a0 b1*~a1 ... b7*~a7
; 1110 :                 dl = _mm_adds_epu16(dl,s);                     //d   = d + s
; 1111 :                 dl = _mm_srli_epi16(dl, 8);                    //d   = d>>8
; 1112 :                 
; 1113 :                 d = _mm_unpackhi_epi8(d,zero);                

	punpckhbw xmm0, xmm1
	pmullw	xmm4, xmm3

; 1114 :                 d = _mm_mullo_epi16(d,ia);

	pmullw	xmm0, xmm3
	paddusw	xmm4, xmm2

; 1115 :                 d = _mm_adds_epu16(d,s);

	paddusw	xmm0, xmm2
	psrlw	xmm4, 8

; 1116 :                 d = _mm_srli_epi16(d, 8);

	psrlw	xmm0, 8

; 1117 : 
; 1118 :                 dl = _mm_packus_epi16(dl,d);

	packuswb xmm4, xmm0

; 1119 :                 
; 1120 :                 _mm_store_si128(reinterpret_cast<__m128i*>(dy), dl);

	movdqa	XMMWORD PTR [eax], xmm4
	add	eax, 16					; 00000010H
	cmp	eax, ecx
	jb	SHORT $LL13@AlphaBlt
$LN11@AlphaBlt:

; 1121 :             }
; 1122 :             for(;dy < dy_end; dy++)

	mov	ecx, DWORD PTR tv268[ebp]
	cmp	eax, ecx
	jae	SHORT $LN5@AlphaBlt
$LL10@AlphaBlt:

; 1123 :             {
; 1124 :                 *dy = (*dy * dstAlpha + yPremul)>>8;

	movzx	edx, BYTE PTR [eax]
	imul	edx, edi
	add	edx, esi
	sar	edx, 8
	mov	BYTE PTR [eax], dl
	inc	eax
	cmp	eax, ecx
	jb	SHORT $LL10@AlphaBlt

; 1138 :             }
; 1139 :         }
; 1140 :     }
; 1141 :     //__asm emms;
; 1142 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN36@AlphaBlt:

; 1125 :             }
; 1126 :         }
; 1127 :     }
; 1128 :     else
; 1129 :     {
; 1130 :         for( ; h>0; h--, pY += dst_stride )
; 1131 :         {   
; 1132 :             BYTE* dy = pY;
; 1133 :             const BYTE* dy_end = pY + w;

	lea	ecx, DWORD PTR [eax+edx]

; 1134 : 
; 1135 :             for(;dy < dy_end; dy++)

	cmp	eax, ecx
	jae	SHORT $LN5@AlphaBlt
$LL3@AlphaBlt:

; 1136 :             {
; 1137 :                 *dy = (*dy * dstAlpha + yPremul)>>8;

	movzx	edx, BYTE PTR [eax]
	imul	edx, edi
	add	edx, esi
	sar	edx, 8
	mov	BYTE PTR [eax], dl
	inc	eax
	cmp	eax, ecx
	jb	SHORT $LL3@AlphaBlt
$LN5@AlphaBlt:

; 1138 :             }
; 1139 :         }
; 1140 :     }
; 1141 :     //__asm emms;
; 1142 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?AlphaBlt@@YAXPAEEEHHH@Z ENDP				; AlphaBlt
_TEXT	ENDS
PUBLIC	?AlphaBlt@@YAXPAEPBEEHHHH@Z			; AlphaBlt
	ORG $+3600
__xmm@0	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H
; Function compile flags: /Ogtp
;	COMDAT ?AlphaBlt@@YAXPAEPBEEHHHH@Z
_TEXT	SEGMENT
tv327 = -16						; size = 4
_dy_end_mod16$317702 = -16				; size = 4
_dy_first_mod16$317699 = -12				; size = 4
tv570 = -8						; size = 4
tv339 = -4						; size = 4
_pY$ = 8						; size = 4
_pAlphaMask$ = 12					; size = 4
_Y$ = 16						; size = 1
_h$ = 20						; size = 4
tv554 = 24						; size = 4
tv493 = 24						; size = 4
_w$ = 24						; size = 4
_src_stride$ = 28					; size = 4
_dst_stride$ = 32					; size = 4
?AlphaBlt@@YAXPAEPBEEHHHH@Z PROC			; AlphaBlt, COMDAT

; 992  : {   

	push	ebp
	mov	ebp, esp

; 993  :     __m128i zero = _mm_setzero_si128();
; 994  :     __m128i s = _mm_set1_epi16(Y);               //s = c  0  c  0  c  0  c  0  c  0  c  0  c  0  c  0    

	movzx	eax, BYTE PTR _Y$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	sub	esp, 16					; 00000010H
	movsx	edx, ax
	push	esi
	movd	xmm0, edx
	punpcklwd xmm0, xmm0
	push	edi
	pxor	xmm4, xmm4
	pshufd	xmm7, xmm0, 0

; 995  : 
; 996  :     if( w>16 )//IMPORTANT! The result of the following code is undefined with w<15.

	cmp	ecx, 16					; 00000010H
	jle	$LN20@AlphaBlt@2

; 997  :     {
; 998  :         for( ; h>0; h--, pAlphaMask += src_stride, pY += dst_stride )

	cmp	DWORD PTR _h$[ebp], 0
	jle	$LN4@AlphaBlt@2
	mov	edx, DWORD PTR _pY$[ebp]
	add	edx, ecx
	mov	edi, 15					; 0000000fH
	sub	edi, ecx
	mov	DWORD PTR tv554[ebp], edx
	mov	DWORD PTR tv570[ebp], edi
	jmp	SHORT $LN19@AlphaBlt@2
	npad	6
$LL37@AlphaBlt@2:
	mov	edi, DWORD PTR tv570[ebp]
$LN19@AlphaBlt@2:

; 999  :         {
; 1000 :             const BYTE* sa = pAlphaMask;      
; 1001 :             BYTE* dy = pY;

	mov	eax, DWORD PTR _pY$[ebp]
	mov	esi, DWORD PTR _pAlphaMask$[ebp]

; 1002 :             const BYTE* dy_first_mod16 = reinterpret_cast<BYTE*>((reinterpret_cast<int>(pY)+15)&~15);  //IMPORTANT! w must >= 15

	add	edi, edx
	and	edi, -16				; fffffff0H

; 1003 :             const BYTE* dy_end_mod16 = reinterpret_cast<BYTE*>(reinterpret_cast<int>(pY+w)&~15);

	mov	ecx, edx
	and	ecx, -16				; fffffff0H
	mov	DWORD PTR _dy_first_mod16$317699[ebp], edi
	mov	DWORD PTR _dy_end_mod16$317702[ebp], ecx

; 1004 :             const BYTE* dy_end = pY + w;   
; 1005 : 
; 1006 :             for(;dy < dy_first_mod16; sa++, dy++)

	cmp	eax, edi
	jae	SHORT $LN14@AlphaBlt@2
	movzx	ecx, BYTE PTR _Y$[ebp]
	mov	DWORD PTR tv339[ebp], ecx
$LN16@AlphaBlt@2:

; 1007 :             {
; 1008 :                 *dy = (*dy * (256 - *sa)+ Y*(*sa+1))>>8;

	movzx	edi, BYTE PTR [esi]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, 256				; 00000100H
	sub	edx, edi
	inc	edi
	imul	edx, ecx
	imul	edi, DWORD PTR tv339[ebp]
	add	edx, edi
	sar	edx, 8
	mov	BYTE PTR [eax], dl
	inc	eax
	inc	esi
	cmp	eax, DWORD PTR _dy_first_mod16$317699[ebp]
	jb	SHORT $LN16@AlphaBlt@2

; 1004 :             const BYTE* dy_end = pY + w;   
; 1005 : 
; 1006 :             for(;dy < dy_first_mod16; sa++, dy++)

	mov	ecx, DWORD PTR _dy_end_mod16$317702[ebp]
	mov	edx, DWORD PTR tv554[ebp]
$LN14@AlphaBlt@2:

; 1009 :             }
; 1010 :             for(; dy < dy_end_mod16; sa+=8, dy+=16)

	cmp	eax, ecx
	jae	$LN11@AlphaBlt@2

; 1021 :                 __m128i ones = _mm_set1_epi16(256);          //ones = 0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1

	movdqa	xmm6, XMMWORD PTR __xmm@0
	npad	3
$LL13@AlphaBlt@2:

; 1011 :             {
; 1012 :                 __m128i a = _mm_loadl_epi64((__m128i*)sa);
; 1013 : 
; 1014 :                 //Y
; 1015 :                 __m128i d = _mm_load_si128((__m128i*)dy);

	movdqa	xmm1, XMMWORD PTR [eax]
	movq	xmm2, QWORD PTR [esi]

; 1016 : 
; 1017 :                 //__m128i ones = _mm_cmpeq_epi32(zero,zero); //ones = ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
; 1018 :                 //__m128i ia = _mm_xor_si128(a,ones);        //ia   = ~a
; 1019 :                 //ia = _mm_unpacklo_epi8(ia,zero);           //ia   = ~a0 0 ~a1 0 ~a2 0 ~a3 0 ~a4 0 ~a5 0 ~a6 0 ~a7 0
; 1020 :                 a = _mm_unpacklo_epi8(a,zero);               //a= a0 0  a1 0  a2 0  a3 0  a4 0  a5 0  a6 0  a7 0            

	punpcklbw xmm2, xmm4

; 1022 :                 __m128i ia = _mm_sub_epi16(ones, a);         //ia   = 256-a0 ... 256-a7
; 1023 :                 ones = _mm_srli_epi16(ones, 8);
; 1024 :                 a = _mm_add_epi16(a, ones);                  //a= 1+a0 ... 1+a7
; 1025 : 
; 1026 :                 __m128i dl = _mm_unpacklo_epi8(d,zero);               //d    = b0 0  b1 0  b2 0  b3 0  b4 0  b5 0  b6 0  b7 0 

	movdqa	xmm0, xmm1
	punpcklbw xmm0, xmm4
	movdqa	xmm5, xmm6
	psubw	xmm5, xmm2

; 1027 :                 __m128i sl = _mm_mullo_epi16(s,a);            //sl   = c0*a0  c1*a1  ... c7*a7
; 1028 : 
; 1029 :                 dl = _mm_mullo_epi16(dl,ia);                   //d    = b0*~a0 b1*~a1 ... b7*~a7

	pmullw	xmm0, xmm5
	movdqa	xmm3, xmm6
	psrlw	xmm3, 8
	paddw	xmm2, xmm3
	movdqa	xmm5, xmm7
	pmullw	xmm5, xmm2

; 1030 : 
; 1031 :                 dl = _mm_add_epi16(dl,sl);                     //d   = d + sl
; 1032 :                 dl = _mm_srli_epi16(dl, 8);                    //d   = d>>8
; 1033 : 
; 1034 :                 sa += 8;
; 1035 :                 a = _mm_loadl_epi64((__m128i*)sa);

	movq	xmm2, QWORD PTR [esi+8]
	paddw	xmm0, xmm5

; 1036 : 
; 1037 :                 a = _mm_unpacklo_epi8(a,zero);            
; 1038 :                 ones = _mm_slli_epi16(ones, 8);

	psllw	xmm3, 8
	punpcklbw xmm2, xmm4

; 1039 :                 ia = _mm_sub_epi16(ones, a);
; 1040 :                 ones = _mm_srli_epi16(ones, 8);
; 1041 :                 a = _mm_add_epi16(a,ones);
; 1042 : 
; 1043 :                 d = _mm_unpackhi_epi8(d,zero);

	punpckhbw xmm1, xmm4
	movdqa	xmm5, xmm3
	psubw	xmm5, xmm2

; 1044 :                 sl = _mm_mullo_epi16(s,a);
; 1045 :                 d = _mm_mullo_epi16(d,ia);

	pmullw	xmm1, xmm5
	psrlw	xmm3, 8
	movdqa	xmm5, xmm7
	paddw	xmm2, xmm3
	pmullw	xmm5, xmm2

; 1046 :                 d = _mm_add_epi16(d,sl);

	paddw	xmm1, xmm5
	psrlw	xmm0, 8

; 1047 :                 d = _mm_srli_epi16(d, 8);

	psrlw	xmm1, 8

; 1048 : 
; 1049 :                 dl = _mm_packus_epi16(dl,d);

	packuswb xmm0, xmm1

; 1050 : 
; 1051 :                 _mm_store_si128((__m128i*)dy, dl);

	movdqa	XMMWORD PTR [eax], xmm0
	add	eax, 16					; 00000010H
	add	esi, 16					; 00000010H
	cmp	eax, ecx
	jb	$LL13@AlphaBlt@2
$LN11@AlphaBlt@2:

; 1052 :             }
; 1053 :             for(;dy < dy_end; sa++, dy++)

	cmp	eax, edx
	jae	SHORT $LN18@AlphaBlt@2
	movzx	ecx, BYTE PTR _Y$[ebp]
	sub	esi, eax
	mov	DWORD PTR tv339[ebp], ecx
	mov	DWORD PTR tv493[ebp], esi
	jmp	SHORT $LN10@AlphaBlt@2
	npad	2
$LL38@AlphaBlt@2:
	mov	esi, DWORD PTR tv493[ebp]
$LN10@AlphaBlt@2:

; 1054 :             {
; 1055 :                 *dy = (*dy * (256 - *sa)+ Y*(*sa+1))>>8;

	movzx	edi, BYTE PTR [esi+eax]
	movzx	esi, BYTE PTR [eax]
	mov	ecx, 256				; 00000100H
	sub	ecx, edi
	inc	edi
	imul	ecx, esi
	imul	edi, DWORD PTR tv339[ebp]
	add	ecx, edi
	sar	ecx, 8
	mov	BYTE PTR [eax], cl
	inc	eax
	cmp	eax, edx
	jb	SHORT $LL38@AlphaBlt@2
$LN18@AlphaBlt@2:

; 997  :     {
; 998  :         for( ; h>0; h--, pAlphaMask += src_stride, pY += dst_stride )

	mov	ecx, DWORD PTR _src_stride$[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	add	DWORD PTR _pAlphaMask$[ebp], ecx
	mov	ecx, DWORD PTR _dst_stride$[ebp]
	add	DWORD PTR _pY$[ebp], ecx
	dec	eax
	add	edx, ecx
	mov	DWORD PTR _h$[ebp], eax
	mov	DWORD PTR tv554[ebp], edx
	test	eax, eax
	jg	$LL37@AlphaBlt@2

; 1070 :             }
; 1071 :         }
; 1072 :     }
; 1073 :     //__asm emms;
; 1074 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@AlphaBlt@2:

; 1056 :             }
; 1057 :         }
; 1058 :     }
; 1059 :     else
; 1060 :     {
; 1061 :         for( ; h>0; h--, pAlphaMask += src_stride, pY += dst_stride )

	cmp	DWORD PTR _h$[ebp], 0
	jle	SHORT $LN4@AlphaBlt@2
$LL6@AlphaBlt@2:

; 1062 :         {
; 1063 :             const BYTE* sa = pAlphaMask;      
; 1064 :             BYTE* dy = pY;

	mov	esi, DWORD PTR _pY$[ebp]

; 1065 :             const BYTE* dy_end = pY + w;   

	lea	edx, DWORD PTR [esi+ecx]
	mov	eax, esi
	mov	DWORD PTR tv327[ebp], edx

; 1066 : 
; 1067 :             for(;dy < dy_end; sa++, dy++)

	cmp	esi, edx
	jae	SHORT $LN5@AlphaBlt@2
	movzx	edx, BYTE PTR _Y$[ebp]
	mov	edi, DWORD PTR _pAlphaMask$[ebp]
	mov	DWORD PTR tv339[ebp], edx
	sub	edi, esi
	npad	4
$LL3@AlphaBlt@2:

; 1068 :             {
; 1069 :                 *dy = (*dy * (256 - *sa)+ Y*(*sa+1))>>8;

	movzx	esi, BYTE PTR [edi+eax]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, 256				; 00000100H
	sub	ecx, esi
	inc	esi
	imul	ecx, edx
	imul	esi, DWORD PTR tv339[ebp]
	add	ecx, esi
	sar	ecx, 8
	mov	BYTE PTR [eax], cl
	inc	eax
	cmp	eax, DWORD PTR tv327[ebp]
	jb	SHORT $LL3@AlphaBlt@2

; 1066 : 
; 1067 :             for(;dy < dy_end; sa++, dy++)

	mov	esi, DWORD PTR _pY$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
$LN5@AlphaBlt@2:

; 1056 :             }
; 1057 :         }
; 1058 :     }
; 1059 :     else
; 1060 :     {
; 1061 :         for( ; h>0; h--, pAlphaMask += src_stride, pY += dst_stride )

	mov	eax, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _src_stride$[ebp]
	add	esi, DWORD PTR _dst_stride$[ebp]
	add	DWORD PTR _pAlphaMask$[ebp], edx
	dec	eax
	mov	DWORD PTR _h$[ebp], eax
	mov	DWORD PTR _pY$[ebp], esi
	test	eax, eax
	jg	SHORT $LL6@AlphaBlt@2
$LN4@AlphaBlt@2:

; 1070 :             }
; 1071 :         }
; 1072 :     }
; 1073 :     //__asm emms;
; 1074 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?AlphaBlt@@YAXPAEPBEEHHHH@Z ENDP			; AlphaBlt
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?pixmix_sse2@@YAXPAKKK@Z
_TEXT	SEGMENT
_dst$ = 8						; size = 4
?pixmix_sse2@@YAXPAKKK@Z PROC				; pixmix_sse2, COMDAT
; _color$ = eax
; _alpha$ = ecx

; 939  : {

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _dst$[ebp]
	push	esi

; 940  : //    alpha = (((alpha) * (color>>24)) >> 6) & 0xff;
; 941  :     color &= 0xffffff;
; 942  :     __m128i zero = _mm_setzero_si128();
; 943  :     __m128i a = _mm_set1_epi32(((alpha+1) << 16) | (0x100 - alpha));
; 944  :     __m128i d = _mm_unpacklo_epi8(_mm_cvtsi32_si128(*dst), zero);

	mov	esi, DWORD PTR [edx]
	and	eax, 16777215				; 00ffffffH
	movd	xmm0, esi

; 945  :     __m128i s = _mm_unpacklo_epi8(_mm_cvtsi32_si128(color), zero);

	movd	xmm2, eax

; 946  :     __m128i r = _mm_unpacklo_epi16(d, s);
; 947  :     r = _mm_madd_epi16(r, a);
; 948  :     r = _mm_srli_epi32(r, 8);

	lea	eax, DWORD PTR [ecx+1]
	mov	esi, 256				; 00000100H
	sub	esi, ecx
	pxor	xmm1, xmm1
	punpcklbw xmm0, xmm1
	shl	eax, 16					; 00000010H
	punpcklbw xmm2, xmm1
	or	eax, esi
	punpcklwd xmm0, xmm2
	movd	xmm1, eax
	pshufd	xmm1, xmm1, 0
	pmaddwd	xmm0, xmm1
	psrld	xmm0, 8

; 949  :     r = _mm_packs_epi32(r, r);

	packssdw xmm0, xmm0

; 950  :     r = _mm_packus_epi16(r, r);

	packuswb xmm0, xmm0

; 951  :     *dst = (DWORD)_mm_cvtsi128_si32(r);

	movd	ecx, xmm0
	mov	DWORD PTR [edx], ecx

; 952  : }

	pop	esi
	pop	ebp
	ret	0
?pixmix_sse2@@YAXPAKKK@Z ENDP				; pixmix_sse2
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?pixmix@@YAXPAKKK@Z
_TEXT	SEGMENT
_ia$ = -4						; size = 4
_dst$ = 8						; size = 4
?pixmix@@YAXPAKKK@Z PROC				; pixmix, COMDAT
; _color$ = ecx
; _alpha$ = eax

; 915  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, eax

; 916  :     int a = alpha;
; 917  :     // Make sure both a and ia are in range 1..256 for the >>8 operations below to be correct
; 918  :     int ia = 256-a;
; 919  :     a+=1;
; 920  :     *dst = ((((*dst&0x00ff00ff)*ia + (color&0x00ff00ff)*a)&0xff00ff00)>>8)
; 921  :            | ((((*dst&0x0000ff00)*ia + (color&0x0000ff00)*a)&0x00ff0000)>>8)
; 922  :            | ((((*dst>>8)&0x00ff0000)*ia)&0xff000000);

	mov	eax, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [eax]
	push	edi
	mov	ebx, eax
	and	ebx, 65280				; 0000ff00H
	mov	edi, ecx
	and	edi, 65280				; 0000ff00H
	mov	edx, 256				; 00000100H
	sub	edx, esi
	imul	ebx, edx
	inc	esi
	imul	edi, esi
	add	edi, ebx
	mov	DWORD PTR _ia$[ebp], edx
	mov	ebx, eax
	and	ebx, -65281				; ffff00ffH
	imul	ebx, DWORD PTR _ia$[ebp]
	mov	edx, ecx
	and	edx, -65281				; ffff00ffH
	imul	edx, esi
	add	edx, ebx
	mov	ebx, eax
	xor	edi, edx
	mov	edx, DWORD PTR _ia$[ebp]
	and	ebx, 16711935				; 00ff00ffH
	shr	eax, 8
	imul	ebx, edx
	and	ecx, 16711935				; 00ff00ffH
	imul	ecx, esi
	and	eax, 16711680				; 00ff0000H
	imul	eax, edx
	and	edi, 16711680				; 00ff0000H
	add	ebx, ecx
	xor	edi, ebx
	shr	edi, 8
	and	eax, -16777216				; ff000000H
	or	edi, eax
	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [eax], edi
	pop	edi
	pop	esi
	pop	ebx

; 923  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?pixmix@@YAXPAKKK@Z ENDP				; pixmix
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Bilinear@@YAXPAEHHHHH@Z
_TEXT	SEGMENT
tv172 = -8						; size = 4
tv340 = -4						; size = 4
_buf$ = 8						; size = 4
_w$ = 12						; size = 4
_h$ = 16						; size = 4
_stride$ = 20						; size = 4
_x_factor$ = 24						; size = 4
_y_factor$ = 28						; size = 4
?Bilinear@@YAXPAEHHHHH@Z PROC				; Bilinear, COMDAT

; 668  : {   

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	mov	ebx, DWORD PTR _w$[ebp]
	push	esi
	push	edi

; 669  :     WORD *col_pix_buf_base = reinterpret_cast<WORD*>(xy_malloc(w*sizeof(WORD)));

	lea	edi, DWORD PTR [ebx+ebx]
	lea	eax, DWORD PTR [edi+23]
	push	eax
	call	_malloc
	lea	esi, DWORD PTR [eax+23]
	mov	ecx, esi
	and	ecx, 15					; 0000000fH
	sub	esi, ecx

; 670  :     if(!col_pix_buf_base)
; 671  :     {
; 672  :         //ToDo: error handling
; 673  :         return;
; 674  :     }
; 675  :     memset(col_pix_buf_base, 0, w*sizeof(WORD));

	push	edi
	push	0
	push	esi
	mov	DWORD PTR [esi-4], eax
	mov	DWORD PTR [esi-8], edi
	call	_memset

; 676  : 
; 677  :     for (int y = 0; y < h; y++){

	mov	eax, DWORD PTR _h$[ebp]
	add	esp, 16					; 00000010H
	test	eax, eax
	jle	SHORT $LN4@Bilinear

; 669  :     WORD *col_pix_buf_base = reinterpret_cast<WORD*>(xy_malloc(w*sizeof(WORD)));

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv340[ebp], ecx
	mov	DWORD PTR tv172[ebp], eax
$LL20@Bilinear:

; 678  :         unsigned char *src=buf+y*stride;
; 679  : 
; 680  :         WORD *col_pix_buf = col_pix_buf_base;
; 681  :         int last=0;

	xor	edi, edi

; 682  :         for(int x = 0; x < w; x++)

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN5@Bilinear
	npad	4
$LL19@Bilinear:

; 683  :         {
; 684  :             int temp1 = src[x];

	movzx	ecx, BYTE PTR [ecx+eax]

; 685  :             int temp2 = temp1*x_factor;
; 686  :             temp1 <<= 3;
; 687  :             temp1 -= temp2;
; 688  :             temp1 += last;
; 689  :             last = temp2;
; 690  : 
; 691  :             temp2 = temp1*y_factor;
; 692  :             temp1 <<= 3;
; 693  :             temp1 -= temp2;
; 694  :             temp1 += col_pix_buf[x];
; 695  :             src[x] = ((temp1+32)>>6);

	movzx	ebx, WORD PTR [esi+eax*2]
	mov	edx, ecx
	imul	edx, DWORD PTR _x_factor$[ebp]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	sub	ecx, edx
	add	ecx, edi
	mov	edi, edx
	mov	edx, ecx
	imul	edx, DWORD PTR _y_factor$[ebp]
	lea	ebx, DWORD PTR [ebx+ecx*8+32]
	mov	ecx, DWORD PTR tv340[ebp]
	sub	ebx, edx
	sar	ebx, 6
	mov	BYTE PTR [ecx+eax], bl
	mov	ebx, DWORD PTR _w$[ebp]

; 696  :             col_pix_buf[x] = temp2;

	mov	WORD PTR [esi+eax*2], dx
	inc	eax
	cmp	eax, ebx
	jl	SHORT $LL19@Bilinear
$LN5@Bilinear:

; 676  : 
; 677  :     for (int y = 0; y < h; y++){

	add	ecx, DWORD PTR _stride$[ebp]
	dec	DWORD PTR tv172[ebp]
	mov	DWORD PTR tv340[ebp], ecx
	jne	SHORT $LL20@Bilinear
$LN4@Bilinear:

; 697  :         }
; 698  :     }
; 699  :     xy_free(col_pix_buf_base);

	mov	edx, DWORD PTR [esi-4]
	push	edx
	call	_free
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 700  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Bilinear@@YAXPAEHHHHH@Z ENDP				; Bilinear
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?be_blur_c@@YAXPAEPAIHHH@Z
_TEXT	SEGMENT
tv889 = -32						; size = 4
tv761 = -28						; size = 4
tv888 = -24						; size = 4
tv1012 = -20						; size = 4
_align_buf$491015 = -20					; size = 4
_src$311024 = -20					; size = 4
_old_sum$311041 = -16					; size = 4
_old_sum$311027 = -16					; size = 4
tv687 = -12						; size = 4
_old_pix$311040 = -12					; size = 4
tv333 = -8						; size = 4
tv798 = -4						; size = 4
_old_pix$311026 = -4					; size = 4
_buf$ = 8						; size = 4
tv325 = 12						; size = 4
_w$ = 12						; size = 4
_h$ = 16						; size = 4
_stride$ = 20						; size = 4
?be_blur_c@@YAXPAEPAIHHH@Z PROC				; be_blur_c, COMDAT

; 592  : {   

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	mov	ebx, DWORD PTR _w$[ebp]
	push	esi

; 593  :     WORD *col_pix_buf_base = reinterpret_cast<WORD*>(xy_malloc(w*sizeof(WORD)));

	lea	esi, DWORD PTR [ebx+ebx]
	lea	eax, DWORD PTR [esi+23]
	push	edi
	push	eax
	call	_malloc
	lea	edi, DWORD PTR [eax+23]
	mov	ecx, edi
	and	ecx, 15					; 0000000fH
	sub	edi, ecx
	lea	ecx, DWORD PTR [edi-4]
	mov	DWORD PTR [ecx], eax

; 594  :     WORD *col_sum_buf_base = reinterpret_cast<WORD*>(xy_malloc(w*sizeof(WORD)));

	lea	eax, DWORD PTR [esi+23]
	push	eax
	mov	DWORD PTR tv325[ebp], ecx
	mov	DWORD PTR [edi-8], esi
	call	_malloc
	lea	ecx, DWORD PTR [eax+23]
	mov	edx, ecx
	and	edx, 15					; 0000000fH
	sub	ecx, edx

; 595  :     if(!col_sum_buf_base || !col_pix_buf_base)
; 596  :     {
; 597  :         //ToDo: error handling
; 598  :         return;
; 599  :     }
; 600  :     memset(col_pix_buf_base, 0, w*sizeof(WORD));

	push	esi
	lea	edx, DWORD PTR [ecx-4]
	push	0
	push	edi
	mov	DWORD PTR _align_buf$491015[ebp], ecx
	mov	DWORD PTR tv333[ebp], edx
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [ecx-8], esi
	call	_memset

; 601  :     memset(col_sum_buf_base, 0, w*sizeof(WORD));

	mov	eax, DWORD PTR _align_buf$491015[ebp]
	push	esi
	push	0
	push	eax
	call	_memset

; 602  :     WORD *col_pix_buf = col_pix_buf_base-2;//for aligment;
; 603  :     WORD *col_sum_buf = col_sum_buf_base-2;//for aligment;
; 604  :     {
; 605  :         int y = 0;
; 606  :         unsigned char *src=buf+y*stride;
; 607  : 
; 608  :         int x = 2;
; 609  :         int old_pix = src[x-1];

	mov	esi, DWORD PTR _buf$[ebp]
	movzx	edx, BYTE PTR [esi+1]

; 610  :         int old_sum = old_pix + src[x-2];

	movzx	ecx, BYTE PTR [esi]
	mov	eax, 2
	add	esp, 32					; 00000020H
	add	ecx, edx

; 611  :         for ( ; x < w; x++) {

	cmp	ebx, eax
	jle	SHORT $LN10@be_blur_c
	npad	5
$LL38@be_blur_c:

; 612  :             int temp1 = src[x];

	movzx	esi, BYTE PTR [eax+esi]

; 613  :             int temp2 = old_pix + temp1;

	lea	edi, DWORD PTR [esi+edx]

; 614  :             old_pix = temp1;

	mov	edx, esi

; 615  :             temp1 = old_sum + temp2;

	lea	esi, DWORD PTR [edi+ecx]

; 616  :             old_sum = temp2;

	mov	ecx, edi

; 617  :             col_pix_buf[x] = temp1;

	mov	edi, DWORD PTR tv325[ebp]
	mov	WORD PTR [edi+eax*2], si
	mov	esi, DWORD PTR _buf$[ebp]
	inc	eax
	cmp	eax, ebx
	jl	SHORT $LL38@be_blur_c
$LN10@be_blur_c:

; 618  :         }
; 619  :     }
; 620  :     {
; 621  :         int y = 1;
; 622  :         unsigned char *src=buf+y*stride;

	mov	eax, DWORD PTR _stride$[ebp]

; 623  : 
; 624  : 
; 625  :         int x = 2;
; 626  :         int old_pix = src[x-1];

	movzx	edi, BYTE PTR [esi+eax+1]
	lea	ecx, DWORD PTR [esi+eax]
	mov	DWORD PTR _old_pix$311026[ebp], edi

; 627  :         int old_sum = old_pix + src[x-2];

	movzx	edi, BYTE PTR [ecx]
	add	edi, DWORD PTR _old_pix$311026[ebp]
	mov	edx, 2
	mov	DWORD PTR _src$311024[ebp], ecx

; 628  :         for ( ; x < w; x++) {

	cmp	ebx, edx
	jle	SHORT $LN36@be_blur_c
	mov	esi, DWORD PTR tv325[ebp]
	mov	ecx, DWORD PTR tv333[ebp]
	sub	ecx, esi
	lea	eax, DWORD PTR [esi+4]
	mov	DWORD PTR tv687[ebp], ecx
	jmp	SHORT $LN9@be_blur_c
	npad	3
$LL37@be_blur_c:
	mov	edi, DWORD PTR _old_sum$311027[ebp]
$LN9@be_blur_c:

; 629  :             int temp1 = src[x];

	mov	ecx, DWORD PTR _src$311024[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]

; 630  :             int temp2 = old_pix + temp1;

	mov	esi, DWORD PTR _old_pix$311026[ebp]
	add	esi, ecx

; 631  :             old_pix = temp1;

	mov	DWORD PTR _old_pix$311026[ebp], ecx

; 632  :             temp1 = old_sum + temp2;
; 633  :             old_sum = temp2;
; 634  : 
; 635  :             temp2 = col_pix_buf[x] + temp1;

	movzx	ecx, WORD PTR [eax]
	add	edi, esi
	mov	DWORD PTR _old_sum$311027[ebp], esi

; 636  :             col_pix_buf[x] = temp1;
; 637  :             //dst[x-1] = (col_sum_buf[x] + temp2) >> 4;
; 638  :             col_sum_buf[x] = temp2;

	mov	esi, DWORD PTR tv687[ebp]
	add	ecx, edi
	mov	WORD PTR [eax], di
	mov	WORD PTR [esi+eax], cx
	inc	edx
	add	eax, 2
	cmp	edx, ebx
	jl	SHORT $LL37@be_blur_c

; 628  :         for ( ; x < w; x++) {

	mov	esi, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR _stride$[ebp]
$LN36@be_blur_c:

; 639  :         }
; 640  :     }
; 641  : 
; 642  :     for (int y = 2; y < h; y++) {

	mov	edi, DWORD PTR _h$[ebp]
	cmp	edi, 2
	jle	$LN4@be_blur_c
	or	edx, -1
	sub	edx, eax
	lea	ecx, DWORD PTR [esi+eax*2]
	add	edi, -2					; fffffffeH
	mov	DWORD PTR tv798[ebp], ecx
	mov	DWORD PTR tv888[ebp], edx
	mov	DWORD PTR tv1012[ebp], edi
$LL6@be_blur_c:

; 643  :         unsigned char *src=buf+y*stride;
; 644  :         unsigned char *dst=buf+(y-1)*stride;
; 645  : 
; 646  :         int x = 2;
; 647  :         int old_pix = src[x-1];

	movzx	edi, BYTE PTR [ecx+1]

; 648  :         int old_sum = old_pix + src[x-2];

	movzx	edx, BYTE PTR [ecx]
	mov	esi, 2
	add	edx, edi
	mov	DWORD PTR _old_pix$311040[ebp], edi
	mov	DWORD PTR _old_sum$311041[ebp], edx

; 649  :         for ( ; x < w; x++) {

	cmp	ebx, esi
	jle	SHORT $LN5@be_blur_c
	mov	edi, DWORD PTR tv333[ebp]
	mov	edx, DWORD PTR tv325[ebp]
	sub	edx, edi
	mov	DWORD PTR tv761[ebp], edx
	mov	edx, DWORD PTR tv888[ebp]
	add	edx, ecx
	lea	eax, DWORD PTR [edi+4]
	mov	DWORD PTR tv889[ebp], edx
$LL35@be_blur_c:

; 650  :             int temp1 = src[x];

	movzx	ecx, BYTE PTR [ecx+esi]

; 651  :             int temp2 = old_pix + temp1;

	mov	edx, DWORD PTR _old_pix$311040[ebp]
	add	edx, ecx

; 652  :             old_pix = temp1;

	mov	DWORD PTR _old_pix$311040[ebp], ecx

; 653  :             temp1 = old_sum + temp2;

	mov	ecx, DWORD PTR _old_sum$311041[ebp]
	lea	edi, DWORD PTR [edx+ecx]

; 654  :             old_sum = temp2;

	mov	DWORD PTR _old_sum$311041[ebp], edx

; 655  : 
; 656  :             temp2 = col_pix_buf[x] + temp1;

	mov	edx, DWORD PTR tv761[ebp]
	movzx	ecx, WORD PTR [edx+eax]

; 657  :             col_pix_buf[x] = temp1;

	mov	WORD PTR [edx+eax], di

; 658  :             dst[x-1] = (col_sum_buf[x] + temp2) >> 4;

	movzx	edx, WORD PTR [eax]
	add	ecx, edi
	mov	edi, DWORD PTR tv889[ebp]
	add	edx, ecx
	sar	edx, 4
	mov	BYTE PTR [edi+esi], dl

; 659  :             col_sum_buf[x] = temp2;

	mov	WORD PTR [eax], cx
	mov	ecx, DWORD PTR tv798[ebp]
	inc	esi
	add	eax, 2
	cmp	esi, ebx
	jl	SHORT $LL35@be_blur_c

; 649  :         for ( ; x < w; x++) {

	mov	eax, DWORD PTR _stride$[ebp]
$LN5@be_blur_c:

; 639  :         }
; 640  :     }
; 641  : 
; 642  :     for (int y = 2; y < h; y++) {

	add	ecx, eax
	dec	DWORD PTR tv1012[ebp]
	mov	DWORD PTR tv798[ebp], ecx
	jne	SHORT $LL6@be_blur_c
$LN4@be_blur_c:

; 660  :         }
; 661  :     }
; 662  : 
; 663  :     xy_free(col_sum_buf_base);

	mov	eax, DWORD PTR tv333[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free

; 664  :     xy_free(col_pix_buf_base);

	mov	edx, DWORD PTR tv325[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_free
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 665  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?be_blur_c@@YAXPAEPAIHHH@Z ENDP				; be_blur_c
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?be_blur@@YAXPAEPAIHHH@Z
_TEXT	SEGMENT
tv1253 = -40						; size = 4
tv880 = -36						; size = 4
tv1211 = -32						; size = 4
_align_buf$491049 = -32					; size = 4
_src$310937 = -32					; size = 4
$T491069 = -28						; size = 4
_old_sum$310940 = -28					; size = 4
tv830 = -24						; size = 4
_old_sum$310988 = -24					; size = 4
_old_pix$310987 = -20					; size = 4
tv1146 = -16						; size = 4
tv1057 = -12						; size = 4
_old_pix$310939 = -12					; size = 4
tv461 = -8						; size = 4
tv453 = -4						; size = 4
_buf$ = 8						; size = 4
_w$ = 12						; size = 4
_h$ = 16						; size = 4
_stride$ = 20						; size = 4
?be_blur@@YAXPAEPAIHHH@Z PROC				; be_blur, COMDAT

; 487  : {   

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi

; 488  :     WORD *col_pix_buf_base = reinterpret_cast<WORD*>(xy_malloc(w*sizeof(WORD)));

	mov	esi, DWORD PTR _w$[ebp]
	add	esi, esi
	lea	eax, DWORD PTR [esi+23]
	push	edi
	push	eax
	call	_malloc
	lea	edi, DWORD PTR [eax+23]
	mov	ecx, edi
	and	ecx, 15					; 0000000fH
	sub	edi, ecx
	lea	ecx, DWORD PTR [edi-4]
	mov	DWORD PTR [ecx], eax

; 489  :     WORD *col_sum_buf_base = reinterpret_cast<WORD*>(xy_malloc(w*sizeof(WORD)));

	lea	eax, DWORD PTR [esi+23]
	push	eax
	mov	DWORD PTR tv453[ebp], ecx
	mov	DWORD PTR [edi-8], esi
	call	_malloc
	lea	ecx, DWORD PTR [eax+23]
	mov	edx, ecx
	and	edx, 15					; 0000000fH
	sub	ecx, edx

; 490  :     if(!col_sum_buf_base || !col_pix_buf_base)
; 491  :     {
; 492  :         //ToDo: error handling
; 493  :         return;
; 494  :     }
; 495  :     memset(col_pix_buf_base, 0, w*sizeof(WORD));

	push	esi
	lea	edx, DWORD PTR [ecx-4]
	push	0
	push	edi
	mov	DWORD PTR _align_buf$491049[ebp], ecx
	mov	DWORD PTR tv461[ebp], edx
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [ecx-8], esi
	call	_memset

; 496  :     memset(col_sum_buf_base, 0, w*sizeof(WORD));

	mov	eax, DWORD PTR _align_buf$491049[ebp]
	push	esi
	push	0
	push	eax
	call	_memset

; 497  :     WORD *col_pix_buf = col_pix_buf_base-2;//for aligment;
; 498  :     WORD *col_sum_buf = col_sum_buf_base-2;//for aligment;
; 499  :     {
; 500  :         int y = 0;
; 501  :         unsigned char *src=buf+y*stride;
; 502  : 
; 503  :         int x = 2;
; 504  :         int old_pix = src[x-1];

	mov	ecx, DWORD PTR _buf$[ebp]
	movzx	esi, BYTE PTR [ecx+1]

; 505  :         int old_sum = old_pix + src[x-2];

	movzx	edx, BYTE PTR [ecx]
	mov	eax, 2
	add	esp, 32					; 00000020H
	add	edx, esi

; 506  :         for ( ; x < w; x++) {

	cmp	DWORD PTR _w$[ebp], eax
	jle	SHORT $LN13@be_blur
	npad	6
$LL45@be_blur:

; 507  :             int temp1 = src[x];

	movzx	ecx, BYTE PTR [eax+ecx]

; 508  :             int temp2 = old_pix + temp1;

	lea	edi, DWORD PTR [ecx+esi]

; 509  :             old_pix = temp1;

	mov	esi, ecx

; 510  :             temp1 = old_sum + temp2;

	lea	ecx, DWORD PTR [edi+edx]

; 511  :             old_sum = temp2;

	mov	edx, edi

; 512  :             col_pix_buf[x] = temp1;

	mov	edi, DWORD PTR tv453[ebp]
	mov	WORD PTR [edi+eax*2], cx
	mov	ecx, DWORD PTR _buf$[ebp]
	inc	eax
	cmp	eax, DWORD PTR _w$[ebp]
	jl	SHORT $LL45@be_blur
$LN13@be_blur:

; 513  :         }
; 514  :     }
; 515  :     {
; 516  :         int y = 1;
; 517  :         unsigned char *src=buf+y*stride;

	mov	edx, DWORD PTR _stride$[ebp]

; 518  : 
; 519  : 
; 520  :         int x = 2;
; 521  :         int old_pix = src[x-1];

	movzx	edi, BYTE PTR [ecx+edx+1]
	lea	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _old_pix$310939[ebp], edi

; 522  :         int old_sum = old_pix + src[x-2];

	movzx	edi, BYTE PTR [eax]
	add	edi, DWORD PTR _old_pix$310939[ebp]
	mov	esi, 2
	mov	DWORD PTR _src$310937[ebp], eax

; 523  :         for ( ; x < w; x++) {

	cmp	DWORD PTR _w$[ebp], esi
	jle	SHORT $LN10@be_blur
	mov	edx, DWORD PTR tv453[ebp]
	mov	ecx, DWORD PTR tv461[ebp]
	sub	ecx, edx
	lea	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv830[ebp], ecx
	jmp	SHORT $LN12@be_blur
	npad	1
$LL42@be_blur:
	mov	edi, DWORD PTR _old_sum$310940[ebp]
$LN12@be_blur:

; 524  :             int temp1 = src[x];

	mov	ecx, DWORD PTR _src$310937[ebp]
	movzx	edx, BYTE PTR [esi+ecx]

; 525  :             int temp2 = old_pix + temp1;

	mov	ecx, DWORD PTR _old_pix$310939[ebp]
	add	ecx, edx

; 526  :             old_pix = temp1;

	mov	DWORD PTR _old_pix$310939[ebp], edx

; 527  :             temp1 = old_sum + temp2;
; 528  :             old_sum = temp2;
; 529  : 
; 530  :             temp2 = col_pix_buf[x] + temp1;

	movzx	edx, WORD PTR [eax]
	add	edi, ecx
	mov	DWORD PTR _old_sum$310940[ebp], ecx

; 531  :             col_pix_buf[x] = temp1;
; 532  :             //dst[x-1] = (col_sum_buf[x] + temp2) >> 4;
; 533  :             col_sum_buf[x] = temp2;

	mov	ecx, DWORD PTR tv830[ebp]
	add	edx, edi
	mov	WORD PTR [eax], di
	mov	WORD PTR [ecx+eax], dx
	inc	esi
	add	eax, 2
	cmp	esi, DWORD PTR _w$[ebp]
	jl	SHORT $LL42@be_blur

; 523  :         for ( ; x < w; x++) {

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _stride$[ebp]
$LN10@be_blur:

; 534  :         }
; 535  :     }
; 536  : 
; 537  :     //__m128i round = _mm_set1_epi16(8);
; 538  :     for (int y = 2; y < h; y++) {

	mov	esi, DWORD PTR _h$[ebp]
	cmp	esi, 2
	jle	$LN7@be_blur
	mov	edi, DWORD PTR _w$[ebp]
	add	edi, -2					; fffffffeH
	or	eax, -1
	and	edi, -8					; fffffff8H
	sub	eax, edx
	lea	ecx, DWORD PTR [ecx+edx*2]
	add	esi, -2					; fffffffeH
	mov	DWORD PTR $T491069[ebp], edi
	mov	DWORD PTR tv1057[ebp], ecx
	mov	DWORD PTR tv1146[ebp], eax
	mov	DWORD PTR tv1211[ebp], esi
$LL9@be_blur:

; 539  :         unsigned char *src=buf+y*stride;
; 540  :         unsigned char *dst=buf+(y-1)*stride;
; 541  : 
; 542  :                 
; 543  :         int x = 2;
; 544  :         __m128i old_pix_128 = _mm_cvtsi32_si128(src[1]);

	movzx	edx, BYTE PTR [ecx+1]

; 545  :         __m128i old_sum_128 = _mm_cvtsi32_si128(src[0]+src[1]);

	movzx	esi, BYTE PTR [ecx]
	mov	eax, 2
	add	esi, edx
	movd	xmm2, edx
	movd	xmm3, esi

; 546  :         for ( ; x < ((w-2)&(~7)); x+=8) {

	cmp	edi, eax
	jle	$LN4@be_blur
	mov	edi, DWORD PTR tv461[ebp]
	mov	esi, DWORD PTR tv453[ebp]
	pxor	xmm5, xmm5
	lea	edx, DWORD PTR [edi+4]
	sub	esi, edi
	npad	2
$LL6@be_blur:

; 547  :             __m128i new_pix = _mm_loadl_epi64(reinterpret_cast<const __m128i*>(src+x));

	movq	xmm1, QWORD PTR [ecx+eax]

; 548  :             new_pix = _mm_unpacklo_epi8(new_pix, _mm_setzero_si128());
; 549  :             __m128i temp = _mm_slli_si128(new_pix,2);
; 550  :             temp = _mm_add_epi16(temp, old_pix_128);
; 551  :             temp = _mm_add_epi16(temp, new_pix);
; 552  :             old_pix_128 = _mm_srli_si128(new_pix,14);
; 553  : 
; 554  :             new_pix = _mm_slli_si128(temp,2);
; 555  :             new_pix = _mm_add_epi16(new_pix, old_sum_128);
; 556  :             new_pix = _mm_add_epi16(new_pix, temp);
; 557  :             old_sum_128 = _mm_srli_si128(temp, 14);
; 558  : 
; 559  :             __m128i old_col_pix = _mm_loadu_si128( reinterpret_cast<const __m128i*>(col_pix_buf+x) );

	movdqu	xmm4, XMMWORD PTR [esi+edx]

; 560  :             __m128i old_col_sum = _mm_loadu_si128( reinterpret_cast<const __m128i*>(col_sum_buf+x) );
; 561  :             _mm_storeu_si128( reinterpret_cast<__m128i*>(col_pix_buf+x), new_pix );
; 562  :             temp = _mm_add_epi16(new_pix, old_col_pix);
; 563  :             _mm_storeu_si128( reinterpret_cast<__m128i*>(col_sum_buf+x), temp );
; 564  : 
; 565  :             old_col_sum = _mm_add_epi16(old_col_sum, temp);
; 566  :             //old_col_sum = _mm_add_epi16(old_col_sum, round);
; 567  :             old_col_sum = _mm_srli_epi16(old_col_sum, 4);
; 568  :             old_col_sum = _mm_packus_epi16(old_col_sum, old_col_sum);
; 569  :             _mm_storel_epi64( reinterpret_cast<__m128i*>(dst+x-1), old_col_sum );

	mov	edi, DWORD PTR tv1146[ebp]
	punpcklbw xmm1, xmm5
	movdqa	xmm0, xmm1
	pslldq	xmm0, 2
	paddw	xmm0, xmm2
	paddw	xmm0, xmm1
	psrldq	xmm1, 14				; 0000000eH
	movdqa	xmm2, xmm1
	movdqa	xmm1, xmm0
	pslldq	xmm1, 2
	paddw	xmm1, xmm3
	paddw	xmm1, xmm0
	psrldq	xmm0, 14				; 0000000eH
	movdqa	xmm3, xmm0
	movdqu	xmm0, XMMWORD PTR [edx]
	movdqu	XMMWORD PTR [esi+edx], xmm1
	paddw	xmm1, xmm4
	paddw	xmm0, xmm1
	lea	edi, DWORD PTR [edi+ecx+1]
	movdqu	XMMWORD PTR [edx], xmm1
	psrlw	xmm0, 4
	packuswb xmm0, xmm0
	movq	QWORD PTR [edi+eax-1], xmm0
	mov	edi, DWORD PTR $T491069[ebp]
	add	eax, 8
	add	edx, 16					; 00000010H
	cmp	eax, edi
	jl	SHORT $LL6@be_blur
$LN4@be_blur:

; 570  :         }
; 571  :         int old_pix = src[x-1];

	movzx	esi, BYTE PTR [ecx+eax-1]

; 572  :         int old_sum = old_pix + src[x-2];

	movzx	edx, BYTE PTR [ecx+eax-2]
	add	edx, esi
	mov	DWORD PTR _old_pix$310987[ebp], esi
	mov	DWORD PTR _old_sum$310988[ebp], edx

; 573  :         for ( ; x < w; x++) {

	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN8@be_blur
	mov	edi, DWORD PTR tv461[ebp]
	mov	edx, DWORD PTR tv453[ebp]
	sub	edx, edi
	lea	esi, DWORD PTR [edi+eax*2]
	mov	edi, DWORD PTR tv1146[ebp]
	add	edi, ecx
	mov	DWORD PTR tv880[ebp], edx
	mov	DWORD PTR tv1253[ebp], edi
	jmp	SHORT $LN3@be_blur
	npad	7
$LL40@be_blur:
	mov	edx, DWORD PTR tv880[ebp]
$LN3@be_blur:

; 574  :             int temp1 = src[x];

	movzx	ecx, BYTE PTR [ecx+eax]

; 575  :             int temp2 = old_pix + temp1;

	mov	edi, DWORD PTR _old_pix$310987[ebp]
	add	edi, ecx

; 576  :             old_pix = temp1;

	mov	DWORD PTR _old_pix$310987[ebp], ecx

; 577  :             temp1 = old_sum + temp2;

	mov	ecx, DWORD PTR _old_sum$310988[ebp]
	add	ecx, edi

; 578  :             old_sum = temp2;

	mov	DWORD PTR _old_sum$310988[ebp], edi

; 579  : 
; 580  :             temp2 = col_pix_buf[x] + temp1;

	movzx	edi, WORD PTR [esi+edx]

; 581  :             col_pix_buf[x] = temp1;

	mov	WORD PTR [esi+edx], cx

; 582  :             dst[x-1] = (col_sum_buf[x] + temp2) >> 4;

	movzx	edx, WORD PTR [esi]
	add	edi, ecx
	mov	ecx, DWORD PTR tv1253[ebp]
	add	edx, edi
	sar	edx, 4
	mov	BYTE PTR [ecx+eax], dl
	mov	ecx, DWORD PTR tv1057[ebp]

; 583  :             col_sum_buf[x] = temp2;

	mov	WORD PTR [esi], di
	inc	eax
	add	esi, 2
	cmp	eax, DWORD PTR _w$[ebp]
	jl	SHORT $LL40@be_blur

; 573  :         for ( ; x < w; x++) {

	mov	edi, DWORD PTR $T491069[ebp]
$LN8@be_blur:

; 534  :         }
; 535  :     }
; 536  : 
; 537  :     //__m128i round = _mm_set1_epi16(8);
; 538  :     for (int y = 2; y < h; y++) {

	add	ecx, DWORD PTR _stride$[ebp]
	dec	DWORD PTR tv1211[ebp]
	mov	DWORD PTR tv1057[ebp], ecx
	jne	$LL9@be_blur
$LN7@be_blur:

; 584  :         }
; 585  :     }
; 586  : 
; 587  :     xy_free(col_sum_buf_base);

	mov	edx, DWORD PTR tv461[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_free

; 588  :     xy_free(col_pix_buf_base);

	mov	ecx, DWORD PTR tv453[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_free
	add	esp, 8

; 589  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?be_blur@@YAXPAEPAIHHH@Z ENDP				; be_blur
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?ass_gauss_blur@@YAXPAEPAIHHHPBIHH@Z
_TEXT	SEGMENT
tv2010 = -28						; size = 4
tv1880 = -28						; size = 4
tv1768 = -28						; size = 4
tv1550 = -28						; size = 4
_srcp$310889 = -28					; size = 4
_dstp$310840 = -28					; size = 4
tv2184 = -24						; size = 4
tv1281 = -24						; size = 4
_m3$310828 = -24					; size = 4
tv159 = -24						; size = 4
_dstp$310781 = -24					; size = 4
$T491120 = -20						; size = 4
_m3$310895 = -20					; size = 4
_m3$310883 = -20					; size = 4
_m3$310869 = -20					; size = 4
_m3$310856 = -20					; size = 4
_m3$310842 = -20					; size = 4
tv1915 = -16						; size = 4
tv1746 = -16						; size = 4
tv1475 = -16						; size = 4
tv1274 = -16						; size = 4
tv268 = -16						; size = 4
_dstp$310825 = -16					; size = 4
tv1477 = -12						; size = 4
tv1373 = -12						; size = 4
tv1254 = -12						; size = 4
$T491123 = -12						; size = 4
_y$ = -8						; size = 4
_s$ = -8						; size = 4
_t$ = -4						; size = 4
_buffer$ = 8						; size = 4
_tmp2$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_stride$ = 24						; size = 4
_m2$ = 28						; size = 4
_r$ = 32						; size = 4
?ass_gauss_blur@@YAXPAEPAIHHHPBIHH@Z PROC		; ass_gauss_blur, COMDAT
; _mwidth$ = eax

; 300  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 301  : 
; 302  :     int x, y;
; 303  : 
; 304  :     unsigned char *s = buffer;
; 305  :     unsigned *t = tmp2 + 1;

	mov	edx, DWORD PTR _tmp2$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _r$[ebp]
	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR _buffer$[ebp]
	add	edx, 4
	push	edi
	mov	DWORD PTR _s$[ebp], eax
	mov	DWORD PTR _t$[ebp], edx

; 306  :     for (y = 0; y < height; y++) {

	test	ecx, ecx
	jle	$LN72@ass_gauss_
	mov	edx, DWORD PTR _width$[ebp]
	mov	eax, edx
	sub	eax, ebx
	mov	DWORD PTR $T491120[ebp], eax
	lea	eax, DWORD PTR [edx*4+4]
	mov	DWORD PTR tv1550[ebp], ecx
	npad	4
$LL74@ass_gauss_:

; 307  :         memset(t - 1, 0, (width + 1) * sizeof(*t));

	push	eax
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, -4					; fffffffcH
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 308  :         x = 0;
; 309  :         if(x < r)//in case that r < 0

	test	ebx, ebx
	jle	SHORT $LN67@ass_gauss_

; 310  :         {            
; 311  :             const int src = s[x];

	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [ecx]

; 312  :             if (src) {

	test	eax, eax
	je	SHORT $LN67@ass_gauss_

; 313  :                 register unsigned *dstp = t + x - r;

	mov	ecx, DWORD PTR _t$[ebp]

; 314  :                 int mx;
; 315  :                 const unsigned *m3 = m2 + src * mwidth;

	imul	eax, esi
	lea	edx, DWORD PTR [ebx*4]
	sub	ecx, edx
	mov	edx, DWORD PTR _m2$[ebp]
	lea	edi, DWORD PTR [edx+eax*4]

; 316  :                 unsigned sum = 0;
; 317  :                 for (mx = mwidth-1; mx >= r - x ; mx--) {                

	lea	eax, DWORD PTR [esi-1]
	xor	edx, edx
	mov	DWORD PTR _dstp$310781[ebp], ecx
	cmp	eax, ebx
	jl	SHORT $LN67@ass_gauss_
	sub	edi, DWORD PTR _dstp$310781[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	sub	eax, ebx
	inc	eax
	npad	6
$LL69@ass_gauss_:

; 318  :                     sum += m3[mx];

	add	edx, DWORD PTR [edi+ecx]
	sub	ecx, 4

; 319  :                     dstp[mx] += sum;

	add	DWORD PTR [ecx+4], edx
	dec	eax
	jne	SHORT $LL69@ass_gauss_
$LN67@ass_gauss_:

; 320  :                 }
; 321  :             }
; 322  :         }
; 323  : 
; 324  :         for (x = 1; x < r; x++) {

	mov	ecx, 1
	cmp	ebx, ecx
	jle	SHORT $LN132@ass_gauss_
	mov	edx, DWORD PTR _t$[ebp]
	lea	eax, DWORD PTR [ebx-1]
	mov	DWORD PTR tv1254[ebp], eax
	lea	eax, DWORD PTR [ebx*4]
	sub	edx, eax
	add	edx, 4
	mov	DWORD PTR tv1274[ebp], edx
	npad	3
$LL66@ass_gauss_:

; 325  :             const int src = s[x];

	mov	eax, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]

; 326  :             if (src) {

	test	eax, eax
	je	SHORT $LN65@ass_gauss_

; 327  :                 register unsigned *dstp = t + x - r;
; 328  :                 int mx;
; 329  :                 const unsigned *m3 = m2 + src * mwidth;

	mov	edi, DWORD PTR _m2$[ebp]
	imul	eax, esi
	lea	edi, DWORD PTR [edi+eax*4]

; 330  :                 for (mx = r - x; mx < mwidth; mx++) {

	mov	eax, DWORD PTR tv1254[ebp]
	cmp	eax, esi
	jge	SHORT $LN65@ass_gauss_
	sub	edi, edx
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, esi
	sub	edx, DWORD PTR tv1254[ebp]
	mov	DWORD PTR tv1281[ebp], edi
$LL62@ass_gauss_:

; 331  :                     dstp[mx] += m3[mx];

	mov	edi, DWORD PTR tv1281[ebp]
	mov	edi, DWORD PTR [edi+eax]
	add	DWORD PTR [eax], edi
	add	eax, 4
	dec	edx
	jne	SHORT $LL62@ass_gauss_

; 330  :                 for (mx = r - x; mx < mwidth; mx++) {

	mov	edx, DWORD PTR tv1274[ebp]
$LN65@ass_gauss_:

; 320  :                 }
; 321  :             }
; 322  :         }
; 323  : 
; 324  :         for (x = 1; x < r; x++) {

	dec	DWORD PTR tv1254[ebp]
	inc	ecx
	add	edx, 4
	mov	DWORD PTR tv1274[ebp], edx
	cmp	ecx, ebx
	jl	SHORT $LL66@ass_gauss_
$LN132@ass_gauss_:

; 332  :                 }
; 333  :             }
; 334  :         }
; 335  : 
; 336  :         for (; x < width - r; x++) {

	cmp	ecx, DWORD PTR $T491120[ebp]
	jge	SHORT $LN57@ass_gauss_
	mov	eax, DWORD PTR _t$[ebp]
	mov	edx, ecx
	sub	edx, ebx
	lea	edi, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv1373[ebp], edi
	npad	7
$LL59@ass_gauss_:

; 337  :             const int src = s[x];

	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]

; 338  :             if (src) {

	test	eax, eax
	je	SHORT $LN58@ass_gauss_

; 339  :                 register unsigned *dstp = t + x - r;
; 340  :                 int mx;
; 341  :                 const unsigned *m3 = m2 + src * mwidth;

	mov	edx, DWORD PTR _m2$[ebp]
	imul	eax, esi
	lea	edx, DWORD PTR [edx+eax*4]

; 342  :                 for (mx = 0; mx < mwidth; mx++) {

	test	esi, esi
	jle	SHORT $LN58@ass_gauss_
	mov	eax, edi
	sub	edx, edi
	mov	DWORD PTR tv268[ebp], esi
	npad	1
$LL55@ass_gauss_:

; 343  :                     dstp[mx] += m3[mx];

	mov	edi, DWORD PTR [edx+eax]
	add	DWORD PTR [eax], edi
	add	eax, 4
	dec	DWORD PTR tv268[ebp]
	jne	SHORT $LL55@ass_gauss_

; 342  :                 for (mx = 0; mx < mwidth; mx++) {

	mov	edi, DWORD PTR tv1373[ebp]
$LN58@ass_gauss_:

; 332  :                 }
; 333  :             }
; 334  :         }
; 335  : 
; 336  :         for (; x < width - r; x++) {

	inc	ecx
	add	edi, 4
	mov	DWORD PTR tv1373[ebp], edi
	cmp	ecx, DWORD PTR $T491120[ebp]
	jl	SHORT $LL59@ass_gauss_
$LN57@ass_gauss_:

; 344  :                 }
; 345  :             }
; 346  :         }
; 347  : 
; 348  :         for (; x < width-1; x++) {

	mov	eax, DWORD PTR _width$[ebp]
	dec	eax
	cmp	ecx, eax
	jge	SHORT $LN137@ass_gauss_
	mov	edx, DWORD PTR _width$[ebp]
	mov	edi, DWORD PTR _t$[ebp]
	sub	edx, ecx
	add	edx, ebx
	mov	eax, ecx
	sub	eax, ebx
	lea	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR tv1475[ebp], edx
	mov	DWORD PTR tv1477[ebp], eax
	npad	5
$LL52@ass_gauss_:

; 349  :             const int src = s[x];

	mov	eax, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]

; 350  :             if (src) {

	test	eax, eax
	je	SHORT $LN51@ass_gauss_

; 351  :                 register unsigned *dstp = t + x - r;
; 352  :                 int mx;
; 353  :                 const int x2 = r + width - x;
; 354  :                 const unsigned *m3 = m2 + src * mwidth;

	mov	edi, DWORD PTR _m2$[ebp]
	imul	eax, esi
	lea	edi, DWORD PTR [edi+eax*4]

; 355  :                 for (mx = 0; mx < x2; mx++) {

	test	edx, edx
	jle	SHORT $LN51@ass_gauss_
	mov	eax, DWORD PTR tv1477[ebp]
	mov	edx, edi
	mov	edi, DWORD PTR tv1475[ebp]
	sub	edx, eax
	mov	DWORD PTR tv159[ebp], edi
$LL48@ass_gauss_:

; 356  :                     dstp[mx] += m3[mx];

	mov	edi, DWORD PTR [edx+eax]
	add	DWORD PTR [eax], edi
	add	eax, 4
	dec	DWORD PTR tv159[ebp]
	jne	SHORT $LL48@ass_gauss_

; 355  :                 for (mx = 0; mx < x2; mx++) {

	mov	edx, DWORD PTR tv1475[ebp]
$LN51@ass_gauss_:

; 344  :                 }
; 345  :             }
; 346  :         }
; 347  : 
; 348  :         for (; x < width-1; x++) {

	mov	eax, DWORD PTR _width$[ebp]
	add	DWORD PTR tv1477[ebp], 4
	inc	ecx
	dec	edx
	dec	eax
	mov	DWORD PTR tv1475[ebp], edx
	cmp	ecx, eax
	jl	SHORT $LL52@ass_gauss_
$LN137@ass_gauss_:

; 357  :                 }
; 358  :             }
; 359  :         }
; 360  :         if(x==width-1) //important: x==width-1 failed, if r==0

	jne	SHORT $LN128@ass_gauss_

; 361  :         {
; 362  :             const int src = s[x];

	mov	edx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]

; 363  :             if (src) {

	test	edx, edx
	je	SHORT $LN128@ass_gauss_

; 364  :                 register unsigned *dstp = t + x - r;

	mov	edi, DWORD PTR _t$[ebp]

; 365  :                 int mx;
; 366  :                 const int x2 = r + width - x;
; 367  :                 const unsigned *m3 = m2 + src * mwidth;

	imul	edx, esi
	mov	eax, ecx
	sub	eax, ebx
	lea	edi, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, ecx
	mov	ecx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4]
	add	eax, ebx
	mov	DWORD PTR _m3$310828[ebp], edx

; 368  :                 unsigned sum = 0;

	xor	edx, edx
	mov	DWORD PTR _dstp$310825[ebp], edi

; 369  :                 for (mx = 0; mx < x2; mx++) {

	test	eax, eax
	jle	SHORT $LN128@ass_gauss_
	mov	ecx, edi
	mov	edi, DWORD PTR _m3$310828[ebp]
	sub	edi, ecx
$LL43@ass_gauss_:

; 370  :                     sum += m3[mx];

	add	edx, DWORD PTR [edi+ecx]
	add	ecx, 4

; 371  :                     dstp[mx] += sum;

	add	DWORD PTR [ecx-4], edx
	dec	eax
	jne	SHORT $LL43@ass_gauss_
$LN128@ass_gauss_:

; 372  :                 }
; 373  :             }
; 374  :         }
; 375  : 
; 376  :         s += stride;

	mov	eax, DWORD PTR _stride$[ebp]
	add	DWORD PTR _s$[ebp], eax

; 377  :         t += width + 1;

	mov	eax, DWORD PTR _width$[ebp]
	lea	eax, DWORD PTR [eax*4+4]
	add	DWORD PTR _t$[ebp], eax
	dec	DWORD PTR tv1550[ebp]
	jne	$LL74@ass_gauss_
$LN72@ass_gauss_:

; 381  :     for (x = 0; x < width; x++) {

	cmp	DWORD PTR _width$[ebp], 0
	mov	ecx, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _t$[ebp], ecx
	jle	$LN38@ass_gauss_
	mov	eax, DWORD PTR _height$[ebp]
	mov	edx, DWORD PTR _width$[ebp]
	sub	eax, ebx
	mov	DWORD PTR $T491123[ebp], eax
	mov	DWORD PTR tv2184[ebp], edx
	mov	eax, ecx
	jmp	SHORT $LN40@ass_gauss_
	npad	6
$LL123@ass_gauss_:

; 378  :     }
; 379  : 
; 380  :     t = tmp2;

	mov	eax, DWORD PTR _t$[ebp]
$LN40@ass_gauss_:

; 382  :         y = 0;
; 383  :         if(y < r)//in case that r<0

	test	ebx, ebx
	jle	SHORT $LN118@ass_gauss_

; 384  :         {            
; 385  :             unsigned *srcp = t + y * (width + 1) + 1;
; 386  :             int src = *srcp;

	mov	ecx, DWORD PTR [eax+4]

; 387  :             if (src) {

	test	ecx, ecx
	je	SHORT $LN118@ass_gauss_

; 388  :                 register unsigned *dstp = srcp - 1 + (mwidth -r +y)*(width + 1);

	mov	edi, DWORD PTR _width$[ebp]

; 389  :                 const int src2 = (src + (1<<(ass_synth_priv::VOLUME_BITS-1))) >> ass_synth_priv::VOLUME_BITS;

	add	ecx, 2097152				; 00200000H
	sar	ecx, 22					; 00000016H
	mov	edx, esi

; 390  :                 const unsigned *m3 = m2 + src2 * mwidth;

	imul	ecx, esi
	sub	edx, ebx
	inc	edi
	imul	edx, edi
	mov	edi, DWORD PTR _m2$[ebp]
	lea	ecx, DWORD PTR [edi+ecx*4]
	lea	edx, DWORD PTR [eax+edx*4]

; 391  :                 unsigned sum = 0;
; 392  :                 int mx;
; 393  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));

	mov	DWORD PTR [eax+4], 2097152		; 00200000H
	mov	DWORD PTR _m3$310842[ebp], ecx

; 394  :                 for (mx = mwidth-1; mx >=r - y ; mx--) {

	lea	eax, DWORD PTR [esi-1]
	xor	ecx, ecx
	mov	DWORD PTR _dstp$310840[ebp], edx
	cmp	eax, ebx
	jl	SHORT $LN118@ass_gauss_
$LL122@ass_gauss_:

; 395  :                     sum += m3[mx];

	mov	edi, DWORD PTR _m3$310842[ebp]
	add	ecx, DWORD PTR [edi+eax*4]

; 396  :                     *dstp += sum;
; 397  :                     dstp -= width + 1;

	mov	edi, -4					; fffffffcH
	add	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR _width$[ebp]
	add	edx, edx
	add	edx, edx
	sub	edi, edx
	mov	edx, DWORD PTR _dstp$310840[ebp]
	add	edx, edi
	dec	eax
	mov	DWORD PTR _dstp$310840[ebp], edx
	cmp	eax, ebx
	jge	SHORT $LL122@ass_gauss_
$LN118@ass_gauss_:

; 398  :                 }
; 399  :             }
; 400  :         }
; 401  :         for (y = 1; y < r; y++) {

	mov	edi, 1
	mov	DWORD PTR _y$[ebp], edi
	cmp	ebx, edi
	jle	$LN30@ass_gauss_
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	lea	edx, DWORD PTR [ebx-1]
	mov	DWORD PTR tv1746[ebp], edx
	lea	edx, DWORD PTR [eax+ecx*4+8]
	lea	eax, DWORD PTR [ebx-1]
	mov	DWORD PTR tv1768[ebp], eax
	inc	eax
	mov	DWORD PTR _y$[ebp], eax
$LL32@ass_gauss_:

; 402  :             unsigned *srcp = t + y * (width + 1) + 1;
; 403  :             int src = *srcp;

	mov	ecx, DWORD PTR [edx]

; 404  :             if (src) {

	test	ecx, ecx
	je	SHORT $LN31@ass_gauss_

; 405  :                 register unsigned *dstp = srcp - 1 + width + 1;
; 406  :                 const int src2 = (src + (1<<(ass_synth_priv::VOLUME_BITS-1))) >> ass_synth_priv::VOLUME_BITS;
; 407  :                 const unsigned *m3 = m2 + src2 * mwidth;

	mov	edi, DWORD PTR _m2$[ebp]
	mov	eax, DWORD PTR _width$[ebp]
	add	ecx, 2097152				; 00200000H
	sar	ecx, 22					; 00000016H
	imul	ecx, esi
	lea	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR _m3$310856[ebp], ecx

; 408  : 
; 409  :                 int mx;
; 410  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));
; 411  :                 for (mx = r - y; mx < mwidth; mx++) {

	mov	ecx, DWORD PTR tv1746[ebp]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [edx], 2097152		; 00200000H
	cmp	ecx, esi
	jge	SHORT $LN31@ass_gauss_
	npad	1
$LL28@ass_gauss_:

; 412  :                     *dstp += m3[mx];

	mov	edi, DWORD PTR _m3$310856[ebp]
	mov	edi, DWORD PTR [edi+ecx*4]
	add	DWORD PTR [eax], edi

; 413  :                     dstp += width + 1;

	mov	edi, DWORD PTR _width$[ebp]
	lea	edi, DWORD PTR [edi*4+4]
	inc	ecx
	add	eax, edi
	cmp	ecx, esi
	jl	SHORT $LL28@ass_gauss_
$LN31@ass_gauss_:

; 398  :                 }
; 399  :             }
; 400  :         }
; 401  :         for (y = 1; y < r; y++) {

	mov	eax, DWORD PTR _width$[ebp]
	lea	eax, DWORD PTR [eax*4+4]
	add	edx, eax
	mov	eax, 1
	sub	DWORD PTR tv1746[ebp], eax
	sub	DWORD PTR tv1768[ebp], eax
	jne	SHORT $LL32@ass_gauss_
	mov	edi, DWORD PTR _y$[ebp]
$LN30@ass_gauss_:

; 414  :                 }
; 415  :             }
; 416  :         }
; 417  :         for (; y < height - r; y++) {

	mov	ecx, DWORD PTR $T491123[ebp]
	cmp	edi, ecx
	jge	$LN23@ass_gauss_
	mov	eax, DWORD PTR _width$[ebp]
	inc	eax
	lea	edx, DWORD PTR [eax*4]
	imul	eax, edi
	sub	ecx, edi
	mov	DWORD PTR tv1915[ebp], edx
	mov	edx, DWORD PTR _t$[ebp]
	add	edi, ecx
	lea	edx, DWORD PTR [edx+eax*4+4]
	mov	DWORD PTR tv1880[ebp], ecx
	mov	DWORD PTR _y$[ebp], edi
$LL25@ass_gauss_:

; 418  :             unsigned *srcp = t + y * (width + 1) + 1;
; 419  :             int src = *srcp;

	mov	ecx, DWORD PTR [edx]

; 420  :             if (src) {

	test	ecx, ecx
	je	SHORT $LN24@ass_gauss_

; 421  :                 register unsigned *dstp = srcp - 1 - r * (width + 1);

	mov	eax, DWORD PTR _width$[ebp]
	inc	eax
	imul	eax, ebx

; 422  :                 const int src2 = (src + (1<<(ass_synth_priv::VOLUME_BITS-1))) >> ass_synth_priv::VOLUME_BITS;

	add	ecx, 2097152				; 00200000H
	sar	ecx, 22					; 00000016H

; 423  :                 const unsigned *m3 = m2 + src2 * mwidth;

	imul	ecx, esi
	lea	edi, DWORD PTR [eax*4+4]
	mov	eax, edx
	sub	eax, edi
	mov	edi, DWORD PTR _m2$[ebp]
	lea	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR _m3$310869[ebp], ecx

; 424  : 
; 425  :                 int mx;
; 426  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));
; 427  :                 for (mx = 0; mx < mwidth; mx++) {

	xor	ecx, ecx
	mov	DWORD PTR [edx], 2097152		; 00200000H
	test	esi, esi
	jle	SHORT $LN125@ass_gauss_
	npad	5
$LL21@ass_gauss_:

; 428  :                     *dstp += m3[mx];

	mov	edi, DWORD PTR _m3$310869[ebp]
	mov	edi, DWORD PTR [edi+ecx*4]
	add	DWORD PTR [eax], edi

; 429  :                     dstp += width + 1;

	mov	edi, DWORD PTR _width$[ebp]
	lea	edi, DWORD PTR [edi*4+4]
	inc	ecx
	add	eax, edi
	cmp	ecx, esi
	jl	SHORT $LL21@ass_gauss_
$LN125@ass_gauss_:

; 424  : 
; 425  :                 int mx;
; 426  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));
; 427  :                 for (mx = 0; mx < mwidth; mx++) {

	mov	edi, DWORD PTR _y$[ebp]
$LN24@ass_gauss_:

; 414  :                 }
; 415  :             }
; 416  :         }
; 417  :         for (; y < height - r; y++) {

	add	edx, DWORD PTR tv1915[ebp]
	dec	DWORD PTR tv1880[ebp]
	jne	SHORT $LL25@ass_gauss_
$LN23@ass_gauss_:

; 430  :                 }
; 431  :             }
; 432  :         }
; 433  :         for (; y < height-1; y++) {

	mov	edx, DWORD PTR _height$[ebp]
	dec	edx
	cmp	edi, edx
	jge	$LN16@ass_gauss_
	mov	eax, DWORD PTR _width$[ebp]
	inc	eax
	lea	ecx, DWORD PTR [eax*4]
	imul	eax, edi
	mov	DWORD PTR tv1915[ebp], ecx
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, edi
	mov	edi, DWORD PTR _t$[ebp]
	lea	edi, DWORD PTR [edi+eax*4+4]
	mov	eax, DWORD PTR _y$[ebp]
	sub	edx, eax
	add	ecx, ebx
	add	eax, edx
	mov	DWORD PTR tv2010[ebp], edx
	mov	DWORD PTR _y$[ebp], eax
	npad	4
$LL18@ass_gauss_:

; 434  :             unsigned *srcp = t + y * (width + 1) + 1;
; 435  :             int src = *srcp;

	mov	edx, DWORD PTR [edi]

; 436  :             if (src) {

	test	edx, edx
	je	SHORT $LN17@ass_gauss_

; 437  :                 const int y2 = r + height - y;
; 438  :                 register unsigned *dstp = srcp - 1 - r * (width + 1);

	mov	eax, DWORD PTR _width$[ebp]
	inc	eax
	imul	eax, ebx

; 439  :                 const int src2 = (src + (1<<(ass_synth_priv::VOLUME_BITS-1))) >> ass_synth_priv::VOLUME_BITS;

	add	edx, 2097152				; 00200000H
	sar	edx, 22					; 00000016H

; 440  :                 const unsigned *m3 = m2 + src2 * mwidth;

	imul	edx, esi
	lea	ebx, DWORD PTR [eax*4+4]
	mov	eax, edi
	sub	eax, ebx
	mov	ebx, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR _m3$310883[ebp], edx

; 441  : 
; 442  :                 int mx;
; 443  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));
; 444  :                 for (mx = 0; mx < y2; mx++) {

	xor	edx, edx
	mov	DWORD PTR [edi], 2097152		; 00200000H
	test	ecx, ecx
	jle	SHORT $LN117@ass_gauss_
	npad	7
$LL14@ass_gauss_:

; 445  :                     *dstp += m3[mx];

	mov	ebx, DWORD PTR _m3$310883[ebp]
	mov	ebx, DWORD PTR [ebx+edx*4]
	add	DWORD PTR [eax], ebx

; 446  :                     dstp += width + 1;

	mov	ebx, DWORD PTR _width$[ebp]
	lea	ebx, DWORD PTR [ebx*4+4]
	inc	edx
	add	eax, ebx
	cmp	edx, ecx
	jl	SHORT $LL14@ass_gauss_
$LN117@ass_gauss_:

; 441  : 
; 442  :                 int mx;
; 443  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));
; 444  :                 for (mx = 0; mx < y2; mx++) {

	mov	ebx, DWORD PTR _r$[ebp]
$LN17@ass_gauss_:

; 430  :                 }
; 431  :             }
; 432  :         }
; 433  :         for (; y < height-1; y++) {

	add	edi, DWORD PTR tv1915[ebp]
	dec	ecx
	dec	DWORD PTR tv2010[ebp]
	jne	SHORT $LL18@ass_gauss_
	mov	edi, DWORD PTR _y$[ebp]
$LN16@ass_gauss_:

; 447  :                 }
; 448  :             }
; 449  :         }
; 450  :         if(y == height - 1)//important: y == height - 1 failed if r==0

	mov	eax, DWORD PTR _height$[ebp]
	dec	eax
	cmp	edi, eax
	jne	SHORT $LN121@ass_gauss_

; 451  :         {
; 452  :             unsigned *srcp = t + y * (width + 1) + 1;

	mov	edi, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	inc	edi
	mov	eax, edi
	imul	eax, DWORD PTR _y$[ebp]

; 453  :             int src = *srcp;

	mov	edx, DWORD PTR [ecx+eax*4+4]
	lea	ecx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _srcp$310889[ebp], ecx

; 454  :             if (src) {

	test	edx, edx
	je	SHORT $LN121@ass_gauss_

; 455  :                 const int y2 = r + height - y;

	mov	eax, DWORD PTR _height$[ebp]

; 456  :                 register unsigned *dstp = srcp - 1 - r * (width + 1);

	imul	edi, ebx
	sub	eax, DWORD PTR _y$[ebp]

; 457  :                 const int src2 = (src + (1<<(ass_synth_priv::VOLUME_BITS-1))) >> ass_synth_priv::VOLUME_BITS;

	add	edx, 2097152				; 00200000H
	sar	edx, 22					; 00000016H

; 458  :                 const unsigned *m3 = m2 + src2 * mwidth;

	imul	edx, esi
	lea	edi, DWORD PTR [edi*4+4]
	sub	ecx, edi
	mov	edi, DWORD PTR _m2$[ebp]
	lea	edx, DWORD PTR [edi+edx*4]

; 459  :                 unsigned sum = 0;
; 460  :                 int mx;
; 461  :                 *srcp = (1<<(ass_synth_priv::VOLUME_BITS-1));

	mov	edi, DWORD PTR _srcp$310889[ebp]
	add	eax, ebx
	mov	DWORD PTR _m3$310895[ebp], edx
	mov	DWORD PTR [edi], 2097152		; 00200000H
	xor	edx, edx

; 462  :                 for (mx = 0; mx < y2; mx++) {

	xor	edi, edi
	test	eax, eax
	jle	SHORT $LN121@ass_gauss_
$LL124@ass_gauss_:

; 463  :                     sum += m3[mx];

	mov	ebx, DWORD PTR _m3$310895[ebp]
	add	edx, DWORD PTR [ebx+edi*4]

; 464  :                     *dstp += sum;
; 465  :                     dstp += width + 1;

	mov	ebx, DWORD PTR _width$[ebp]
	add	DWORD PTR [ecx], edx
	lea	ebx, DWORD PTR [ebx*4+4]
	inc	edi
	add	ecx, ebx
	cmp	edi, eax
	jl	SHORT $LL124@ass_gauss_

; 462  :                 for (mx = 0; mx < y2; mx++) {

	mov	ebx, DWORD PTR _r$[ebp]
$LN121@ass_gauss_:

; 466  :                 }
; 467  :             }
; 468  :         }
; 469  :         t++;

	add	DWORD PTR _t$[ebp], 4
	dec	DWORD PTR tv2184[ebp]
	jne	$LL123@ass_gauss_
$LN38@ass_gauss_:

; 470  :     }
; 471  : 
; 472  :     t = tmp2;
; 473  :     s = buffer;
; 474  :     for (y = 0; y < height; y++) {

	mov	eax, DWORD PTR _height$[ebp]
	mov	esi, DWORD PTR _tmp2$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	test	eax, eax
	jle	SHORT $LN4@ass_gauss_
	mov	edi, DWORD PTR _width$[ebp]
	mov	edx, eax
$LL135@ass_gauss_:

; 475  :         for (x = 0; x < width; x++) {

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN136@ass_gauss_
$LL3@ass_gauss_:

; 476  :             s[x] = t[x] >> ass_synth_priv::VOLUME_BITS;

	mov	ebx, DWORD PTR [esi+eax*4]
	shr	ebx, 22					; 00000016H
	mov	BYTE PTR [eax+ecx], bl
	inc	eax
	cmp	eax, edi
	jl	SHORT $LL3@ass_gauss_
$LN136@ass_gauss_:

; 477  :         }
; 478  :         s += stride;

	add	ecx, DWORD PTR _stride$[ebp]

; 479  :         t += width + 1;

	lea	eax, DWORD PTR [edi*4+4]
	add	esi, eax
	dec	edx
	jne	SHORT $LL135@ass_gauss_
$LN4@ass_gauss_:
	pop	edi
	pop	esi
	pop	ebx

; 480  :     }
; 481  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ass_gauss_blur@@YAXPAEPAIHHHPBIHH@Z ENDP		; ass_gauss_blur
_TEXT	ENDS
PUBLIC	??1ass_tmp_buf@@QAE@XZ				; ass_tmp_buf::~ass_tmp_buf
; Function compile flags: /Ogtp
;	COMDAT ??1ass_tmp_buf@@QAE@XZ
_TEXT	SEGMENT
??1ass_tmp_buf@@QAE@XZ PROC				; ass_tmp_buf::~ass_tmp_buf, COMDAT
; _this$ = eax

; 291  :     free(tmp);

	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_free
	pop	ecx

; 292  : }

	ret	0
??1ass_tmp_buf@@QAE@XZ ENDP				; ass_tmp_buf::~ass_tmp_buf
_TEXT	ENDS
PUBLIC	??0ass_tmp_buf@@QAE@I@Z				; ass_tmp_buf::ass_tmp_buf
; Function compile flags: /Ogtp
;	COMDAT ??0ass_tmp_buf@@QAE@I@Z
_TEXT	SEGMENT
??0ass_tmp_buf@@QAE@I@Z PROC				; ass_tmp_buf::ass_tmp_buf, COMDAT
; _this$ = esi
; _size$ = edi

; 279  :     tmp = (unsigned *)malloc(size * sizeof(unsigned));

	lea	eax, DWORD PTR [edi*4]
	push	eax
	call	_malloc
	mov	DWORD PTR [esi+4], eax
	add	esp, 4

; 280  :     this->size = size;

	mov	DWORD PTR [esi], edi

; 281  : }

	mov	eax, esi
	ret	0
??0ass_tmp_buf@@QAE@I@Z ENDP				; ass_tmp_buf::ass_tmp_buf
_TEXT	ENDS
PUBLIC	__real@3eb0c6f7a0b5ed8d
PUBLIC	__real@4008000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	?generate_tables@ass_synth_priv@@QAEHN@Z	; ass_synth_priv::generate_tables
EXTRN	__ftol2_sse:PROC
EXTRN	__CIexp:PROC
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-006
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?generate_tables@ass_synth_priv@@QAEHN@Z
_TEXT	SEGMENT
tv610 = -24						; size = 8
tv543 = -24						; size = 8
tv533 = -24						; size = 8
_exp_2$310706 = -16					; size = 8
tv571 = -8						; size = 8
tv561 = -8						; size = 8
_exp_a$ = -8						; size = 8
tv573 = -4						; size = 4
tv563 = -4						; size = 4
tv545 = -4						; size = 4
tv535 = -4						; size = 4
_sigma$ = 8						; size = 8
tv589 = 12						; size = 4
tv587 = 12						; size = 4
_mx$310736 = 12						; size = 4
tv576 = 14						; size = 2
tv566 = 14						; size = 2
tv548 = 14						; size = 2
tv538 = 14						; size = 2
?generate_tables@ass_synth_priv@@QAEHN@Z PROC		; ass_synth_priv::generate_tables, COMDAT
; _this$ = esi

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 135  :     const int TARGET_VOLUME = 1<<VOLUME_BITS;
; 136  :     const int MAX_VOLUME_ERROR = VOLUME_BITS>=22 ? 16 : 1;
; 137  : 
; 138  :     double a = -1 / (sigma * sigma * 2);

	fld	QWORD PTR _sigma$[ebp]
	push	ebx
	fmul	ST(0), ST(0)
	push	edi
	fadd	ST(0), ST(0)
	fdivr	QWORD PTR __real@bff0000000000000

; 139  :     double exp_a = exp(a);

	call	__CIexp
	fstp	QWORD PTR _exp_a$[ebp]

; 140  :     
; 141  :     double volume_factor = 0;
; 142  :     double volume_start =  0, volume_end = 0;
; 143  :     unsigned volume;
; 144  : 
; 145  :     if (this->sigma == sigma)

	fld	QWORD PTR [esi+16]
	fld	QWORD PTR _sigma$[ebp]
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN29@generate_t
	fstp	ST(0)

; 269  :                 //equivalent:
; 270  :                 //    this->gt2[this->g_w * i+ mx] = this->g[mx] * i;
; 271  :             }
; 272  :         }        
; 273  :     }
; 274  :     return 0;

	xor	eax, eax

; 275  : }

	pop	edi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN29@generate_t:

; 146  :         return 0;
; 147  :     else
; 148  :         this->sigma = sigma;

	fst	QWORD PTR [esi+16]

; 149  : 
; 150  :     this->g_w = (int)ceil(sigma*3) | 1;

	sub	esp, 8
	fmul	QWORD PTR __real@4008000000000000
	fstp	QWORD PTR [esp]
	call	_ceil
	add	esp, 8
	call	__ftol2_sse
	mov	ecx, eax
	or	ecx, 1

; 151  :     this->g_r = this->g_w / 2;

	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi], eax

; 152  : 
; 153  :     if (this->g_w > 0) {

	test	ecx, ecx
	jle	SHORT $LN26@generate_t

; 154  :         this->g = (unsigned*)realloc(this->g, this->g_w * sizeof(unsigned));

	lea	eax, DWORD PTR [ecx*4]
	mov	ecx, DWORD PTR [esi+8]
	push	eax
	push	ecx
	call	_realloc

; 155  :         this->gt2 = (unsigned*)realloc(this->gt2, 256 * this->g_w * sizeof(unsigned));        

	mov	edx, DWORD PTR [esi+4]
	shl	edx, 10					; 0000000aH
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR [esi+12]
	push	edx
	push	eax
	call	_realloc
	add	esp, 16					; 00000010H

; 156  :         if (this->g == NULL || this->gt2 == NULL) {                      

	cmp	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], eax
	je	SHORT $LN25@generate_t
	test	eax, eax
	jne	SHORT $LN26@generate_t
$LN25@generate_t:

; 157  :             return -1;

	or	eax, -1

; 275  : }

	pop	edi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN26@generate_t:

; 158  :         }        
; 159  :     }
; 160  : 
; 161  :     if (this->g_w > 0) {

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jle	$LN4@generate_t

; 165  :         double exp_1 = exp_a;
; 166  :         double exp_2 = exp_1 * exp_1;
; 167  :         volume_start += exp_0;
; 168  :         for(int i=0;i<this->g_r;++i)

	cmp	DWORD PTR [esi], 0
	fld1
	fld	ST(0)
	fld	QWORD PTR _exp_a$[ebp]
	fld	ST(0)
	fld	ST(1)
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv610[ebp]
	fld	ST(0)
	fxch	ST(5)
	fadd	QWORD PTR __real@0000000000000000
	jle	SHORT $LN59@generate_t

; 162  :         volume_start = 0;        
; 163  : 
; 164  :         double exp_0 = 1.0;

	mov	ecx, DWORD PTR [esi]
$LN23@generate_t:

; 165  :         double exp_1 = exp_a;
; 166  :         double exp_2 = exp_1 * exp_1;
; 167  :         volume_start += exp_0;
; 168  :         for(int i=0;i<this->g_r;++i)

	dec	ecx

; 169  :         {
; 170  :             exp_0 *= exp_1;

	fld	ST(2)
	fmulp	ST(5), ST(0)

; 171  :             exp_1 *= exp_2;

	fld	ST(5)
	fmulp	ST(3), ST(0)

; 172  :             volume_start += exp_0;

	fadd	ST(0), ST(4)

; 173  :             volume_start += exp_0;

	fadd	ST(0), ST(4)
	jne	SHORT $LN23@generate_t
$LN59@generate_t:

; 165  :         double exp_1 = exp_a;
; 166  :         double exp_2 = exp_1 * exp_1;
; 167  :         volume_start += exp_0;
; 168  :         for(int i=0;i<this->g_r;++i)

	fstp	ST(4)

; 174  :         }
; 175  :         //euqivalent:
; 176  :         //  for (i = 0; i < this->g_w; ++i) {
; 177  :         //      volume_start += exp(a * (i - this->g_r) * (i - this->g_r));
; 178  :         //  }
; 179  :         
; 180  :         volume_end = (TARGET_VOLUME+g_w)/volume_start; 

	lea	ecx, DWORD PTR [eax+4194304]
	fstp	ST(1)
	mov	DWORD PTR tv589[ebp], ecx
	fstp	ST(3)

; 181  :         volume_start = (TARGET_VOLUME-g_w)/volume_start;

	mov	edx, 4194304				; 00400000H
	fild	DWORD PTR tv589[ebp]
	sub	edx, eax
	mov	DWORD PTR tv587[ebp], edx
	fdiv	ST(0), ST(2)
	fild	DWORD PTR tv587[ebp]
	fdivrp	ST(3), ST(0)

; 182  : 
; 183  :         volume = 0;
; 184  :         while( volume_start+0.000001<volume_end )

	fld	ST(2)
	fadd	QWORD PTR __real@3eb0c6f7a0b5ed8d
	fcomp	ST(1)
	fnstsw	ax
	fld	QWORD PTR __real@3fe0000000000000
	test	ah, 5
	jp	$LN61@generate_t

; 185  :         {
; 186  :             volume_factor = (volume_start+volume_end)*0.5;  
; 187  :             volume = 0;
; 188  : 
; 189  :             exp_0 = volume_factor;
; 190  :             exp_1 = exp_a;
; 191  :             exp_2 = exp_1 * exp_1;

	fxch	ST(4)
	fstp	QWORD PTR _exp_2$310706[ebp]
$LN20@generate_t:

; 192  : 
; 193  :             volume = static_cast<int>(exp_0+.5);
; 194  :             this->g[this->g_r] = volume;

	mov	ecx, DWORD PTR [esi+8]
	fld	ST(0)
	fadd	ST(0), ST(3)

; 195  : 
; 196  :             unsigned* p_left = this->g+this->g_r-1;
; 197  :             unsigned* p_right= this->g+this->g_r+1;
; 198  :             for(int i=0; i<this->g_r;++i,p_left--,p_right++)

	xor	edi, edi
	fnstcw	WORD PTR tv576[ebp]
	movzx	eax, WORD PTR tv576[ebp]
	fmul	ST(0), ST(4)
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv573[ebp], eax
	mov	eax, DWORD PTR [esi]
	fld	ST(0)
	fld	ST(3)
	fld	ST(2)
	fadd	ST(0), ST(7)
	fldcw	WORD PTR tv573[ebp]
	fistp	QWORD PTR tv571[ebp]
	mov	edx, DWORD PTR tv571[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+8]
	fldcw	WORD PTR tv576[ebp]
	lea	ebx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [ebx-4]
	add	ebx, 4
	test	eax, eax
	jle	SHORT $LN65@generate_t
$LN18@generate_t:

; 199  :             {
; 200  :                 exp_0 *= exp_1;

	fld	ST(0)
	inc	edi
	fmulp	ST(2), ST(0)
	sub	ecx, 4

; 201  :                 exp_1 *= exp_2;
; 202  :                 *p_left = static_cast<int>(exp_0+.5);

	fnstcw	WORD PTR tv566[ebp]
	add	ebx, 4
	movzx	eax, WORD PTR tv566[ebp]
	fmul	QWORD PTR _exp_2$310706[ebp]
	or	eax, 3072				; 00000c00H
	fld	ST(1)
	mov	DWORD PTR tv563[ebp], eax
	fadd	ST(0), ST(7)
	fldcw	WORD PTR tv563[ebp]
	fistp	QWORD PTR tv561[ebp]
	mov	eax, DWORD PTR tv561[ebp]
	mov	DWORD PTR [ecx+4], eax

; 203  :                 *p_right = *p_left;

	mov	DWORD PTR [ebx-4], eax

; 204  :                 volume += (*p_left<<1);

	mov	eax, DWORD PTR [ecx+4]
	fldcw	WORD PTR tv566[ebp]
	lea	edx, DWORD PTR [edx+eax*2]
	cmp	edi, DWORD PTR [esi]
	jl	SHORT $LN18@generate_t
$LN65@generate_t:

; 195  : 
; 196  :             unsigned* p_left = this->g+this->g_r-1;
; 197  :             unsigned* p_right= this->g+this->g_r+1;
; 198  :             for(int i=0; i<this->g_r;++i,p_left--,p_right++)

	fstp	ST(1)
	fstp	ST(0)

; 205  :             }
; 206  :             //equivalent:
; 207  :             //    for (i = 0; i < this->g_w; ++i) {    
; 208  :             //        this->g[i] = (unsigned) ( exp(a * (i - this->g_r) * (i - this->g_r))* volume_factor + .5 );
; 209  :             //        volume += this->g[i];
; 210  :             //    }
; 211  : 
; 212  :             // volume don't have to be equal to TARGET_VOLUME,
; 213  :             // even if volume=TARGET_VOLUME+MAX_VOLUME_ERROR,
; 214  :             // max error introducing in later blur operation,
; 215  :             // which is (dot_product(g_w, pixel))/TARGET_VOLUME with pixel<256,
; 216  :             // would not exceed (MAX_VOLUME_ERROR*256)/TARGET_VOLUME,
; 217  :             // as long as MAX_VOLUME_ERROR/TARGET_VOLUME is small enough, error introduced would be kept in safe range
; 218  :             // 
; 219  :             // NOTE: when it comes to rounding, no matter how small the error is, 
; 220  :             // it may result a different rounding output
; 221  :             if( volume>=TARGET_VOLUME && volume< (TARGET_VOLUME+MAX_VOLUME_ERROR) )

	cmp	edx, 4194304				; 00400000H
	jb	SHORT $LN73@generate_t
	cmp	edx, 4194320				; 00400010H
	jb	SHORT $LN76@generate_t

; 182  : 
; 183  :         volume = 0;
; 184  :         while( volume_start+0.000001<volume_end )

	fstp	ST(1)

; 222  :                 break;
; 223  :             else if(volume < TARGET_VOLUME)

	jmp	SHORT $LN11@generate_t
$LN73@generate_t:

; 205  :             }
; 206  :             //equivalent:
; 207  :             //    for (i = 0; i < this->g_w; ++i) {    
; 208  :             //        this->g[i] = (unsigned) ( exp(a * (i - this->g_r) * (i - this->g_r))* volume_factor + .5 );
; 209  :             //        volume += this->g[i];
; 210  :             //    }
; 211  : 
; 212  :             // volume don't have to be equal to TARGET_VOLUME,
; 213  :             // even if volume=TARGET_VOLUME+MAX_VOLUME_ERROR,
; 214  :             // max error introducing in later blur operation,
; 215  :             // which is (dot_product(g_w, pixel))/TARGET_VOLUME with pixel<256,
; 216  :             // would not exceed (MAX_VOLUME_ERROR*256)/TARGET_VOLUME,
; 217  :             // as long as MAX_VOLUME_ERROR/TARGET_VOLUME is small enough, error introduced would be kept in safe range
; 218  :             // 
; 219  :             // NOTE: when it comes to rounding, no matter how small the error is, 
; 220  :             // it may result a different rounding output
; 221  :             if( volume>=TARGET_VOLUME && volume< (TARGET_VOLUME+MAX_VOLUME_ERROR) )

	fstp	ST(3)
$LN11@generate_t:

; 182  : 
; 183  :         volume = 0;
; 184  :         while( volume_start+0.000001<volume_end )

	fld	ST(2)
	fadd	QWORD PTR __real@3eb0c6f7a0b5ed8d
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	$LN20@generate_t
	jmp	SHORT $LN80@generate_t
$LN76@generate_t:
	fstp	ST(0)
$LN80@generate_t:
	fstp	ST(2)

; 224  :             {
; 225  :                 volume_start = volume_factor;                
; 226  :             }
; 227  :             else if(volume >= TARGET_VOLUME+MAX_VOLUME_ERROR)
; 228  :             {
; 229  :                 volume_end = volume_factor;
; 230  :             }
; 231  :         }
; 232  :         if(volume==0)

	test	edx, edx
	jne	$LN83@generate_t
	fld	QWORD PTR tv610[ebp]
	fxch	ST(3)
	fxch	ST(2)
$LN46@generate_t:

; 233  :         {
; 234  :             volume_factor = volume_end;
; 235  : 
; 236  :             exp_0 = volume_factor;
; 237  :             exp_1 = exp_a;
; 238  :             exp_2 = exp_1 * exp_1;
; 239  : 
; 240  :             volume = static_cast<int>(exp_0+.5);
; 241  :             this->g[this->g_r] = volume;

	mov	edx, DWORD PTR [esi]
	fnstcw	WORD PTR tv548[ebp]
	movzx	eax, WORD PTR tv548[ebp]
	fld	ST(0)
	or	eax, 3072				; 00000c00H
	fxch	ST(1)
	mov	DWORD PTR tv545[ebp], eax
	fadd	ST(0), ST(3)
	mov	eax, DWORD PTR [esi+8]
	fldcw	WORD PTR tv545[ebp]
	fistp	QWORD PTR tv543[ebp]
	mov	ecx, DWORD PTR tv543[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 242  : 
; 243  :             unsigned* p_left = this->g+this->g_r-1;

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+8]
	fldcw	WORD PTR tv548[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	lea	edx, DWORD PTR [ecx-4]

; 244  :             unsigned* p_right= this->g+this->g_r+1;

	lea	edi, DWORD PTR [ecx+4]

; 245  :             for(int i=0; i<this->g_r;++i,p_left--,p_right++)

	xor	ecx, ecx
	test	eax, eax
	jle	SHORT $LN86@generate_t
$LN9@generate_t:

; 246  :             {
; 247  :                 exp_0 *= exp_1;

	fmul	ST(0), ST(1)
	inc	ecx

; 248  :                 exp_1 *= exp_2;
; 249  :                 *p_left = static_cast<int>(exp_0+.5);

	fnstcw	WORD PTR tv538[ebp]
	sub	edx, 4
	movzx	eax, WORD PTR tv538[ebp]
	fld	ST(3)
	fmulp	ST(2), ST(0)
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv535[ebp], eax
	add	edi, 4
	fld	ST(0)
	fadd	ST(0), ST(3)
	fldcw	WORD PTR tv535[ebp]
	fistp	QWORD PTR tv533[ebp]
	mov	eax, DWORD PTR tv533[ebp]
	mov	DWORD PTR [edx+4], eax

; 250  :                 *p_right = *p_left;

	mov	DWORD PTR [edi-4], eax
	fldcw	WORD PTR tv538[ebp]
	cmp	ecx, DWORD PTR [esi]
	jl	SHORT $LN9@generate_t
$LN86@generate_t:

; 245  :             for(int i=0; i<this->g_r;++i,p_left--,p_right++)

	fstp	ST(0)
	fstp	ST(0)
$LN90@generate_t:

; 251  :                 volume += (*p_left<<1);
; 252  :             }
; 253  :             //equivalent:
; 254  :             //    for (i = 0; i < this->g_w; ++i) {    
; 255  :             //        this->g[i] = (unsigned) ( exp(a * (i - this->g_r) * (i - this->g_r))* volume_factor + .5 );
; 256  :             //        volume += this->g[i];
; 257  :             //    }
; 258  :         }
; 259  : 
; 260  :         // gauss table:
; 261  :         for (int mx = 0; mx < this->g_w; mx++) {

	xor	ecx, ecx
	fstp	ST(0)
	fstp	ST(0)
	mov	DWORD PTR _mx$310736[ebp], ecx
	cmp	DWORD PTR [esi+4], ecx
	jle	SHORT $LN4@generate_t
$LN6@generate_t:
	mov	edx, DWORD PTR [esi+12]
	add	ecx, ecx

; 262  :             int last_mul = 0;

	xor	eax, eax
	add	ecx, ecx
	add	edx, ecx

; 263  :             unsigned *p_gt2 = this->gt2 + mx;
; 264  :             *p_gt2 = 0;

	mov	DWORD PTR [edx], eax
	lea	edi, DWORD PTR [eax+51]
$LL3@generate_t:

; 265  :             for (int i = 1; i < 256; i++) {                
; 266  :                 last_mul = last_mul+this->g[mx];

	mov	ebx, DWORD PTR [esi+8]
	add	eax, DWORD PTR [ebx+ecx]

; 267  :                 p_gt2 += this->g_w;

	mov	ebx, DWORD PTR [esi+4]

; 268  :                 *p_gt2 = last_mul;                

	mov	DWORD PTR [edx+ebx*4], eax
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR [esi+8]
	add	eax, DWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+ebx*4], eax
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR [esi+8]
	add	eax, DWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+ebx*4], eax
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR [esi+8]
	add	eax, DWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	DWORD PTR [edx], eax
	mov	ebx, DWORD PTR [esi+8]
	add	eax, DWORD PTR [ebx+ecx]
	dec	edi
	mov	ebx, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	DWORD PTR [edx], eax
	jne	SHORT $LL3@generate_t

; 251  :                 volume += (*p_left<<1);
; 252  :             }
; 253  :             //equivalent:
; 254  :             //    for (i = 0; i < this->g_w; ++i) {    
; 255  :             //        this->g[i] = (unsigned) ( exp(a * (i - this->g_r) * (i - this->g_r))* volume_factor + .5 );
; 256  :             //        volume += this->g[i];
; 257  :             //    }
; 258  :         }
; 259  : 
; 260  :         // gauss table:
; 261  :         for (int mx = 0; mx < this->g_w; mx++) {

	mov	ecx, DWORD PTR _mx$310736[ebp]
	inc	ecx
	mov	DWORD PTR _mx$310736[ebp], ecx
	cmp	ecx, DWORD PTR [esi+4]
	jl	SHORT $LN6@generate_t
$LN4@generate_t:

; 275  : }

	pop	edi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN61@generate_t:

; 224  :             {
; 225  :                 volume_start = volume_factor;                
; 226  :             }
; 227  :             else if(volume >= TARGET_VOLUME+MAX_VOLUME_ERROR)
; 228  :             {
; 229  :                 volume_end = volume_factor;
; 230  :             }
; 231  :         }
; 232  :         if(volume==0)

	fstp	ST(3)

; 182  : 
; 183  :         volume = 0;
; 184  :         while( volume_start+0.000001<volume_end )

	jmp	$LN46@generate_t
$LN83@generate_t:

; 224  :             {
; 225  :                 volume_start = volume_factor;                
; 226  :             }
; 227  :             else if(volume >= TARGET_VOLUME+MAX_VOLUME_ERROR)
; 228  :             {
; 229  :                 volume_end = volume_factor;
; 230  :             }
; 231  :         }
; 232  :         if(volume==0)

	fstp	ST(2)

; 245  :             for(int i=0; i<this->g_r;++i,p_left--,p_right++)

	jmp	$LN90@generate_t
?generate_tables@ass_synth_priv@@QAEHN@Z ENDP		; ass_synth_priv::generate_tables
_TEXT	ENDS
PUBLIC	??1ass_synth_priv@@QAE@XZ			; ass_synth_priv::~ass_synth_priv
; Function compile flags: /Ogtp
;	COMDAT ??1ass_synth_priv@@QAE@XZ
_TEXT	SEGMENT
??1ass_synth_priv@@QAE@XZ PROC				; ass_synth_priv::~ass_synth_priv, COMDAT
; _this$ = esi

; 129  :     free(g); g=NULL;

	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free

; 130  :     free(gt2); gt2=NULL;    

	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0

; 131  : }

	ret	0
??1ass_synth_priv@@QAE@XZ ENDP				; ass_synth_priv::~ass_synth_priv
_TEXT	ENDS
PUBLIC	??0ass_synth_priv@@QAE@N@Z			; ass_synth_priv::ass_synth_priv
; Function compile flags: /Ogtp
;	COMDAT ??0ass_synth_priv@@QAE@N@Z
_TEXT	SEGMENT
_sigma$ = 8						; size = 8
??0ass_synth_priv@@QAE@N@Z PROC				; ass_synth_priv::ass_synth_priv, COMDAT
; _this$ = eax

; 103  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 104  :     g_r = 0;
; 105  :     g_w = 0;
; 106  : 
; 107  :     g = NULL;
; 108  :     gt2 = NULL;
; 109  : 
; 110  :     this->sigma = 0;

	fldz
	push	esi
	mov	esi, eax
	fstp	QWORD PTR [esi+16]

; 111  :     generate_tables(sigma);

	fld	QWORD PTR _sigma$[ebp]
	xor	eax, eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	call	?generate_tables@ass_synth_priv@@QAEHN@Z ; ass_synth_priv::generate_tables

; 112  : }

	mov	eax, esi
	pop	esi
	pop	ecx
	pop	ebp
	ret	8
??0ass_synth_priv@@QAE@N@Z ENDP				; ass_synth_priv::ass_synth_priv
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??Rass_synth_priv_key@@QBEABNABVass_synth_priv@@@Z
_TEXT	SEGMENT
??Rass_synth_priv_key@@QBEABNABVass_synth_priv@@@Z PROC	; ass_synth_priv_key::operator(), COMDAT
; _x$ = eax

; 77   :         return x.sigma;

	add	eax, 16					; 00000010H

; 78   :     }

	ret	0
??Rass_synth_priv_key@@QBEABNABVass_synth_priv@@@Z ENDP	; ass_synth_priv_key::operator()
; Function compile flags: /Ogtp
;	COMDAT ??_G?$Array@TSpan@Rasterizer@ssf@@@ssf@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$Array@TSpan@Rasterizer@ssf@@@ssf@@UAEPAXI@Z PROC	; ssf::Array<ssf::Rasterizer::Span>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@
	test	eax, eax
	je	SHORT $LN4@scalar@19
	push	eax
	call	__aligned_free
	add	esp, 4
$LN4@scalar@19:
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN7@scalar@19
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN7@scalar@19:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_G?$Array@TSpan@Rasterizer@ssf@@@ssf@@UAEPAXI@Z ENDP	; ssf::Array<ssf::Rasterizer::Span>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\libssf\array.h
_TEXT	ENDS
;	COMDAT ?Move@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXAAV12@@Z
_TEXT	SEGMENT
?Move@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXAAV12@@Z PROC ; ssf::Array<ssf::Rasterizer::Span>::Move, COMDAT
; _this$ = ecx
; _v$ = eax

; 96   : 			Swap(v);

	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], esi
	mov	esi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+8], esi
	mov	esi, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx+12], esi
	mov	esi, DWORD PTR [eax+16]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [ecx+16], esi
	mov	DWORD PTR [eax+16], edx

; 97   : 			v.SetCount(0);

	mov	DWORD PTR [eax+8], 0
	pop	esi

; 98   : 		}

	ret	0
?Move@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXAAV12@@Z ENDP ; ssf::Array<ssf::Rasterizer::Span>::Move
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Append@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXPBTSpan@Rasterizer@2@II@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_nSize$ = 12						; size = 4
?Append@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXPBTSpan@Rasterizer@2@II@Z PROC ; ssf::Array<ssf::Rasterizer::Span>::Append, COMDAT
; _this$ = esi

; 78   : 		{

	push	ebp
	mov	ebp, esp

; 79   : 			if(!nSize) return;
; 80   : 			size_t nOldSize = m_nSize;
; 81   : 			SetCount(nOldSize + nSize);

	mov	eax, DWORD PTR _nSize$[ebp]
	push	ebx
	push	edi
	mov	edi, DWORD PTR [esi+8]
	lea	ebx, DWORD PTR [edi+eax]
	cmp	ebx, DWORD PTR [esi+12]
	jbe	SHORT $LN8@Append
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, edi
	ja	SHORT $LN13@Append
	mov	eax, edi
$LN13@Append:
	mov	ecx, DWORD PTR [esi+4]
	add	eax, ebx
	mov	DWORD PTR [esi+12], eax
	shl	eax, 4
	push	16					; 00000010H
	push	eax
	test	ecx, ecx
	je	SHORT $LN14@Append
	push	ecx
	call	__aligned_realloc
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN15@Append
$LN14@Append:
	call	__aligned_malloc
	add	esp, 8
$LN15@Append:
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR _nSize$[ebp]
$LN8@Append:

; 82   : 			memcpy(m_pData + nOldSize, ptr, nSize * sizeof(T));

	shl	eax, 4
	push	eax
	mov	eax, DWORD PTR _ptr$[ebp]
	shl	edi, 4
	add	edi, DWORD PTR [esi+4]
	push	eax
	push	edi
	mov	DWORD PTR [esi+8], ebx
	call	_memcpy
	add	esp, 12					; 0000000cH
	pop	edi
	pop	ebx

; 83   : 		}

	pop	ebp
	ret	8
?Append@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXPBTSpan@Rasterizer@2@II@Z ENDP ; ssf::Array<ssf::Rasterizer::Span>::Append
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Add@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXABTSpan@Rasterizer@2@@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
?Add@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXABTSpan@Rasterizer@2@@Z PROC ; ssf::Array<ssf::Rasterizer::Span>::Add, COMDAT
; _this$ = esi

; 66   : 		{

	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi

; 67   : 			size_t nPos = m_nSize;

	mov	edi, DWORD PTR [esi+8]

; 68   : 			SetCount(m_nSize+1);

	lea	ebx, DWORD PTR [edi+1]
	cmp	ebx, DWORD PTR [esi+12]
	jbe	SHORT $LN3@Add
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, edi
	ja	SHORT $LN8@Add
	mov	eax, edi
$LN8@Add:
	mov	ecx, DWORD PTR [esi+4]
	add	eax, ebx
	mov	DWORD PTR [esi+12], eax
	shl	eax, 4
	push	16					; 00000010H
	push	eax
	test	ecx, ecx
	je	SHORT $LN9@Add
	push	ecx
	call	__aligned_realloc
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN10@Add
$LN9@Add:
	call	__aligned_malloc
	add	esp, 8
$LN10@Add:
	mov	DWORD PTR [esi+4], eax
$LN3@Add:

; 69   : 			m_pData[nPos] = t;

	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR [esi+8], ebx
	mov	ecx, DWORD PTR [eax]
	shl	edi, 4
	add	edi, DWORD PTR [esi+4]
	mov	DWORD PTR [edi], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edi+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edi+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [edi+12], edx
	pop	edi
	pop	ebx

; 70   : 		}

	pop	ebp
	ret	4
?Add@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXABTSpan@Rasterizer@2@@Z ENDP ; ssf::Array<ssf::Rasterizer::Span>::Add
_TEXT	ENDS
PUBLIC	?Draw@Rasterizer@ssf@@QAE?AVCRect@@ABUSubPicDesc@@ABV3@HHPBKH@Z ; ssf::Rasterizer::Draw
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\libssf\rasterizer.cpp
;	COMDAT ?Draw@Rasterizer@ssf@@QAE?AVCRect@@ABUSubPicDesc@@ABV3@HHPBKH@Z
_TEXT	SEGMENT
$T501837 = -80						; size = 16
_r$ = -64						; size = 16
_ia$501915 = -48					; size = 4
_ia$501886 = -48					; size = 4
tv806 = -44						; size = 4
tv243 = -44						; size = 4
tv1325 = -40						; size = 4
tv1225 = -40						; size = 4
tv530 = -40						; size = 4
tv1350 = -36						; size = 4
tv1148 = -36						; size = 4
tv398 = -36						; size = 4
tv613 = -32						; size = 4
_dst$ = -32						; size = 4
_xo$ = -28						; size = 4
_color$ = -24						; size = 4
tv816 = -20						; size = 4
tv789 = -20						; size = 4
_h$ = -16						; size = 4
_src$ = -12						; size = 4
tv800 = -8						; size = 4
_sw$172667 = -8						; size = 4
_w$ = -4						; size = 4
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
_spd$ = 16						; size = 4
_yo$ = 20						; size = 4
_clip$ = 20						; size = 4
_fSSE2$ = 23						; size = 1
_switchpts$ = 24					; size = 4
tv1100 = 28						; size = 4
_plane$ = 28						; size = 4
?Draw@Rasterizer@ssf@@QAE?AVCRect@@ABUSubPicDesc@@ABV3@HHPBKH@Z PROC ; ssf::Rasterizer::Draw, COMDAT
; _xsub$ = ecx
; _ysub$ = eax

; 639  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	mov	edi, ecx

; 640  : 		CRect bbox(0, 0, 0, 0);

	xor	ecx, ecx
	mov	esi, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 641  : 
; 642  : 		if(!switchpts) return bbox;

	cmp	DWORD PTR _switchpts$[ebp], ecx
	je	$LN34@Draw

; 643  : 
; 644  : 		// clip
; 645  : 
; 646  : 		CRect r(0, 0, spd.w, spd.h);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _r$[ebp], ecx
	mov	DWORD PTR _r$[ebp+4], ecx
	mov	ecx, DWORD PTR [eax+4]

; 647  : 		r &= clip;

	mov	eax, DWORD PTR _clip$[ebp]
	mov	DWORD PTR _r$[ebp+8], ecx
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR _r$[ebp+12], edx
	push	ecx
	mov	edx, ecx
	push	edx
	call	DWORD PTR __imp__IntersectRect@12

; 648  : 
; 649  : 		xsub >>= FONT_SCALE;
; 650  : 		ysub >>= FONT_SCALE;
; 651  : 
; 652  : 		int x = (xsub + mOffsetX + (1<<FONT_AA)/2) >> FONT_AA;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]

; 653  : 		int y = (ysub + mOffsetY + (1<<FONT_AA)/2) >> FONT_AA;

	mov	edx, DWORD PTR [eax+136]
	sar	edi, 3
	lea	edi, DWORD PTR [ecx+edi+4]

; 654  : 		int w = mOverlayWidth;

	mov	ecx, DWORD PTR [eax+116]

; 655  : 		int h = mOverlayHeight;

	mov	eax, DWORD PTR [eax+120]
	sar	esi, 3
	mov	DWORD PTR _w$[ebp], ecx

; 656  : 		int xo = 0, yo = 0;

	xor	ecx, ecx
	lea	esi, DWORD PTR [edx+esi+4]
	mov	DWORD PTR _xo$[ebp], ecx
	mov	DWORD PTR _yo$[ebp], ecx

; 657  : 
; 658  : 		if(x < r.left) {xo = r.left - x; w -= r.left - x; x = r.left;}

	mov	ecx, DWORD PTR _r$[ebp]
	sar	edi, 3
	sar	esi, 3
	mov	DWORD PTR _h$[ebp], eax
	cmp	edi, ecx
	jge	SHORT $LN32@Draw
	mov	edx, ecx
	sub	edx, edi
	sub	edi, ecx
	add	DWORD PTR _w$[ebp], edi
	mov	DWORD PTR _xo$[ebp], edx
	mov	edi, ecx
$LN32@Draw:

; 659  : 		if(y < r.top) {yo = r.top - y; h -= r.top - y; y = r.top;}

	mov	ecx, DWORD PTR _r$[ebp+4]
	cmp	esi, ecx
	jge	SHORT $LN31@Draw
	mov	edx, ecx
	sub	edx, esi
	sub	esi, ecx
	add	eax, esi
	mov	DWORD PTR _yo$[ebp], edx
	mov	DWORD PTR _h$[ebp], eax
	mov	esi, ecx
$LN31@Draw:

; 660  : 		if(x+w > r.right) w = r.right - x;

	mov	edx, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _r$[ebp+8]
	add	edx, edi
	cmp	edx, ecx
	jle	SHORT $LN30@Draw
	sub	ecx, edi
	mov	DWORD PTR _w$[ebp], ecx
$LN30@Draw:

; 661  : 		if(y+h > r.bottom) h = r.bottom - y;

	mov	ecx, DWORD PTR _r$[ebp+12]
	lea	edx, DWORD PTR [eax+esi]
	cmp	edx, ecx
	jle	SHORT $LN29@Draw
	sub	ecx, esi
	mov	DWORD PTR _h$[ebp], ecx
	mov	eax, ecx
$LN29@Draw:

; 662  : 
; 663  : 		if(w <= 0 || h <= 0) return bbox;

	mov	ecx, DWORD PTR _w$[ebp]
	test	ecx, ecx
	jle	$LN27@Draw
	test	eax, eax
	jle	$LN27@Draw

; 664  : 
; 665  : 		bbox.SetRect(x, y, x + w, y + h);

	add	eax, esi
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	ecx, edi
	push	ecx
	push	esi
	push	edi
	push	eax
	call	DWORD PTR __imp__SetRect@20

; 666  : 		bbox &= CRect(0, 0, spd.w, spd.h);

	xor	eax, eax
	mov	DWORD PTR $T501837[ebp], eax
	mov	DWORD PTR $T501837[ebp+4], eax
	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	lea	eax, DWORD PTR $T501837[ebp]
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	push	eax
	mov	DWORD PTR $T501837[ebp+8], ecx
	mov	DWORD PTR $T501837[ebp+12], edx
	call	DWORD PTR __imp__IntersectRect@12

; 667  : 
; 668  : 		// draw
; 669  : 
; 670  : 		const BYTE* src = mpOverlayBuffer + 4*(mOverlayWidth * yo + xo) + plane;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	imul	ecx, DWORD PTR _yo$[ebp]
	add	ecx, DWORD PTR _xo$[ebp]
	mov	edx, DWORD PTR [eax+112]
	lea	eax, DWORD PTR [edx+ecx*4]

; 671  : 		DWORD* dst = (DWORD*)((BYTE*)spd.bits + spd.pitch * y) + x;

	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	eax, DWORD PTR _plane$[ebp]
	imul	edx, esi
	lea	edi, DWORD PTR [edx+edi*4]
	add	edi, DWORD PTR [ecx+24]

; 672  : 
; 673  : 		DWORD color = switchpts[0];

	mov	ecx, DWORD PTR _switchpts$[ebp]
	mov	edx, DWORD PTR [ecx]

; 674  : 
; 675  : 		bool fSSE2 = !!(g_cpuid.m_flags & CCpuID::sse2);

	mov	ecx, DWORD PTR ?g_cpuid@@3VCCpuID@@A	; g_cpuid
	shr	ecx, 3
	and	cl, 1
	mov	DWORD PTR _src$[ebp], eax
	mov	DWORD PTR _dst$[ebp], edi
	mov	DWORD PTR _color$[ebp], edx
	mov	BYTE PTR _fSSE2$[ebp], cl
	jmp	SHORT $LN26@Draw
	npad	1
$LL74@Draw:
	mov	eax, DWORD PTR _src$[ebp]
$LN26@Draw:

; 676  : 
; 677  : 		while(h--)
; 678  : 		{
; 679  : 			if(switchpts[1] == 0xffffffff)

	mov	esi, DWORD PTR _switchpts$[ebp]
	dec	DWORD PTR _h$[ebp]
	add	esi, 4
	cmp	DWORD PTR [esi], -1
	jne	$LN24@Draw

; 680  : 			{
; 681  : 				if(fSSE2) for(int wt=0; wt<w; ++wt) pixmix_sse2(&dst[wt], color, src[wt*4]);

	cmp	BYTE PTR _fSSE2$[ebp], 0
	je	$LN23@Draw
	cmp	DWORD PTR _w$[ebp], 0
	jle	$LN4@Draw
	mov	esi, edx
	mov	ecx, edx
	and	ecx, 16777215				; 00ffffffH
	shr	esi, 24					; 00000018H
	sub	eax, edi
	mov	DWORD PTR tv1100[ebp], eax
	mov	eax, DWORD PTR _w$[ebp]
	movd	xmm2, ecx
	pxor	xmm3, xmm3
	mov	DWORD PTR tv789[ebp], esi
	punpcklbw xmm2, xmm3
	mov	ecx, edi
	mov	DWORD PTR tv613[ebp], eax
	jmp	SHORT $LN22@Draw
$LL76@Draw:
	mov	esi, DWORD PTR tv789[ebp]
$LN22@Draw:
	mov	eax, DWORD PTR tv1100[ebp]
	movzx	eax, BYTE PTR [eax+ecx]
	imul	eax, esi
	mov	esi, DWORD PTR [ecx]
	shr	eax, 6
	movd	xmm0, esi
	and	eax, 255				; 000000ffH
	mov	esi, 255				; 000000ffH
	sub	esi, eax
	shl	eax, 16					; 00000010H
	punpcklbw xmm0, xmm3
	or	esi, eax
	punpcklwd xmm0, xmm2
	movd	xmm1, esi
	pshufd	xmm1, xmm1, 0
	pmaddwd	xmm0, xmm1
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	eax, xmm0
	mov	DWORD PTR [ecx], eax
	add	ecx, 4
	dec	DWORD PTR tv613[ebp]
	jne	SHORT $LL76@Draw
	jmp	$LN78@Draw
$LN23@Draw:

; 682  : 				else for(int wt=0; wt<w; ++wt) pixmix_c(&dst[wt], color, src[wt*4]);

	cmp	DWORD PTR _w$[ebp], 0
	jle	$LN4@Draw
	mov	ecx, edx
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	esi, edx
	shr	esi, 24					; 00000018H
	and	edx, 16711935				; 00ff00ffH
	mov	DWORD PTR tv800[ebp], ecx
	mov	ecx, edi
	sub	eax, edi
	mov	edi, DWORD PTR _w$[ebp]
	mov	DWORD PTR tv789[ebp], esi
	mov	DWORD PTR tv806[ebp], edx
	mov	DWORD PTR tv1148[ebp], ecx
	mov	DWORD PTR tv1100[ebp], eax
	mov	DWORD PTR tv530[ebp], edi
	jmp	SHORT $LN18@Draw
	npad	5
$LL72@Draw:
	mov	esi, DWORD PTR tv789[ebp]
	mov	edx, DWORD PTR tv806[ebp]
	mov	eax, DWORD PTR tv1100[ebp]
$LN18@Draw:
	movzx	eax, BYTE PTR [ecx+eax]
	mov	ecx, DWORD PTR [ecx]
	imul	eax, esi
	mov	edi, ecx
	and	edi, 16711935				; 00ff00ffH
	shr	eax, 6
	and	eax, 255				; 000000ffH
	imul	edx, eax
	mov	esi, 255				; 000000ffH
	sub	esi, eax
	imul	edi, esi
	add	edi, edx
	mov	edx, ecx
	shr	edx, 8
	and	edx, -65281				; ffff00ffH
	imul	edx, esi
	mov	DWORD PTR _ia$501886[ebp], esi
	mov	esi, DWORD PTR tv800[ebp]
	imul	esi, eax
	shr	ecx, 8
	shr	edi, 8
	add	edx, esi
	xor	edi, edx
	mov	edx, DWORD PTR tv800[ebp]
	and	ecx, 16711935				; 00ff00ffH
	imul	edx, eax
	imul	ecx, DWORD PTR _ia$501886[ebp]
	add	ecx, edx
	and	edi, 16711935				; 00ff00ffH
	xor	edi, ecx
	mov	ecx, DWORD PTR tv1148[ebp]
	mov	DWORD PTR [ecx], edi
	add	ecx, 4
	dec	DWORD PTR tv530[ebp]
	mov	DWORD PTR tv1148[ebp], ecx
	jne	SHORT $LL72@Draw

; 683  : 			}
; 684  : 			else

	mov	edx, DWORD PTR _color$[ebp]
	jmp	$LN79@Draw
$LN24@Draw:

; 685  : 			{
; 686  : 				const DWORD* sw = switchpts;
; 687  : 
; 688  : 				if(fSSE2) 

	cmp	BYTE PTR _fSSE2$[ebp], 0
	mov	ecx, DWORD PTR _switchpts$[ebp]
	mov	DWORD PTR _sw$172667[ebp], ecx
	je	$LN14@Draw

; 689  : 				for(int wt=0; wt<w; ++wt)

	cmp	DWORD PTR _w$[ebp], 0
	jle	$LN4@Draw
	mov	ecx, DWORD PTR _xo$[ebp]
	sub	eax, edi
	mov	DWORD PTR tv1100[ebp], eax
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR tv816[ebp], esi
	pxor	xmm1, xmm1
	mov	DWORD PTR tv1225[ebp], ecx
	mov	esi, edi
	mov	DWORD PTR tv398[ebp], eax
$LN13@Draw:

; 690  : 				{
; 691  : 					if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];}

	mov	eax, DWORD PTR tv816[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN10@Draw
	npad	1
$LL9@Draw:
	mov	eax, DWORD PTR _sw$172667[ebp]
	add	eax, 8
	mov	DWORD PTR _sw$172667[ebp], eax
	add	eax, 4
	mov	DWORD PTR tv816[ebp], eax
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LL9@Draw
	mov	ecx, DWORD PTR _sw$172667[ebp]
	mov	edx, DWORD PTR [ecx-8]
	mov	DWORD PTR _color$[ebp], edx
$LN10@Draw:

; 692  : 					pixmix_sse2(&dst[wt], color, src[wt*4]);

	mov	eax, DWORD PTR tv1100[ebp]
	movzx	eax, BYTE PTR [esi+eax]
	mov	ecx, edx
	shr	ecx, 24					; 00000018H
	imul	eax, ecx
	mov	ecx, DWORD PTR [esi]
	movd	xmm0, ecx
	shr	eax, 6
	mov	ecx, edx
	and	ecx, 16777215				; 00ffffffH
	movd	xmm2, ecx
	and	eax, 255				; 000000ffH
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	punpcklbw xmm0, xmm1
	shl	eax, 16					; 00000010H
	or	ecx, eax
	punpcklbw xmm2, xmm1
	punpcklwd xmm0, xmm2
	movd	xmm2, ecx
	mov	ecx, DWORD PTR tv1225[ebp]
	pshufd	xmm2, xmm2, 0
	pmaddwd	xmm0, xmm2
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	eax, xmm0
	mov	DWORD PTR [esi], eax
	inc	ecx
	add	esi, 4
	dec	DWORD PTR tv398[ebp]
	mov	DWORD PTR tv1225[ebp], ecx
	jne	$LN13@Draw

; 693  : 				}

	jmp	$LN78@Draw
$LN14@Draw:

; 694  : 				else
; 695  : 				for(int wt=0; wt<w; ++wt)

	cmp	DWORD PTR _w$[ebp], 0
	jle	$LN4@Draw
	mov	ecx, edi
	sub	eax, edi
	mov	edi, DWORD PTR _w$[ebp]
	mov	DWORD PTR tv816[ebp], esi
	mov	esi, DWORD PTR _xo$[ebp]
	mov	DWORD PTR tv1325[ebp], esi
	mov	DWORD PTR tv1350[ebp], ecx
	mov	DWORD PTR tv1100[ebp], eax
	mov	DWORD PTR tv243[ebp], edi
	jmp	SHORT $LN6@Draw
	npad	6
$LL73@Draw:
	mov	eax, DWORD PTR tv1100[ebp]
$LN6@Draw:

; 696  : 				{
; 697  : 					if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];}

	mov	edi, DWORD PTR tv816[ebp]
	cmp	esi, DWORD PTR [edi]
	jb	SHORT $LN3@Draw
	npad	6
$LL2@Draw:
	mov	edx, DWORD PTR _sw$172667[ebp]
	add	edx, 8
	mov	DWORD PTR _sw$172667[ebp], edx
	add	edx, 4
	mov	DWORD PTR tv816[ebp], edx
	cmp	esi, DWORD PTR [edx]
	jae	SHORT $LL2@Draw
	mov	edx, DWORD PTR _sw$172667[ebp]
	mov	edx, DWORD PTR [edx-8]
	mov	DWORD PTR _color$[ebp], edx
$LN3@Draw:

; 698  : 					pixmix_c(&dst[wt], color, src[wt*4]);

	movzx	eax, BYTE PTR [ecx+eax]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, edx
	shr	esi, 24					; 00000018H
	imul	eax, esi
	mov	edi, ecx
	shr	edx, 8
	shr	edi, 8
	and	edx, 255				; 000000ffH
	shr	eax, 6
	and	eax, 255				; 000000ffH
	and	edi, -65281				; ffff00ffH
	imul	edx, eax
	mov	esi, 255				; 000000ffH
	sub	esi, eax
	imul	edi, esi
	add	edi, edx
	mov	edx, ecx
	mov	DWORD PTR _ia$501915[ebp], esi
	and	edx, 16711935				; 00ff00ffH
	imul	edx, esi
	mov	esi, DWORD PTR _color$[ebp]
	and	esi, 16711935				; 00ff00ffH
	imul	esi, eax
	add	edx, esi
	shr	edx, 8
	xor	edi, edx
	mov	edx, DWORD PTR _color$[ebp]
	shr	ecx, 8
	and	ecx, 16711935				; 00ff00ffH
	imul	ecx, DWORD PTR _ia$501915[ebp]
	mov	esi, edx
	shr	esi, 8
	and	esi, 255				; 000000ffH
	imul	esi, eax
	add	ecx, esi
	mov	esi, DWORD PTR tv1325[ebp]
	and	edi, 16711935				; 00ff00ffH
	xor	edi, ecx
	mov	ecx, DWORD PTR tv1350[ebp]
	mov	DWORD PTR [ecx], edi
	inc	esi
	add	ecx, 4
	dec	DWORD PTR tv243[ebp]
	mov	DWORD PTR tv1325[ebp], esi
	mov	DWORD PTR tv1350[ebp], ecx
	jne	$LL73@Draw
$LN79@Draw:

; 694  : 				else
; 695  : 				for(int wt=0; wt<w; ++wt)

	mov	edi, DWORD PTR _dst$[ebp]
$LN78@Draw:
	mov	eax, DWORD PTR _src$[ebp]
$LN4@Draw:

; 699  : 				}
; 700  : 			}
; 701  : 
; 702  : 			src += 4*mOverlayWidth;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+116]
	lea	eax, DWORD PTR [eax+ecx*4]

; 703  : 			dst = (DWORD*)((BYTE*)dst + spd.pitch);

	mov	ecx, DWORD PTR _spd$[ebp]
	add	edi, DWORD PTR [ecx+16]
	cmp	DWORD PTR _h$[ebp], 0
	mov	DWORD PTR _src$[ebp], eax
	mov	DWORD PTR _dst$[ebp], edi
	jne	$LL74@Draw
$LN27@Draw:

; 662  : 
; 663  : 		if(w <= 0 || h <= 0) return bbox;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN34@Draw:

; 704  : 		}
; 705  : 
; 706  : 		return bbox;
; 707  : 	}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Draw@Rasterizer@ssf@@QAE?AVCRect@@ABUSubPicDesc@@ABV3@HHPBKH@Z ENDP ; ssf::Rasterizer::Draw
_TEXT	ENDS
PUBLIC	?Reuse@Rasterizer@ssf@@QAEXAAV12@@Z		; ssf::Rasterizer::Reuse
; Function compile flags: /Ogtp
;	COMDAT ?Reuse@Rasterizer@ssf@@QAEXAAV12@@Z
_TEXT	SEGMENT
?Reuse@Rasterizer@ssf@@QAEXAAV12@@Z PROC		; ssf::Rasterizer::Reuse, COMDAT
; _this$ = ecx
; _r$ = eax

; 599  : 		mWidth = r.mWidth;

	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+24], edx

; 600  : 		mHeight = r.mHeight;

	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+28], edx

; 601  : 		mPathOffsetX = r.mPathOffsetX;

	mov	edx, DWORD PTR [eax+124]
	mov	DWORD PTR [ecx+124], edx

; 602  : 		mPathOffsetY = r.mPathOffsetY;

	mov	edx, DWORD PTR [eax+128]
	mov	DWORD PTR [ecx+128], edx

; 603  : 		mWideBorder = r.mWideBorder;

	mov	edx, DWORD PTR [eax+92]
	mov	DWORD PTR [ecx+92], edx

; 604  : 		mOutline.Move(r.mOutline);

	mov	edx, DWORD PTR [ecx+36]
	push	esi
	mov	esi, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+36], esi
	mov	esi, DWORD PTR [eax+40]
	mov	DWORD PTR [eax+36], edx
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [ecx+40], esi
	mov	esi, DWORD PTR [eax+44]
	mov	DWORD PTR [eax+40], edx
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [ecx+44], esi
	mov	esi, DWORD PTR [eax+48]
	mov	DWORD PTR [eax+44], edx
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [ecx+48], esi
	mov	DWORD PTR [eax+48], edx
	push	edi
	xor	esi, esi
	mov	DWORD PTR [eax+40], esi

; 605  : 		mWideOutline.Move(r.mWideOutline);

	mov	edx, DWORD PTR [ecx+56]
	mov	edi, DWORD PTR [eax+56]
	mov	DWORD PTR [ecx+56], edi
	mov	edi, DWORD PTR [eax+60]
	mov	DWORD PTR [eax+56], edx
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [ecx+60], edi
	mov	edi, DWORD PTR [eax+64]
	mov	DWORD PTR [eax+60], edx
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [ecx+64], edi
	mov	edi, DWORD PTR [eax+68]
	mov	DWORD PTR [eax+64], edx
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [ecx+68], edi
	pop	edi
	mov	DWORD PTR [eax+60], esi
	mov	DWORD PTR [eax+68], edx
	pop	esi

; 606  : 	}

	ret	0
?Reuse@Rasterizer@ssf@@QAEXAAV12@@Z ENDP		; ssf::Rasterizer::Reuse
_TEXT	ENDS
PUBLIC	?Rasterize@Rasterizer@ssf@@QAE_NHH@Z		; ssf::Rasterizer::Rasterize
; Function compile flags: /Ogtp
;	COMDAT ?Rasterize@Rasterizer@ssf@@QAE_NHH@Z
_TEXT	SEGMENT
_pOutline$ = -28					; size = 8
_last$172530 = -20					; size = 4
tv200 = -16						; size = 4
_height$ = -16						; size = 4
_x2$172527 = -12					; size = 4
_width$ = -12						; size = 4
_i$172515 = -8						; size = 4
tv710 = -4						; size = 4
_j$172539 = 8						; size = 4
_xsub$ = 8						; size = 4
_ysub$ = 12						; size = 4
?Rasterize@Rasterizer@ssf@@QAE_NHH@Z PROC		; ssf::Rasterizer::Rasterize, COMDAT
; _this$ = esi

; 460  : 	{

	push	ebp
	mov	ebp, esp

; 461  : 		_TrashOverlay();

	mov	ecx, DWORD PTR [esi+112]
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, DWORD PTR _ysub$[ebp]
	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR _xsub$[ebp]
	cmp	ecx, eax
	je	SHORT $LN26@Rasterize
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	xor	eax, eax
$LN26@Rasterize:

; 462  : 
; 463  : 		if(!mWidth || !mHeight)

	mov	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+112], eax
	cmp	ecx, eax
	je	$LN20@Rasterize
	mov	edx, DWORD PTR [esi+28]
	cmp	edx, eax
	je	$LN20@Rasterize

; 467  : 		}
; 468  : 
; 469  : 		xsub >>= FONT_SCALE;
; 470  : 		ysub >>= FONT_SCALE;
; 471  : 
; 472  : 		xsub &= (1<<FONT_AA)-1;
; 473  : 		ysub &= (1<<FONT_AA)-1;
; 474  : 
; 475  : 		int width = mWidth + xsub;
; 476  : 		int height = mHeight + ysub;
; 477  : 
; 478  : 		mOffsetX = mPathOffsetX - xsub;

	mov	eax, DWORD PTR [esi+124]
	sar	edi, 3
	and	edi, 7
	sub	eax, edi
	mov	DWORD PTR [esi+132], eax

; 479  : 		mOffsetY = mPathOffsetY - ysub;

	mov	eax, DWORD PTR [esi+128]
	sar	ebx, 3
	and	ebx, 7
	sub	eax, ebx
	mov	DWORD PTR [esi+136], eax

; 480  : 
; 481  : 		int border = ((mWideBorder + ((1<<FONT_AA)-1)) & ~((1<<FONT_AA)-1)) + (1<<FONT_AA)*4;

	mov	eax, DWORD PTR [esi+92]
	add	eax, 7
	and	eax, -8					; fffffff8H
	add	edx, ebx
	add	ecx, edi
	add	eax, 32					; 00000020H

; 482  : 
; 483  : 		if(!mWideOutline.IsEmpty())

	cmp	DWORD PTR [esi+60], 0
	mov	DWORD PTR _xsub$[ebp], edi
	mov	DWORD PTR _ysub$[ebp], ebx
	mov	DWORD PTR _height$[ebp], edx
	je	SHORT $LN19@Rasterize

; 484  : 		{
; 485  : 			width += 2*border;
; 486  : 			height += 2*border;
; 487  : 
; 488  : 			xsub += border;
; 489  : 			ysub += border;
; 490  : 
; 491  : 			mOffsetX -= border;

	sub	DWORD PTR [esi+132], eax
	add	edi, eax
	add	ebx, eax

; 492  : 			mOffsetY -= border;

	sub	DWORD PTR [esi+136], eax
	lea	ecx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _width$[ebp], ecx
	lea	edx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _xsub$[ebp], edi
	mov	DWORD PTR _ysub$[ebp], ebx
$LN19@Rasterize:

; 493  : 		}
; 494  : 
; 495  : 		mOverlayWidth = ((width + ((1<<FONT_AA)-1)) >> FONT_AA) + 1;

	add	ecx, 7

; 496  : 		mOverlayHeight = ((height + ((1<<FONT_AA)-1)) >> FONT_AA) + 1;

	lea	eax, DWORD PTR [edx+7]
	sar	eax, 3
	inc	eax
	sar	ecx, 3
	inc	ecx
	mov	DWORD PTR [esi+120], eax

; 497  : 
; 498  : 		mpOverlayBuffer = new BYTE[4 * mOverlayWidth * mOverlayHeight];

	imul	eax, ecx
	add	eax, eax
	add	eax, eax
	push	eax
	mov	DWORD PTR [esi+116], ecx
	call	??_U@YAPAXI@Z				; operator new[]

; 499  : 		memset(mpOverlayBuffer, 0, 4 * mOverlayWidth * mOverlayHeight);

	mov	ecx, DWORD PTR [esi+120]
	imul	ecx, DWORD PTR [esi+116]
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	0
	push	eax
	mov	DWORD PTR [esi+112], eax
	call	_memset

; 500  : 
; 501  : 		Array<Span>* pOutline[2] = {&mOutline, &mWideOutline};

	lea	edx, DWORD PTR [esi+32]
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pOutline$[ebp], edx
	lea	eax, DWORD PTR [esi+52]

; 502  : 
; 503  : 		for(int i = 0; i < countof(pOutline); i++)

	xor	edx, edx
	mov	DWORD PTR _pOutline$[ebp+4], eax
	mov	DWORD PTR _i$172515[ebp], edx
	npad	6
$LL48@Rasterize:

; 504  : 		{
; 505  : 			const Span* s = pOutline[i]->GetData();

	mov	ecx, DWORD PTR _pOutline$[ebp+edx*4]
	mov	eax, DWORD PTR [ecx+4]

; 506  : 
; 507  : 			for(size_t j = 0, k = pOutline[i]->GetCount(); j < k; j++)

	mov	ecx, DWORD PTR [ecx+8]
	test	ecx, ecx
	je	$LN17@Rasterize

; 504  : 		{
; 505  : 			const Span* s = pOutline[i]->GetData();

	add	eax, 4
	mov	DWORD PTR tv710[ebp], eax
	mov	DWORD PTR tv200[ebp], ecx
	npad	5
$LL15@Rasterize:

; 508  : 			{
; 509  : 				int y = s[j].y1 - 0x40000000 + ysub;
; 510  : 				int x1 = s[j].x1 - 0x40000000 + xsub;

	mov	ecx, DWORD PTR [eax-4]

; 511  : 				int x2 = s[j].x2 - 0x40000000 + xsub;

	mov	edx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [edx+edi-1073741824]
	lea	ebx, DWORD PTR [ecx+edi-1073741824]
	mov	DWORD PTR _x2$172527[ebp], edx

; 512  : 
; 513  : 				if(x2 > x1)

	cmp	edx, ebx
	jle	SHORT $LN14@Rasterize

; 514  : 				{
; 515  : 					int first = x1 >> FONT_AA;
; 516  : 					int last = (x2-1) >> FONT_AA;
; 517  : 
; 518  : 					BYTE* dst = mpOverlayBuffer + 4*(mOverlayWidth * (y >> FONT_AA) + first) + i;

	mov	eax, DWORD PTR [eax]
	mov	edi, DWORD PTR _ysub$[ebp]
	lea	eax, DWORD PTR [eax+edi-1073741824]
	mov	edi, DWORD PTR _i$172515[ebp]
	sar	eax, 3
	imul	eax, DWORD PTR [esi+116]
	mov	ecx, ebx
	sar	ecx, 3
	add	eax, ecx
	dec	edx
	sar	edx, 3
	lea	eax, DWORD PTR [edi+eax*4]
	add	eax, DWORD PTR [esi+112]
	mov	DWORD PTR _last$172530[ebp], edx

; 519  : 
; 520  : 					if(first == last)

	cmp	ecx, edx

; 521  : 					{
; 522  : 						*dst += x2 - x1;
; 523  : 					}
; 524  : 					else

	je	SHORT $LN50@Rasterize

; 525  : 					{
; 526  : 						*dst += (((first+1) << FONT_AA) - x1) << (6 - FONT_AA*2);

	mov	dl, cl
	add	dl, dl
	add	dl, dl
	add	dl, dl
	sub	dl, bl

; 527  : 						dst += 4;
; 528  : 
; 529  : 						while(++first < last)

	mov	ebx, DWORD PTR _last$172530[ebp]
	add	dl, 8
	add	BYTE PTR [eax], dl
	inc	ecx
	add	eax, 4
	cmp	ecx, ebx
	jge	SHORT $LN8@Rasterize

; 525  : 					{
; 526  : 						*dst += (((first+1) << FONT_AA) - x1) << (6 - FONT_AA*2);

	mov	edx, ebx
	sub	edx, ecx
$LL9@Rasterize:

; 530  : 						{
; 531  : 							*dst += (1 << FONT_AA) << (6 - FONT_AA*2);

	add	BYTE PTR [eax], 8

; 532  : 							dst += 4;

	add	eax, 4
	dec	edx
	jne	SHORT $LL9@Rasterize
$LN8@Rasterize:

; 533  : 						}
; 534  : 
; 535  : 						*dst += (x2 - (last << FONT_AA)) << (6 - FONT_AA*2);

	add	bl, bl
	add	bl, bl
	add	bl, bl
$LN50@Rasterize:
	mov	cl, BYTE PTR _x2$172527[ebp]
	mov	edi, DWORD PTR _xsub$[ebp]
	sub	cl, bl
	add	BYTE PTR [eax], cl
	mov	eax, DWORD PTR tv710[ebp]
$LN14@Rasterize:

; 506  : 
; 507  : 			for(size_t j = 0, k = pOutline[i]->GetCount(); j < k; j++)

	add	eax, 16					; 00000010H
	dec	DWORD PTR tv200[ebp]
	mov	DWORD PTR tv710[ebp], eax
	jne	$LL15@Rasterize
	mov	edx, DWORD PTR _i$172515[ebp]
$LN17@Rasterize:

; 502  : 
; 503  : 		for(int i = 0; i < countof(pOutline); i++)

	inc	edx
	mov	DWORD PTR _i$172515[ebp], edx
	cmp	edx, 2
	jb	$LL48@Rasterize

; 536  : 					}
; 537  : 				}
; 538  : 			}
; 539  : 		}
; 540  : 
; 541  : 		if(!mWideOutline.IsEmpty())

	cmp	DWORD PTR [esi+60], 0
	je	SHORT $LN4@Rasterize

; 542  : 		{
; 543  : 			BYTE* p = mpOverlayBuffer;
; 544  : 
; 545  : 			for(int j = 0; j < mOverlayHeight; j++, p += mOverlayWidth*4)

	cmp	DWORD PTR [esi+120], 0
	mov	ebx, DWORD PTR [esi+112]
	mov	DWORD PTR _j$172539[ebp], 0
	jle	SHORT $LN4@Rasterize
$LL49@Rasterize:

; 546  : 			{
; 547  : 				for(int i = 0; i < mOverlayWidth; i++)

	xor	edi, edi
	cmp	DWORD PTR [esi+116], edi
	jle	SHORT $LN5@Rasterize
	lea	eax, DWORD PTR [ebx+1]
$LL3@Rasterize:

; 548  : 				{
; 549  : 					p[i*4+2] = min(p[i*4+1], (1<<6) - p[i*4]); // TODO: sse2

	movzx	edx, BYTE PTR [eax-1]
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	movzx	edx, BYTE PTR [eax]
	cmp	edx, ecx
	jge	SHORT $LN24@Rasterize
	mov	ecx, edx
$LN24@Rasterize:
	mov	BYTE PTR [eax+1], cl
	inc	edi
	add	eax, 4
	cmp	edi, DWORD PTR [esi+116]
	jl	SHORT $LL3@Rasterize
$LN5@Rasterize:

; 542  : 		{
; 543  : 			BYTE* p = mpOverlayBuffer;
; 544  : 
; 545  : 			for(int j = 0; j < mOverlayHeight; j++, p += mOverlayWidth*4)

	mov	eax, DWORD PTR _j$172539[ebp]
	mov	ecx, DWORD PTR [esi+116]
	inc	eax
	mov	DWORD PTR _j$172539[ebp], eax
	lea	ebx, DWORD PTR [ebx+ecx*4]
	cmp	eax, DWORD PTR [esi+120]
	jl	SHORT $LL49@Rasterize

; 466  : 			return true;

	pop	edi
	mov	al, 1
	pop	ebx

; 550  : 				}
; 551  : 			}
; 552  : 		}
; 553  : 
; 554  : 		return true;
; 555  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
$LN20@Rasterize:

; 464  : 		{
; 465  : 			mOverlayWidth = mOverlayHeight = 0;

	mov	DWORD PTR [esi+120], eax
	mov	DWORD PTR [esi+116], eax
$LN4@Rasterize:

; 466  : 			return true;

	pop	edi
	mov	al, 1
	pop	ebx

; 550  : 				}
; 551  : 			}
; 552  : 		}
; 553  : 
; 554  : 		return true;
; 555  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?Rasterize@Rasterizer@ssf@@QAE_NHH@Z ENDP		; ssf::Rasterizer::Rasterize
_TEXT	ENDS
PUBLIC	?_OverlapRegion@Rasterizer@ssf@@AAEXAAV?$Array@TSpan@Rasterizer@ssf@@@2@0HH@Z ; ssf::Rasterizer::_OverlapRegion
; Function compile flags: /Ogtp
;	COMDAT ?_OverlapRegion@Rasterizer@ssf@@AAEXAAV?$Array@TSpan@Rasterizer@ssf@@@2@0HH@Z
_TEXT	SEGMENT
$T502068 = -40						; size = 16
_x$172447 = -40						; size = 16
_o$ = -24						; size = 16
_be$ = -4						; size = 4
_dst$ = 8						; size = 4
_ae$ = 12						; size = 4
_src$ = 12						; size = 4
tv396 = 16						; size = 4
_dx$ = 16						; size = 4
?_OverlapRegion@Rasterizer@ssf@@AAEXAAV?$Array@TSpan@Rasterizer@ssf@@@2@0HH@Z PROC ; ssf::Rasterizer::_OverlapRegion, COMDAT
; _this$ = eax
; _dy$ = edx

; 342  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 343  : 		mWideOutlineTmp.Move(dst);

	mov	ecx, DWORD PTR _dst$[ebp]
	push	ebx
	mov	ebx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR _src$[ebp]
	push	edi
	mov	edi, DWORD PTR [eax+76]
	mov	DWORD PTR [eax+76], ebx
	mov	ebx, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], edi
	mov	edi, DWORD PTR [eax+80]
	mov	DWORD PTR [eax+80], ebx
	mov	ebx, DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx+8], edi
	mov	edi, DWORD PTR [eax+84]
	mov	DWORD PTR [eax+84], ebx
	mov	ebx, DWORD PTR [ecx+16]
	mov	DWORD PTR [ecx+12], edi
	mov	edi, DWORD PTR [eax+88]
	mov	DWORD PTR [eax+88], ebx
	mov	DWORD PTR [ecx+16], edi
	mov	DWORD PTR [ecx+8], 0

; 344  : 
; 345  : 		Span* a = mWideOutlineTmp.GetData();

	mov	ebx, DWORD PTR [eax+76]

; 346  : 		Span* ae = a + mWideOutlineTmp.GetCount();

	mov	eax, DWORD PTR [eax+80]

; 347  : 		Span* b = src.GetData();

	mov	edi, DWORD PTR [esi+4]

; 348  : 		Span* be = b + src.GetCount();

	mov	esi, DWORD PTR [esi+8]
	shl	eax, 4
	add	eax, ebx
	shl	esi, 4
	add	esi, edi
	mov	DWORD PTR _ae$[ebp], eax

; 349  : 
; 350  : 		Span o(0, dy, 0, dy);
; 351  : 		o.first -= dx;

	mov	eax, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _be$[ebp], esi
	xor	esi, esi
	mov	DWORD PTR _o$[ebp+4], edx
	mov	DWORD PTR _o$[ebp+12], edx
	cdq
	mov	DWORD PTR _o$[ebp+8], esi
	sub	esi, eax
	sbb	DWORD PTR _o$[ebp+4], edx

; 352  : 		o.second += dx;

	add	DWORD PTR _o$[ebp+8], eax

; 353  : 
; 354  : 		while(a != ae && b != be)

	mov	eax, DWORD PTR _ae$[ebp]
	mov	DWORD PTR _o$[ebp], esi
	adc	DWORD PTR _o$[ebp+12], edx
	cmp	ebx, eax
	je	$LN34@OverlapReg
	npad	6
$LL35@OverlapReg:
	cmp	edi, DWORD PTR _be$[ebp]
	je	$LN34@OverlapReg

; 355  : 		{
; 356  : 			Span x;
; 357  : 
; 358  : 			if(b->first + o.first < a->first)

	mov	edx, DWORD PTR _o$[ebp]
	add	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR _o$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [ebx+4]
	ja	$LN33@OverlapReg
	jb	SHORT $LN121@OverlapReg
	cmp	edx, DWORD PTR [ebx]
	jae	$LN33@OverlapReg
$LN121@OverlapReg:

; 359  : 			{
; 360  : 				// B span is earlier.  Use it.
; 361  : 
; 362  : 				x.first = b->first + o.first;
; 363  : 				x.second = b->second + o.second;

	mov	esi, DWORD PTR [edi+12]
	mov	DWORD PTR _x$172447[ebp+4], eax
	mov	eax, DWORD PTR [edi+8]
	add	eax, DWORD PTR _o$[ebp+8]
	mov	DWORD PTR _x$172447[ebp], edx
	adc	esi, DWORD PTR _o$[ebp+12]

; 364  : 
; 365  : 				b++;

	add	edi, 16					; 00000010H
	mov	DWORD PTR _x$172447[ebp+8], eax

; 366  : 
; 367  : 				// B spans don't overlap, so begin merge loop with A first.
; 368  : 
; 369  : 				for(;;)
; 370  : 				{
; 371  : 					// If we run out of A spans or the A span doesn't overlap,
; 372  : 					// then the next B span can't either (because B spans don't
; 373  : 					// overlap) and we exit.
; 374  : 
; 375  : 					if(a == ae || a->first > x.second)

	cmp	ebx, DWORD PTR _ae$[ebp]
	je	$LN117@OverlapReg
$LN32@OverlapReg:
	cmp	DWORD PTR [ebx+4], esi
	ja	$LN117@OverlapReg
	jb	SHORT $LL28@OverlapReg
	mov	edx, DWORD PTR [ebx]
	cmp	edx, DWORD PTR _x$172447[ebp+8]
	ja	$LN117@OverlapReg
	npad	2
$LL28@OverlapReg:

; 376  : 						break;
; 377  : 
; 378  : 					do {x.second = mymax(x.second, a->second);}

	mov	eax, DWORD PTR [ebx+12]
	mov	edx, DWORD PTR [ebx+8]
	cmp	esi, eax
	ja	SHORT $LN65@OverlapReg
	jb	SHORT $LN123@OverlapReg
	cmp	DWORD PTR _x$172447[ebp+8], edx
	ja	SHORT $LN65@OverlapReg
$LN123@OverlapReg:
	mov	DWORD PTR _x$172447[ebp+8], edx
	mov	esi, eax
$LN65@OverlapReg:

; 379  : 					while(++a != ae && a->first <= x.second);

	add	ebx, 16					; 00000010H
	cmp	ebx, DWORD PTR _ae$[ebp]
	je	SHORT $LN25@OverlapReg
	cmp	DWORD PTR [ebx+4], esi
	jb	SHORT $LL28@OverlapReg
	ja	SHORT $LN25@OverlapReg
	mov	edx, DWORD PTR [ebx]
	cmp	edx, DWORD PTR _x$172447[ebp+8]
	jbe	SHORT $LL28@OverlapReg
$LN25@OverlapReg:

; 380  : 
; 381  : 					// If we run out of B spans or the B span doesn't overlap,
; 382  : 					// then the next A span can't either (because A spans don't
; 383  : 					// overlap) and we exit.
; 384  : 
; 385  : 					if(b == be || b->first + o.first > x.second)

	cmp	edi, DWORD PTR _be$[ebp]
	je	$LN117@OverlapReg
	mov	edx, DWORD PTR _o$[ebp]
	add	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR _o$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	cmp	eax, esi
	ja	$LN117@OverlapReg
	jb	SHORT $LL22@OverlapReg
	cmp	edx, DWORD PTR _x$172447[ebp+8]
	ja	$LN117@OverlapReg
$LL22@OverlapReg:

; 386  : 						break;
; 387  : 
; 388  : 					do {x.second = mymax(x.second, b->second + o.second);}

	mov	edx, DWORD PTR [edi+8]
	add	edx, DWORD PTR _o$[ebp+8]
	mov	eax, DWORD PTR [edi+12]
	adc	eax, DWORD PTR _o$[ebp+12]
	cmp	esi, eax
	ja	SHORT $LN69@OverlapReg
	jb	SHORT $LN126@OverlapReg
	cmp	DWORD PTR _x$172447[ebp+8], edx
	ja	SHORT $LN69@OverlapReg
$LN126@OverlapReg:
	mov	DWORD PTR _x$172447[ebp+8], edx
	mov	esi, eax
$LN69@OverlapReg:

; 389  : 					while(++b != be && b->first + o.first <= x.second);

	add	edi, 16					; 00000010H
	cmp	edi, DWORD PTR _be$[ebp]
	je	SHORT $LN19@OverlapReg
	mov	edx, DWORD PTR _o$[ebp]
	add	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR _o$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	cmp	eax, esi
	jb	SHORT $LL22@OverlapReg
	ja	SHORT $LN19@OverlapReg
	cmp	edx, DWORD PTR _x$172447[ebp+8]
	jbe	SHORT $LL22@OverlapReg
$LN19@OverlapReg:

; 366  : 
; 367  : 				// B spans don't overlap, so begin merge loop with A first.
; 368  : 
; 369  : 				for(;;)
; 370  : 				{
; 371  : 					// If we run out of A spans or the A span doesn't overlap,
; 372  : 					// then the next B span can't either (because B spans don't
; 373  : 					// overlap) and we exit.
; 374  : 
; 375  : 					if(a == ae || a->first > x.second)

	cmp	ebx, DWORD PTR _ae$[ebp]
	jne	$LN32@OverlapReg

; 390  : 				}
; 391  : 			}
; 392  : 			else

	jmp	$LN117@OverlapReg
$LN33@OverlapReg:

; 393  : 			{
; 394  : 				// A span is earlier.  Use it.
; 395  : 
; 396  : 				x = *a;

	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR [ebx+12]
	mov	DWORD PTR _x$172447[ebp], eax
	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR _x$172447[ebp+4], edx
	mov	DWORD PTR _x$172447[ebp+8], eax

; 397  : 
; 398  : 				a++;

	add	ebx, 16					; 00000010H
$LN17@OverlapReg:

; 399  : 
; 400  : 				// A spans don't overlap, so begin merge loop with B first.
; 401  : 
; 402  : 				for(;;)
; 403  : 				{
; 404  : 					// If we run out of B spans or the B span doesn't overlap,
; 405  : 					// then the next A span can't either (because A spans don't
; 406  : 					// overlap) and we exit.
; 407  : 
; 408  : 					if(b == be || b->first + o.first > x.second)

	mov	edx, DWORD PTR _o$[ebp]
	add	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR _o$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	cmp	eax, esi
	ja	$LN117@OverlapReg
	jb	SHORT $LL13@OverlapReg
	cmp	edx, DWORD PTR _x$172447[ebp+8]
	ja	$LN117@OverlapReg
$LL13@OverlapReg:

; 409  : 						break;
; 410  : 
; 411  : 					do {x.second = mymax(x.second, b->second + o.second);}

	mov	edx, DWORD PTR [edi+8]
	add	edx, DWORD PTR _o$[ebp+8]
	mov	eax, DWORD PTR [edi+12]
	adc	eax, DWORD PTR _o$[ebp+12]
	cmp	esi, eax
	ja	SHORT $LN73@OverlapReg
	jb	SHORT $LN129@OverlapReg
	cmp	DWORD PTR _x$172447[ebp+8], edx
	ja	SHORT $LN73@OverlapReg
$LN129@OverlapReg:
	mov	DWORD PTR _x$172447[ebp+8], edx
	mov	esi, eax
$LN73@OverlapReg:

; 412  : 					while(++b != be && b->first + o.first <= x.second);

	add	edi, 16					; 00000010H
	cmp	edi, DWORD PTR _be$[ebp]
	je	SHORT $LN10@OverlapReg
	mov	edx, DWORD PTR _o$[ebp]
	add	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR _o$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	cmp	eax, esi
	jb	SHORT $LL13@OverlapReg
	ja	SHORT $LN10@OverlapReg
	cmp	edx, DWORD PTR _x$172447[ebp+8]
	jbe	SHORT $LL13@OverlapReg
$LN10@OverlapReg:

; 413  : 
; 414  : 					// If we run out of A spans or the A span doesn't overlap,
; 415  : 					// then the next B span can't either (because B spans don't
; 416  : 					// overlap) and we exit.
; 417  : 
; 418  : 					if(a == ae || a->first > x.second)

	cmp	ebx, DWORD PTR _ae$[ebp]
	je	SHORT $LN117@OverlapReg
	cmp	DWORD PTR [ebx+4], esi
	ja	SHORT $LN117@OverlapReg
	jb	SHORT $LL7@OverlapReg
	mov	eax, DWORD PTR [ebx]
	cmp	eax, DWORD PTR _x$172447[ebp+8]
	ja	SHORT $LN117@OverlapReg
	npad	3
$LL7@OverlapReg:

; 419  : 						break;
; 420  : 
; 421  : 					do {x.second = mymax(x.second, a->second);}

	mov	eax, DWORD PTR [ebx+12]
	mov	edx, DWORD PTR [ebx+8]
	cmp	esi, eax
	ja	SHORT $LN77@OverlapReg
	jb	SHORT $LN132@OverlapReg
	cmp	DWORD PTR _x$172447[ebp+8], edx
	ja	SHORT $LN77@OverlapReg
$LN132@OverlapReg:
	mov	DWORD PTR _x$172447[ebp+8], edx
	mov	esi, eax
$LN77@OverlapReg:

; 422  : 					while(++a != ae && a->first <= x.second);

	add	ebx, 16					; 00000010H
	cmp	ebx, DWORD PTR _ae$[ebp]
	je	SHORT $LN4@OverlapReg
	cmp	DWORD PTR [ebx+4], esi
	jb	SHORT $LL7@OverlapReg
	ja	SHORT $LN4@OverlapReg
	mov	eax, DWORD PTR [ebx]
	cmp	eax, DWORD PTR _x$172447[ebp+8]
	jbe	SHORT $LL7@OverlapReg
$LN4@OverlapReg:

; 399  : 
; 400  : 				// A spans don't overlap, so begin merge loop with B first.
; 401  : 
; 402  : 				for(;;)
; 403  : 				{
; 404  : 					// If we run out of B spans or the B span doesn't overlap,
; 405  : 					// then the next A span can't either (because A spans don't
; 406  : 					// overlap) and we exit.
; 407  : 
; 408  : 					if(b == be || b->first + o.first > x.second)

	cmp	edi, DWORD PTR _be$[ebp]
	jne	$LN17@OverlapReg
$LN117@OverlapReg:

; 423  : 				}
; 424  : 			}
; 425  : 
; 426  : 			// Flush span.
; 427  : 
; 428  : 			dst.Add(x);

	mov	eax, DWORD PTR [ecx+8]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR tv396[ebp], eax
	cmp	edx, DWORD PTR [ecx+12]
	jbe	SHORT $LN80@OverlapReg
	mov	ecx, DWORD PTR [ecx+16]
	cmp	ecx, eax
	jbe	SHORT $LN84@OverlapReg
	mov	eax, ecx
$LN84@OverlapReg:
	mov	ecx, DWORD PTR _dst$[ebp]
	add	eax, edx
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR [ecx+4]
	shl	eax, 4
	push	16					; 00000010H
	push	eax
	test	ecx, ecx
	je	SHORT $LN86@OverlapReg
	push	ecx
	call	__aligned_realloc
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN87@OverlapReg
$LN86@OverlapReg:
	call	__aligned_malloc
	add	esp, 8
$LN87@OverlapReg:
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv396[ebp]
$LN80@OverlapReg:
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _x$172447[ebp]
	shl	eax, 4
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _x$172447[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _x$172447[ebp+8]
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], esi
	mov	eax, DWORD PTR _ae$[ebp]
	cmp	ebx, eax
	jne	$LL35@OverlapReg
$LN34@OverlapReg:

; 429  : 		}
; 430  : 
; 431  : 		// Copy over leftover spans.
; 432  : 
; 433  : 		dst.Append(a, ae - a);

	sub	eax, ebx
	sar	eax, 4
	test	eax, eax
	je	SHORT $LN89@OverlapReg
	push	eax
	push	ebx
	mov	esi, ecx
	call	?Append@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXPBTSpan@Rasterizer@2@II@Z ; ssf::Array<ssf::Rasterizer::Span>::Append
	mov	ecx, DWORD PTR _dst$[ebp]
$LN89@OverlapReg:

; 434  : 
; 435  : 		for(; b != be; b++)

	cmp	edi, DWORD PTR _be$[ebp]
	je	$LN1@OverlapReg
$LN3@OverlapReg:

; 436  : 		{
; 437  : 			dst.Add(Span(b->first + o.first, b->second + o.second));

	mov	ebx, DWORD PTR _o$[ebp]
	add	ebx, DWORD PTR [edi]
	mov	eax, DWORD PTR _o$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edi+8]
	add	edx, DWORD PTR _o$[ebp+8]
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR $T502068[ebp+8], edx
	mov	edx, DWORD PTR [edi+12]
	adc	edx, DWORD PTR _o$[ebp+12]
	mov	DWORD PTR $T502068[ebp+4], eax
	mov	DWORD PTR $T502068[ebp+12], edx
	lea	edx, DWORD PTR [esi+1]
	cmp	edx, DWORD PTR [ecx+12]
	jbe	SHORT $LN99@OverlapReg
	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, esi
	ja	SHORT $LN104@OverlapReg
	mov	eax, esi
$LN104@OverlapReg:
	add	eax, edx
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR [ecx+4]
	shl	eax, 4
	push	16					; 00000010H
	push	eax
	test	ecx, ecx
	je	SHORT $LN105@OverlapReg
	push	ecx
	call	__aligned_realloc
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN106@OverlapReg
$LN105@OverlapReg:
	call	__aligned_malloc
	add	esp, 8
$LN106@OverlapReg:
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T502068[ebp+4]
$LN99@OverlapReg:
	lea	edx, DWORD PTR [esi+1]
	shl	esi, 4
	add	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR $T502068[ebp+8]
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR $T502068[ebp+12]
	add	edi, 16					; 00000010H
	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [esi+12], eax
	cmp	edi, DWORD PTR _be$[ebp]
	jne	$LN3@OverlapReg
$LN1@OverlapReg:

; 438  : 		}
; 439  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_OverlapRegion@Rasterizer@ssf@@AAEXAAV?$Array@TSpan@Rasterizer@ssf@@@2@0HH@Z ENDP ; ssf::Rasterizer::_OverlapRegion
_TEXT	ENDS
PUBLIC	?_EvaluateLine@Rasterizer@ssf@@AAEXVCPoint@@0@Z	; ssf::Rasterizer::_EvaluateLine
; Function compile flags: /Ogtp
;	COMDAT ?_EvaluateLine@Rasterizer@ssf@@AAEXVCPoint@@0@Z
_TEXT	SEGMENT
_xacc$171877 = -8					; size = 4
_xacc$171862 = -8					; size = 4
_invslope$171882 = -4					; size = 4
_invslope$171867 = -4					; size = 4
_p0$ = 8						; size = 8
_p1$ = 16						; size = 8
?_EvaluateLine@Rasterizer@ssf@@AAEXVCPoint@@0@Z PROC	; ssf::Rasterizer::_EvaluateLine, COMDAT
; _this$ = ecx

; 97   : 	{

	push	ebp
	mov	ebp, esp

; 98   : 		if(lastp != p0)

	mov	eax, DWORD PTR _p0$[ebp+4]
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _p0$[ebp]
	push	edi
	cmp	DWORD PTR [esi+16], ecx
	jne	SHORT $LN20@EvaluateLi
	cmp	DWORD PTR [esi+20], eax
	je	SHORT $LN15@EvaluateLi
$LN20@EvaluateLi:

; 99   : 		{
; 100  : 			_EvaluateLine(lastp, p0);

	push	eax
	mov	eax, DWORD PTR [esi+20]
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	push	eax
	push	ecx
	mov	ecx, esi
	call	?_EvaluateLine@Rasterizer@ssf@@AAEXVCPoint@@0@Z ; ssf::Rasterizer::_EvaluateLine
	mov	eax, DWORD PTR _p0$[ebp+4]
	mov	ecx, DWORD PTR _p0$[ebp]
$LN15@EvaluateLi:

; 101  : 		}
; 102  : 
; 103  : 		if(!fFirstSet)

	cmp	BYTE PTR [esi+4], 0
	jne	SHORT $LN14@EvaluateLi

; 104  : 		{
; 105  : 			firstp = p0; 

	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+12], eax

; 106  : 			fFirstSet = true;

	mov	BYTE PTR [esi+4], 1
$LN14@EvaluateLi:

; 107  : 		}
; 108  : 
; 109  : 		lastp = p1;

	mov	edx, DWORD PTR _p1$[ebp+4]
	mov	edi, DWORD PTR _p1$[ebp]
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+20], edx

; 110  : 
; 111  : 		// TODO: ((1<<FONT_SCALE)/2+-1)  
; 112  : 
; 113  : 		if(p1.y > p0.y)	// down

	cmp	edx, eax
	jle	$LN37@EvaluateLi

; 114  : 		{
; 115  : 			int xacc = p0.x << (8 - FONT_SCALE);

	shl	ecx, 5

; 116  : 
; 117  : 			// prestep p0.y down
; 118  : 
; 119  : 			int dy = p1.y - p0.y;
; 120  : 			int y = ((p0.y + ((1<<FONT_SCALE)/2-1)) & ~((1<<FONT_SCALE)-1)) + (1<<FONT_SCALE)/2;

	lea	ebx, DWORD PTR [eax+3]
	mov	DWORD PTR _xacc$171862[ebp], ecx
	and	ebx, -8					; fffffff8H
	mov	ecx, edx
	sub	ecx, eax
	add	ebx, 4

; 121  : 			int iy = y >> FONT_SCALE;

	mov	edi, ebx

; 122  : 
; 123  : 			p1.y = (p1.y - ((1<<FONT_SCALE)/2+1)) >> FONT_SCALE;

	lea	eax, DWORD PTR [edx-5]
	sar	eax, 3
	sar	edi, 3
	mov	DWORD PTR _p1$[ebp+4], eax

; 124  : 
; 125  : 			if(iy <= p1.y)

	cmp	edi, eax
	jg	$LN1@EvaluateLi

; 126  : 			{
; 127  : 				int invslope = ((p1.x - p0.x) << 8) / dy;

	mov	eax, DWORD PTR _p1$[ebp]
	sub	eax, DWORD PTR _p0$[ebp]
	shl	eax, 8
	cdq
	idiv	ecx

; 128  : 
; 129  : 				while(mEdgeNext + p1.y + 1 - iy > mEdgeHeapSize)

	mov	edx, DWORD PTR [esi+104]
	sub	edx, edi
	mov	DWORD PTR _invslope$171867[ebp], eax
	mov	eax, DWORD PTR _p1$[ebp+4]
	lea	ecx, DWORD PTR [edx+eax+1]
	cmp	ecx, DWORD PTR [esi+100]
	jbe	SHORT $LN10@EvaluateLi
	npad	1
$LL11@EvaluateLi:

; 130  : 					_ReallocEdgeBuffer(mEdgeHeapSize*2);

	mov	eax, DWORD PTR [esi+100]
	add	eax, eax
	lea	edx, DWORD PTR [eax*8]
	mov	DWORD PTR [esi+100], eax
	mov	eax, DWORD PTR [esi+96]
	push	edx
	push	eax
	call	_realloc
	mov	DWORD PTR [esi+96], eax
	mov	ecx, DWORD PTR [esi+104]
	mov	eax, DWORD PTR _p1$[ebp+4]
	sub	ecx, edi
	lea	edx, DWORD PTR [ecx+eax+1]
	add	esp, 8
	cmp	edx, DWORD PTR [esi+100]
	ja	SHORT $LL11@EvaluateLi
$LN10@EvaluateLi:

; 131  : 
; 132  : 				xacc += (invslope * (y - p0.y)) >> FONT_SCALE;

	sub	ebx, DWORD PTR _p0$[ebp+4]
	mov	ecx, DWORD PTR _xacc$171862[ebp]
	imul	ebx, DWORD PTR _invslope$171867[ebp]
	sar	ebx, 3
	add	ecx, ebx

; 133  : 
; 134  : 				while(iy <= p1.y)

	cmp	edi, eax
	jg	$LN1@EvaluateLi

; 131  : 
; 132  : 				xacc += (invslope * (y - p0.y)) >> FONT_SCALE;

	sub	ecx, -128				; ffffff80H
	npad	6
$LL9@EvaluateLi:

; 135  : 				{
; 136  : 					int ix = (xacc + 128) >> 8;
; 137  : 
; 138  : 					mpEdgeBuffer[mEdgeNext].next = mpScanBuffer[iy];

	mov	eax, DWORD PTR [esi+108]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	edx, DWORD PTR [esi+104]
	mov	ebx, DWORD PTR [esi+96]
	mov	DWORD PTR [ebx+edx*8], eax

; 139  : 					mpEdgeBuffer[mEdgeNext].posandflag = ix*2 + 1;

	mov	ebx, DWORD PTR [esi+96]
	mov	edx, ecx

; 140  : 
; 141  : 					mpScanBuffer[iy] = mEdgeNext++;
; 142  : 
; 143  : 					++iy;
; 144  : 					xacc += invslope;

	add	ecx, DWORD PTR _invslope$171867[ebp]
	sar	edx, 8
	lea	eax, DWORD PTR [edx+edx+1]
	mov	edx, DWORD PTR [esi+104]
	mov	DWORD PTR [ebx+edx*8+4], eax
	mov	edx, DWORD PTR [esi+104]
	mov	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [eax+edi*4], edx
	inc	DWORD PTR [esi+104]
	inc	edi
	cmp	edi, DWORD PTR _p1$[ebp+4]
	jle	SHORT $LL9@EvaluateLi

; 180  : 				}
; 181  : 			}
; 182  : 		}
; 183  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN37@EvaluateLi:

; 145  : 				}
; 146  : 			}
; 147  : 		}
; 148  : 		else if(p1.y < p0.y) // up

	jge	$LN1@EvaluateLi

; 149  : 		{
; 150  : 			int xacc = p1.x << (8 - FONT_SCALE);

	mov	ecx, edi
	shl	ecx, 5

; 151  : 
; 152  : 			// prestep p1.y down
; 153  : 
; 154  : 			int dy = p0.y - p1.y;
; 155  : 			int y = ((p1.y + ((1<<FONT_SCALE)/2-1)) & ~((1<<FONT_SCALE)-1)) + (1<<FONT_SCALE)/2;

	lea	ebx, DWORD PTR [edx+3]
	and	ebx, -8					; fffffff8H
	mov	DWORD PTR _xacc$171877[ebp], ecx
	mov	ecx, eax
	add	ebx, 4

; 156  : 			int iy = y >> FONT_SCALE;
; 157  : 
; 158  : 			p0.y = (p0.y - ((1<<FONT_SCALE)/2+1)) >> FONT_SCALE;

	add	eax, -5					; fffffffbH
	mov	edi, ebx
	sar	eax, 3
	sar	edi, 3
	sub	ecx, edx
	mov	DWORD PTR _p0$[ebp+4], eax

; 159  : 
; 160  : 			if(iy <= p0.y)

	cmp	edi, eax
	jg	$LN1@EvaluateLi

; 161  : 			{
; 162  : 				int invslope = ((p0.x - p1.x) << 8) / dy;

	mov	eax, DWORD PTR _p0$[ebp]
	sub	eax, DWORD PTR _p1$[ebp]
	shl	eax, 8
	cdq
	idiv	ecx

; 163  : 
; 164  : 				while(mEdgeNext + p0.y + 1 - iy > mEdgeHeapSize)

	mov	ecx, DWORD PTR [esi+104]
	sub	ecx, edi
	mov	DWORD PTR _invslope$171882[ebp], eax
	mov	eax, DWORD PTR _p0$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax+1]
	cmp	edx, DWORD PTR [esi+100]
	jbe	SHORT $LN3@EvaluateLi
$LL4@EvaluateLi:

; 165  : 					_ReallocEdgeBuffer(mEdgeHeapSize*2);

	mov	eax, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR [esi+96]
	add	eax, eax
	mov	DWORD PTR [esi+100], eax
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	push	ecx
	call	_realloc
	mov	DWORD PTR [esi+96], eax
	mov	edx, DWORD PTR [esi+104]
	mov	eax, DWORD PTR _p0$[ebp+4]
	sub	edx, edi
	lea	ecx, DWORD PTR [edx+eax+1]
	add	esp, 8
	cmp	ecx, DWORD PTR [esi+100]
	ja	SHORT $LL4@EvaluateLi
$LN3@EvaluateLi:

; 166  : 
; 167  : 				xacc += (invslope * (y - p1.y)) >> FONT_SCALE;

	sub	ebx, DWORD PTR _p1$[ebp+4]
	mov	ecx, DWORD PTR _xacc$171877[ebp]
	imul	ebx, DWORD PTR _invslope$171882[ebp]
	sar	ebx, 3
	add	ecx, ebx

; 168  : 
; 169  : 				while(iy <= p0.y)

	cmp	edi, eax
	jg	SHORT $LN1@EvaluateLi

; 166  : 
; 167  : 				xacc += (invslope * (y - p1.y)) >> FONT_SCALE;

	sub	ecx, -128				; ffffff80H
$LL2@EvaluateLi:

; 170  : 				{
; 171  : 					int ix = (xacc + 128) >> 8;
; 172  : 
; 173  : 					mpEdgeBuffer[mEdgeNext].next = mpScanBuffer[iy];

	mov	edx, DWORD PTR [esi+108]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	eax, DWORD PTR [esi+104]
	mov	ebx, DWORD PTR [esi+96]
	mov	DWORD PTR [ebx+eax*8], edx

; 174  : 					mpEdgeBuffer[mEdgeNext].posandflag = ix*2;

	mov	edx, DWORD PTR [esi+104]
	mov	ebx, DWORD PTR [esi+96]
	mov	eax, ecx

; 175  : 
; 176  : 					mpScanBuffer[iy] = mEdgeNext++;
; 177  : 
; 178  : 					++iy;
; 179  : 					xacc += invslope;

	add	ecx, DWORD PTR _invslope$171882[ebp]
	sar	eax, 8
	add	eax, eax
	mov	DWORD PTR [ebx+edx*8+4], eax
	mov	edx, DWORD PTR [esi+104]
	mov	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [eax+edi*4], edx
	inc	DWORD PTR [esi+104]
	inc	edi
	cmp	edi, DWORD PTR _p0$[ebp+4]
	jle	SHORT $LL2@EvaluateLi
$LN1@EvaluateLi:

; 180  : 				}
; 181  : 			}
; 182  : 		}
; 183  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_EvaluateLine@Rasterizer@ssf@@AAEXVCPoint@@0@Z ENDP	; ssf::Rasterizer::_EvaluateLine
_TEXT	ENDS
PUBLIC	?_EvaluateBezier@Rasterizer@ssf@@AAEXABVCPoint@@000@Z ; ssf::Rasterizer::_EvaluateBezier
; Function compile flags: /Ogtp
;	COMDAT ?_EvaluateBezier@Rasterizer@ssf@@AAEXABVCPoint@@000@Z
_TEXT	SEGMENT
_p01$171847 = -44					; size = 8
_p23$171849 = -36					; size = 8
tv540 = -32						; size = 4
_p0123$171852 = -28					; size = 8
tv546 = -24						; size = 4
_p012$171850 = -20					; size = 8
tv483 = -16						; size = 4
tv481 = -16						; size = 4
_this$ = -12						; size = 4
_p123$171851 = -8					; size = 8
tv518 = -4						; size = 4
_p0$ = 8						; size = 4
tv522 = 12						; size = 4
tv477 = 12						; size = 4
_p1$ = 12						; size = 4
tv566 = 16						; size = 4
_p2$ = 16						; size = 4
_p3$ = 20						; size = 4
?_EvaluateBezier@Rasterizer@ssf@@AAEXABVCPoint@@000@Z PROC ; ssf::Rasterizer::_EvaluateBezier, COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 67   : 		if(abs(p0.x + p2.x - p1.x*2) +
; 68   : 		   abs(p0.y + p2.y - p1.y*2) +
; 69   : 		   abs(p1.x + p3.x - p2.x*2) +
; 70   : 		   abs(p1.y + p3.y - p2.y*2) <= max(2, 1<<FONT_AA))

	mov	eax, DWORD PTR _p0$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv518[ebp], edx
	mov	edx, DWORD PTR _p2$[ebp]
	mov	DWORD PTR tv546[ebp], eax
	push	ebx
	push	esi
	mov	esi, DWORD PTR [edx+4]
	push	edi
	mov	edi, DWORD PTR [edx]
	mov	edx, DWORD PTR _p3$[ebp]
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _p1$[ebp]
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR tv522[ebp], esi
	mov	esi, DWORD PTR [edx]
	lea	edx, DWORD PTR [ebx+ebx]
	sub	eax, edx
	add	eax, edi
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR tv483[ebp], eax
	mov	eax, esi
	lea	edx, DWORD PTR [edi+edi]
	sub	eax, edx
	add	eax, ebx
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR tv483[ebp]
	add	edx, eax
	mov	eax, DWORD PTR tv522[ebp]
	mov	DWORD PTR tv540[ebp], esi
	lea	esi, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR _p3$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, esi
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR tv481[ebp], edx
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR tv481[ebp]
	add	edx, eax
	mov	eax, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR tv522[ebp]
	sub	eax, esi
	add	eax, DWORD PTR tv518[ebp]
	mov	DWORD PTR tv477[ebp], edx
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR tv477[ebp]
	add	edx, eax
	cmp	edx, 8
	jg	SHORT $LN2@EvaluateBe

; 71   : 		{
; 72   : 			_EvaluateLine(p0, p3);

	mov	eax, DWORD PTR _p3$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	push	edx
	mov	edx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	push	edx
	call	?_EvaluateLine@Rasterizer@ssf@@AAEXVCPoint@@0@Z ; ssf::Rasterizer::_EvaluateLine

; 93   : 		}
; 94   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN2@EvaluateBe:

; 73   : 		}
; 74   : 		else
; 75   : 		{
; 76   : 			CPoint p01, p12, p23, p012, p123, p0123;
; 77   : 
; 78   : 			p01.x = (p0.x + p1.x + 1) >> 1;
; 79   : 			p01.y = (p0.y + p1.y + 1) >> 1;

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR tv546[ebp]
	lea	edx, DWORD PTR [eax+ebx+1]
	mov	eax, DWORD PTR tv518[ebp]
	lea	esi, DWORD PTR [ecx+eax+1]

; 80   : 			p12.x = (p1.x + p2.x + 1) >> 1;

	lea	eax, DWORD PTR [ebx+edi+1]

; 81   : 			p12.y = (p1.y + p2.y + 1) >> 1;

	mov	ebx, DWORD PTR _p2$[ebp]
	mov	ebx, DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [ebx+ecx+1]
	mov	DWORD PTR tv566[ebp], ebx

; 82   : 			p23.x = (p2.x + p3.x + 1) >> 1;

	mov	ebx, DWORD PTR tv540[ebp]
	lea	edi, DWORD PTR [ebx+edi+1]

; 83   : 			p23.y = (p2.y + p3.y + 1) >> 1;

	mov	ebx, DWORD PTR tv566[ebp]
	sar	edi, 1
	mov	DWORD PTR _p23$171849[ebp], edi
	mov	edi, DWORD PTR _p3$[ebp]
	mov	edi, DWORD PTR [edi+4]
	sar	edx, 1
	sar	eax, 1
	mov	DWORD PTR _p01$171847[ebp], edx

; 84   : 			p012.x = (p01.x + p12.x + 1) >> 1;

	lea	edx, DWORD PTR [eax+edx+1]
	sar	ecx, 1
	sar	esi, 1
	lea	edi, DWORD PTR [ebx+edi+1]

; 85   : 			p012.y = (p01.y + p12.y + 1) >> 1;
; 86   : 			p123.x = (p12.x + p23.x + 1) >> 1;

	mov	ebx, DWORD PTR _p23$171849[ebp]
	lea	eax, DWORD PTR [ebx+eax+1]
	mov	DWORD PTR _p01$171847[ebp+4], esi
	lea	esi, DWORD PTR [ecx+esi+1]
	sar	edx, 1
	sar	eax, 1
	sar	edi, 1

; 87   : 			p123.y = (p12.y + p23.y + 1) >> 1;

	lea	ecx, DWORD PTR [edi+ecx+1]
	sar	ecx, 1
	mov	DWORD PTR _p012$171850[ebp], edx

; 88   : 			p0123.x = (p012.x + p123.x + 1) >> 1;

	lea	edx, DWORD PTR [eax+edx+1]
	sar	esi, 1
	mov	DWORD PTR _p123$171851[ebp], eax

; 89   : 			p0123.y = (p012.y + p123.y + 1) >> 1;

	lea	eax, DWORD PTR [ecx+esi+1]
	mov	DWORD PTR _p123$171851[ebp+4], ecx
	sar	edx, 1
	sar	eax, 1

; 90   : 
; 91   : 			_EvaluateBezier(p0, p01, p012, p0123);

	lea	ecx, DWORD PTR _p0123$171852[ebp]
	push	ecx
	mov	ecx, DWORD PTR _p0$[ebp]
	mov	DWORD PTR _p0123$171852[ebp], edx
	lea	edx, DWORD PTR _p012$171850[ebp]
	mov	DWORD PTR _p0123$171852[ebp+4], eax
	push	edx
	lea	eax, DWORD PTR _p01$171847[ebp]
	mov	DWORD PTR _p012$171850[ebp+4], esi
	mov	esi, DWORD PTR _this$[ebp]
	push	eax
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR _p23$171849[ebp+4], edi
	call	?_EvaluateBezier@Rasterizer@ssf@@AAEXABVCPoint@@000@Z ; ssf::Rasterizer::_EvaluateBezier

; 92   : 			_EvaluateBezier(p0123, p123, p23, p3);

	mov	edx, DWORD PTR _p3$[ebp]
	push	edx
	lea	eax, DWORD PTR _p23$171849[ebp]
	push	eax
	lea	ecx, DWORD PTR _p123$171851[ebp]
	push	ecx
	lea	edx, DWORD PTR _p0123$171852[ebp]
	push	edx
	mov	ecx, esi
	call	?_EvaluateBezier@Rasterizer@ssf@@AAEXABVCPoint@@000@Z ; ssf::Rasterizer::_EvaluateBezier

; 93   : 		}
; 94   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_EvaluateBezier@Rasterizer@ssf@@AAEXABVCPoint@@000@Z ENDP ; ssf::Rasterizer::_EvaluateBezier
_TEXT	ENDS
PUBLIC	??0Rasterizer@ssf@@QAE@XZ			; ssf::Rasterizer::Rasterizer
; Function compile flags: /Ogtp
;	COMDAT ??0Rasterizer@ssf@@QAE@XZ
_TEXT	SEGMENT
??0Rasterizer@ssf@@QAE@XZ PROC				; ssf::Rasterizer::Rasterizer, COMDAT
; _this$ = eax

; 41   : 	{

	xor	ecx, ecx
	mov	DWORD PTR [eax], OFFSET ??_7Rasterizer@ssf@@6B@
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+32], OFFSET ??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@
	mov	DWORD PTR [eax+36], ecx
	mov	DWORD PTR [eax+44], ecx
	mov	DWORD PTR [eax+40], ecx
	mov	edx, 4096				; 00001000H
	mov	DWORD PTR [eax+48], edx
	mov	DWORD PTR [eax+52], OFFSET ??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+64], ecx
	mov	DWORD PTR [eax+60], ecx
	mov	DWORD PTR [eax+68], edx
	mov	DWORD PTR [eax+72], OFFSET ??_7?$Array@TSpan@Rasterizer@ssf@@@ssf@@6B@
	mov	DWORD PTR [eax+76], ecx
	mov	DWORD PTR [eax+84], ecx
	mov	DWORD PTR [eax+80], ecx
	mov	DWORD PTR [eax+88], edx

; 42   : 		mpOverlayBuffer = NULL;

	mov	DWORD PTR [eax+112], ecx

; 43   : 		mOverlayWidth = mOverlayHeight = 0;

	mov	DWORD PTR [eax+120], ecx
	mov	DWORD PTR [eax+116], ecx

; 44   : 		mPathOffsetX = mPathOffsetY = 0;

	mov	DWORD PTR [eax+128], ecx
	mov	DWORD PTR [eax+124], ecx

; 45   : 		mOffsetX = mOffsetY = 0;

	mov	DWORD PTR [eax+136], ecx
	mov	DWORD PTR [eax+132], ecx

; 46   : 	}

	ret	0
??0Rasterizer@ssf@@QAE@XZ ENDP				; ssf::Rasterizer::Rasterizer
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 542  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	ecx
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
PUBLIC	__real@41f0000000000000
;	COMDAT __real@41f0000000000000
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\detail\hash_float_generic.hpp
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z
_TEXT	SEGMENT
tv165 = -16						; size = 8
tv88 = -16						; size = 8
tv167 = -12						; size = 4
tv95 = -12						; size = 4
_exp$ = -4						; size = 4
_v$ = 8							; size = 8
tv162 = 12						; size = 4
tv85 = 12						; size = 4
tv170 = 14						; size = 2
tv130 = 14						; size = 2
??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z PROC	; boost::hash_detail::float_hash_impl2<double>, COMDAT

; 38   :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 39   :             boost::hash_detail::call_frexp<T> frexp;
; 40   :             boost::hash_detail::call_ldexp<T> ldexp;
; 41   :         
; 42   :             int exp = 0;
; 43   : 
; 44   :             v = frexp(v, &exp);

	fld	QWORD PTR _v$[ebp]
	push	esi
	push	edi
	lea	eax, DWORD PTR _exp$[ebp]
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	DWORD PTR _exp$[ebp], 0
	call	_frexp

; 45   : 
; 46   :             // A postive value is easier to hash, so combine the
; 47   :             // sign with the exponent and use the absolute value.
; 48   :             if(v < 0) {

	fldz
	fcomp	ST(1)
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@float_hash

; 49   :                 v = -v;
; 50   :                 exp += limits<T>::max_exponent -
; 51   :                     limits<T>::min_exponent;

	add	DWORD PTR _exp$[ebp], 2045		; 000007fdH
	fchs
$LN4@float_hash:

; 52   :             }
; 53   : 
; 54   :             v = ldexp(v, limits<std::size_t>::digits);

	push	32					; 00000020H
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_ldexp

; 55   :             std::size_t seed = static_cast<std::size_t>(v);

	fnstcw	WORD PTR tv170[ebp]
	add	esp, 12					; 0000000cH
	movzx	eax, WORD PTR tv170[ebp]
	fld	ST(0)
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv167[ebp], eax
	fldcw	WORD PTR tv167[ebp]
	fistp	QWORD PTR tv165[ebp]
	mov	esi, DWORD PTR tv165[ebp]

; 56   :             v -= static_cast<T>(seed);

	mov	ecx, esi
	fldcw	WORD PTR tv170[ebp]
	mov	DWORD PTR tv162[ebp], ecx
	fild	DWORD PTR tv162[ebp]
	test	ecx, ecx
	jns	SHORT $LN25@float_hash
	fadd	QWORD PTR __real@41f0000000000000
$LN25@float_hash:
	fsubp	ST(1), ST(0)
	mov	edi, 2
$LN3@float_hash:

; 57   : 
; 58   :             // ceiling(digits(T) * log2(radix(T))/ digits(size_t)) - 1;
; 59   :             std::size_t const length
; 60   :                 = (limits<T>::digits *
; 61   :                         boost::static_log2<limits<T>::radix>::value
; 62   :                         + limits<std::size_t>::digits - 1)
; 63   :                 / limits<std::size_t>::digits;
; 64   : 
; 65   :             for(std::size_t i = 0; i != length; ++i)
; 66   :             {
; 67   :                 v = ldexp(v, limits<std::size_t>::digits);

	push	32					; 00000020H
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_ldexp

; 68   :                 std::size_t part = static_cast<std::size_t>(v);

	fnstcw	WORD PTR tv130[ebp]
	add	esp, 12					; 0000000cH
	movzx	eax, WORD PTR tv130[ebp]
	fld	ST(0)
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv95[ebp], eax
	fldcw	WORD PTR tv95[ebp]
	fistp	QWORD PTR tv88[ebp]
	mov	eax, DWORD PTR tv88[ebp]

; 69   :                 v -= static_cast<T>(part);

	mov	edx, eax
	fldcw	WORD PTR tv130[ebp]
	mov	DWORD PTR tv85[ebp], edx
	fild	DWORD PTR tv85[ebp]
	test	edx, edx
	jns	SHORT $LN26@float_hash
	fadd	QWORD PTR __real@41f0000000000000
$LN26@float_hash:

; 70   :                 hash_float_combine(seed, part);

	mov	ecx, esi
	fsubp	ST(1), ST(0)
	shl	ecx, 6
	mov	edx, esi
	shr	edx, 2
	add	ecx, eax
	add	edx, ecx
	xor	esi, edx
	dec	edi
	jne	SHORT $LN3@float_hash

; 71   :             }
; 72   : 
; 73   :             hash_float_combine(seed, exp);

	mov	ecx, esi
	fstp	ST(0)
	shl	ecx, 6
	add	ecx, DWORD PTR _exp$[ebp]
	mov	eax, esi
	shr	eax, 2
	add	eax, ecx

; 74   : 
; 75   :             return seed;
; 76   :         }

	pop	edi
	xor	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z ENDP	; boost::hash_detail::float_hash_impl2<double>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$_Pair_base@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z
_TEXT	SEGMENT
__Val2$ = 8						; size = 4
??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$_Pair_base@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z PROC ; std::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>, COMDAT
; _this$ = eax
; __Val1$ = ecx

; 163  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[ebp]
	mov	DWORD PTR [eax], edx
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+4], dl

; 164  : 		}

	pop	ebp
	ret	4
??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$_Pair_base@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z ENDP ; std::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::_Pair_base<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$_Pair_base@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z
_TEXT	SEGMENT
__Val2$ = 8						; size = 4
??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$_Pair_base@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z PROC ; std::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>, COMDAT
; _this$ = eax
; __Val1$ = ecx

; 163  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR __Val2$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	cl, BYTE PTR [edx]
	mov	BYTE PTR [eax+8], cl

; 164  : 		}

	pop	ebp
	ret	4
??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$_Pair_base@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z ENDP ; std::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::_Pair_base<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$01@detail@tuples@boost@@SAABU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z
_TEXT	SEGMENT
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$01@detail@tuples@boost@@SAABU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z PROC ; boost::tuples::detail::drop_front<2>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call, COMDAT
; _tup$ = eax

; 98   :             return next::call(tup).tail;

	add	eax, 5

; 99   :         }

	ret	0
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$01@detail@tuples@boost@@SAABU?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ENDP ; boost::tuples::detail::drop_front<2>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@IPAU1234@@Z
_TEXT	SEGMENT
$T514194 = -16						; size = 12
$T514202 = -4						; size = 4
??$_Allocate@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@IPAU1234@@Z PROC ; std::_Allocate<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >, COMDAT
; __Count$ = eax

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)
; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)
; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	eax, 89478485				; 05555555H
	ja	SHORT $LN1@Allocate
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 4
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	jne	SHORT $LN7@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	lea	ecx, DWORD PTR $T514202[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T514194[ebp]
	mov	DWORD PTR $T514202[ebp], 0
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T514194[ebp]
	push	edx
	mov	DWORD PTR $T514194[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN14@Allocate:
$LN7@Allocate:

; 40   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@Allocate:
??$_Allocate@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@YAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@IPAU1234@@Z ENDP ; std::_Allocate<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ??$get@$01IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$hash@N@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z
_TEXT	SEGMENT
??$get@$01IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$hash@N@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z PROC ; boost::tuples::get<2,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >, COMDAT
; _c$ = eax

; 226  :   typedef BOOST_DEDUCED_TYPENAME detail::drop_front<N>::BOOST_NESTED_TEMPLATE
; 227  :       apply<cons<HT, TT> > impl;
; 228  :   typedef BOOST_DEDUCED_TYPENAME impl::type cons_element;
; 229  :   return impl::call(c).head;

	add	eax, 5

; 230  : }

	ret	0
??$get@$01IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$hash@N@1@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ENDP ; boost::tuples::get<2,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z
_TEXT	SEGMENT
__Val2$ = 8						; size = 4
??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z PROC ; std::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>, COMDAT
; _this$ = eax
; __Val1$ = ecx

; 247  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[ebp]
	mov	DWORD PTR [eax], edx
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+4], dl

; 248  : 		}

	pop	ebp
	ret	4
??$?0AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@QAE@AAPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@$$QA_N@Z ENDP ; std::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool>::pair<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,bool><boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > * &,bool>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z
_TEXT	SEGMENT
__Val2$ = 8						; size = 4
??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z PROC ; std::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>, COMDAT
; _this$ = eax
; __Val1$ = ecx

; 247  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR __Val2$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	cl, BYTE PTR [edx]
	mov	BYTE PTR [eax+8], cl

; 248  : 		}

	pop	ebp
	ret	4
??$?0V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@QAE@$$QAV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@AA_N@Z ENDP ; std::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool>::pair<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool><boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,bool &>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\pp_perfect_fwd.hpp
_TEXT	ENDS
;	COMDAT ??$?0N@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@AAN@Z
_TEXT	SEGMENT
??$?0N@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@AAN@Z PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type<double>, COMDAT
; _this$ = eax
; _t0$ = ecx

; 124  : BOOST_FLYWEIGHT_PERFECT_FWD_OVERLOADS

	mov	DWORD PTR [eax+24], 0
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [eax]
	ret	0
??$?0N@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@AAN@Z ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type<double>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\auto_space.hpp
_TEXT	ENDS
;	COMDAT ?swap@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAU1234@@Z
_TEXT	SEGMENT
?swap@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAU1234@@Z PROC ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap, COMDAT
; _this$ = ecx
; _x$ = eax

; 71   :     if(al_!=x.al_)adl_swap(al_,x.al_);
; 72   :     std::swap(n_,x.n_);

	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [eax+4], edx

; 73   :     std::swap(data_,x.data_);

	mov	esi, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+8], esi
	mov	DWORD PTR [eax+8], edx
	pop	esi

; 74   :   }

	ret	0
?swap@?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAU1234@@Z ENDP ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
_TEXT	ENDS
;	COMDAT ?key_from_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@CAABNABVass_synth_priv@@@Z
_TEXT	SEGMENT
?key_from_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@CAABNABVass_synth_priv@@@Z PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_from_value, COMDAT
; _x$ = eax

; 107  :       KeyFromValue k;
; 108  :       return k(x);

	add	eax, 16					; 00000010H

; 109  :     }

	ret	0
?key_from_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@CAABNABVass_synth_priv@@@Z ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::key_from_value
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\auto_space.hpp
_TEXT	ENDS
;	COMDAT ??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = eax

; 62   :     if(n_)al_.deallocate(data_,n_);

	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@auto_space
	mov	eax, DWORD PTR [eax+8]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
$LN4@auto_space:

; 63   :   }

	ret	0
??1?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z
_TEXT	SEGMENT
??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z PROC ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = esi
; _n$ = ecx

; 58   :   {}

	mov	DWORD PTR [esi+4], ecx
	test	ecx, ecx
	je	SHORT $LN3@auto_space@2
	call	?allocate@?$allocator@I@std@@QAEPAII@Z	; std::allocator<unsigned int>::allocate
	mov	DWORD PTR [esi+8], eax
	mov	eax, esi
	ret	0
$LN3@auto_space@2:
	xor	eax, eax
	mov	DWORD PTR [esi+8], eax
	mov	eax, esi
	ret	0
??0?$auto_space@IV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z ENDP ; boost::multi_index::detail::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<unsigned int,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ?swap@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAV1234@@Z
_TEXT	SEGMENT
?swap@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAV1234@@Z PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap, COMDAT
; _this$ = ecx
; _x$ = eax

; 139  :     std::swap(size_,x.size_);

	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx

; 140  :     spc.swap(x.spc);

	mov	esi, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+8], esi
	mov	DWORD PTR [eax+8], edx
	mov	esi, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx+12], esi
	mov	DWORD PTR [eax+12], edx
	pop	esi

; 141  :   }

	ret	0
?swap@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXAAV1234@@Z ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::swap
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
_TEXT	ENDS
;	COMDAT ??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABNXZ
_TEXT	SEGMENT
??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABNXZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator double const &, COMDAT
; _this$ = eax

; 80   :       if(value_ptr)return key_from_value(*value_ptr);

	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN1@operator@7
	lea	eax, DWORD PTR [ecx+16]
$LN1@operator@7:

; 81   :       else         return *key_ptr();
; 82   :     }

	ret	0
??Brep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QBEABNXZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::operator double const &
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ?get_allocator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ
_TEXT	SEGMENT
?get_allocator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 208  :     return this->final().get_allocator();
; 209  :   }

	ret	0
?get_allocator@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBE?AV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@XZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::get_allocator
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ
_TEXT	SEGMENT
??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator double const &, COMDAT
; _this$ = eax

; 68   :   operator const Key&()const{return x;}

	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN3@operator@8
	lea	eax, DWORD PTR [ecx+16]
$LN3@operator@8:
	ret	0
??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator double const &
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ?final_size_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEIXZ
_TEXT	SEGMENT
?final_size_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEIXZ PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_size_, COMDAT
; _this$ = eax

; 146  :   std::size_t final_size_()const{return final().size_();}

	test	eax, eax
	je	SHORT $LN5@final_size
	mov	eax, DWORD PTR [eax+32]
	ret	0
$LN5@final_size:
	xor	eax, eax
	mov	eax, DWORD PTR [eax+44]
	ret	0
?final_size_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IBEIXZ ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_size_
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\auto_space.hpp
_TEXT	ENDS
;	COMDAT ??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z
_TEXT	SEGMENT
??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z PROC ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = esi
; _n$ = ecx

; 58   :   {}

	mov	DWORD PTR [esi+4], ecx
	test	ecx, ecx
	je	SHORT $LN3@auto_space@3
	call	?allocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocate
	mov	DWORD PTR [esi+8], eax
	mov	eax, esi
	ret	0
$LN3@auto_space@3:
	xor	eax, eax
	mov	DWORD PTR [esi+8], eax
	mov	eax, esi
	ret	0
??0?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@I@Z ENDP ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ?clear@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXXZ
_TEXT	SEGMENT
?clear@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXXZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::clear, COMDAT
; _this$ = ecx

; 134  :     for(pointer x=begin(),y=end();x!=y;++x)x->next()=x;

	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	cmp	eax, ecx
	je	SHORT $LN1@clear
	npad	4
$LL3@clear:
	mov	DWORD PTR [eax], eax
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL3@clear
$LN1@clear:

; 135  :   }

	ret	0
?clear@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAEXXZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::clear
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ?link_point@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAE_NABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@Uhashed_unique_tag@234@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
___formal$ = 12						; size = 1
?link_point@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAE_NABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@Uhashed_unique_tag@234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link_point, COMDAT
; _pos$ = edi

; 979  :   {

	push	ebp
	mov	ebp, esp

; 980  :     node_impl_pointer x=pos->next();

	mov	eax, DWORD PTR [edi]
	push	esi
	mov	esi, DWORD PTR [eax]

; 981  :     while(x!=pos){

	cmp	esi, eax
	je	SHORT $LN2@link_point

; 982  :       if(eq(key(v),key(node_type::from_impl(x)->value()))){

	mov	eax, DWORD PTR _v$[ebp]
	call	??B?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QBEABNXZ ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::operator double const &
	mov	edx, eax
$LL3@link_point:
	test	esi, esi
	je	SHORT $LN10@link_point
	lea	eax, DWORD PTR [esi-40]
	jmp	SHORT $LN11@link_point
$LN10@link_point:
	xor	eax, eax
$LN11@link_point:
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN19@link_point
	lea	eax, DWORD PTR [ecx+16]
$LN19@link_point:
	fld	QWORD PTR [edx]
	fld	QWORD PTR [eax]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN37@link_point

; 985  :       }
; 986  :       x=x->next();

	mov	esi, DWORD PTR [esi]
	cmp	esi, DWORD PTR [edi]
	jne	SHORT $LL3@link_point
$LN2@link_point:

; 987  :     }
; 988  :     return true;

	mov	al, 1
	pop	esi

; 989  :   }

	pop	ebp
	ret	8
$LN37@link_point:

; 983  :         pos=x;

	mov	DWORD PTR [edi], esi

; 984  :         return false;

	xor	al, al
	pop	esi

; 989  :   }

	pop	ebp
	ret	8
?link_point@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAE_NABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@Uhashed_unique_tag@234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link_point
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?bucket_count@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ
_TEXT	SEGMENT
?bucket_count@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket_count, COMDAT
; _this$ = eax

; 520  :   size_type bucket_count()const{return buckets.size();}

	mov	eax, DWORD PTR [eax+4]
	ret	0
?bucket_count@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket_count
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?size@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ
_TEXT	SEGMENT
?size@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::size, COMDAT
; _this$ = eax

; 214  :   size_type size()const{return this->final_size_();}

	test	eax, eax
	je	SHORT $LN7@size
	mov	eax, DWORD PTR [eax+32]
	ret	0
$LN7@size:
	xor	eax, eax
	mov	eax, DWORD PTR [eax+44]
	ret	0
?size@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIXZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z
_TEXT	SEGMENT
$T514692 = -16						; size = 12
$T514690 = -4						; size = 4
?allocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z PROC ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocate, COMDAT

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate
	mov	DWORD PTR $T514690[ebp], eax
	lea	eax, DWORD PTR $T514690[ebp]
	push	eax
	lea	ecx, DWORD PTR $T514692[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T514692[ebp]
	push	ecx
	mov	DWORD PTR $T514692[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN14@allocate:
$LN1@allocate:

; 188  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@allocate:
?allocate@?$allocator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@I@Z ENDP ; std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > >::allocate
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\auto_space.hpp
_TEXT	ENDS
;	COMDAT ??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = eax

; 62   :     if(n_)al_.deallocate(data_,n_);

	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@auto_space@4
	mov	eax, DWORD PTR [eax+8]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
$LN4@auto_space@4:

; 63   :   }

	ret	0
??1?$auto_space@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~auto_space<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> >,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ?calculate_max_load@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXXZ
_TEXT	SEGMENT
tv137 = -12						; size = 8
tv150 = -8						; size = 4
tv140 = -8						; size = 4
_fml$ = -4						; size = 4
tv143 = -2						; size = 2
?calculate_max_load@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXXZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::calculate_max_load, COMDAT
; _this$ = ecx

; 1038 :   {

	push	ebp
	mov	ebp, esp

; 1039 :     float fml=static_cast<float>(mlf*bucket_count());

	mov	eax, DWORD PTR [ecx+4]
	fild	DWORD PTR [ecx+4]
	sub	esp, 12					; 0000000cH
	test	eax, eax
	jns	SHORT $LN13@calculate_
	fadd	DWORD PTR __real@4f800000
$LN13@calculate_:
	fmul	DWORD PTR [ecx+20]

; 1040 :     max_load=(std::numeric_limits<size_type>::max)();

	mov	DWORD PTR [ecx+24], -1
	fstp	DWORD PTR _fml$[ebp]

; 1041 :     if(max_load>fml)max_load=static_cast<size_type>(fml);

	fld	DWORD PTR _fml$[ebp]
	fcom	QWORD PTR __real@41f0000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@calculate_
	fnstcw	WORD PTR tv143[ebp]
	movzx	eax, WORD PTR tv143[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv140[ebp], eax
	fldcw	WORD PTR tv140[ebp]
	fistp	QWORD PTR tv137[ebp]
	mov	edx, DWORD PTR tv137[ebp]
	mov	DWORD PTR [ecx+24], edx
	fldcw	WORD PTR tv143[ebp]

; 1042 :   }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@calculate_:

; 1041 :     if(max_load>fml)max_load=static_cast<size_type>(fml);

	fstp	ST(0)

; 1042 :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?calculate_max_load@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXXZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::calculate_max_load
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
_TEXT	ENDS
;	COMDAT ?allocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ
_TEXT	SEGMENT
$T514761 = -16						; size = 12
$T514744 = -4						; size = 4
?allocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::allocate_node, COMDAT

; 459  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 460  :     return &*bfm_allocator::member.allocate(1);

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate_n
	mov	DWORD PTR $T514744[ebp], eax
	lea	eax, DWORD PTR $T514744[ebp]
	push	eax
	lea	ecx, DWORD PTR $T514761[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T514761[ebp]
	push	ecx
	mov	DWORD PTR $T514761[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN17@allocate_n:
$LN1@allocate_n:

; 461  :   }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@allocate_n:
?allocate_node@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@XZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::allocate_node
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = eax
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN6@bucket_arr
	mov	eax, DWORD PTR [eax+12]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
$LN6@bucket_arr:
	ret	0
??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ??1?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@XZ
_TEXT	SEGMENT
??1?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@XZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::~hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>, COMDAT
; _this$ = eax

; 637  :     /* the container is guaranteed to be empty by now */
; 638  :   }

	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN8@hashed_ind
	mov	eax, DWORD PTR [eax+16]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
$LN8@hashed_ind:
	ret	0
??1?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@XZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::~hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\header_holder.hpp
_TEXT	ENDS
;	COMDAT ??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >, COMDAT
; _this$ = eax

; 36   :   ~header_holder(){final().deallocate_node(&*member);}

	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
$T514897 = -16						; size = 12
$T514864 = -4						; size = 4
??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >, COMDAT
; _this$ = esi

; 35   :   header_holder():member(final().allocate_node()){}

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN11@header_hol
	mov	DWORD PTR [esi], eax
	mov	eax, esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@header_hol:
	lea	eax, DWORD PTR $T514864[ebp]
	push	eax
	lea	ecx, DWORD PTR $T514897[ebp]
	mov	DWORD PTR $T514864[ebp], 0
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T514897[ebp]
	push	ecx
	mov	DWORD PTR $T514897[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN24@header_hol:
$LN23@header_hol:
	int	3
??0?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_iterator.hpp
_TEXT	ENDS
;	COMDAT ??D?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@XZ
_TEXT	SEGMENT
??D?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@XZ PROC ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator*, COMDAT
; _this$ = eax

; 50   :     return node->value();

	mov	eax, DWORD PTR [eax]

; 51   :   }

	ret	0
??D?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QBEABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@3@XZ ENDP ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator*
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
_TEXT	ENDS
;	COMDAT ??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z
_TEXT	SEGMENT
??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type, COMDAT
; _this$ = eax
; _x$ = ecx

; 68   :     {

	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 69   :       if(!x.value_ptr)new(key_ptr())key_type(*x.key_ptr());

	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN4@rep_type
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [eax]
$LN4@rep_type:

; 70   :     }

	ret	0
??0rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@ABV01234@@Z ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::rep_type
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ?add_ref@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEJXZ
_TEXT	SEGMENT
?add_ref@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEJXZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_ref, COMDAT
; _this$ = eax

; 76   :   long add_ref()const{return ++ref;}

	lea	ecx, DWORD PTR [eax+32]
	mov	eax, 1
	lock	 xadd	 DWORD PTR [ecx], eax
	inc	eax
	ret	0
?add_ref@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABEJXZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::add_ref
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@ABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@@Z
_TEXT	SEGMENT
??0?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@ABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@@Z PROC ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >, COMDAT
; _this$ = eax
; _h_$ = ecx

; 93   :   {

	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 94   :     if(TrackingHelper::entry(*this).add_ref()==1){

	add	ecx, 32					; 00000020H
	mov	edx, 1
	lock	 xadd	 DWORD PTR [ecx], edx
	inc	edx
	cmp	edx, 1
	jne	SHORT $LN28@refcounted

; 95   :       TrackingHelper::entry(*this).add_deleter();

	mov	ecx, DWORD PTR [eax]
	inc	DWORD PTR [ecx+36]
$LN28@refcounted:

; 96   :     }
; 97   :   }

	ret	0
??0?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@ABQBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@123@@Z ENDP ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
_TEXT	ENDS
;	COMDAT ?value_cted@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABE_NXZ
_TEXT	SEGMENT
?value_cted@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABE_NXZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::value_cted, COMDAT
; _this$ = eax

; 98   :     bool  value_cted()const{return value_ptr==spc_ptr();}

	xor	ecx, ecx
	cmp	DWORD PTR [eax+24], eax
	sete	al
	ret	0
?value_cted@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABE_NXZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::value_cted
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gass_synth_priv@@QAEPAXI@Z
_TEXT	SEGMENT
??_Gass_synth_priv@@QAEPAXI@Z PROC			; ass_synth_priv::`scalar deleting destructor', COMDAT
; _this$ = esi
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0
	mov	eax, esi
	ret	0
??_Gass_synth_priv@@QAEPAXI@Z ENDP			; ass_synth_priv::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type, COMDAT
; _this$ = eax

; 73   :     {

	push	esi

; 74   :       if(!value_ptr)       key_ptr()->~key_type();

	mov	esi, DWORD PTR [eax+24]
	test	esi, esi
	je	SHORT $LN12@rep_type@2

; 75   :       else if(value_cted())value_ptr->~value_type();

	cmp	esi, eax
	jne	SHORT $LN12@rep_type@2
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0
$LN12@rep_type@2:
	pop	esi

; 76   :     }

	ret	0
??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::~refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>, COMDAT
; _this$ = eax
	push	esi
	mov	esi, DWORD PTR [eax+24]
	test	esi, esi
	je	SHORT $LN14@refcounted@2
	cmp	esi, eax
	jne	SHORT $LN14@refcounted@2
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0
$LN14@refcounted@2:
	pop	esi
	ret	0
??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::~refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_G?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAEPAXI@Z
_TEXT	SEGMENT
??_G?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAEPAXI@Z PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::`scalar deleting destructor', COMDAT
; _this$ = edi
	push	esi
	mov	esi, DWORD PTR [edi+24]
	test	esi, esi
	je	SHORT $LN23@scalar@25
	cmp	esi, edi
	jne	SHORT $LN23@scalar@25
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0
$LN23@scalar@25:
	mov	eax, edi
	pop	esi
	ret	0
??_G?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAEPAXI@Z ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\detail\allocator_utilities.hpp
_TEXT	ENDS
;	COMDAT ??$destroy@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z
_TEXT	SEGMENT
??$destroy@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z PROC ; boost::detail::allocator::destroy<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _p$ = eax

; 192  : {

	push	esi

; 193  : 
; 194  : #if BOOST_WORKAROUND(__SUNPRO_CC,BOOST_TESTED_AT(0x590))
; 195  :   const_cast<Type*>(p)->~Type();
; 196  : #else
; 197  :   p->~Type();

	mov	esi, DWORD PTR [eax+24]
	test	esi, esi
	je	SHORT $LN19@destroy@2
	cmp	esi, eax
	jne	SHORT $LN19@destroy@2
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0
$LN19@destroy@2:
	pop	esi

; 198  : #endif
; 199  : 
; 200  : }

	ret	0
??$destroy@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z ENDP ; boost::detail::allocator::destroy<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Construct@HABH@std@@YAXPAHABH@Z
_TEXT	SEGMENT
??$_Construct@HABH@std@@YAXPAHABH@Z PROC		; std::_Construct<int,int const &>, COMDAT
; __Ptr$ = eax
; __Val$ = ecx

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

	test	eax, eax
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@Construct:

; 49   : 	}

	ret	0
??$_Construct@HABH@std@@YAXPAHABH@Z ENDP		; std::_Construct<int,int const &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z
_TEXT	SEGMENT
??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z PROC ; std::_Construct<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>, COMDAT
; __Ptr$ = eax
; __Val$ = ecx

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

	test	eax, eax
	je	SHORT $LN3@Construct@2
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN3@Construct@2:

; 49   : 	}

	ret	0
??$_Construct@U?$pair@_K_K@std@@ABU12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z ENDP ; std::_Construct<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z PROC	; std::allocator<int>::construct<int &>, COMDAT
; __Ptr$ = eax
; __Val$ = ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

	test	eax, eax
	je	SHORT $LN3@construct
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@construct:

; 209  : 		}

	ret	0
??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z ENDP	; std::allocator<int>::construct<int &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$?0$$CB_K$$CB_K@?$_Pair_base@_K_K@std@@QAE@$$QB_K0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??$?0$$CB_K$$CB_K@?$_Pair_base@_K_K@std@@QAE@$$QB_K0@Z PROC ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >, COMDAT
; __Val1$ = edx
; __Val2$ = ecx

; 163  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], ecx
	pop	esi

; 164  : 		}

	pop	ebp
	ret	4
??$?0$$CB_K$$CB_K@?$_Pair_base@_K_K@std@@QAE@$$QB_K0@Z ENDP ; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$?0AA_KAA_K@?$_Pair_base@_K_K@std@@QAE@AA_K0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??$?0AA_KAA_K@?$_Pair_base@_K_K@std@@QAE@AA_K0@Z PROC	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>, COMDAT
; __Val1$ = edx
; __Val2$ = ecx

; 163  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], ecx
	pop	esi

; 164  : 		}

	pop	ebp
	ret	4
??$?0AA_KAA_K@?$_Pair_base@_K_K@std@@QAE@AA_K0@Z ENDP	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$?0_J_J@?$_Pair_base@_K_K@std@@QAE@$$QA_J0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??$?0_J_J@?$_Pair_base@_K_K@std@@QAE@$$QA_J0@Z PROC	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><__int64,__int64>, COMDAT
; __Val1$ = edx
; __Val2$ = ecx

; 163  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], ecx
	pop	esi

; 164  : 		}

	pop	ebp
	ret	4
??$?0_J_J@?$_Pair_base@_K_K@std@@QAE@$$QA_J0@Z ENDP	; std::_Pair_base<unsigned __int64,unsigned __int64>::_Pair_base<unsigned __int64,unsigned __int64><__int64,__int64>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ?at@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@I@Z
_TEXT	SEGMENT
?at@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@I@Z PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::at, COMDAT
; _this$ = eax
; _n$ = edx

; 122  :   pointer at(std::size_t n)const{return buckets()+n;}

	mov	ecx, DWORD PTR [eax+12]
	lea	eax, DWORD PTR [ecx+edx*4]
	ret	0
?at@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@I@Z ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::at
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?first_nonempty@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z
_TEXT	SEGMENT
?first_nonempty@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::first_nonempty, COMDAT
; _this$ = ecx
; _n$ = eax

; 127  :       pointer x=at(n);

	mov	edx, DWORD PTR [ecx+12]
	lea	ecx, DWORD PTR [edx+eax*4]

; 128  :       if(x->next()!=x)return n;

	cmp	DWORD PTR [ecx], ecx
	jne	SHORT $LN17@first_none
	npad	6
$LL4@first_none:

; 126  :     for(;;++n){

	add	ecx, 4
	inc	eax

; 128  :       if(x->next()!=x)return n;

	cmp	DWORD PTR [ecx], ecx
	je	SHORT $LL4@first_none
$LN17@first_none:

; 129  :     }
; 130  :   }

	ret	0
?first_nonempty@?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QBEII@Z ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::first_nonempty
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ?erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z
_TEXT	SEGMENT
?erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_, COMDAT
; _x$ = eax

; 99   :   {

	push	esi

; 100  :     boost::detail::allocator::destroy(&x->value());

	mov	esi, DWORD PTR [eax+24]
	test	esi, esi
	je	SHORT $LN23@erase_
	cmp	esi, eax
	jne	SHORT $LN23@erase_
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0
$LN23@erase_:
	pop	esi

; 101  :   }

	ret	0
?erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ?unlink@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z
_TEXT	SEGMENT
?unlink@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unlink, COMDAT
; _x$ = eax

; 1019 :     node_impl_type::unlink(x->impl());

	test	eax, eax
	je	SHORT $LN5@unlink
	lea	ecx, DWORD PTR [eax+40]
	jmp	SHORT $LN6@unlink
$LN5@unlink:
	xor	ecx, ecx
$LN6@unlink:
	mov	edx, DWORD PTR [ecx]
	mov	eax, edx
	cmp	DWORD PTR [eax], ecx
	je	SHORT $LN23@unlink
$LL8@unlink:
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax], ecx
	jne	SHORT $LL8@unlink
$LN23@unlink:
	mov	DWORD PTR [eax], edx

; 1020 :   };

	ret	0
?unlink@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unlink
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z
_TEXT	SEGMENT
?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase_, COMDAT
; _this$ = eax
; _x$ = edi

; 724  :   {

	push	esi
	mov	esi, eax

; 725  :     unlink(x);

	test	edi, edi
	je	SHORT $LN7@erase_@2
	lea	ecx, DWORD PTR [edi+40]
	jmp	SHORT $LN8@erase_@2
$LN7@erase_@2:
	xor	ecx, ecx
$LN8@erase_@2:
	mov	edx, DWORD PTR [ecx]
	mov	eax, edx
	cmp	DWORD PTR [eax], ecx
	je	SHORT $LN9@erase_@2
$LL10@erase_@2:
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax], ecx
	jne	SHORT $LL10@erase_@2
$LN9@erase_@2:
	mov	DWORD PTR [eax], edx

; 726  :     first_bucket=buckets.first_nonempty(first_bucket);

	mov	ecx, DWORD PTR [esi+28]
	mov	eax, DWORD PTR [esi+16]
	lea	edx, DWORD PTR [ecx*4]
	add	eax, edx
	cmp	DWORD PTR [eax], eax
	jne	SHORT $LN67@erase_@2

; 725  :     unlink(x);

	mov	eax, DWORD PTR [esi+16]
	add	eax, edx

; 726  :     first_bucket=buckets.first_nonempty(first_bucket);

$LL26@erase_@2:
	add	eax, 4
	inc	ecx
	cmp	DWORD PTR [eax], eax
	je	SHORT $LL26@erase_@2
$LN67@erase_@2:
	mov	DWORD PTR [esi+28], ecx

; 727  :     super::erase_(x);

	mov	esi, DWORD PTR [edi+24]
	test	esi, esi
	je	SHORT $LN59@erase_@2
	cmp	esi, edi
	jne	SHORT $LN59@erase_@2
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0
$LN59@erase_@2:
	pop	esi

; 728  : 
; 729  : #if defined(BOOST_MULTI_INDEX_ENABLE_SAFE_MODE)
; 730  :     detach_iterators(x);
; 731  : #endif
; 732  :   }

	ret	0
?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase_
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
_TEXT	ENDS
;	COMDAT ?erase_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z
_TEXT	SEGMENT
?erase_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_, COMDAT
; _this$ = eax
; _x$ = ecx

; 528  :     --node_count;

	dec	DWORD PTR [eax+44]
	push	edi
	mov	edi, ecx

; 529  :     super::erase_(x);

	add	eax, 12					; 0000000cH
	call	?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase_

; 530  :     deallocate_node(x);

	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	pop	edi

; 531  :   }

	ret	0
?erase_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::erase_
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ?final_erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z
_TEXT	SEGMENT
?final_erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_erase_, COMDAT
; _this$ = eax
; _x$ = ecx

; 155  :   void final_erase_(final_node_type* x){final().erase_(x);}

	push	edi
	mov	edi, ecx
	test	eax, eax
	je	SHORT $LN5@final_eras
	add	eax, -12				; fffffff4H
	jmp	SHORT $LN6@final_eras
$LN5@final_eras:
	xor	eax, eax
$LN6@final_eras:
	dec	DWORD PTR [eax+44]
	add	eax, 12					; 0000000cH
	call	?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase_
	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	pop	edi
	ret	0
?final_erase_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_erase_
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@H@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
?construct@?$allocator@H@std@@QAEXPAHABH@Z PROC		; std::allocator<int>::construct, COMDAT
; __Ptr$ = eax
; __Val$ = ecx

; 197  : 		_Construct(_Ptr, _Val);

	test	eax, eax
	je	SHORT $LN5@construct@2
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN5@construct@2:

; 198  : 		}

	ret	0
?construct@?$allocator@H@std@@QAEXPAHABH@Z ENDP		; std::allocator<int>::construct
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z
_TEXT	SEGMENT
?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct, COMDAT
; __Ptr$ = eax
; __Val$ = ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

	test	eax, eax
	je	SHORT $LN3@construct@3
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN3@construct@3:

; 203  : 		}

	ret	0
?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@$$QAU32@@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z
_TEXT	SEGMENT
?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct, COMDAT
; __Ptr$ = eax
; __Val$ = ecx

; 197  : 		_Construct(_Ptr, _Val);

	test	eax, eax
	je	SHORT $LN5@construct@4
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN5@construct@4:

; 198  : 		}

	ret	0
?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$?9U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z
_TEXT	SEGMENT
??$?9U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z PROC ; std::operator!=<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 271  : 	return (!(_Left == _Right));

	xor	al, al

; 272  : 	}

	ret	0
??$?9U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ENDP ; std::operator!=<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z
_TEXT	SEGMENT
$T515891 = -16						; size = 12
$T515899 = -4						; size = 4
??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z PROC ; std::_Allocate<std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; __Count$ = eax

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)
; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)
; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	eax, 268435455				; 0fffffffH
	ja	SHORT $LN1@Allocate@2
	shl	eax, 4
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	jne	SHORT $LN7@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	lea	eax, DWORD PTR $T515899[ebp]
	push	eax
	lea	ecx, DWORD PTR $T515891[ebp]
	mov	DWORD PTR $T515899[ebp], 0
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T515891[ebp]
	push	ecx
	mov	DWORD PTR $T515891[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN14@Allocate@2:
$LN7@Allocate@2:

; 40   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@Allocate@2:
??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z ENDP ; std::_Allocate<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z
_TEXT	SEGMENT
??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z PROC ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __First$ = ecx
; __Last$ = esi
; __Dest$ = eax

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

	cmp	ecx, esi
	je	SHORT $LN5@Move@2
	mov	edx, ecx
	sub	edx, eax
	push	edi
	npad	7
$LL7@Move@2:
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	edi, DWORD PTR [edx+eax+8]
	mov	DWORD PTR [eax+8], edi
	mov	edi, DWORD PTR [edx+eax+12]
	mov	DWORD PTR [eax+12], edi
	add	ecx, 16					; 00000010H
	add	eax, 16					; 00000010H
	cmp	ecx, esi
	jne	SHORT $LL7@Move@2
	pop	edi
$LN5@Move@2:

; 2536 : 	}

	ret	0
??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z ENDP ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z
_TEXT	SEGMENT
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int const &>, COMDAT
; __Pdest$ = eax
; __Src$ = ecx

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	eax, eax
	je	SHORT $LN9@Cons_val
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN9@Cons_val:

; 281  : 	}

	ret	0
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int const &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z
_TEXT	SEGMENT
??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int &>, COMDAT
; __Pdest$ = eax
; __Src$ = ecx

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	eax, eax
	je	SHORT $LN7@Cons_val@2
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN7@Cons_val@2:

; 281  : 	}

	ret	0
??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@ABU20@@Z
_TEXT	SEGMENT
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@ABU20@@Z PROC ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>, COMDAT
; __Pdest$ = eax
; __Src$ = ecx

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	eax, eax
	je	SHORT $LN9@Cons_val@3
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN9@Cons_val@3:

; 281  : 	}

	ret	0
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@ABU20@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> const &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@U32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@$$QAU20@@Z
_TEXT	SEGMENT
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@U32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@$$QAU20@@Z PROC ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; __Pdest$ = eax
; __Src$ = ecx

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	eax, eax
	je	SHORT $LN7@Cons_val@4
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN7@Cons_val@4:

; 281  : 	}

	ret	0
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@U32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@$$QAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$?0$$CB_K$$CB_K@?$pair@_K_K@std@@QAE@$$QB_K0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??$?0$$CB_K$$CB_K@?$pair@_K_K@std@@QAE@$$QB_K0@Z PROC	; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >, COMDAT
; __Val1$ = edx
; __Val2$ = ecx

; 247  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], ecx
	pop	esi

; 248  : 		}

	pop	ebp
	ret	4
??$?0$$CB_K$$CB_K@?$pair@_K_K@std@@QAE@$$QB_K0@Z ENDP	; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 const ,unsigned __int64 const >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$?0AA_KAA_K@?$pair@_K_K@std@@QAE@AA_K0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??$?0AA_KAA_K@?$pair@_K_K@std@@QAE@AA_K0@Z PROC		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>, COMDAT
; __Val1$ = edx
; __Val2$ = ecx

; 247  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], ecx
	pop	esi

; 248  : 		}

	pop	ebp
	ret	4
??$?0AA_KAA_K@?$pair@_K_K@std@@QAE@AA_K0@Z ENDP		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64 &,unsigned __int64 &>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$?0_J_J@?$pair@_K_K@std@@QAE@$$QAU?$pair@_J_J@1@@Z
_TEXT	SEGMENT
??$?0_J_J@?$pair@_K_K@std@@QAE@$$QAU?$pair@_J_J@1@@Z PROC ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><__int64,__int64>, COMDAT
; _this$ = eax
; __Right$ = ecx

; 255  : 		{	// construct from moved compatible pair

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 256  : 		}

	ret	0
??$?0_J_J@?$pair@_K_K@std@@QAE@$$QAU?$pair@_J_J@1@@Z ENDP ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><__int64,__int64>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?get_allocator@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$allocator@U?$pair@_K_K@std@@@2@XZ
_TEXT	SEGMENT
?get_allocator@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$allocator@U?$pair@_K_K@std@@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 894  : 		return (this->_Alval);
; 895  : 		}

	ret	0
?get_allocator@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$allocator@U?$pair@_K_K@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::get_allocator
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEII@Z
_TEXT	SEGMENT
?_Grow_to@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEII@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Grow_to, COMDAT
; _this$ = ecx
; __Count$ = edx

; 1275 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	push	esi
	sar	eax, 4

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, eax
	shr	ecx, 1
	mov	esi, 268435455				; 0fffffffH
	sub	esi, ecx
	cmp	esi, eax
	pop	esi
	jae	SHORT $LN4@Grow_to
	xor	eax, eax
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	add	eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

	cmp	eax, edx
	jae	SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

	mov	eax, edx
$LN1@Grow_to:

; 1282 : 		}

	ret	0
?_Grow_to@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IBEII@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Grow_to
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ?release@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ
_TEXT	SEGMENT
?release@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release, COMDAT
; _this$ = eax

; 77   :   bool release()const{return (--ref==0);}

	lea	ecx, DWORD PTR [eax+32]
	or	eax, -1
	lock	 xadd	 DWORD PTR [ecx], eax
	dec	eax
	neg	eax
	sbb	eax, eax
	inc	eax
	ret	0
?release@?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@ABE_NXZ ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::release
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT
; _this$ = eax
; __Parg$ = ecx

; 45   : 		{	// construct with pointer _Parg

	mov	DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

	ret	0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z
_TEXT	SEGMENT
$T516259 = -16						; size = 12
$T516257 = -4						; size = 4
?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate, COMDAT
; __Count$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 187  : 		return (_Allocate(_Count, (pointer)0));

	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate@2
	cmp	ecx, 268435455				; 0fffffffH
	ja	SHORT $LN3@allocate@2
	shl	ecx, 4
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate@2
$LN3@allocate@2:
	lea	eax, DWORD PTR $T516257[ebp]
	push	eax
	lea	ecx, DWORD PTR $T516259[ebp]
	mov	DWORD PTR $T516257[ebp], 0
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T516259[ebp]
	push	ecx
	mov	DWORD PTR $T516259[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@allocate@2:
$LN1@allocate@2:

; 188  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@allocate@2:
?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++, COMDAT
; _this$ = eax

; 332  : 		++*(_Mybase *)this;

	add	DWORD PTR [eax], 16			; 00000010H

; 333  : 		return (*this);
; 334  : 		}

	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*, COMDAT
; _this$ = eax

; 322  : 		return ((reference)**(_Mybase *)this);

	mov	eax, DWORD PTR [eax]

; 323  : 		}

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBEAAU?$pair@_K_K@1@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator*
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = eax

; 507  : 		{	// construct empty vector

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx

; 508  : 		}

	ret	0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=, COMDAT
; _this$ = eax
; __Right$ = edx

; 208  : 		return (!(*this == _Right));

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	setne	al

; 209  : 		}

	ret	0
??9?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator!=
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++, COMDAT
; _this$ = edx
; ___$ReturnUdt$ = eax

; 116  : 		_Myiter _Tmp = *this;

	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 117  : 		++*this;

	add	ecx, 16					; 00000010H
	mov	DWORD PTR [edx], ecx

; 118  : 		return (_Tmp);
; 119  : 		}

	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 797  : 		return (const_iterator(this->_Mylast, this));

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 798  : 		}

	ret	0
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 787  : 		return (const_iterator(this->_Myfirst, this));

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 788  : 		}

	ret	0
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
_TEXT	ENDS
PUBLIC	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z		; ScanLineData::_EvaluateLine
EXTRN	__allmul:PROC
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
;	COMDAT ?_EvaluateLine@ScanLineData@@AAEXHHHH@Z
_TEXT	SEGMENT
_xacc$318861 = -24					; size = 8
_xacc$318844 = -24					; size = 8
_invslope$318867 = -16					; size = 8
_dy$318863 = -12					; size = 4
_y$318847 = -12						; size = 4
_invslope$318850 = -8					; size = 8
_y$318864 = -4						; size = 4
_dy$318846 = -4						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
?_EvaluateLine@ScanLineData@@AAEXHHHH@Z PROC		; ScanLineData::_EvaluateLine, COMDAT
; _this$ = ecx

; 2359 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx

; 2360 :     if(lastp.x != x0 || lastp.y != y0)

	mov	ebx, DWORD PTR _y0$[ebp]
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+16]
	push	edi
	mov	edi, DWORD PTR _x0$[ebp]
	cmp	eax, edi
	jne	SHORT $LN15@EvaluateLi@2
	cmp	DWORD PTR [esi+20], ebx
	je	SHORT $LN16@EvaluateLi@2
$LN15@EvaluateLi@2:

; 2361 :     {
; 2362 :         _EvaluateLine(lastp.x, lastp.y, x0, y0);

	mov	ecx, DWORD PTR [esi+20]
	push	ebx
	push	edi
	push	ecx
	push	eax
	mov	ecx, esi
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine
$LN16@EvaluateLi@2:

; 2363 :     }
; 2364 :     if(!fFirstSet) {firstp.x = x0; firstp.y = y0; fFirstSet = true;}

	cmp	BYTE PTR [esi+4], 0
	jne	SHORT $LN14@EvaluateLi@2
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi+12], ebx
	mov	BYTE PTR [esi+4], 1
$LN14@EvaluateLi@2:

; 2365 :     lastp.x = x1;
; 2366 :     lastp.y = y1;

	mov	ecx, DWORD PTR _y1$[ebp]
	mov	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], ecx

; 2367 :     if(y1 > y0)	// down

	cmp	ecx, ebx
	jle	$LN31@EvaluateLi@2

; 2368 :     {
; 2369 :         __int64 xacc = (__int64)x0 << 13;

	mov	eax, edi
	cdq
	shld	edx, eax, 13
	shl	eax, 13					; 0000000dH
	mov	DWORD PTR _xacc$318844[ebp], eax

; 2370 :         // prestep y0 down
; 2371 :         int dy = y1 - y0;

	mov	eax, ecx
	sub	eax, ebx

; 2372 :         int y = ((y0 + 3)&~7) + 4;

	add	ebx, 3
	and	ebx, -8					; fffffff8H
	add	ebx, 4

; 2373 :         int iy = y >> 3;
; 2374 :         y1 = (y1 - 5) >> 3;

	add	ecx, -5					; fffffffbH
	mov	edi, ebx
	sar	ecx, 3
	sar	edi, 3
	mov	DWORD PTR _xacc$318844[ebp+4], edx
	mov	DWORD PTR _dy$318846[ebp], eax
	mov	DWORD PTR _y$318847[ebp], ebx
	mov	DWORD PTR _y1$[ebp], ecx

; 2375 :         if(iy <= y1)

	cmp	edi, ecx
	jg	$LN1@EvaluateLi@2

; 2376 :         {
; 2377 :             __int64 invslope = (__int64(x1 - x0) << 16) / dy;

	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	cdq
	mov	ecx, eax
	mov	eax, DWORD PTR _dy$318846[ebp]
	mov	ebx, edx
	cdq
	shld	ebx, ecx, 16
	push	edx
	push	eax
	shl	ecx, 16					; 00000010H
	push	ebx
	push	ecx
	call	__alldiv

; 2378 :             while(mEdgeNext + y1 + 1 - iy > mEdgeHeapSize)

	mov	ebx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _invslope$318850[ebp+4], edx
	mov	edx, ebx
	mov	DWORD PTR _invslope$318850[ebp], eax
	mov	eax, DWORD PTR [esi+56]
	sub	edx, edi
	lea	ecx, DWORD PTR [edx+eax+1]
	cmp	ecx, DWORD PTR [esi+52]
	jbe	SHORT $LN10@EvaluateLi@2
$LL11@EvaluateLi@2:

; 2379 :                 _ReallocEdgeBuffer(mEdgeHeapSize*2);

	mov	eax, DWORD PTR [esi+52]
	add	eax, eax
	lea	edx, DWORD PTR [eax*8]
	mov	DWORD PTR [esi+52], eax
	mov	eax, DWORD PTR [esi+48]
	push	edx
	push	eax
	call	_realloc
	mov	DWORD PTR [esi+48], eax
	mov	edx, DWORD PTR [esi+56]
	mov	ecx, ebx
	sub	ecx, edi
	lea	eax, DWORD PTR [ecx+edx+1]
	add	esp, 8
	cmp	eax, DWORD PTR [esi+52]
	ja	SHORT $LL11@EvaluateLi@2
$LN10@EvaluateLi@2:

; 2380 :             xacc += (invslope * (y - y0)) >> 3;

	mov	eax, DWORD PTR _y$318847[ebp]
	mov	ecx, DWORD PTR _invslope$318850[ebp+4]
	sub	eax, DWORD PTR _y0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _invslope$318850[ebp]
	cdq
	push	ecx
	push	edx
	push	eax
	call	__allmul
	mov	ecx, eax
	mov	eax, DWORD PTR _xacc$318844[ebp]
	shrd	ecx, edx, 3
	sar	edx, 3
	add	eax, ecx
	adc	DWORD PTR _xacc$318844[ebp+4], edx
$LL9@EvaluateLi@2:

; 2381 :             while(iy <= y1)
; 2382 :             {
; 2383 :                 int ix = (int)((xacc + 32768) >> 16);
; 2384 :                 mpEdgeBuffer[mEdgeNext].next = mpScanBuffer[iy];

	mov	edx, DWORD PTR [esi+60]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR [esi+56]
	mov	ebx, DWORD PTR [esi+48]
	mov	DWORD PTR [ebx+ecx*8], edx
	mov	edx, DWORD PTR _xacc$318844[ebp+4]

; 2385 :                 mpEdgeBuffer[mEdgeNext].posandflag = ix*2 + 1;

	mov	ebx, DWORD PTR [esi+48]
	mov	ecx, eax
	add	ecx, 32768				; 00008000H
	adc	edx, 0
	shrd	ecx, edx, 16
	sar	edx, 16					; 00000010H
	mov	edx, DWORD PTR [esi+56]
	lea	ecx, DWORD PTR [ecx+ecx+1]
	mov	DWORD PTR [ebx+edx*8+4], ecx

; 2386 :                 mpScanBuffer[iy] = mEdgeNext++;

	mov	ecx, DWORD PTR [esi+60]
	mov	edx, DWORD PTR [esi+56]
	mov	DWORD PTR [ecx+edi*4], edx
	inc	DWORD PTR [esi+56]

; 2387 :                 ++iy;
; 2388 :                 xacc += invslope;

	mov	ecx, DWORD PTR _invslope$318850[ebp+4]
	inc	edi
	add	eax, DWORD PTR _invslope$318850[ebp]
	adc	DWORD PTR _xacc$318844[ebp+4], ecx
	cmp	edi, DWORD PTR _y1$[ebp]
	jle	SHORT $LL9@EvaluateLi@2

; 2414 :             }
; 2415 :         }
; 2416 :     }
; 2417 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN31@EvaluateLi@2:

; 2389 :             }
; 2390 :         }
; 2391 :     }
; 2392 :     else if(y1 < y0) // up

	jge	$LN1@EvaluateLi@2

; 2393 :     {
; 2394 :         __int64 xacc = (__int64)x1 << 13;

	cdq
	shld	edx, eax, 13
	shl	eax, 13					; 0000000dH
	mov	DWORD PTR _xacc$318861[ebp], eax

; 2395 :         // prestep y1 down
; 2396 :         int dy = y0 - y1;

	mov	eax, ebx
	sub	eax, ecx

; 2397 :         int y = ((y1 + 3)&~7) + 4;

	add	ecx, 3
	and	ecx, -8					; fffffff8H
	add	ecx, 4

; 2398 :         int iy = y >> 3;
; 2399 :         y0 = (y0 - 5) >> 3;

	add	ebx, -5					; fffffffbH
	mov	edi, ecx
	sar	ebx, 3
	sar	edi, 3
	mov	DWORD PTR _xacc$318861[ebp+4], edx
	mov	DWORD PTR _dy$318863[ebp], eax
	mov	DWORD PTR _y$318864[ebp], ecx
	mov	DWORD PTR _y0$[ebp], ebx

; 2400 :         if(iy <= y0)

	cmp	edi, ebx
	jg	$LN1@EvaluateLi@2

; 2401 :         {
; 2402 :             __int64 invslope = (__int64(x0 - x1) << 16) / dy;

	mov	eax, DWORD PTR _x0$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	cdq
	mov	ecx, eax
	mov	eax, DWORD PTR _dy$318863[ebp]
	mov	ebx, edx
	cdq
	shld	ebx, ecx, 16
	push	edx
	push	eax
	shl	ecx, 16					; 00000010H
	push	ebx
	push	ecx
	call	__alldiv

; 2403 :             while(mEdgeNext + y0 + 1 - iy > mEdgeHeapSize)

	mov	ebx, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _invslope$318867[ebp+4], edx
	mov	edx, ebx
	mov	DWORD PTR _invslope$318867[ebp], eax
	mov	eax, DWORD PTR [esi+56]
	sub	edx, edi
	lea	ecx, DWORD PTR [edx+eax+1]
	cmp	ecx, DWORD PTR [esi+52]
	jbe	SHORT $LN3@EvaluateLi@2
$LL4@EvaluateLi@2:

; 2404 :                 _ReallocEdgeBuffer(mEdgeHeapSize*2);

	mov	eax, DWORD PTR [esi+52]
	add	eax, eax
	lea	edx, DWORD PTR [eax*8]
	mov	DWORD PTR [esi+52], eax
	mov	eax, DWORD PTR [esi+48]
	push	edx
	push	eax
	call	_realloc
	mov	DWORD PTR [esi+48], eax
	mov	edx, DWORD PTR [esi+56]
	mov	ecx, ebx
	sub	ecx, edi
	lea	eax, DWORD PTR [ecx+edx+1]
	add	esp, 8
	cmp	eax, DWORD PTR [esi+52]
	ja	SHORT $LL4@EvaluateLi@2
$LN3@EvaluateLi@2:

; 2405 :             xacc += (invslope * (y - y1)) >> 3;

	mov	eax, DWORD PTR _y$318864[ebp]
	mov	ecx, DWORD PTR _invslope$318867[ebp+4]
	sub	eax, DWORD PTR _y1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _invslope$318867[ebp]
	cdq
	push	ecx
	push	edx
	push	eax
	call	__allmul
	mov	ecx, eax
	mov	eax, DWORD PTR _xacc$318861[ebp]
	shrd	ecx, edx, 3
	sar	edx, 3
	add	eax, ecx
	adc	DWORD PTR _xacc$318861[ebp+4], edx
$LL2@EvaluateLi@2:

; 2406 :             while(iy <= y0)
; 2407 :             {
; 2408 :                 int ix = (int)((xacc + 32768) >> 16);
; 2409 :                 mpEdgeBuffer[mEdgeNext].next = mpScanBuffer[iy];

	mov	edx, DWORD PTR [esi+60]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR [esi+56]
	mov	ebx, DWORD PTR [esi+48]
	mov	DWORD PTR [ebx+ecx*8], edx
	mov	edx, DWORD PTR _xacc$318861[ebp+4]

; 2410 :                 mpEdgeBuffer[mEdgeNext].posandflag = ix*2;

	mov	ebx, DWORD PTR [esi+48]
	mov	ecx, eax
	add	ecx, 32768				; 00008000H
	adc	edx, 0
	shrd	ecx, edx, 16
	sar	edx, 16					; 00000010H
	mov	edx, DWORD PTR [esi+56]
	add	ecx, ecx
	mov	DWORD PTR [ebx+edx*8+4], ecx

; 2411 :                 mpScanBuffer[iy] = mEdgeNext++;

	mov	ecx, DWORD PTR [esi+60]
	mov	edx, DWORD PTR [esi+56]
	mov	DWORD PTR [ecx+edi*4], edx
	inc	DWORD PTR [esi+56]

; 2412 :                 ++iy;
; 2413 :                 xacc += invslope;

	mov	ecx, DWORD PTR _invslope$318867[ebp+4]
	inc	edi
	add	eax, DWORD PTR _invslope$318867[ebp]
	adc	DWORD PTR _xacc$318861[ebp+4], ecx
	cmp	edi, DWORD PTR _y0$[ebp]
	jle	SHORT $LL2@EvaluateLi@2
$LN1@EvaluateLi@2:

; 2414 :             }
; 2415 :         }
; 2416 :     }
; 2417 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_EvaluateLine@ScanLineData@@AAEXHHHH@Z ENDP		; ScanLineData::_EvaluateLine
_TEXT	ENDS
PUBLIC	?_EvaluateLine@ScanLineData@@AAEXABUPathData@@HH@Z ; ScanLineData::_EvaluateLine
; Function compile flags: /Ogtp
;	COMDAT ?_EvaluateLine@ScanLineData@@AAEXABUPathData@@HH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_path_data$ = 12					; size = 4
?_EvaluateLine@ScanLineData@@AAEXABUPathData@@HH@Z PROC	; ScanLineData::_EvaluateLine, COMDAT
; _pt1idx$ = edx
; _pt2idx$ = ecx

; 2352 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 2353 :     const POINT* pt1 = path_data.mpPathPoints + pt1idx;

	mov	eax, DWORD PTR _path_data$[ebp]
	mov	eax, DWORD PTR [eax+4]
	push	esi

; 2354 :     const POINT* pt2 = path_data.mpPathPoints + pt2idx;
; 2355 :     _EvaluateLine(pt1->x, pt1->y, pt2->x, pt2->y);

	mov	esi, DWORD PTR [eax+ecx*8+4]
	mov	ecx, DWORD PTR [eax+ecx*8]
	push	esi
	push	ecx
	mov	ecx, DWORD PTR [eax+edx*8+4]
	mov	edx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	push	edx
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine

; 2356 : }

	pop	esi
	pop	ecx
	pop	ebp
	ret	8
?_EvaluateLine@ScanLineData@@AAEXABUPathData@@HH@Z ENDP	; ScanLineData::_EvaluateLine
_TEXT	ENDS
PUBLIC	__real@4020000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__real@3fc5555555555555
PUBLIC	?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z ; ScanLineData::_EvaluateBezier
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@3fc5555555555555
CONST	SEGMENT
__real@3fc5555555555555 DQ 03fc5555555555555r	; 0.166667
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z
_TEXT	SEGMENT
_t$318813 = -80						; size = 8
_x2$ = -80						; size = 8
_cx1$ = -72						; size = 8
_x3$ = -72						; size = 8
_cy2$ = -64						; size = 8
_y3$ = -64						; size = 8
_cy1$ = -56						; size = 8
_h$ = -48						; size = 8
_y2$ = -48						; size = 8
_cx3$ = -40						; size = 8
tv427 = -32						; size = 8
_cx2$ = -32						; size = 8
_cx0$ = -24						; size = 8
_cy3$ = -16						; size = 8
tv432 = -8						; size = 8
_cy0$ = -8						; size = 8
_this$ = 8						; size = 4
_fBSpline$ = 12						; size = 1
?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z PROC ; ScanLineData::_EvaluateBezier, COMDAT
; _path_data$ = eax
; _ptbase$ = edx

; 2274 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H

; 2275 :     const POINT* pt0 = path_data.mpPathPoints + ptbase;
; 2276 :     const POINT* pt1 = path_data.mpPathPoints + ptbase + 1;
; 2277 :     const POINT* pt2 = path_data.mpPathPoints + ptbase + 2;
; 2278 :     const POINT* pt3 = path_data.mpPathPoints + ptbase + 3;
; 2279 :     double x0 = pt0->x;
; 2280 :     double x1 = pt1->x;
; 2281 :     double x2 = pt2->x;
; 2282 :     double x3 = pt3->x;
; 2283 :     double y0 = pt0->y;
; 2284 :     double y1 = pt1->y;
; 2285 :     double y2 = pt2->y;
; 2286 :     double y3 = pt3->y;
; 2287 :     double cx3, cx2, cx1, cx0, cy3, cy2, cy1, cy0;
; 2288 :     if(fBSpline)

	cmp	BYTE PTR _fBSpline$[ebp], 0
	mov	eax, DWORD PTR [eax+4]
	fild	DWORD PTR [eax+edx*8]
	push	ebx
	fild	DWORD PTR [eax+edx*8+8]
	mov	ebx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+edx*8+16]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	esi
	push	edi
	lea	edi, DWORD PTR [eax+edx*8+16]
	fst	QWORD PTR _x2$[ebp]
	fild	DWORD PTR [eax+edx*8+24]
	lea	eax, DWORD PTR [eax+edx*8+24]
	fst	QWORD PTR _x3$[ebp]
	fild	DWORD PTR [ecx+4]
	fild	DWORD PTR [ecx+12]
	fild	DWORD PTR [edi+4]
	fstp	QWORD PTR _y2$[ebp]
	fild	DWORD PTR [eax+4]
	fstp	QWORD PTR _y3$[ebp]
	je	$LN16@EvaluateBe@2

; 2289 :     {
; 2290 :         // 1   [-1 +3 -3 +1]
; 2291 :         // - * [+3 -6 +3  0]
; 2292 :         // 6   [-3  0 +3  0]
; 2293 :         //	   [+1 +4 +1  0]
; 2294 :         double _1div6 = 1.0/6.0;
; 2295 :         cx3 = _1div6*(-  x0+3*x1-3*x2+x3);

	fld	QWORD PTR __real@4008000000000000
	fmul	ST(4), ST(0)
	fxch	ST(4)
	fst	QWORD PTR tv427[ebp]
	fld	ST(5)
	fmul	ST(0), ST(5)
	fsub	ST(0), ST(7)
	fsubrp	ST(1), ST(0)
	faddp	ST(3), ST(0)
	fld	QWORD PTR __real@3fc5555555555555
	fmul	ST(3), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _cx3$[ebp]

; 2296 :         cx2 = _1div6*( 3*x0-6*x1+3*x2);

	fld	ST(5)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv432[ebp]
	fld	ST(4)
	fmul	QWORD PTR __real@4018000000000000
	fsubr	QWORD PTR tv432[ebp]
	fld	QWORD PTR tv427[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR _cx2$[ebp]

; 2297 :         cx1 = _1div6*(-3*x0	   +3*x2);

	fsub	QWORD PTR tv432[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR _cx1$[ebp]

; 2298 :         cx0 = _1div6*(   x0+4*x1+1*x2);

	fxch	ST(4)
	fmul	QWORD PTR __real@4010000000000000
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fadd	QWORD PTR _x2$[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _cx0$[ebp]

; 2299 :         cy3 = _1div6*(-  y0+3*y1-3*y2+y3);

	fld	QWORD PTR _y2$[ebp]
	fmul	ST(0), ST(2)
	fld	ST(3)
	fmul	ST(0), ST(3)
	fsub	ST(0), ST(5)
	fsub	ST(0), ST(1)
	fadd	QWORD PTR _y3$[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR _cy3$[ebp]

; 2300 :         cy2 = _1div6*( 3*y0-6*y1+3*y2);

	fld	ST(4)
	fmulp	ST(3), ST(0)
	fld	ST(3)
	fld	QWORD PTR __real@4018000000000000
	fmul	ST(1), ST(0)
	fld	ST(4)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fadd	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fst	QWORD PTR _cy2$[ebp]

; 2301 :         cy1 = _1div6*(-3*y0     +3*y2);

	fxch	ST(2)
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR _cy1$[ebp]

; 2302 :         cy0 = _1div6*(   y0+4*y1+1*y2);

	fxch	ST(3)
	fmul	QWORD PTR __real@4010000000000000
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fadd	QWORD PTR _y2$[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _cy0$[ebp]

; 2303 :     }
; 2304 :     else // bezier

	jmp	SHORT $LN6@EvaluateBe@2
$LN16@EvaluateBe@2:

; 2275 :     const POINT* pt0 = path_data.mpPathPoints + ptbase;
; 2276 :     const POINT* pt1 = path_data.mpPathPoints + ptbase + 1;
; 2277 :     const POINT* pt2 = path_data.mpPathPoints + ptbase + 2;
; 2278 :     const POINT* pt3 = path_data.mpPathPoints + ptbase + 3;
; 2279 :     double x0 = pt0->x;
; 2280 :     double x1 = pt1->x;
; 2281 :     double x2 = pt2->x;
; 2282 :     double x3 = pt3->x;
; 2283 :     double y0 = pt0->y;
; 2284 :     double y1 = pt1->y;
; 2285 :     double y2 = pt2->y;
; 2286 :     double y3 = pt3->y;
; 2287 :     double cx3, cx2, cx1, cx0, cy3, cy2, cy1, cy0;
; 2288 :     if(fBSpline)

	fstp	ST(2)

; 2305 :     {
; 2306 :         // [-1 +3 -3 +1]
; 2307 :         // [+3 -6 +3  0]
; 2308 :         // [-3 +3  0  0]
; 2309 :         // [+1  0  0  0]
; 2310 :         cx3 = -  x0+3*x1-3*x2+x3;

	fld	ST(3)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fmul	ST(4), ST(0)
	fxch	ST(4)
	fst	QWORD PTR tv427[ebp]
	fld	ST(1)
	fsub	ST(0), ST(7)
	fsubrp	ST(1), ST(0)
	fadd	QWORD PTR _x3$[ebp]
	fstp	QWORD PTR _cx3$[ebp]

; 2311 :         cx2 =  3*x0-6*x1+3*x2;

	fld	ST(5)
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv432[ebp]
	fld	QWORD PTR __real@4018000000000000
	fmul	ST(6), ST(0)
	fxch	ST(1)
	fsubrp	ST(6), ST(0)
	fxch	ST(5)
	fadd	QWORD PTR tv427[ebp]
	fstp	QWORD PTR _cx2$[ebp]

; 2312 :         cx1 = -3*x0+3*x1;

	fsub	QWORD PTR tv432[ebp]
	fstp	QWORD PTR _cx1$[ebp]

; 2313 :         cx0 =    x0;

	fxch	ST(4)
	fstp	QWORD PTR _cx0$[ebp]

; 2314 :         cy3 = -  y0+3*y1-3*y2+y3;

	fld	ST(0)
	fmul	ST(0), ST(2)
	fld	QWORD PTR _y2$[ebp]
	fmul	ST(0), ST(3)
	fld	ST(1)
	fsub	ST(0), ST(6)
	fsub	ST(0), ST(1)
	fadd	QWORD PTR _y3$[ebp]
	fstp	QWORD PTR _cy3$[ebp]

; 2315 :         cy2 =  3*y0-6*y1+3*y2;

	fld	ST(5)
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(4)
	fsubr	ST(0), ST(3)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _cy2$[ebp]

; 2316 :         cy1 = -3*y0+3*y1;

	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _cy1$[ebp]

; 2317 :         cy0 =    y0;

	fxch	ST(2)
	fstp	QWORD PTR _cy0$[ebp]
	fxch	ST(1)
$LN6@EvaluateBe@2:

; 2318 :     }
; 2319 :     //
; 2320 :     // This equation is from Graphics Gems I.
; 2321 :     //
; 2322 :     // The idea is that since we're approximating a cubic curve with lines,
; 2323 :     // any error we incur is due to the curvature of the line, which we can
; 2324 :     // estimate by calculating the maximum acceleration of the curve.  For
; 2325 :     // a cubic, the acceleration (second derivative) is a line, meaning that
; 2326 :     // the absolute maximum acceleration must occur at either the beginning
; 2327 :     // (|c2|) or the end (|c2+c3|).  Our bounds here are a little more
; 2328 :     // conservative than that, but that's okay.
; 2329 :     //
; 2330 :     // If the acceleration of the parametric formula is zero (c2 = c3 = 0),
; 2331 :     // that component of the curve is linear and does not incur any error.
; 2332 :     // If a=0 for both X and Y, the curve is a line segment and we can
; 2333 :     // use a step size of 1.
; 2334 :     double maxaccel1 = fabs(2*cy2) + fabs(6*cy3);

	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fabs
	fld	QWORD PTR _cy3$[ebp]
	fmul	ST(0), ST(3)
	fabs
	faddp	ST(1), ST(0)

; 2335 :     double maxaccel2 = fabs(2*cx2) + fabs(6*cx3);

	fld	QWORD PTR _cx2$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fabs
	fld	QWORD PTR _cx3$[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fabs
	faddp	ST(2), ST(0)

; 2336 :     double maxaccel = maxaccel1 > maxaccel2 ? maxaccel1 : maxaccel2;

	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN20@EvaluateBe@2
	fstp	ST(1)
	jmp	SHORT $LN11@EvaluateBe@2
$LN20@EvaluateBe@2:
	fstp	ST(0)
$LN11@EvaluateBe@2:

; 2337 :     double h = 1.0;

	fld1
	fstp	QWORD PTR _h$[ebp]

; 2338 :     if(maxaccel > 8.0) h = sqrt(8.0 / maxaccel);

	fld	QWORD PTR __real@4020000000000000
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN24@EvaluateBe@2
	fdivrp	ST(1), ST(0)
	call	__CIsqrt
	fstp	QWORD PTR _h$[ebp]
	jmp	SHORT $LN5@EvaluateBe@2
$LN24@EvaluateBe@2:
	fstp	ST(1)
	fstp	ST(0)
$LN5@EvaluateBe@2:

; 2339 :     if(!fFirstSet) {firstp.x = (LONG)cx0; firstp.y = (LONG)cy0; lastp = firstp; fFirstSet = true;}

	cmp	BYTE PTR [ebx+4], 0
	jne	SHORT $LN4@EvaluateBe@2
	fld	QWORD PTR _cx0$[ebp]
	call	__ftol2_sse
	fld	QWORD PTR _cy0$[ebp]
	mov	DWORD PTR [ebx+8], eax
	call	__ftol2_sse
	mov	ecx, DWORD PTR [ebx+8]
	mov	edx, eax
	mov	DWORD PTR [ebx+12], eax
	mov	DWORD PTR [ebx+16], ecx
	mov	DWORD PTR [ebx+20], edx
	mov	BYTE PTR [ebx+4], 1
$LN4@EvaluateBe@2:

; 2340 :     for(double t = 0; t < 1.0; t += h)

	fldz
	fst	QWORD PTR _t$318813[ebp]
$LN3@EvaluateBe@2:

; 2341 :     {
; 2342 :         double x = cx0 + t*(cx1 + t*(cx2 + t*cx3));
; 2343 :         double y = cy0 + t*(cy1 + t*(cy2 + t*cy3));

	fld	QWORD PTR _cy3$[ebp]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _cy2$[ebp]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _cy1$[ebp]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _cy0$[ebp]

; 2344 :         _EvaluateLine(lastp.x, lastp.y, (int)x, (int)y);

	call	__ftol2_sse
	fld	QWORD PTR _cx3$[ebp]
	fmul	ST(0), ST(1)
	push	eax
	fadd	QWORD PTR _cx2$[ebp]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _cx1$[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _cx0$[ebp]
	call	__ftol2_sse
	mov	ecx, DWORD PTR [ebx+16]
	push	eax
	mov	eax, DWORD PTR [ebx+20]
	push	eax
	push	ecx
	mov	ecx, ebx
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine
	fld	QWORD PTR _t$318813[ebp]
	fadd	QWORD PTR _h$[ebp]
	fst	QWORD PTR _t$318813[ebp]
	fld1
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN3@EvaluateBe@2

; 2345 :     }
; 2346 :     double x = cx0 + cx1 + cx2 + cx3;
; 2347 :     double y = cy0 + cy1 + cy2 + cy3;

	fstp	ST(0)
	fld	QWORD PTR _cy0$[ebp]
	fadd	QWORD PTR _cy1$[ebp]
	fadd	QWORD PTR _cy2$[ebp]
	fadd	QWORD PTR _cy3$[ebp]

; 2348 :     _EvaluateLine(lastp.x, lastp.y, (int)x, (int)y);

	call	__ftol2_sse
	fld	QWORD PTR _cx0$[ebp]
	fadd	QWORD PTR _cx1$[ebp]
	push	eax
	fadd	QWORD PTR _cx2$[ebp]
	fadd	QWORD PTR _cx3$[ebp]
	call	__ftol2_sse
	mov	edx, DWORD PTR [ebx+20]
	push	eax
	mov	eax, DWORD PTR [ebx+16]
	push	edx
	push	eax
	mov	ecx, ebx
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine

; 2349 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z ENDP ; ScanLineData::_EvaluateBezier
_TEXT	ENDS
PUBLIC	?AlignLeftTop@PathData@@QAEXPAVCPoint@@PAVCSize@@@Z ; PathData::AlignLeftTop
; Function compile flags: /Ogtp
;	COMDAT ?AlignLeftTop@PathData@@QAEXPAVCPoint@@PAVCSize@@@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
_minx$ = -12						; size = 4
_maxy$ = -8						; size = 4
_miny$ = -8						; size = 4
_maxx$ = -4						; size = 4
_left_top$ = 8						; size = 4
_size$ = 12						; size = 4
?AlignLeftTop@PathData@@QAEXPAVCPoint@@PAVCSize@@@Z PROC ; PathData::AlignLeftTop, COMDAT
; _this$ = eax

; 2220 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, eax

; 2222 :     int miny = INT_MAX;
; 2223 :     int maxx = INT_MIN;
; 2224 :     int maxy = INT_MIN;
; 2225 :     for(int i=0; i<mPathPoints; ++i)

	cmp	DWORD PTR [esi+8], 0
	mov	edx, -2147483648			; 80000000H
	mov	eax, 2147483647				; 7fffffffH
	push	edi
	mov	ecx, eax
	mov	DWORD PTR _maxx$[ebp], edx
	mov	DWORD PTR _maxy$[ebp], edx
	jle	$LN4@AlignLeftT

; 2221 :     int minx = INT_MAX;

	mov	edx, DWORD PTR [esi+8]
	mov	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR tv136[ebp], edx
$LL12@AlignLeftT:

; 2226 :     {
; 2227 :         int ix = mpPathPoints[i].x;

	mov	edi, DWORD PTR [ebx]

; 2228 :         int iy = mpPathPoints[i].y;

	mov	edx, DWORD PTR [ebx+4]

; 2229 :         if(ix < minx) minx = ix;

	cmp	edi, eax
	jge	SHORT $LN9@AlignLeftT
	mov	eax, edi
$LN9@AlignLeftT:

; 2230 :         if(ix > maxx) maxx = ix;

	cmp	edi, DWORD PTR _maxx$[ebp]
	jle	SHORT $LN8@AlignLeftT
	mov	DWORD PTR _maxx$[ebp], edi
$LN8@AlignLeftT:

; 2231 :         if(iy < miny) miny = iy;

	cmp	edx, ecx
	jge	SHORT $LN7@AlignLeftT
	mov	ecx, edx
$LN7@AlignLeftT:

; 2232 :         if(iy > maxy) maxy = iy;

	cmp	edx, DWORD PTR _maxy$[ebp]
	jle	SHORT $LN11@AlignLeftT
	mov	DWORD PTR _maxy$[ebp], edx
$LN11@AlignLeftT:

; 2222 :     int miny = INT_MAX;
; 2223 :     int maxx = INT_MIN;
; 2224 :     int maxy = INT_MIN;
; 2225 :     for(int i=0; i<mPathPoints; ++i)

	add	ebx, 8
	dec	DWORD PTR tv136[ebp]
	jne	SHORT $LL12@AlignLeftT

; 2233 :     }
; 2234 :     if(minx > maxx || miny > maxy)

	mov	edi, DWORD PTR _maxx$[ebp]
	cmp	eax, edi
	jg	SHORT $LN4@AlignLeftT
	mov	edx, DWORD PTR _maxy$[ebp]
	cmp	ecx, edx
	jg	SHORT $LN4@AlignLeftT

; 2239 :         return;
; 2240 :     }
; 2241 :     minx = (minx >> 3) & ~7;
; 2242 :     miny = (miny >> 3) & ~7;

	sar	ecx, 3
	and	ecx, -8					; fffffff8H
	sar	eax, 3
	mov	DWORD PTR _miny$[ebp], ecx
	and	eax, -8					; fffffff8H

; 2243 :     maxx = (maxx + 7) >> 3;
; 2244 :     maxy = (maxy + 7) >> 3;

	add	edx, 7
	lea	ecx, DWORD PTR [edi+7]
	mov	DWORD PTR _minx$[ebp], eax
	sar	ecx, 3
	sar	edx, 3

; 2245 :     for(int i=0; i<mPathPoints; ++i)

	xor	eax, eax
$LN3@AlignLeftT:

; 2246 :     {
; 2247 :         mpPathPoints[i].x -= minx*8;

	mov	ebx, DWORD PTR _minx$[ebp]
	mov	edi, DWORD PTR [esi+4]
	add	ebx, ebx
	add	ebx, ebx
	add	ebx, ebx
	sub	DWORD PTR [edi+eax*8], ebx

; 2248 :         mpPathPoints[i].y -= miny*8;

	mov	ebx, DWORD PTR _miny$[ebp]
	lea	edi, DWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR [esi+4]
	add	ebx, ebx
	add	ebx, ebx
	lea	edi, DWORD PTR [edi+eax*8+4]
	add	ebx, ebx
	sub	DWORD PTR [edi], ebx
	inc	eax
	cmp	eax, DWORD PTR [esi+8]
	jl	SHORT $LN3@AlignLeftT

; 2249 :     }
; 2250 :     *left_top = CPoint(minx, miny);

	mov	eax, DWORD PTR _minx$[ebp]
	mov	esi, DWORD PTR _miny$[ebp]
	mov	edi, DWORD PTR _left_top$[ebp]

; 2251 :     *size = CSize(maxx+1-minx, maxy+1-miny);

	sub	ecx, eax
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR _size$[ebp]
	inc	ecx
	sub	edx, esi
	mov	DWORD PTR [edi+4], esi
	inc	edx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 2252 :     return;
; 2253 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN4@AlignLeftT:

; 2235 :     {
; 2236 :         _TrashPath();

	mov	eax, DWORD PTR [esi]
	xor	edi, edi
	cmp	eax, edi
	je	SHORT $LN16@AlignLeftT
	push	eax
	call	_free
	add	esp, 4
	mov	DWORD PTR [esi], edi
$LN16@AlignLeftT:
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, edi
	je	SHORT $LN15@AlignLeftT
	push	eax
	call	_free
	add	esp, 4
	mov	DWORD PTR [esi+4], edi
$LN15@AlignLeftT:

; 2237 :         *left_top = CPoint(0, 0);

	mov	edx, DWORD PTR _left_top$[ebp]
	mov	DWORD PTR [esi+8], edi
	xor	eax, eax
	xor	ecx, ecx
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx

; 2238 :         *size = CSize(0, 0);

	mov	edx, DWORD PTR _size$[ebp]

; 2252 :     return;
; 2253 : }

	pop	edi
	pop	esi
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?AlignLeftTop@PathData@@QAEXPAVCPoint@@PAVCSize@@@Z ENDP ; PathData::AlignLeftTop
_TEXT	ENDS
PUBLIC	?PartialBeginPath@PathData@@QAE_NPAUHDC__@@_N@Z	; PathData::PartialBeginPath
; Function compile flags: /Ogtp
;	COMDAT ?PartialBeginPath@PathData@@QAE_NPAUHDC__@@_N@Z
_TEXT	SEGMENT
?PartialBeginPath@PathData@@QAE_NPAUHDC__@@_N@Z PROC	; PathData::PartialBeginPath, COMDAT
; _this$ = esi

; 2173 :     if(bClearPath)
; 2174 :         _TrashPath();

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN8@PartialBeg
	push	eax
	call	_free
	add	esp, 4
	mov	DWORD PTR [esi], 0
$LN8@PartialBeg:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN7@PartialBeg
	push	eax
	call	_free
	add	esp, 4
	mov	DWORD PTR [esi+4], 0
$LN7@PartialBeg:

; 2175 :     return !!::BeginPath(hdc);

	mov	eax, DWORD PTR _g_hDC
	push	eax
	mov	DWORD PTR [esi+8], 0
	call	DWORD PTR __imp__BeginPath@4
	neg	eax
	sbb	eax, eax
	neg	eax

; 2176 : }

	ret	0
?PartialBeginPath@PathData@@QAE_NPAUHDC__@@_N@Z ENDP	; PathData::PartialBeginPath
_TEXT	ENDS
PUBLIC	?BeginPath@PathData@@QAE_NPAUHDC__@@@Z		; PathData::BeginPath
; Function compile flags: /Ogtp
;	COMDAT ?BeginPath@PathData@@QAE_NPAUHDC__@@@Z
_TEXT	SEGMENT
?BeginPath@PathData@@QAE_NPAUHDC__@@@Z PROC		; PathData::BeginPath, COMDAT
; _this$ = esi

; 2150 :     _TrashPath();

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN4@BeginPath
	push	eax
	call	_free
	add	esp, 4
	mov	DWORD PTR [esi], 0
$LN4@BeginPath:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN3@BeginPath
	push	eax
	call	_free
	add	esp, 4
	mov	DWORD PTR [esi+4], 0
$LN3@BeginPath:

; 2151 :     return !!::BeginPath(hdc);

	mov	eax, DWORD PTR _g_hDC
	push	eax
	mov	DWORD PTR [esi+8], 0
	call	DWORD PTR __imp__BeginPath@4
	neg	eax
	sbb	eax, eax
	neg	eax

; 2152 : }

	ret	0
?BeginPath@PathData@@QAE_NPAUHDC__@@@Z ENDP		; PathData::BeginPath
_TEXT	ENDS
PUBLIC	?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z	; Overlay::FillAlphaMash
; Function compile flags: /Ogtp
;	COMDAT ?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z
_TEXT	SEGMENT
_outputAlphaMask$ = 8					; size = 4
_fBody$ = 12						; size = 1
_fBorder$ = 16						; size = 1
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_h$ = 28						; size = 4
_pAlphaMask$ = 32					; size = 4
_color_alpha$ = 36					; size = 4
?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z PROC	; Overlay::FillAlphaMash, COMDAT
; _this$ = ecx
; _w$ = eax
; _pitch$ = edi

; 1947 : {

	push	ebp
	mov	ebp, esp

; 1948 :     if(!fBorder && fBody && pAlphaMask==NULL)

	cmp	BYTE PTR _fBorder$[ebp], 0
	push	ebx
	mov	ebx, DWORD PTR _h$[ebp]
	push	esi
	mov	esi, DWORD PTR _color_alpha$[ebp]
	jne	SHORT $LN10@FillAlphaM
	cmp	BYTE PTR _fBody$[ebp], 0
	je	SHORT $LN2@FillAlphaM
	cmp	DWORD PTR _pAlphaMask$[ebp], 0
	jne	SHORT $LN10@FillAlphaM

; 1949 :     {
; 1950 :         _DoFillAlphaMash(outputAlphaMask, mBody.get(), NULL, x, y, w, h, pAlphaMask, pitch, color_alpha);        

	push	esi
	push	edi
	push	0
$LN31@FillAlphaM:
	push	ebx
	push	eax
	mov	eax, DWORD PTR [ecx]
	push	0
	push	eax
	jmp	SHORT $LN28@FillAlphaM
$LN10@FillAlphaM:

; 1951 :     }
; 1952 :     else if(/*fBorder &&*/ fBody && pAlphaMask==NULL)

	cmp	BYTE PTR _fBody$[ebp], 0
	je	SHORT $LN27@FillAlphaM
	cmp	DWORD PTR _pAlphaMask$[ebp], 0

; 1953 :     {
; 1954 :         _DoFillAlphaMash(outputAlphaMask, NULL, mBorder.get(), x, y, w, h, pAlphaMask, pitch, color_alpha);        

	push	esi
	push	edi
	jne	SHORT $LN6@FillAlphaM
	push	0
	jmp	SHORT $LN29@FillAlphaM
$LN27@FillAlphaM:

; 1955 :     }
; 1956 :     else if(!fBody && fBorder /* pAlphaMask==NULL or not*/)

	cmp	BYTE PTR _fBorder$[ebp], 0
	je	SHORT $LN2@FillAlphaM

; 1957 :     {
; 1958 :         _DoFillAlphaMash(outputAlphaMask, mBody.get(), mBorder.get(), x, y, w, h, pAlphaMask, pitch, color_alpha);        

	mov	edx, DWORD PTR _pAlphaMask$[ebp]
	push	esi
	push	edi
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	ebx
	push	eax
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	eax, DWORD PTR _outputAlphaMask$[ebp]
	push	edx

; 1963 :     }
; 1964 :     else if(fBorder && fBody && pAlphaMask!=NULL)
; 1965 :     {
; 1966 :         _DoFillAlphaMash(outputAlphaMask, NULL, mBorder.get(), x, y, w, h, pAlphaMask, pitch, color_alpha);        

	mov	edx, DWORD PTR _x$[ebp]
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	push	ecx
	call	?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z ; Overlay::_DoFillAlphaMash

; 1967 :     }
; 1968 :     else
; 1969 :     {
; 1970 :         //should NOT happen
; 1971 :         ASSERT(0);
; 1972 :     }
; 1973 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	32					; 00000020H
$LN6@FillAlphaM:

; 1959 :     }
; 1960 :     else if(!fBorder && fBody && pAlphaMask!=NULL)

	cmp	BYTE PTR _fBorder$[ebp], 0

; 1961 :     {
; 1962 :         _DoFillAlphaMash(outputAlphaMask, mBody.get(), NULL, x, y, w, h, pAlphaMask, pitch, color_alpha);        

	mov	edx, DWORD PTR _pAlphaMask$[ebp]
	push	edx
	je	SHORT $LN31@FillAlphaM
$LN29@FillAlphaM:

; 1963 :     }
; 1964 :     else if(fBorder && fBody && pAlphaMask!=NULL)
; 1965 :     {
; 1966 :         _DoFillAlphaMash(outputAlphaMask, NULL, mBorder.get(), x, y, w, h, pAlphaMask, pitch, color_alpha);        

	push	ebx
	push	eax
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	push	0
$LN28@FillAlphaM:
	mov	edx, DWORD PTR _outputAlphaMask$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	push	edx
	mov	edx, DWORD PTR _x$[ebp]
	push	ecx
	call	?_DoFillAlphaMash@Overlay@@AAEXPAEPBE1HHHH1HK@Z ; Overlay::_DoFillAlphaMash
$LN2@FillAlphaM:

; 1967 :     }
; 1968 :     else
; 1969 :     {
; 1970 :         //should NOT happen
; 1971 :         ASSERT(0);
; 1972 :     }
; 1973 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	32					; 00000020H
?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z ENDP	; Overlay::FillAlphaMash
_TEXT	ENDS
PUBLIC	?FillSolidRect@Rasterizer@@SAXAAUSubPicDesc@@HHHHK@Z ; Rasterizer::FillSolidRect
; Function compile flags: /Ogtp
;	COMDAT ?FillSolidRect@Rasterizer@@SAXAAUSubPicDesc@@HHHHK@Z
_TEXT	SEGMENT
$T516605 = -40						; size = 4
_yPremul$516548 = -40					; size = 4
_yPremul$516531 = -40					; size = 4
_yPremul$516514 = -40					; size = 4
_dst_V$318170 = -40					; size = 4
_dy_end$516554 = -36					; size = 4
_dy_end$516537 = -36					; size = 4
_dy_end$516520 = -36					; size = 4
_dst$318157 = -36					; size = 4
tv612 = -32						; size = 4
_dst_U$318176 = -32					; size = 4
tv861 = -28						; size = 4
_wt$318160 = -28					; size = 4
_wt$318148 = -28					; size = 4
tv606 = -24						; size = 4
_dst_V$318177 = -24					; size = 4
_dst$318145 = -24					; size = 4
$T516604 = -20						; size = 4
_wy$318153 = -20					; size = 4
tv1024 = -16						; size = 4
_ia$516509 = -16					; size = 4
tv564 = -12						; size = 4
tv567 = -8						; size = 4
_draw_method$ = -8					; size = 4
_AYUV_PLANAR$ = -1					; size = 1
tv709 = 8						; size = 4
_dy$516553 = 8						; size = 4
_dy$516536 = 8						; size = 4
_dy$516519 = 8						; size = 4
_dst_U$318169 = 8					; size = 4
_wy$318141 = 8						; size = 4
_spd$ = 8						; size = 4
_y$ = 12						; size = 4
_nWidth$ = 16						; size = 4
_argb$ = 20						; size = 4
?FillSolidRect@Rasterizer@@SAXAAUSubPicDesc@@HHHHK@Z PROC ; Rasterizer::FillSolidRect, COMDAT
; _x$ = edx

; 1497 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	ecx, DWORD PTR _spd$[ebp]

; 1498 :     bool fSSE2 = !!(g_cpuid.m_flags & CCpuID::sse2);
; 1499 :     bool AYUV_PLANAR = (spd.type==MSP_AYUV_PLANAR);

	cmp	DWORD PTR [ecx], 9
	mov	eax, DWORD PTR ?g_cpuid@@3VCCpuID@@A	; g_cpuid
	sete	BYTE PTR _AYUV_PLANAR$[ebp]
	push	esi
	mov	esi, DWORD PTR _y$[ebp]
	shr	eax, 3
	push	edi
	mov	edi, DWORD PTR _nWidth$[ebp]

; 1500 :     int draw_method = 0;

	mov	DWORD PTR _draw_method$[ebp], 0
	test	al, 1

; 1501 :     if(fSSE2)

	je	SHORT $LN20@FillSolidR

; 1502 :         draw_method |= DM::SSE2;

	mov	DWORD PTR _draw_method$[ebp], 1
$LN20@FillSolidR:

; 1503 :     if(AYUV_PLANAR)

	cmp	BYTE PTR _AYUV_PLANAR$[ebp], 0

; 1504 :         draw_method |= DM::AYUV_PLANAR;

	mov	eax, DWORD PTR _draw_method$[ebp]
	je	SHORT $LN19@FillSolidR
	or	eax, 16					; 00000010H
$LN19@FillSolidR:

; 1505 : 
; 1506 :     switch (draw_method)

	cmp	eax, 17					; 00000011H
	ja	$LN55@FillSolidR
	movzx	eax, BYTE PTR $LN83@FillSolidR[eax]
	jmp	DWORD PTR $LN92@FillSolidR[eax*4]
$LN16@FillSolidR:

; 1507 :     {
; 1508 :     case   DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1509 :     {
; 1510 :         for (int wy=y; wy<y+nHeight; wy++) {

	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR _wy$318141[ebp], esi
	mov	DWORD PTR $T516604[ebp], eax
	cmp	esi, eax
	jge	$LN55@FillSolidR

; 1522 :             for(int wt=0; wt<nWidth; ++wt) {

	add	edx, edx
	add	edx, edx
	mov	DWORD PTR tv564[ebp], edx
	mov	edx, esi
$LN15@FillSolidR:

; 1511 :             DWORD* dst = (DWORD*)((BYTE*)spd.bits + spd.pitch * wy) + x;

	mov	eax, DWORD PTR [ecx+16]
	imul	eax, edx
	add	eax, DWORD PTR tv564[ebp]

; 1512 :             for(int wt=0; wt<nWidth; ++wt) {

	mov	DWORD PTR _wt$318148[ebp], 0
	add	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR _dst$318145[ebp], eax
	test	edi, edi
	jle	SHORT $LN14@FillSolidR
	mov	edx, DWORD PTR _argb$[ebp]
	mov	eax, edx
	and	edx, 16777215				; 00ffffffH
	shr	eax, 24					; 00000018H

; 1513 :                 pixmix_sse2(&dst[wt], argb, argb>>24);

	movd	xmm1, edx
	lea	edx, DWORD PTR [eax+1]
	mov	esi, 256				; 00000100H
	shl	edx, 16					; 00000010H
	sub	esi, eax
	mov	eax, DWORD PTR _wt$318148[ebp]
	or	edx, esi
	movd	xmm0, edx
	mov	edx, DWORD PTR _dst$318145[ebp]
	pxor	xmm2, xmm2
	punpcklbw xmm1, xmm2
	pshufd	xmm3, xmm0, 0
$LL12@FillSolidR:
	mov	esi, DWORD PTR [edx+eax*4]
	movd	xmm0, esi
	punpcklbw xmm0, xmm2
	punpcklwd xmm0, xmm1
	pmaddwd	xmm0, xmm3
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	esi, xmm0
	mov	DWORD PTR [edx+eax*4], esi
	inc	eax
	cmp	eax, edi
	jl	SHORT $LL12@FillSolidR

; 1512 :             for(int wt=0; wt<nWidth; ++wt) {

	mov	edx, DWORD PTR _wy$318141[ebp]
$LN14@FillSolidR:

; 1507 :     {
; 1508 :     case   DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1509 :     {
; 1510 :         for (int wy=y; wy<y+nHeight; wy++) {

	inc	edx
	mov	DWORD PTR _wy$318141[ebp], edx
	cmp	edx, DWORD PTR $T516604[ebp]
	jl	$LN15@FillSolidR

; 1552 :     }
; 1553 :     break;
; 1554 :     }
; 1555 :     _mm_empty();

	emms

; 1556 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@FillSolidR:

; 1514 :             }
; 1515 :         }
; 1516 :     }
; 1517 :     break;
; 1518 :     case 0*DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1519 :     {
; 1520 :         for (int wy=y; wy<y+nHeight; wy++) {

	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR _wy$318153[ebp], esi
	mov	DWORD PTR $T516605[ebp], eax
	cmp	esi, eax
	jge	$LN55@FillSolidR

; 1522 :             for(int wt=0; wt<nWidth; ++wt) {

	lea	eax, DWORD PTR [edx*4]
	mov	DWORD PTR tv564[ebp], eax
$LN8@FillSolidR:

; 1521 :             DWORD* dst = (DWORD*)((BYTE*)spd.bits + spd.pitch * wy) + x;

	mov	esi, DWORD PTR [ecx+16]
	imul	esi, DWORD PTR _wy$318153[ebp]
	add	esi, DWORD PTR tv564[ebp]

; 1522 :             for(int wt=0; wt<nWidth; ++wt) {

	xor	eax, eax
	add	esi, DWORD PTR [ecx+24]
	mov	DWORD PTR _wt$318160[ebp], eax
	mov	DWORD PTR _dst$318157[ebp], esi
	test	edi, edi
	jle	$LN7@FillSolidR
	mov	edx, DWORD PTR _argb$[ebp]
	mov	ecx, edx
	mov	edi, edx
	shr	ecx, 24					; 00000018H
	and	edi, 16711935				; 00ff00ffH
	and	edx, 65280				; 0000ff00H
	mov	DWORD PTR tv567[ebp], ecx
	mov	DWORD PTR tv606[ebp], edi
	mov	DWORD PTR tv612[ebp], edx
	jmp	SHORT $LN5@FillSolidR
	npad	2
$LL84@FillSolidR:

; 1521 :             DWORD* dst = (DWORD*)((BYTE*)spd.bits + spd.pitch * wy) + x;

	mov	ecx, DWORD PTR tv567[ebp]
	mov	edi, DWORD PTR tv606[ebp]
$LN5@FillSolidR:

; 1523 :                 pixmix(&dst[wt], argb,  argb>>24);

	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, eax
	and	esi, 65280				; 0000ff00H
	mov	edx, 256				; 00000100H
	sub	edx, ecx
	imul	esi, edx
	mov	DWORD PTR _ia$516509[ebp], edx
	mov	edx, DWORD PTR tv612[ebp]
	inc	ecx
	imul	edx, ecx
	imul	edi, ecx
	add	esi, edx
	mov	edx, eax
	and	edx, -65281				; ffff00ffH
	imul	edx, DWORD PTR _ia$516509[ebp]
	add	edx, edi
	mov	edi, DWORD PTR tv606[ebp]
	xor	esi, edx
	imul	edi, ecx
	mov	edx, eax
	shr	eax, 8
	and	edx, 16711935				; 00ff00ffH
	imul	edx, DWORD PTR _ia$516509[ebp]
	and	eax, 16711680				; 00ff0000H
	imul	eax, DWORD PTR _ia$516509[ebp]
	and	esi, 16711680				; 00ff0000H
	add	edx, edi
	mov	edi, DWORD PTR _nWidth$[ebp]
	xor	esi, edx
	and	eax, -16777216				; ff000000H
	shr	esi, 8
	or	esi, eax
	mov	eax, DWORD PTR _wt$318160[ebp]
	mov	ecx, esi
	mov	esi, DWORD PTR _dst$318157[ebp]
	mov	DWORD PTR [esi+eax*4], ecx
	inc	eax
	mov	DWORD PTR _wt$318160[ebp], eax
	cmp	eax, edi
	jl	$LL84@FillSolidR

; 1522 :             for(int wt=0; wt<nWidth; ++wt) {

	mov	ecx, DWORD PTR _spd$[ebp]
$LN7@FillSolidR:

; 1514 :             }
; 1515 :         }
; 1516 :     }
; 1517 :     break;
; 1518 :     case 0*DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1519 :     {
; 1520 :         for (int wy=y; wy<y+nHeight; wy++) {

	mov	eax, DWORD PTR _wy$318153[ebp]
	inc	eax
	mov	DWORD PTR _wy$318153[ebp], eax
	cmp	eax, DWORD PTR $T516605[ebp]
	jl	$LN8@FillSolidR

; 1552 :     }
; 1553 :     break;
; 1554 :     }
; 1555 :     _mm_empty();

	emms

; 1556 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@FillSolidR:

; 1524 :             }
; 1525 :         }
; 1526 :     }
; 1527 :     break;
; 1528 :     case   DM::SSE2 |   DM::AYUV_PLANAR :
; 1529 :     {
; 1530 :         BYTE* dst = reinterpret_cast<BYTE*>(spd.bits) + spd.pitch * y + x;

	mov	eax, DWORD PTR [ecx+16]
	mov	esi, eax
	imul	esi, DWORD PTR _y$[ebp]
	add	esi, DWORD PTR [ecx+24]

; 1531 :         BYTE* dst_A = dst;
; 1532 :         BYTE* dst_Y = dst_A + spd.pitch*spd.h;

	mov	ecx, DWORD PTR [ecx+8]
	imul	ecx, eax
	add	esi, edx
	lea	eax, DWORD PTR [ecx+esi]

; 1533 :         BYTE* dst_U = dst_Y + spd.pitch*spd.h;

	lea	edx, DWORD PTR [ecx+eax]

; 1534 :         BYTE* dst_V = dst_U + spd.pitch*spd.h;

	add	ecx, edx
	mov	DWORD PTR _dst_U$318169[ebp], edx

; 1535 :         AlphaBlt(dst_Y, argb>>24, ((argb)>>16)&0xff, nHeight, nWidth, spd.pitch);

	mov	edx, DWORD PTR _argb$[ebp]
	mov	DWORD PTR _dst_V$318170[ebp], ecx
	mov	ecx, edx
	shr	edx, 16					; 00000010H
	shr	ecx, 24					; 00000018H
	push	edi
	push	edx
	mov	DWORD PTR tv567[ebp], ecx
	call	?AlphaBlt@@YAXPAEEEHHH@Z		; AlphaBlt

; 1536 :         AlphaBlt(dst_U, argb>>24, ((argb)>>8)&0xff, nHeight, nWidth, spd.pitch);

	mov	eax, DWORD PTR _argb$[ebp]
	mov	cl, BYTE PTR tv567[ebp]
	shr	eax, 8
	push	edi
	push	eax
	mov	eax, DWORD PTR _dst_U$318169[ebp]
	call	?AlphaBlt@@YAXPAEEEHHH@Z		; AlphaBlt

; 1537 :         AlphaBlt(dst_V, argb>>24, ((argb))&0xff, nHeight, nWidth, spd.pitch);

	mov	ecx, DWORD PTR _argb$[ebp]
	mov	eax, DWORD PTR _dst_V$318170[ebp]
	push	edi
	push	ecx
	mov	cl, BYTE PTR tv567[ebp]
	call	?AlphaBlt@@YAXPAEEEHHH@Z		; AlphaBlt

; 1538 :         AlphaBlt(dst_A, argb>>24, 0, nHeight, nWidth, spd.pitch);

	mov	cl, BYTE PTR tv567[ebp]
	push	edi
	push	0
	mov	eax, esi
	call	?AlphaBlt@@YAXPAEEEHHH@Z		; AlphaBlt
	add	esp, 32					; 00000020H

; 1552 :     }
; 1553 :     break;
; 1554 :     }
; 1555 :     _mm_empty();

	emms

; 1556 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1@FillSolidR:

; 1539 :     }
; 1540 :     break;
; 1541 :     case 0*DM::SSE2 |   DM::AYUV_PLANAR :
; 1542 :     {
; 1543 :         BYTE* dst = reinterpret_cast<BYTE*>(spd.bits) + spd.pitch * y + x;

	mov	esi, DWORD PTR [ecx+16]
	mov	eax, esi
	imul	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR [ecx+24]

; 1544 :         BYTE* dst_A = dst;
; 1545 :         BYTE* dst_Y = dst_A + spd.pitch*spd.h;

	mov	ecx, DWORD PTR [ecx+8]
	imul	ecx, esi
	add	eax, edx
	lea	esi, DWORD PTR [ecx+eax]

; 1546 :         BYTE* dst_U = dst_Y + spd.pitch*spd.h;

	lea	edx, DWORD PTR [ecx+esi]

; 1547 :         BYTE* dst_V = dst_U + spd.pitch*spd.h;

	add	ecx, edx
	mov	DWORD PTR _dst_V$318177[ebp], ecx

; 1548 :         AlphaBltC(dst_Y, argb>>24, ((argb)>>16)&0xff, nHeight, nWidth, spd.pitch);

	mov	ecx, DWORD PTR _argb$[ebp]
	shr	ecx, 24					; 00000018H
	movzx	ecx, cl
	mov	DWORD PTR tv709[ebp], ecx
	mov	DWORD PTR _dst_U$318176[ebp], edx
	lea	edx, DWORD PTR [ecx+1]
	mov	ecx, DWORD PTR _argb$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	ecx, cl
	imul	ecx, edx
	mov	DWORD PTR _yPremul$516514[ebp], ecx
	mov	DWORD PTR tv861[ebp], edx
	mov	ecx, 256				; 00000100H
	sub	ecx, DWORD PTR tv709[ebp]
	lea	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR _dy$516519[ebp], esi
	mov	DWORD PTR _dy_end$516520[ebp], edx
	cmp	esi, edx
	jae	SHORT $LN31@FillSolidR
$LN29@FillSolidR:
	movzx	edx, BYTE PTR [esi]
	mov	esi, DWORD PTR _dy$516519[ebp]
	imul	edx, ecx
	add	edx, DWORD PTR _yPremul$516514[ebp]
	inc	esi
	sar	edx, 8
	mov	BYTE PTR [esi-1], dl
	mov	DWORD PTR _dy$516519[ebp], esi
	cmp	esi, DWORD PTR _dy_end$516520[ebp]
	jb	SHORT $LN29@FillSolidR
$LN31@FillSolidR:

; 1549 :         AlphaBltC(dst_U, argb>>24, ((argb)>>8)&0xff, nHeight, nWidth, spd.pitch);

	mov	edx, DWORD PTR _argb$[ebp]
	shr	edx, 8
	movzx	edx, dl
	imul	edx, DWORD PTR tv861[ebp]
	mov	DWORD PTR _yPremul$516531[ebp], edx
	mov	edx, DWORD PTR _dst_U$318176[ebp]
	lea	esi, DWORD PTR [edx+edi]
	mov	DWORD PTR _dy$516536[ebp], edx
	mov	DWORD PTR _dy_end$516537[ebp], esi
	cmp	edx, esi
	jae	SHORT $LN39@FillSolidR
	mov	esi, edx
	npad	8
$LL37@FillSolidR:
	movzx	edx, BYTE PTR [esi]
	mov	esi, DWORD PTR _dy$516536[ebp]
	imul	edx, ecx
	add	edx, DWORD PTR _yPremul$516531[ebp]
	inc	esi
	sar	edx, 8
	mov	BYTE PTR [esi-1], dl
	mov	DWORD PTR _dy$516536[ebp], esi
	cmp	esi, DWORD PTR _dy_end$516537[ebp]
	jb	SHORT $LL37@FillSolidR
$LN39@FillSolidR:

; 1550 :         AlphaBltC(dst_V, argb>>24, ((argb))&0xff, nHeight, nWidth, spd.pitch);

	movzx	edx, BYTE PTR _argb$[ebp]
	imul	edx, DWORD PTR tv861[ebp]
	mov	DWORD PTR _yPremul$516548[ebp], edx
	mov	edx, DWORD PTR _dst_V$318177[ebp]
	lea	esi, DWORD PTR [edx+edi]
	mov	DWORD PTR _dy$516553[ebp], edx
	mov	DWORD PTR _dy_end$516554[ebp], esi
	cmp	edx, esi
	jae	SHORT $LN47@FillSolidR
	mov	esi, edx
	npad	8
$LL45@FillSolidR:
	movzx	edx, BYTE PTR [esi]
	mov	esi, DWORD PTR _dy$516553[ebp]
	imul	edx, ecx
	add	edx, DWORD PTR _yPremul$516548[ebp]
	inc	esi
	sar	edx, 8
	mov	BYTE PTR [esi-1], dl
	mov	DWORD PTR _dy$516553[ebp], esi
	cmp	esi, DWORD PTR _dy_end$516554[ebp]
	jb	SHORT $LL45@FillSolidR
$LN47@FillSolidR:

; 1551 :         AlphaBltC(dst_A, argb>>24, 0, nHeight, nWidth, spd.pitch);

	add	edi, eax
	mov	esi, eax
	cmp	eax, edi
	jae	SHORT $LN55@FillSolidR
$LL53@FillSolidR:
	movzx	eax, BYTE PTR [esi]
	imul	eax, ecx
	sar	eax, 8
	mov	BYTE PTR [esi], al
	inc	esi
	cmp	esi, edi
	jb	SHORT $LL53@FillSolidR
$LN55@FillSolidR:

; 1552 :     }
; 1553 :     break;
; 1554 :     }
; 1555 :     _mm_empty();

	emms

; 1556 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN92@FillSolidR:
	DD	$LN9@FillSolidR
	DD	$LN16@FillSolidR
	DD	$LN1@FillSolidR
	DD	$LN2@FillSolidR
	DD	$LN55@FillSolidR
$LN83@FillSolidR:
	DB	0
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	3
?FillSolidRect@Rasterizer@@SAXAAUSubPicDesc@@HHHHK@Z ENDP ; Rasterizer::FillSolidRect
PUBLIC	?CreateWidenedRegion@Rasterizer@ssf@@QAE_NH@Z	; ssf::Rasterizer::CreateWidenedRegion
; Function compile flags: /Ogtp
;	COMDAT ?CreateWidenedRegion@Rasterizer@ssf@@QAE_NH@Z
_TEXT	SEGMENT
tv206 = -4						; size = 4
tv198 = -4						; size = 4
_this$ = 8						; size = 4
?CreateWidenedRegion@Rasterizer@ssf@@QAE_NH@Z PROC	; ssf::Rasterizer::CreateWidenedRegion, COMDAT
; _r$ = eax

; 442  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	edi, eax

; 443  : 		if(r < 0) r = 0;

	test	edi, edi
	jns	SHORT $LN4@CreateWide
	xor	edi, edi
$LN4@CreateWide:

; 444  : 
; 445  : 		r >>= FONT_SCALE;

	sar	edi, 3

; 446  : 
; 447  : 		for(int y = -r; y <= r; ++y)

	mov	esi, edi
	neg	esi
	cmp	esi, edi
	jg	SHORT $LN13@CreateWide
	mov	ebx, edi
	imul	ebx, edi
$LL3@CreateWide:

; 448  : 		{
; 449  : 			int x = (int)(0.5f + sqrt(float(r*r - y*y)));

	mov	eax, esi
	imul	eax, esi
	mov	ecx, ebx
	sub	ecx, eax

; 450  : 
; 451  : 			_OverlapRegion(mWideOutline, mOutline, x, y);

	mov	DWORD PTR tv206[ebp], ecx
	fild	DWORD PTR tv206[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv198[ebp]
	fld	DWORD PTR tv198[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	push	eax
	lea	eax, DWORD PTR [ecx+32]
	push	eax
	lea	eax, DWORD PTR [ecx+52]
	push	eax
	mov	edx, esi
	mov	eax, ecx
	call	?_OverlapRegion@Rasterizer@ssf@@AAEXAAV?$Array@TSpan@Rasterizer@ssf@@@2@0HH@Z ; ssf::Rasterizer::_OverlapRegion
	inc	esi
	cmp	esi, edi
	jle	SHORT $LL3@CreateWide

; 452  : 		}
; 453  : 
; 454  : 		mWideBorder = r;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+92], edi

; 455  : 
; 456  : 		return true;

	mov	al, 1

; 457  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN13@CreateWide:

; 452  : 		}
; 453  : 
; 454  : 		mWideBorder = r;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], edi

; 457  : 	}

	pop	edi
	pop	esi
	mov	al, 1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?CreateWidenedRegion@Rasterizer@ssf@@QAE_NH@Z ENDP	; ssf::Rasterizer::CreateWidenedRegion
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\detail\hash_float_generic.hpp
;	COMDAT ??$float_hash_impl@N@hash_detail@boost@@YAIN@Z
_TEXT	SEGMENT
_v$ = 8							; size = 8
??$float_hash_impl@N@hash_detail@boost@@YAIN@Z PROC	; boost::hash_detail::float_hash_impl<double>, COMDAT

; 80   :         {

	push	ebp
	mov	ebp, esp

; 81   :             typedef BOOST_DEDUCED_TYPENAME select_hash_type<T>::type type;
; 82   :             return float_hash_impl2(static_cast<type>(v));

	fld	QWORD PTR _v$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z ; boost::hash_detail::float_hash_impl2<double>
	add	esp, 8

; 83   :         }

	pop	ebp
	ret	0
??$float_hash_impl@N@hash_detail@boost@@YAIN@Z ENDP	; boost::hash_detail::float_hash_impl<double>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$02@detail@tuples@boost@@SAABU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z
_TEXT	SEGMENT
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$02@detail@tuples@boost@@SAABU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z PROC ; boost::tuples::detail::drop_front<3>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call, COMDAT
; _tup$ = eax

; 98   :             return next::call(tup).tail;

	add	eax, 6

; 99   :         }

	ret	0
?call@?$apply@U?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@@?$drop_front@$02@detail@tuples@boost@@SAABU?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@45@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@45@@Z ENDP ; boost::tuples::detail::drop_front<3>::apply<boost::tuples::cons<unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > > >::call
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z
_TEXT	SEGMENT
??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>, COMDAT
; _this$ = eax
; _r$ = ecx

; 59   :   {}

	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	xor	edx, edx
	cmp	DWORD PTR [ecx+24], edx
	jne	SHORT $LN6@refcounted@4
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [eax]
$LN6@refcounted@4:
	mov	DWORD PTR [eax+32], edx
	mov	DWORD PTR [eax+36], edx
	ret	0
??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABV0123@@Z ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\detail\allocator_utilities.hpp
_TEXT	ENDS
;	COMDAT ??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z
_TEXT	SEGMENT
??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z PROC ; boost::detail::allocator::construct<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >, COMDAT
; _p$ = eax
; _t$ = ecx

; 178  :   new (p) Type(t);

	xor	edx, edx
	cmp	eax, edx
	je	SHORT $LN3@construct@5
	push	esi
	mov	esi, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], esi
	pop	esi
	cmp	DWORD PTR [ecx+24], edx
	jne	SHORT $LN12@construct@5
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [eax]
$LN12@construct@5:
	mov	DWORD PTR [eax+32], edx
	mov	DWORD PTR [eax+36], edx
$LN3@construct@5:

; 179  : }

	ret	0
??$construct@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@allocator@detail@boost@@YAXPAXABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@1flyweights@2@@Z ENDP ; boost::detail::allocator::construct<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\tuple\detail\tuple_basic.hpp
_TEXT	ENDS
;	COMDAT ??$get@$02IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$equal_to@N@std@@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z
_TEXT	SEGMENT
??$get@$02IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$equal_to@N@std@@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z PROC ; boost::tuples::get<3,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >, COMDAT
; _c$ = eax

; 226  :   typedef BOOST_DEDUCED_TYPENAME detail::drop_front<N>::BOOST_NESTED_TEMPLATE
; 227  :       apply<cons<HT, TT> > impl;
; 228  :   typedef BOOST_DEDUCED_TYPENAME impl::type cons_element;
; 229  :   return impl::call(c).head;

	add	eax, 6

; 230  : }

	ret	0
??$get@$02IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@tuples@boost@@YAABU?$equal_to@N@std@@ABU?$cons@IU?$cons@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$cons@U?$hash@N@boost@@U?$cons@U?$equal_to@N@std@@Unull_type@tuples@boost@@@tuples@2@@tuples@3@@tuples@boost@@@01@@Z ENDP ; boost::tuples::get<3,unsigned int,boost::tuples::cons<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::tuples::cons<boost::hash<double>,boost::tuples::cons<std::equal_to<double>,boost::tuples::null_type> > > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$?0_K_K@?$pair@_K_K@std@@QAE@AAU01@@Z
_TEXT	SEGMENT
??$?0_K_K@?$pair@_K_K@std@@QAE@AAU01@@Z PROC		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>, COMDAT
; _this$ = eax
; __Right$ = ecx

; 195  : 		{	// construct from compatible pair

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 196  : 		}

	ret	0
??$?0_K_K@?$pair@_K_K@std@@QAE@AAU01@@Z ENDP		; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><unsigned __int64,unsigned __int64>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ?delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z
_TEXT	SEGMENT
?delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_, COMDAT
; _x$ = eax

; 104  :   {

	push	esi

; 105  :     boost::detail::allocator::destroy(&x->value());

	mov	esi, DWORD PTR [eax+24]
	test	esi, esi
	je	SHORT $LN23@delete_nod
	cmp	esi, eax
	jne	SHORT $LN23@delete_nod
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0
$LN23@delete_nod:
	pop	esi

; 106  :   }

	ret	0
?delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@0@Z
_TEXT	SEGMENT
?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@0@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link, COMDAT
; _x$ = ecx
; _pos$ = eax

; 1014 :     node_impl_type::link(x,pos);

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [eax], ecx

; 1015 :   };

	ret	0
?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@0@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
_TEXT	ENDS
;	COMDAT ?delete_node_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z
_TEXT	SEGMENT
?delete_node_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_, COMDAT
; _x$ = edi

; 534  :   {

	push	esi

; 535  :     super::delete_node_(x);

	mov	esi, DWORD PTR [edi+24]
	test	esi, esi
	je	SHORT $LN25@delete_nod@2
	cmp	esi, edi
	jne	SHORT $LN25@delete_nod@2
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0
$LN25@delete_nod@2:

; 536  :     deallocate_node(x);

	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	pop	esi

; 537  :   }

	ret	0
?delete_node_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@23@@Z ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_node_
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
_TEXT	ENDS
;	COMDAT ?final_delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z
_TEXT	SEGMENT
?final_delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_delete_node_, COMDAT
; _x$ = edi

; 157  :   void final_delete_node_(final_node_type* x){final().delete_node_(x);}

	push	esi
	mov	esi, DWORD PTR [edi+24]
	test	esi, esi
	je	SHORT $LN31@final_dele
	cmp	esi, edi
	jne	SHORT $LN31@final_dele
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0
$LN31@final_dele:
	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	pop	esi
	ret	0
?final_delete_node_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_delete_node_
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z
_TEXT	SEGMENT
?insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_, COMDAT
; _v$ = ecx
; _x$ = eax

; 88   :     boost::detail::allocator::construct(&x->value(),v);

	xor	edx, edx
	cmp	eax, edx
	je	SHORT $LN7@insert_
	push	esi
	mov	esi, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], esi
	pop	esi
	cmp	DWORD PTR [ecx+24], edx
	jne	SHORT $LN16@insert_
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [eax]
$LN16@insert_:
	mov	DWORD PTR [eax+32], edx
	mov	DWORD PTR [eax+36], edx
$LN7@insert_:

; 89   :     return x;
; 90   :   }

	ret	0
?insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAEPAU?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z
_TEXT	SEGMENT
?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link, COMDAT
; _x$ = eax
; _pos$ = ecx

; 1009 :     node_impl_type::link(x->impl(),pos);

	test	eax, eax
	je	SHORT $LN5@link
	mov	edx, DWORD PTR [ecx]
	add	eax, 40					; 00000028H
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [ecx], eax

; 1010 :   };

	ret	0

; 1009 :     node_impl_type::link(x->impl(),pos);

$LN5@link:
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [ecx], eax

; 1010 :   };

	ret	0
?link@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@CAXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ
_TEXT	SEGMENT
_x_end$323811 = -8					; size = 4
_x$323810 = -4						; size = 4
?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_, COMDAT
; _this$ = eax

; 735  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 736  :     for(node_impl_pointer x=buckets.begin(),x_end=buckets.end();

	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _x$323810[ebp], ecx
	mov	DWORD PTR _x_end$323811[ebp], edx

; 737  :         x!=x_end;++x){

	cmp	ecx, edx
	je	SHORT $LN3@delete_all
	push	ebx
	push	esi
	push	edi
	npad	4
$LL5@delete_all:

; 738  :       node_impl_pointer y=x->next();

	mov	eax, DWORD PTR [ecx]

; 739  :       while(y!=x){

	cmp	eax, ecx
	je	SHORT $LN4@delete_all
$LL2@delete_all:

; 740  :         node_impl_pointer z=y->next();
; 741  :         this->final_delete_node_(
; 742  :           static_cast<final_node_type*>(node_type::from_impl(y)));

	mov	esi, DWORD PTR [eax-16]
	mov	ebx, DWORD PTR [eax]
	lea	edi, DWORD PTR [eax-40]
	test	esi, esi
	je	SHORT $LN58@delete_all
	cmp	esi, edi
	jne	SHORT $LN58@delete_all
	mov	ecx, DWORD PTR [esi+8]
	push	ecx
	call	_free
	mov	edx, DWORD PTR [esi+12]
	push	edx
	mov	DWORD PTR [esi+8], 0
	call	_free
	add	esp, 8
	mov	DWORD PTR [esi+12], 0
$LN58@delete_all:
	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 743  :         y=z;

	mov	eax, ebx
	cmp	ebx, DWORD PTR _x$323810[ebp]
	jne	SHORT $LL2@delete_all

; 739  :       while(y!=x){

	mov	ecx, DWORD PTR _x$323810[ebp]
	mov	edx, DWORD PTR _x_end$323811[ebp]
$LN4@delete_all:

; 737  :         x!=x_end;++x){

	add	ecx, 4
	mov	DWORD PTR _x$323810[ebp], ecx
	cmp	ecx, edx
	jne	SHORT $LL5@delete_all
	pop	edi
	pop	esi
	pop	ebx
$LN3@delete_all:

; 744  :       }
; 745  :     }
; 746  :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
_TEXT	ENDS
;	COMDAT ?delete_all_nodes_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXXZ
_TEXT	SEGMENT
?delete_all_nodes_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXXZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_all_nodes_, COMDAT

; 541  :     super::delete_all_nodes_();

	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+12
	jmp	?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_
?delete_all_nodes_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAEXXZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::delete_all_nodes_
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT

; 269  :     delete_all_nodes_();

	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+12
	call	?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_

; 270  :   }

	cmp	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+24, 0
	je	SHORT $LN12@multi_inde
	mov	eax, DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+28
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN12@multi_inde:
	mov	ecx, DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+4
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
??1?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@XZ ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::~multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::~hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>, COMDAT
	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+12
	call	?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_
	cmp	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+24, 0
	je	SHORT $LN14@hashed_fac
	mov	eax, DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+28
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN14@hashed_fac:
	mov	ecx, DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+4
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
??1?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::~hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
??1holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::~holder_arg, COMDAT
	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+12
	call	?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_
	cmp	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+24, 0
	je	SHORT $LN16@holder_arg
	mov	eax, DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+28
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN16@holder_arg:
	mov	ecx, DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+4
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
??1holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::~holder_arg
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
_TEXT	ENDS
;	COMDAT ?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ
_TEXT	SEGMENT
?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::construct_value, COMDAT
; _this$ = eax

; 112  :     {

	push	ecx
	push	esi
	mov	esi, eax

; 113  :       if(!value_cted()){

	cmp	DWORD PTR [esi+24], esi
	push	edi
	lea	edi, DWORD PTR [esi+24]
	je	SHORT $LN1@construct_

; 114  :         /* value_ptr must be ==0, oherwise copy_value would have been called */
; 115  : 
; 116  :         key_type k(*key_ptr());

	fld	QWORD PTR [esi]

; 117  :         key_ptr()->~key_type();
; 118  :         value_ptr= /* guarantees key won't be re-dted at ~rep_type if the */
; 119  :           static_cast<value_type*>(spc_ptr())+1; /* next statement throws */

	mov	DWORD PTR [edi], edi

; 120  :         value_ptr=new(spc_ptr())value_type(k);

	fldz
	xor	eax, eax
	fstp	QWORD PTR [esi+16]
	sub	esp, 8
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	fstp	QWORD PTR [esp]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	call	?generate_tables@ass_synth_priv@@QAEHN@Z ; ass_synth_priv::generate_tables
	mov	DWORD PTR [edi], esi
$LN1@construct_:

; 121  :       }
; 122  :     }

	pop	edi
	pop	esi
	pop	ecx
	ret	0
?construct_value@rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@ABEXXZ ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::construct_value
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z
_TEXT	SEGMENT
??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z PROC ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>, COMDAT
; _this$ = eax
; _x_$ = ecx

; 55   :   {}

	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	xor	edx, edx
	cmp	DWORD PTR [ecx+24], edx
	jne	SHORT $LN6@refcounted@5
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [eax]
$LN6@refcounted@5:
	mov	DWORD PTR [eax+32], edx
	mov	DWORD PTR [eax+36], edx
	ret	0
??0?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@123@@Z ENDP ; boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\key_value.hpp
_TEXT	ENDS
;	COMDAT ?construct_value@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@SAXABVrep_type@1234@@Z
_TEXT	SEGMENT
?construct_value@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@SAXABVrep_type@1234@@Z PROC ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::construct_value, COMDAT
; _r$ = eax

; 141  :   {

	push	ecx
	push	esi
	mov	esi, eax

; 142  :     r.construct_value();

	cmp	DWORD PTR [esi+24], esi
	push	edi
	lea	edi, DWORD PTR [esi+24]
	je	SHORT $LN3@construct_@2
	fld	QWORD PTR [esi]
	mov	DWORD PTR [edi], edi
	fldz
	xor	eax, eax
	fstp	QWORD PTR [esi+16]
	sub	esp, 8
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	fstp	QWORD PTR [esp]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	call	?generate_tables@ass_synth_priv@@QAEHN@Z ; ass_synth_priv::generate_tables
	mov	DWORD PTR [edi], esi
$LN3@construct_@2:

; 143  :   }

	pop	edi
	pop	esi
	pop	ecx
	ret	0
?construct_value@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@SAXABVrep_type@1234@@Z ENDP ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::construct_value
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z
_TEXT	SEGMENT
??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct<std::pair<unsigned __int64,unsigned __int64> &>, COMDAT
; __Ptr$ = eax
; __Val$ = ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

	test	eax, eax
	je	SHORT $LN3@construct@6
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN3@construct@6:

; 209  : 		}

	ret	0
??$construct@AAU?$pair@_K_K@std@@@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@1@AAU21@@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct<std::pair<unsigned __int64,unsigned __int64> &>
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_node.hpp
_TEXT	ENDS
;	COMDAT ?increment@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAXAAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@1@Z
_TEXT	SEGMENT
_bbegin$ = 8						; size = 4
_bend$ = 12						; size = 4
?increment@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAXAAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@1@Z PROC ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::increment, COMDAT
; _x$ = ecx

; 152  :   {

	push	ebp
	mov	ebp, esp

; 153  :     impl_pointer xi=x->impl();

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN5@increment
	add	eax, 40					; 00000028H
	jmp	SHORT $LN6@increment
$LN5@increment:
	xor	eax, eax
$LN6@increment:

; 154  :     trampoline::increment(xi,bbegin,bend);

	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR _bbegin$[ebp], eax
	ja	SHORT $LN10@increment
	cmp	eax, DWORD PTR _bend$[ebp]
	ja	SHORT $LN10@increment
	npad	4
$LL9@increment:
	add	eax, 4
	cmp	DWORD PTR [eax], eax
	je	SHORT $LL9@increment
	mov	eax, DWORD PTR [eax]
$LN10@increment:

; 155  :     x=from_impl(xi);

	test	eax, eax
	je	SHORT $LN25@increment
	add	eax, -40				; ffffffd8H
	mov	DWORD PTR [ecx], eax

; 156  :   }

	pop	ebp
	ret	0

; 155  :     x=from_impl(xi);

$LN25@increment:
	xor	eax, eax
	mov	DWORD PTR [ecx], eax

; 156  :   }

	pop	ebp
	ret	0
?increment@?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@SAXAAPAU1234@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@1@Z ENDP ; boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::increment
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\hash_index_iterator.hpp
_TEXT	ENDS
;	COMDAT ??E?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAEAAV0123@XZ
_TEXT	SEGMENT
??E?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAEAAV0123@XZ PROC ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator++, COMDAT
; _this$ = eax

; 55   :     Node::increment(node,buckets->begin(),buckets->end());

	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	lea	esi, DWORD PTR [edx+esi*4]
	test	ecx, ecx
	je	SHORT $LN19@operator@16
	add	ecx, 40					; 00000028H
	jmp	SHORT $LN20@operator@16
$LN19@operator@16:
	xor	ecx, ecx
$LN20@operator@16:
	mov	ecx, DWORD PTR [ecx]
	cmp	edx, ecx
	ja	SHORT $LN24@operator@16
	cmp	ecx, esi
	ja	SHORT $LN24@operator@16
$LL23@operator@16:
	add	ecx, 4
	cmp	DWORD PTR [ecx], ecx
	je	SHORT $LL23@operator@16
	mov	ecx, DWORD PTR [ecx]
$LN24@operator@16:
	pop	esi
	test	ecx, ecx
	je	SHORT $LN39@operator@16
	add	ecx, -40				; ffffffd8H
	mov	DWORD PTR [eax], ecx

; 56   :     return *this;
; 57   :   }

	ret	0

; 55   :     Node::increment(node,buckets->begin(),buckets->end());

$LN39@operator@16:
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx

; 56   :     return *this;
; 57   :   }

	ret	0
??E?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@QAEAAV0123@XZ ENDP ; boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >,boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::operator++
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\operators.hpp
_TEXT	ENDS
;	COMDAT ??Eboost@@YA?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@0@AAV1230@H@Z
_TEXT	SEGMENT
??Eboost@@YA?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@0@AAV1230@H@Z PROC ; boost::operator++, COMDAT
; ___$ReturnUdt$ = eax
; _x$ = edx

; 276  :     incrementable_type nrv(x);

	mov	ecx, DWORD PTR [edx]
	push	esi
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]

; 277  :     ++x;

	mov	esi, DWORD PTR [ecx+12]
	push	edi
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx]
	lea	edi, DWORD PTR [esi+edi*4]
	test	ecx, ecx
	je	SHORT $LN21@operator@17
	add	ecx, 40					; 00000028H
	jmp	SHORT $LN22@operator@17
$LN21@operator@17:
	xor	ecx, ecx
$LN22@operator@17:
	mov	ecx, DWORD PTR [ecx]
	cmp	esi, ecx
	ja	SHORT $LN26@operator@17
	cmp	ecx, edi
	ja	SHORT $LN26@operator@17
	npad	5
$LL25@operator@17:
	add	ecx, 4
	cmp	DWORD PTR [ecx], ecx
	je	SHORT $LL25@operator@17
	mov	ecx, DWORD PTR [ecx]
$LN26@operator@17:
	pop	edi
	pop	esi
	test	ecx, ecx
	je	SHORT $LN41@operator@17
	add	ecx, -40				; ffffffd8H
	mov	DWORD PTR [edx], ecx

; 278  :     return nrv;
; 279  :   }

	ret	0

; 277  :     ++x;

$LN41@operator@17:
	xor	ecx, ecx
	mov	DWORD PTR [edx], ecx

; 278  :     return nrv;
; 279  :   }

	ret	0
??Eboost@@YA?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@0@AAV1230@H@Z ENDP ; boost::operator++
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z
_TEXT	SEGMENT
$T547529 = -8						; size = 8
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
_position$ = 16						; size = 8
?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase, COMDAT

; 275  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 276  :     BOOST_MULTI_INDEX_CHECK_VALID_ITERATOR(position);
; 277  :     BOOST_MULTI_INDEX_CHECK_DEREFERENCEABLE_ITERATOR(position);
; 278  :     BOOST_MULTI_INDEX_CHECK_IS_OWNER(position,*this);
; 279  :     BOOST_MULTI_INDEX_HASHED_INDEX_CHECK_INVARIANT;
; 280  :     this->final_erase_(static_cast<final_node_type*>(position++.get_node()));

	mov	eax, DWORD PTR _position$[ebp+4]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [eax+12]
	push	ebx
	mov	ebx, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	mov	esi, DWORD PTR [eax]
	push	edi
	mov	edi, ecx
	mov	DWORD PTR $T547529[ebp+4], eax
	lea	esi, DWORD PTR [edx+esi*4]
	test	ecx, ecx
	je	SHORT $LN23@erase
	lea	eax, DWORD PTR [ecx+40]
	jmp	SHORT $LN24@erase
$LN23@erase:
	xor	eax, eax
$LN24@erase:
	mov	eax, DWORD PTR [eax]
	cmp	edx, eax
	ja	SHORT $LN28@erase
	cmp	eax, esi
	ja	SHORT $LN28@erase
$LL27@erase:
	add	eax, 4
	cmp	DWORD PTR [eax], eax
	je	SHORT $LL27@erase
	mov	eax, DWORD PTR [eax]
$LN28@erase:
	test	eax, eax
	je	SHORT $LN43@erase
	add	eax, -40				; ffffffd8H
	mov	DWORD PTR _position$[ebp], eax
	jmp	SHORT $LN44@erase
$LN43@erase:
	mov	DWORD PTR _position$[ebp], 0
$LN44@erase:
	mov	eax, DWORD PTR _this$[ebp]
	test	eax, eax
	je	SHORT $LN51@erase
	add	eax, -12				; fffffff4H
	jmp	SHORT $LN52@erase
$LN51@erase:
	xor	eax, eax
$LN52@erase:
	dec	DWORD PTR [eax+44]
	add	eax, 12					; 0000000cH
	call	?erase_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase_
	push	edi
	call	??3@YAXPAX@Z				; operator delete

; 281  :     return position;

	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR _position$[ebp+4]
	add	esp, 4

; 282  :   }

	pop	edi
	pop	esi
	mov	DWORD PTR [ebx], ecx
	mov	DWORD PTR [ebx+4], edx
	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\hashed_factory.hpp
_TEXT	ENDS
;	COMDAT ?erase@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@@Z
_TEXT	SEGMENT
$T547775 = -12						; size = 8
_h$ = 8							; size = 4
?erase@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@@Z PROC ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::erase, COMDAT
; _this$ = eax

; 76   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 77   :     cont.erase(cont.iterator_to(*h));

	lea	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T547775[ebp]
	push	edx
	add	eax, 12					; 0000000cH
	push	eax
	call	?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase

; 78   :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEXPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@@Z ENDP ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::erase
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
_TEXT	ENDS
;	COMDAT ??$erase@P6A_NABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@@Z@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAXABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@P6A_N0@Z@Z
_TEXT	SEGMENT
$T547892 = -8						; size = 8
??$erase@P6A_NABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@@Z@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAXABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@P6A_N0@Z@Z PROC ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::erase<bool (__cdecl*)(boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> > const &)>, COMDAT
; _h$ = eax

; 66   :   static void erase(const handle_type& h,Checker check)

	push	ebp
	mov	ebp, esp

; 67   :   {
; 68   :     typedef typename core::lock_type lock_type;
; 69   :     lock_type lock(core::mutex());
; 70   :     if(check(h))core::factory().erase(h);

	mov	ecx, DWORD PTR [eax]
	sub	esp, 8
	dec	DWORD PTR [ecx+36]
	jne	SHORT $LN24@erase@2
	mov	ecx, DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+16]
	push	edx
	push	eax
	lea	eax, DWORD PTR $T547892[ebp]
	push	eax
	add	ecx, 12					; 0000000cH
	push	ecx
	call	?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase
$LN24@erase@2:

; 71   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
??$erase@P6A_NABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@@Z@?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SAXABV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@P6A_N0@Z@Z ENDP ; boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::erase<bool (__cdecl*)(boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> > const &)>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@AAU20@@Z
_TEXT	SEGMENT
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@AAU20@@Z PROC ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> &>, COMDAT
; __Pdest$ = eax
; __Src$ = ecx

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	eax, eax
	je	SHORT $LN7@Cons_val@5
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN7@Cons_val@5:

; 281  : 	}

	ret	0
??$_Cons_val@V?$allocator@U?$pair@_K_K@std@@@std@@U?$pair@_K_K@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@_K_K@std@@@0@PAU?$pair@_K_K@0@AAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT
; _this$ = eax
; __Parg$ = ecx

; 304  : 		{	// construct with pointer _Parg

	mov	DWORD PTR [eax], ecx

; 305  : 		}

	ret	0
??0?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE@PAU?$pair@_K_K@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++, COMDAT
; _this$ = edx
; ___$ReturnUdt$ = eax

; 338  : 		_Myiter _Tmp = *this;

	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 339  : 		++*this;

	add	ecx, 16					; 00000010H
	mov	DWORD PTR [edx], ecx

; 340  : 		return (_Tmp);
; 341  : 		}

	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >::operator++
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT

; 1217 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ebx, DWORD PTR _this$[ebp]

; 1218 : 		erase(begin(), end());

	mov	ecx, DWORD PTR [ebx+4]
	push	esi
	mov	esi, DWORD PTR [ebx]
	cmp	esi, ecx
	je	SHORT $LN19@clear@3
	mov	eax, ecx
	sub	eax, ecx
	push	edi
	sar	eax, 2
	lea	edi, DWORD PTR [eax*4]
	push	edi
	push	ecx
	push	esi
	call	_memmove
	add	esp, 12					; 0000000cH
	add	edi, esi
	mov	DWORD PTR [ebx+4], edi
	pop	edi
$LN19@clear@3:
	pop	esi
	pop	ebx

; 1219 : 		}

	pop	ebp
	ret	4
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = edi
; __Val$ = eax

; 976  : 		{	// insert element at end

	push	esi
	mov	esi, eax

; 977  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR [edi+4]
	cmp	esi, eax
	jae	SHORT $LN4@push_back
	mov	ecx, DWORD PTR [edi]
	cmp	ecx, esi
	ja	SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	sub	esi, ecx
	sar	esi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

	cmp	eax, DWORD PTR [edi+8]
	jne	SHORT $LN3@push_back

; 981  : 				_Reserve(1);

	mov	ecx, 1
	mov	eax, edi
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN39@push_back
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax], edx

; 996  : 			++this->_Mylast;

	add	DWORD PTR [edi+4], 4
	pop	esi

; 997  : 			}
; 998  : 		}

	ret	0
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

	cmp	eax, DWORD PTR [edi+8]
	jne	SHORT $LN1@push_back

; 991  : 				_Reserve(1);

	mov	ecx, 1
	mov	eax, edi
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN39@push_back
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
$LN39@push_back:

; 996  : 			++this->_Mylast;

	add	DWORD PTR [edi+4], 4
	pop	esi

; 997  : 			}
; 998  : 		}

	ret	0
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\refcounted.hpp
_TEXT	ENDS
;	COMDAT ??1?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
$T548489 = -8						; size = 8
??1?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::~refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >, COMDAT
; _this$ = eax

; 111  :   {

	push	ebp
	mov	ebp, esp

; 112  :     if(TrackingHelper::entry(*this).release()){

	mov	ecx, DWORD PTR [eax]
	sub	esp, 8
	add	ecx, 32					; 00000020H
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	jne	SHORT $LN41@refcounted@6

; 113  :       TrackingHelper::erase(*this,check_erase);

	mov	ecx, DWORD PTR [eax]
	dec	DWORD PTR [ecx+36]
	jne	SHORT $LN41@refcounted@6
	mov	ecx, DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+16]
	push	edx
	push	eax
	lea	eax, DWORD PTR $T548489[ebp]
	push	eax
	add	ecx, 12					; 0000000cH
	push	ecx
	call	?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase
$LN41@refcounted@6:

; 114  :     }
; 115  :   }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@detail@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::detail::refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >::~refcounted_handle<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> const *,boost::flyweights::detail::flyweight_core_tracking_helper<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 792  : 		return (iterator(this->_Mylast, this));

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 793  : 		}

	ret	0
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 782  : 		return (iterator(this->_Myfirst, this));

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 783  : 		}

	ret	0
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
_TEXT	ENDS
PUBLIC	?DryDraw@Rasterizer@@SA?AVCRect@@ABV?$shared_ptr@UOverlay@@@boost@@ABV2@HHPBK_N3@Z ; Rasterizer::DryDraw
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
;	COMDAT ?DryDraw@Rasterizer@@SA?AVCRect@@ABV?$shared_ptr@UOverlay@@@boost@@ABV2@HHPBK_N3@Z
_TEXT	SEGMENT
$T548540 = -36						; size = 16
$T548541 = -20						; size = 16
_overlay$ = 8						; size = 4
_clipRect$ = 12						; size = 4
_ysub$ = 16						; size = 4
_fBody$ = 20						; size = 1
_fBorder$ = 24						; size = 1
?DryDraw@Rasterizer@@SA?AVCRect@@ABV?$shared_ptr@UOverlay@@@boost@@ABV2@HHPBK_N3@Z PROC ; Rasterizer::DryDraw, COMDAT
; ___$ReturnUdt$ = esi
; _xsub$ = edx

; 1481 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx

; 1482 :     CRect r;
; 1483 :     if(!switchpts || !fBody && !fBorder) return(r);

	xor	ebx, ebx
	push	edi
	cmp	BYTE PTR _fBody$[ebp], bl
	jne	SHORT $LN2@DryDraw
	cmp	BYTE PTR _fBorder$[ebp], bl
	je	SHORT $LN22@DryDraw
$LN2@DryDraw:

; 1484 : 
; 1485 :     // Remember that all subtitle coordinates are specified in 1/8 pixels
; 1486 :     // (x+4)>>3 rounds to nearest whole pixel.
; 1487 :     // ??? What is xsub, ysub, mOffsetX and mOffsetY ?
; 1488 :     int x = (xsub + overlay->mOffsetX + 4)>>3;

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+16]

; 1489 :     int y = (ysub + overlay->mOffsetY + 4)>>3;

	mov	edi, DWORD PTR _ysub$[ebp]
	lea	ecx, DWORD PTR [ecx+edx+4]
	mov	edx, DWORD PTR [eax+20]
	lea	edx, DWORD PTR [edx+edi+4]

; 1490 :     int w = overlay->mOverlayWidth;
; 1491 :     int h = overlay->mOverlayHeight;
; 1492 :     r = clipRect & CRect(x, y, x+w, y+h);

	mov	edi, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [eax+36]
	sar	ecx, 3
	sar	edx, 3
	add	edi, ecx
	mov	DWORD PTR $T548540[ebp], ecx
	add	eax, edx
	lea	ecx, DWORD PTR $T548540[ebp]
	mov	DWORD PTR $T548540[ebp+4], edx
	mov	edx, DWORD PTR _clipRect$[ebp]
	push	ecx
	mov	DWORD PTR $T548540[ebp+12], eax
	push	edx
	lea	eax, DWORD PTR $T548541[ebp]
	push	eax
	mov	DWORD PTR $T548540[ebp+8], edi
	mov	DWORD PTR $T548541[ebp], ebx
	mov	DWORD PTR $T548541[ebp+4], ebx
	mov	DWORD PTR $T548541[ebp+8], ebx
	mov	DWORD PTR $T548541[ebp+12], ebx
	call	DWORD PTR __imp__IntersectRect@12
	mov	ecx, DWORD PTR $T548541[ebp]
	mov	edx, DWORD PTR $T548541[ebp+4]
	mov	eax, DWORD PTR $T548541[ebp+8]
	mov	DWORD PTR [esi], ecx
	mov	ecx, DWORD PTR $T548541[ebp+12]
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], ecx
$LN22@DryDraw:

; 1493 :     return r;
; 1494 : }

	pop	edi
	mov	eax, esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DryDraw@Rasterizer@@SA?AVCRect@@ABV?$shared_ptr@UOverlay@@@boost@@ABV2@HHPBK_N3@Z ENDP ; Rasterizer::DryDraw
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
$T548800 = -8						; size = 8
??1?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>, COMDAT
; _this$ = eax
	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR [eax]
	sub	esp, 8
	add	ecx, 32					; 00000020H
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	jne	SHORT $LN44@flyweight
	mov	ecx, DWORD PTR [eax]
	dec	DWORD PTR [ecx+36]
	jne	SHORT $LN44@flyweight
	mov	ecx, DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+16]
	push	edx
	push	eax
	lea	eax, DWORD PTR $T548800[ebp]
	push	eax
	add	ecx, 12					; 0000000cH
	push	ecx
	call	?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase
$LN44@flyweight:
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>
PUBLIC	?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z ; ssf::Rasterizer::ScanConvert
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z$0
__ehfuncinfo$?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\libssf\rasterizer.cpp
xdata$x	ENDS
;	COMDAT ?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z
_TEXT	SEGMENT
_heap$ = -96						; size = 16
$T575594 = -88						; size = 8
_s$172427 = -80						; size = 16
$T575552 = -72						; size = 8
$T575551 = -60						; size = 8
$T575550 = -52						; size = 8
$T575549 = -44						; size = 8
$T575543 = -36						; size = 8
$T575548 = -32						; size = 4
$T575547 = -32						; size = 4
_x1$172416 = -28					; size = 4
_type$ = -28						; size = 4
_y$172262 = -24						; size = 4
_lastmoveto$ = -24					; size = 4
_miny$ = -24						; size = 4
_j$171913 = -20						; size = 4
_maxy$ = -20						; size = 4
tv1908 = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv1904 = 8						; size = 4
_count$172266 = 8					; size = 4
_minx$ = 8						; size = 4
_this$ = 8						; size = 4
tv1906 = 12						; size = 4
_itX1$172408 = 12					; size = 4
_ptr$172267 = 12					; size = 4
_path$ = 12						; size = 4
?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z PROC ; ssf::Rasterizer::ScanConvert, COMDAT
; _bbox$ = ecx

; 186  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	mov	eax, DWORD PTR fs:0
	push	__ehhandler$?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z
	push	eax

; 187  : 		// Drop any outlines we may have.
; 188  : 
; 189  : 		mOutline.RemoveAll();
; 190  : 		mWideOutline.RemoveAll();
; 191  : 
; 192  : 		if(path.types.IsEmpty() || path.points.IsEmpty() || bbox.IsRectEmpty())

	mov	eax, DWORD PTR _path$[ebp]
	mov	DWORD PTR fs:0, esp
	sub	esp, 88					; 00000058H
	push	ebx
	mov	ebx, DWORD PTR _this$[ebp]
	push	esi
	xor	esi, esi
	mov	DWORD PTR [ebx+40], esi
	mov	DWORD PTR [ebx+60], esi
	push	edi
	mov	edi, ecx
	cmp	DWORD PTR [eax+8], esi
	je	$LN29@ScanConver
	cmp	DWORD PTR [eax+24], esi
	je	$LN29@ScanConver
	push	edi
	call	DWORD PTR __imp__IsRectEmpty@4
	test	eax, eax
	jne	$LN29@ScanConver

; 193  : 		{
; 194  : 			mPathOffsetX = mPathOffsetY = 0;
; 195  : 			mWidth = mHeight = 0;
; 196  : 			return 0;
; 197  : 		}
; 198  : 
; 199  : 		int minx = (bbox.left >> FONT_SCALE) & ~((1<<FONT_SCALE)-1);

	mov	eax, DWORD PTR [edi]

; 200  : 		int miny = (bbox.top >> FONT_SCALE) & ~((1<<FONT_SCALE)-1);

	mov	ecx, DWORD PTR [edi+4]

; 201  : 		int maxx = (bbox.right + ((1<<FONT_SCALE)-1)) >> FONT_SCALE;
; 202  : 		int maxy = (bbox.bottom + ((1<<FONT_SCALE)-1)) >> FONT_SCALE;

	mov	edx, DWORD PTR [edi+12]
	mov	esi, DWORD PTR [edi+8]
	sar	eax, 3
	and	eax, -8					; fffffff8H
	sar	ecx, 3
	mov	DWORD PTR _minx$[ebp], eax
	and	ecx, -8					; fffffff8H

; 203  : 
; 204  : 		path.MovePoints(CPoint(-minx*(1<<FONT_SCALE), -miny*(1<<FONT_SCALE)));

	neg	eax
	mov	DWORD PTR _miny$[ebp], ecx
	add	eax, eax
	neg	ecx
	add	eax, eax
	add	ecx, ecx
	add	eax, eax
	add	edx, 7
	add	ecx, ecx
	sar	edx, 3
	mov	DWORD PTR $T575543[ebp], eax
	mov	eax, DWORD PTR _path$[ebp]
	add	ecx, ecx
	add	esi, 7
	lea	edi, DWORD PTR $T575543[ebp]
	sar	esi, 3
	mov	DWORD PTR _maxy$[ebp], edx
	mov	DWORD PTR $T575543[ebp+4], ecx
	call	?MovePoints@GlyphPath@ssf@@QAEXABVCPoint@@@Z ; ssf::GlyphPath::MovePoints

; 205  : 
; 206  : 		if(minx > maxx || miny > maxy)

	mov	ecx, DWORD PTR _minx$[ebp]
	cmp	ecx, esi
	jg	$LN27@ScanConver
	mov	edx, DWORD PTR _miny$[ebp]
	mov	eax, DWORD PTR _maxy$[ebp]
	cmp	edx, eax
	jg	$LN27@ScanConver

; 211  : 		}
; 212  : 
; 213  : 		mWidth = maxx + 1 - minx;

	sub	esi, ecx
	inc	esi

; 214  : 		mHeight = maxy + 1 - miny;

	sub	eax, edx
	mov	DWORD PTR [ebx+24], esi
	lea	esi, DWORD PTR [eax+1]

; 215  : 
; 216  : 		mPathOffsetX = minx;
; 217  : 		mPathOffsetY = miny;
; 218  : 
; 219  : 		// Initialize edge buffer.  We use edge 0 as a sentinel.
; 220  : 
; 221  : 		mEdgeNext = 1;
; 222  : 		mEdgeHeapSize = 0x10000;
; 223  : 		mpEdgeBuffer = (Edge*)malloc(sizeof(Edge)*mEdgeHeapSize);

	push	524288					; 00080000H
	mov	DWORD PTR [ebx+28], esi
	mov	DWORD PTR [ebx+124], ecx
	mov	DWORD PTR [ebx+128], edx
	mov	DWORD PTR [ebx+104], 1
	mov	DWORD PTR [ebx+100], 65536		; 00010000H
	call	_malloc
	mov	DWORD PTR [ebx+96], eax

; 224  : 
; 225  : 		// Initialize scanline list.
; 226  : 
; 227  : 		mpScanBuffer = new unsigned int[mHeight];

	xor	ecx, ecx
	add	esp, 4
	mov	eax, esi
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]

; 228  : 		memset(mpScanBuffer, 0, mHeight*sizeof(unsigned int));

	mov	ecx, DWORD PTR [ebx+28]
	add	ecx, ecx
	add	esp, 4
	add	ecx, ecx
	push	ecx
	xor	edi, edi
	push	edi
	push	eax
	mov	DWORD PTR [ebx+108], eax
	call	_memset

; 229  : 
; 230  : 		// Scan convert the outline.  Yuck, Bezier curves....
; 231  : 
; 232  : 		// Unfortunately, Windows 95/98 GDI has a bad habit of giving us text
; 233  : 		// paths with all but the first figure left open, so we can't rely
; 234  : 		// on the PT_CLOSEFIGURE flag being used appropriately.
; 235  : 
; 236  : 		fFirstSet = false;
; 237  : 		firstp.x = firstp.y = 0;
; 238  : 		lastp.x = lastp.y = 0;
; 239  : 
; 240  : 		int lastmoveto = -1;
; 241  : 
; 242  : 		BYTE* type = path.types.GetData();

	mov	eax, DWORD PTR _path$[ebp]
	mov	BYTE PTR [ebx+4], 0
	mov	DWORD PTR [ebx+12], edi
	mov	DWORD PTR [ebx+8], edi
	mov	DWORD PTR [ebx+20], edi
	mov	DWORD PTR [ebx+16], edi
	mov	edx, DWORD PTR [eax+4]

; 243  : 		POINT* pt = path.points.GetData();

	mov	esi, DWORD PTR [eax+20]

; 244  : 
; 245  : 		for(size_t i = 0, j = path.types.GetCount(); i < j; i++)

	mov	eax, DWORD PTR [eax+8]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _lastmoveto$[ebp], -1
	mov	DWORD PTR _type$[ebp], edx
	mov	DWORD PTR _j$171913[ebp], eax
	cmp	eax, edi
	jbe	$LN15@ScanConver

; 211  : 		}
; 212  : 
; 213  : 		mWidth = maxx + 1 - minx;

	lea	eax, DWORD PTR [esi-8]
	lea	ecx, DWORD PTR [esi+8]
	lea	edx, DWORD PTR [esi+16]
	mov	DWORD PTR tv1904[ebp], eax
	mov	DWORD PTR tv1906[ebp], ecx
	mov	DWORD PTR tv1908[ebp], edx
	npad	1
$LL26@ScanConver:

; 246  : 		{
; 247  : 			switch(type[i] & ~PT_CLOSEFIGURE)

	mov	ecx, DWORD PTR _type$[ebp]
	movzx	ecx, BYTE PTR [edi+ecx]
	and	ecx, -2					; fffffffeH
	sub	ecx, 2
	je	$LN19@ScanConver
	sub	ecx, 2
	je	SHORT $LN17@ScanConver
	sub	ecx, 2
	jne	$LN25@ScanConver

; 248  : 			{
; 249  : 			case PT_MOVETO:
; 250  : 				if(lastmoveto >= 0 && firstp != lastp) _EvaluateLine(lastp, firstp);

	cmp	DWORD PTR _lastmoveto$[ebp], ecx
	jl	SHORT $LN20@ScanConver
	mov	edx, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR [ebx+16]
	push	edx
	push	eax
	lea	eax, DWORD PTR [ebx+8]
	call	??9CPoint@@QBEHUtagPOINT@@@Z		; CPoint::operator!=
	test	eax, eax
	je	SHORT $LN349@ScanConver
	mov	ecx, DWORD PTR [ebx+12]
	mov	edx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [ebx+20]
	push	ecx
	mov	ecx, DWORD PTR [ebx+16]
	push	edx
	push	eax
	push	ecx
	mov	ecx, ebx
	call	?_EvaluateLine@Rasterizer@ssf@@AAEXVCPoint@@0@Z ; ssf::Rasterizer::_EvaluateLine
$LN349@ScanConver:
	mov	eax, DWORD PTR tv1904[ebp]
$LN20@ScanConver:

; 251  : 				lastmoveto = i;
; 252  : 				fFirstSet = false;

	mov	BYTE PTR [ebx+4], 0

; 253  : 				lastp = pt[i];

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR _lastmoveto$[ebp], edi
	mov	DWORD PTR [ebx+16], ecx
	mov	DWORD PTR [ebx+20], edx

; 254  : 				break;

	jmp	$LN25@ScanConver
$LN17@ScanConver:

; 257  : 				break;
; 258  : 			case PT_BEZIERTO:
; 259  : 				if(j - (i-1) >= 4) _EvaluateBezier(pt[i-1], pt[i], pt[i+1], pt[i+2]);

	mov	ecx, DWORD PTR _j$171913[ebp]
	sub	ecx, edi
	inc	ecx
	cmp	ecx, 4
	jb	SHORT $LN16@ScanConver
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR $T575549[ebp], ecx
	mov	ecx, DWORD PTR tv1906[ebp]
	mov	DWORD PTR $T575549[ebp+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T575550[ebp], edx
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR $T575550[ebp+4], ecx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR $T575551[ebp], edx
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T575551[ebp+4], ecx
	lea	ecx, DWORD PTR $T575549[ebp]
	push	ecx
	mov	DWORD PTR $T575552[ebp], edx
	lea	edx, DWORD PTR $T575550[ebp]
	mov	DWORD PTR $T575552[ebp+4], eax
	push	edx
	lea	eax, DWORD PTR $T575551[ebp]
	push	eax
	lea	ecx, DWORD PTR $T575552[ebp]
	push	ecx
	mov	ecx, ebx
	call	?_EvaluateBezier@Rasterizer@ssf@@AAEXABVCPoint@@000@Z ; ssf::Rasterizer::_EvaluateBezier
	mov	eax, DWORD PTR tv1904[ebp]
$LN16@ScanConver:

; 260  : 				i += 2;

	mov	ecx, 16					; 00000010H
	add	DWORD PTR tv1908[ebp], ecx
	add	DWORD PTR tv1906[ebp], ecx
	add	edi, 2
	add	esi, ecx
	add	eax, ecx

; 261  : 				break;

	jmp	SHORT $LN25@ScanConver
$LN19@ScanConver:

; 255  : 			case PT_LINETO:
; 256  : 				if(j - (i-1) >= 2) _EvaluateLine(pt[i-1], pt[i]);

	mov	edx, DWORD PTR _j$171913[ebp]
	sub	edx, edi
	inc	edx
	cmp	edx, 2
	jb	SHORT $LN25@ScanConver
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR $T575594[ebp+4], ecx
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T575594[ebp+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T575547[ebp], esp
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, ebx
	mov	DWORD PTR $T575548[ebp], esp
	call	?_EvaluateLine@Rasterizer@ssf@@AAEXVCPoint@@0@Z ; ssf::Rasterizer::_EvaluateLine
	mov	eax, DWORD PTR tv1904[ebp]
$LN25@ScanConver:

; 244  : 
; 245  : 		for(size_t i = 0, j = path.types.GetCount(); i < j; i++)

	mov	edx, DWORD PTR tv1908[ebp]
	add	DWORD PTR tv1906[ebp], 8
	inc	edi
	add	edx, 8
	add	eax, 8
	add	esi, 8
	mov	DWORD PTR tv1908[ebp], edx
	mov	DWORD PTR tv1904[ebp], eax
	cmp	edi, DWORD PTR _j$171913[ebp]
	jb	$LL26@ScanConver

; 262  : 			}
; 263  : 		}
; 264  : 
; 265  : 		if(lastmoveto >= 0 && firstp != lastp) _EvaluateLine(lastp, firstp);

	cmp	DWORD PTR _lastmoveto$[ebp], 0
	jl	SHORT $LN350@ScanConver
	mov	eax, DWORD PTR [ebx+16]
	mov	ecx, DWORD PTR [ebx+20]
	cmp	DWORD PTR [ebx+8], eax
	jne	SHORT $LN68@ScanConver
	cmp	DWORD PTR [ebx+12], ecx
	je	SHORT $LN350@ScanConver
$LN68@ScanConver:
	mov	eax, DWORD PTR [ebx+12]
	mov	ecx, DWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ebx+20]
	push	eax
	mov	eax, DWORD PTR [ebx+16]
	push	ecx
	push	edx
	push	eax
	mov	ecx, ebx
	call	?_EvaluateLine@Rasterizer@ssf@@AAEXVCPoint@@0@Z ; ssf::Rasterizer::_EvaluateLine
$LN350@ScanConver:
	xor	edi, edi
$LN15@ScanConver:

; 266  : 
; 267  : 		// Convert the edges to spans.  We couldn't do this before because some of
; 268  : 		// the regions may have winding numbers >+1 and it would have been a pain
; 269  : 		// to try to adjust the spans on the fly.  We use one heap to detangle
; 270  : 		// a scanline's worth of edges from the singly-linked lists, and another
; 271  : 		// to collect the actual scans.
; 272  : 
; 273  : 		std::vector<int> heap;

	mov	DWORD PTR _heap$[ebp], edi
	mov	DWORD PTR _heap$[ebp+4], edi
	mov	DWORD PTR _heap$[ebp+8], edi
	mov	DWORD PTR __$EHRec$[ebp+8], edi

; 274  : 
; 275  : 		mOutline.SetCount(0, mEdgeNext / 2);

	mov	eax, DWORD PTR [ebx+104]
	lea	esi, DWORD PTR [ebx+32]
	shr	eax, 1
	xor	edi, edi
	call	?SetCount@?$Array@TSpan@Rasterizer@ssf@@@ssf@@QAEXII@Z ; ssf::Array<ssf::Rasterizer::Span>::SetCount

; 276  : 
; 277  : 		for(int y = 0; y < mHeight; y++)

	mov	DWORD PTR _y$172262[ebp], edi
	cmp	DWORD PTR [ebx+28], edi
	jle	$LN12@ScanConver
$LN14@ScanConver:

; 278  : 		{
; 279  : 			int count = 0;
; 280  : 
; 281  : 			// Detangle scanline into edge heap.
; 282  : 
; 283  : 			for(unsigned int ptr = mpScanBuffer[y]; ptr; ptr = mpEdgeBuffer[ptr].next)

	mov	ecx, DWORD PTR [ebx+108]
	mov	eax, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR _count$172266[ebp], 0
	mov	DWORD PTR _ptr$172267[ebp], eax
	test	eax, eax
	je	$LN347@ScanConver
$LN11@ScanConver:

; 284  : 			{
; 285  : 				heap.push_back(mpEdgeBuffer[ptr].posandflag);

	mov	edx, DWORD PTR [ebx+96]
	mov	eax, DWORD PTR _ptr$172267[ebp]
	mov	esi, DWORD PTR _heap$[ebp+4]
	lea	edi, DWORD PTR [edx+eax*8+4]
	mov	edx, DWORD PTR _heap$[ebp]
	cmp	edi, esi
	jae	SHORT $LN81@ScanConver
	cmp	edx, edi
	ja	SHORT $LN81@ScanConver
	mov	ecx, DWORD PTR _heap$[ebp+8]
	sub	edi, edx
	sar	edi, 2
	cmp	esi, ecx
	jne	SHORT $LN92@ScanConver
	mov	eax, esi
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN337@ScanConver
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN92@ScanConver
	mov	edx, ecx
	shr	edx, 1
	mov	esi, 1073741823				; 3fffffffH
	sub	esi, edx
	cmp	esi, ecx
	jae	SHORT $LN114@ScanConver
	xor	ecx, ecx
	jmp	SHORT $LN115@ScanConver
$LN114@ScanConver:
	add	ecx, edx
$LN115@ScanConver:
	cmp	ecx, eax
	jae	SHORT $LN111@ScanConver
	mov	ecx, eax
$LN111@ScanConver:
	push	ecx
	lea	esi, DWORD PTR _heap$[ebp]
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
	mov	edx, DWORD PTR _heap$[ebp]
	mov	esi, DWORD PTR _heap$[ebp+4]
$LN92@ScanConver:
	test	esi, esi
	je	SHORT $LN181@ScanConver
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [esi], ecx
	jmp	SHORT $LN181@ScanConver
$LN81@ScanConver:
	mov	ecx, DWORD PTR _heap$[ebp+8]
	cmp	esi, ecx
	jne	SHORT $LN139@ScanConver
	mov	eax, esi
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN337@ScanConver
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN139@ScanConver
	mov	edx, ecx
	shr	edx, 1
	mov	esi, 1073741823				; 3fffffffH
	sub	esi, edx
	cmp	esi, ecx
	jae	SHORT $LN161@ScanConver
	xor	ecx, ecx
	jmp	SHORT $LN162@ScanConver
$LN161@ScanConver:
	add	ecx, edx
$LN162@ScanConver:
	cmp	ecx, eax
	jae	SHORT $LN158@ScanConver
	mov	ecx, eax
$LN158@ScanConver:
	push	ecx
	lea	esi, DWORD PTR _heap$[ebp]
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
	mov	esi, DWORD PTR _heap$[ebp+4]
$LN139@ScanConver:
	test	esi, esi
	je	SHORT $LN181@ScanConver
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [esi], edx
$LN181@ScanConver:

; 278  : 		{
; 279  : 			int count = 0;
; 280  : 
; 281  : 			// Detangle scanline into edge heap.
; 282  : 
; 283  : 			for(unsigned int ptr = mpScanBuffer[y]; ptr; ptr = mpEdgeBuffer[ptr].next)

	mov	ecx, DWORD PTR _ptr$172267[ebp]
	mov	eax, DWORD PTR [ebx+96]
	mov	eax, DWORD PTR [eax+ecx*8]

; 284  : 			{
; 285  : 				heap.push_back(mpEdgeBuffer[ptr].posandflag);

	add	esi, 4
	mov	DWORD PTR _heap$[ebp+4], esi
	mov	DWORD PTR _ptr$172267[ebp], eax
	test	eax, eax
	jne	$LN11@ScanConver

; 278  : 		{
; 279  : 			int count = 0;
; 280  : 
; 281  : 			// Detangle scanline into edge heap.
; 282  : 
; 283  : 			for(unsigned int ptr = mpScanBuffer[y]; ptr; ptr = mpEdgeBuffer[ptr].next)

	mov	edi, DWORD PTR _y$172262[ebp]
$LN9@ScanConver:

; 286  : 			}
; 287  : 
; 288  : 			// Sort edge heap.  Note that we conveniently made the opening edges
; 289  : 			// one more than closing edges at the same spot, so we won't have any
; 290  : 			// problems with abutting spans.
; 291  : 
; 292  : 			std::sort(heap.begin(), heap.end());

	mov	eax, DWORD PTR _heap$[ebp]
	mov	edx, esi
	sub	edx, eax
	sar	edx, 2
	push	edx
	push	esi
	push	eax
	call	??$_Sort@PAHH@std@@YAXPAH0H@Z		; std::_Sort<int *,int>

; 293  : 
; 294  : 			// Process edges and add spans.  Since we only check for a non-zero
; 295  : 			// winding number, it doesn't matter which way the outlines go!
; 296  : 
; 297  : 			std::vector<int>::iterator itX1 = heap.begin();

	mov	eax, DWORD PTR _heap$[ebp]
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	mov	DWORD PTR _itX1$172408[ebp], eax

; 298  : 			std::vector<int>::iterator itX2 = heap.end();
; 299  : 
; 300  : 			int x1, x2;
; 301  : 
; 302  : 			for(; itX1 != itX2; ++itX1)

	cmp	eax, esi
	je	$LN283@ScanConver
	npad	7
$LL238@ScanConver:

; 303  : 			{
; 304  : 				int x = *itX1;
; 305  : 
; 306  : 				if(!count) 

	mov	edx, DWORD PTR _count$172266[ebp]
	mov	eax, DWORD PTR [ecx]
	test	edx, edx
	jne	SHORT $LN348@ScanConver

; 307  : 				{
; 308  : 					x1 = x >> 1;

	mov	ecx, eax
	sar	ecx, 1
	mov	DWORD PTR _x1$172416[ebp], ecx
	jmp	SHORT $LN5@ScanConver
$LN347@ScanConver:

; 278  : 		{
; 279  : 			int count = 0;
; 280  : 
; 281  : 			// Detangle scanline into edge heap.
; 282  : 
; 283  : 			for(unsigned int ptr = mpScanBuffer[y]; ptr; ptr = mpEdgeBuffer[ptr].next)

	mov	esi, DWORD PTR _heap$[ebp+4]
	jmp	SHORT $LN9@ScanConver
$LN348@ScanConver:

; 307  : 				{
; 308  : 					x1 = x >> 1;

	mov	ecx, DWORD PTR _x1$172416[ebp]
$LN5@ScanConver:

; 309  : 				}
; 310  : 
; 311  : 				if(x&1) ++count;

	test	al, 1
	je	SHORT $LN4@ScanConver
	inc	edx
	jmp	SHORT $LN361@ScanConver
$LN4@ScanConver:

; 312  : 				else --count;

	dec	edx
$LN361@ScanConver:
	mov	DWORD PTR _count$172266[ebp], edx

; 313  : 
; 314  : 				if(!count)

	test	edx, edx
	jne	$LN7@ScanConver

; 315  : 				{
; 316  : 					x2 = x >> 1;

	sar	eax, 1

; 317  : 
; 318  : 					if(x2 > x1)

	cmp	eax, ecx
	jle	$LN7@ScanConver

; 319  : 					{
; 320  : 						Span s(x1, y, x2, y);
; 321  : 						s.first += 0x4000000040000000i64;

	add	ecx, 1073741824				; 40000000H
	mov	edx, edi
	adc	edx, 1073741824				; 40000000H

; 322  : 						s.second += 0x4000000040000000i64;

	add	eax, 1073741824				; 40000000H
	mov	esi, edi
	adc	esi, 1073741824				; 40000000H
	mov	DWORD PTR _s$172427[ebp+12], esi

; 323  : 						mOutline.Add(s);

	mov	esi, DWORD PTR [ebx+40]
	lea	edi, DWORD PTR [esi+1]
	mov	DWORD PTR _s$172427[ebp], ecx
	mov	DWORD PTR _s$172427[ebp+4], edx
	mov	DWORD PTR _s$172427[ebp+8], eax
	cmp	edi, DWORD PTR [ebx+44]
	jbe	SHORT $LN257@ScanConver
	mov	eax, DWORD PTR [ebx+48]
	cmp	eax, esi
	ja	SHORT $LN262@ScanConver
	mov	eax, esi
$LN262@ScanConver:
	mov	ecx, DWORD PTR [ebx+36]
	add	eax, edi
	mov	DWORD PTR [ebx+44], eax
	shl	eax, 4
	push	16					; 00000010H
	push	eax
	test	ecx, ecx
	je	SHORT $LN263@ScanConver
	push	ecx
	call	__aligned_realloc
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN264@ScanConver
$LN263@ScanConver:
	call	__aligned_malloc
	add	esp, 8
$LN264@ScanConver:
	mov	edx, DWORD PTR _s$172427[ebp+4]
	mov	ecx, DWORD PTR _s$172427[ebp]
	mov	DWORD PTR [ebx+36], eax
$LN257@ScanConver:
	mov	eax, DWORD PTR [ebx+36]
	mov	DWORD PTR [ebx+40], edi
	mov	edi, DWORD PTR _y$172262[ebp]
	shl	esi, 4
	add	eax, esi
	mov	esi, DWORD PTR _heap$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _s$172427[ebp+8]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _s$172427[ebp+12]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN7@ScanConver:

; 298  : 			std::vector<int>::iterator itX2 = heap.end();
; 299  : 
; 300  : 			int x1, x2;
; 301  : 
; 302  : 			for(; itX1 != itX2; ++itX1)

	mov	ecx, DWORD PTR _itX1$172408[ebp]
	add	ecx, 4
	mov	DWORD PTR _itX1$172408[ebp], ecx
	cmp	ecx, esi
	jne	$LL238@ScanConver

; 324  : 					}
; 325  : 				}
; 326  : 			}
; 327  : 
; 328  : 			heap.clear();

	mov	eax, DWORD PTR _heap$[ebp]
	push	0
	push	esi
	push	eax
	call	_memmove
	mov	ecx, DWORD PTR _heap$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _heap$[ebp+4], ecx
$LN283@ScanConver:

; 276  : 
; 277  : 		for(int y = 0; y < mHeight; y++)

	inc	edi
	mov	DWORD PTR _y$172262[ebp], edi
	cmp	edi, DWORD PTR [ebx+28]
	jl	$LN14@ScanConver
$LN12@ScanConver:

; 329  : 		}
; 330  : 
; 331  : 		// Dump the edge and scan buffers, since we no longer need them.
; 332  : 
; 333  : 		free(mpEdgeBuffer);

	mov	edx, DWORD PTR [ebx+96]
	push	edx
	call	_free

; 334  : 		delete [] mpScanBuffer;

	mov	eax, DWORD PTR [ebx+108]
	add	esp, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]

; 335  : 
; 336  : 		// All done!
; 337  : 
; 338  : 		return true;

	mov	eax, DWORD PTR _heap$[ebp]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN329@ScanConver
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN329@ScanConver:
	mov	al, 1

; 339  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN337@ScanConver:

; 284  : 			{
; 285  : 				heap.push_back(mpEdgeBuffer[ptr].posandflag);

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN362@ScanConver:
$LN27@ScanConver:

; 207  : 		{
; 208  : 			mWidth = mHeight = 0;

	xor	eax, eax
	mov	DWORD PTR [ebx+28], eax
	mov	DWORD PTR [ebx+24], eax

; 209  : 			mPathOffsetX = mPathOffsetY = 0;

	mov	DWORD PTR [ebx+128], eax
	mov	DWORD PTR [ebx+124], eax

; 210  : 			return true;

	mov	al, 1

; 339  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN29@ScanConver:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR [ebx+128], esi
	mov	DWORD PTR [ebx+124], esi
	mov	DWORD PTR [ebx+28], esi
	mov	DWORD PTR [ebx+24], esi
	pop	edi
	pop	esi
	xor	al, al
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN360@ScanConver:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z$0:
	lea	esi, DWORD PTR _heap$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ScanConvert@Rasterizer@ssf@@QAE_NAAVGlyphPath@2@ABVCRect@@@Z ENDP ; ssf::Rasterizer::ScanConvert
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\detail\hash_float.hpp
;	COMDAT ??$float_hash_value@N@hash_detail@boost@@YAIN@Z
_TEXT	SEGMENT
_v$ = 8							; size = 8
??$float_hash_value@N@hash_detail@boost@@YAIN@Z PROC	; boost::hash_detail::float_hash_value<double>, COMDAT

; 91   :         {

	push	ebp
	mov	ebp, esp

; 92   :             return v == 0 ? 0 : float_hash_impl(v);

	fld	QWORD PTR _v$[ebp]
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@float_hash@2
	fstp	ST(0)
	xor	eax, eax

; 93   :         }

	pop	ebp
	ret	0
$LN3@float_hash@2:

; 92   :             return v == 0 ? 0 : float_hash_impl(v);

	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z ; boost::hash_detail::float_hash_impl2<double>
	add	esp, 8

; 93   :         }

	pop	ebp
	ret	0
??$float_hash_value@N@hash_detail@boost@@YAIN@Z ENDP	; boost::hash_detail::float_hash_value<double>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; __Last$ = edx
; __Dest$ = eax

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR __First$[ebp]

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

	cmp	ecx, edx
	je	SHORT $LN4@Uninit_mov
	push	esi
	npad	5
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

	test	eax, eax
	je	SHORT $LN20@Uninit_mov
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
$LN20@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

	add	ecx, 16					; 00000010H
	add	eax, 16					; 00000010H
	cmp	ecx, edx
	jne	SHORT $LL6@Uninit_mov
	pop	esi
$LN4@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);
; 438  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@@Z
_TEXT	SEGMENT
__Cat$597201 = -4					; size = 1
__Dest$ = 8						; size = 4
??$_Uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@@Z PROC ; std::_Uninitialized_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Cat$597201[ebp]
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 8

; 472  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z
_TEXT	SEGMENT
__Cat$597220 = 8					; size = 1
__Ptr$ = 8						; size = 4
??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR __Cat$597220[ebp]
	push	eax
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >
	add	esp, 8

; 1326 : 		}

	pop	ebp
	ret	4
??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter, COMDAT
; ___$ReturnUdt$ = eax

; 801  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [eax], ecx

; 803  : 		}

	pop	ebp
	ret	4
?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\shared_ptr.hpp
_TEXT	ENDS
;	COMDAT ??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z PROC		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>, COMDAT
; _this$ = eax
; _r$ = ecx

; 344  :     {

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], 0

; 345  :         pn.swap( r.pn );

	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [eax+4], edx

; 346  :         r.px = 0;

	mov	DWORD PTR [ecx], 0
	pop	esi

; 347  :     }

	ret	0
??0?$shared_ptr@E@boost@@QAE@$$QAV01@@Z ENDP		; boost::shared_ptr<unsigned char>::shared_ptr<unsigned char>
_TEXT	ENDS
PUBLIC	?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z ; Rasterizer::Draw
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\sp_counted_base_w32.hpp
xdata$x	SEGMENT
__unwindtable$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z$0
__ehfuncinfo$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
xdata$x	ENDS
;	COMDAT ?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z
_TEXT	SEGMENT
_r$ = -108						; size = 16
tv2434 = -92						; size = 4
tv2416 = -88						; size = 4
tv2305 = -88						; size = 4
tv2428 = -84						; size = 4
tv2299 = -84						; size = 4
tv2288 = -80						; size = 4
tv2230 = -80						; size = 4
tv1383 = -80						; size = 4
$T597407 = -80						; size = 4
_dst_V$318086 = -80					; size = 4
_dst_U$318048 = -80					; size = 4
_a$597417 = -76						; size = 4
_dst_Y$318084 = -76					; size = 4
_dst_V$318049 = -76					; size = 4
tv2293 = -72						; size = 4
tv901 = -72						; size = 4
tv1463 = -68						; size = 4
_dst_V$318068 = -68					; size = 4
tv2240 = -64						; size = 4
tv2094 = -64						; size = 4
_ia$597424 = -64					; size = 4
tv2422 = -60						; size = 4
tv353 = -60						; size = 4
_wt$318034 = -60					; size = 4
tv1336 = -56						; size = 4
tv1300 = -56						; size = 4
tv1279 = -56						; size = 4
_sw$318090 = -56					; size = 4
_dst_V$318055 = -56					; size = 4
_yo$ = -56						; size = 4
tv2476 = -52						; size = 4
_ia$597418 = -52					; size = 4
_a$597381 = -52						; size = 4
_dst_U$318054 = -52					; size = 4
_sw$318033 = -52					; size = 4
_sw$318018 = -52					; size = 4
tv2067 = -48						; size = 4
tv1395 = -48						; size = 4
_dst_A$318082 = -48					; size = 4
_dst_A$318064 = -48					; size = 4
_dst$ = -48						; size = 4
tv2201 = -44						; size = 4
tv2019 = -44						; size = 4
_dst_U$318085 = -44					; size = 4
_dst_A$318051 = -44					; size = 4
_s$ = -44						; size = 4
tv2360 = -40						; size = 4
_ia$597411 = -40					; size = 4
_ia$597382 = -40					; size = 4
_dst_U$318067 = -40					; size = 4
_dst_Y$318053 = -40					; size = 4
_draw_method$ = -40					; size = 4
_dst_Y$318066 = -36					; size = 4
_wt$318008 = -36					; size = 4
_xo$ = -36						; size = 4
tv1163 = -32						; size = 4
_color$ = -28						; size = 4
_new_x$318061 = -24					; size = 4
_w$ = -24						; size = 4
_h$ = -20						; size = 4
_AYUV_PLANAR$ = -15					; size = 1
_fSSE2$ = -14						; size = 1
_fSingleColor$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_spd$ = 8						; size = 4
_clipRect$ = 12						; size = 4
_s_base$ = 16						; size = 4
_xsub$ = 20						; size = 4
_ysub$ = 24						; size = 4
tv2214 = 28						; size = 4
tv1285 = 28						; size = 4
_dst_Y$318047 = 28					; size = 4
_wt$317998 = 28						; size = 4
_switchpts$ = 28					; size = 4
_fBody$ = 32						; size = 1
_fBorder$ = 36						; size = 1
_overlay$ = 40						; size = 8
?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z PROC ; Rasterizer::Draw, COMDAT

; 1261 : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 100				; 00000064H
	push	esi
	mov	esi, DWORD PTR _spd$[ebp]
	push	edi

; 1262 :     if(!switchpts || !fBody && !fBorder) return;

	xor	edx, edx
	cmp	DWORD PTR _switchpts$[ebp], edx
	je	$LN68@Draw@3
	cmp	BYTE PTR _fBody$[ebp], dl
	jne	SHORT $LN69@Draw@3
	cmp	BYTE PTR _fBorder$[ebp], dl
	je	$LN68@Draw@3
$LN69@Draw@3:

; 1263 : 
; 1264 :     // clip
; 1265 :     // Limit drawn area to intersection of rendering surface and rectangular clip area
; 1266 :     CRect r(0, 0, spd.w, spd.h);

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR _r$[ebp+12], eax

; 1267 :     r &= clipRect;

	mov	eax, DWORD PTR _clipRect$[ebp]
	mov	DWORD PTR _r$[ebp+8], ecx
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR _r$[ebp], edx
	mov	DWORD PTR _r$[ebp+4], edx
	push	ecx
	mov	edx, ecx
	push	edx
	call	DWORD PTR __imp__IntersectRect@12

; 1268 :     // Remember that all subtitle coordinates are specified in 1/8 pixels
; 1269 :     // (x+4)>>3 rounds to nearest whole pixel.
; 1270 :     // ??? What is xsub, ysub, mOffsetX and mOffsetY ?
; 1271 :     int overlayPitch = overlay->mOverlayPitch;

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR [eax+40]

; 1272 :     int x = (xsub + overlay->mOffsetX + 4)>>3;

	mov	edx, DWORD PTR [eax+16]

; 1273 :     int y = (ysub + overlay->mOffsetY + 4)>>3;

	mov	edi, DWORD PTR _ysub$[ebp]
	mov	DWORD PTR tv1163[ebp], ecx
	mov	ecx, DWORD PTR _xsub$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+4]
	mov	edx, DWORD PTR [eax+20]
	lea	edx, DWORD PTR [edx+edi+4]

; 1274 :     int w = overlay->mOverlayWidth;

	mov	edi, DWORD PTR [eax+32]

; 1275 :     int h = overlay->mOverlayHeight;

	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR _w$[ebp], edi

; 1276 :     int xo = 0, yo = 0;
; 1277 :     // Again, limiting?
; 1278 :     if(x < r.left) {xo = r.left-x; w -= r.left-x; x = r.left;}

	mov	edi, DWORD PTR _r$[ebp]
	sar	ecx, 3
	mov	DWORD PTR _h$[ebp], eax
	xor	eax, eax
	sar	edx, 3
	mov	DWORD PTR _xo$[ebp], eax
	mov	DWORD PTR _yo$[ebp], eax
	cmp	ecx, edi
	jge	SHORT $LN67@Draw@3
	mov	eax, edi
	sub	eax, ecx
	sub	ecx, edi
	add	DWORD PTR _w$[ebp], ecx
	mov	DWORD PTR _xo$[ebp], eax
	mov	ecx, edi
$LN67@Draw@3:

; 1279 :     if(y < r.top) {yo = r.top-y; h -= r.top-y; y = r.top;}

	mov	eax, DWORD PTR _r$[ebp+4]
	cmp	edx, eax
	jge	SHORT $LN66@Draw@3
	mov	edi, eax
	sub	edi, edx
	sub	edx, eax
	add	DWORD PTR _h$[ebp], edx
	mov	DWORD PTR _yo$[ebp], edi
	mov	edx, eax
$LN66@Draw@3:

; 1280 :     if(x+w > r.right) w = r.right-x;

	mov	edi, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR _r$[ebp+8]
	add	edi, ecx
	cmp	edi, eax
	jle	SHORT $LN65@Draw@3
	sub	eax, ecx
	mov	DWORD PTR _w$[ebp], eax
$LN65@Draw@3:

; 1281 :     if(y+h > r.bottom) h = r.bottom-y;

	mov	edi, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR _r$[ebp+12]
	add	edi, edx
	cmp	edi, eax
	jle	SHORT $LN64@Draw@3
	sub	eax, edx
	mov	DWORD PTR _h$[ebp], eax
$LN64@Draw@3:

; 1282 :     // Check if there's actually anything to render
; 1283 :     if(w <= 0 || h <= 0) return;

	cmp	DWORD PTR _w$[ebp], 0
	jle	$LN62@Draw@3
	cmp	DWORD PTR _h$[ebp], 0
	jle	$LN62@Draw@3

; 1284 : 
; 1285 :     // CPUID from VDub
; 1286 :     bool fSSE2 = !!(g_cpuid.m_flags & CCpuID::sse2);

	mov	eax, DWORD PTR ?g_cpuid@@3VCCpuID@@A	; g_cpuid
	shr	eax, 3
	and	al, 1
	mov	BYTE PTR _fSSE2$[ebp], al

; 1287 :     bool fSingleColor = (switchpts[1]==0xffffffff);

	mov	eax, DWORD PTR _switchpts$[ebp]
	cmp	DWORD PTR [eax+4], -1

; 1288 :     bool AYUV_PLANAR = (spd.type==MSP_AYUV_PLANAR);
; 1289 :     int draw_method = 0;

	mov	DWORD PTR _draw_method$[ebp], 0
	sete	BYTE PTR _fSingleColor$[ebp]
	cmp	DWORD PTR [esi], 9
	sete	BYTE PTR _AYUV_PLANAR$[ebp]

; 1290 :     if(fSingleColor)

	cmp	BYTE PTR _fSingleColor$[ebp], 0
	je	SHORT $LN61@Draw@3

; 1291 :         draw_method |= DM::SINGLE_COLOR;

	mov	DWORD PTR _draw_method$[ebp], 4
$LN61@Draw@3:

; 1292 :     if(fSSE2)

	cmp	BYTE PTR _fSSE2$[ebp], 0
	je	SHORT $LN60@Draw@3

; 1293 :         draw_method |= DM::SSE2;

	or	DWORD PTR _draw_method$[ebp], 1
$LN60@Draw@3:

; 1294 :     if(AYUV_PLANAR)

	cmp	BYTE PTR _AYUV_PLANAR$[ebp], 0
	je	SHORT $LN59@Draw@3

; 1295 :         draw_method |= DM::AYUV_PLANAR;

	or	DWORD PTR _draw_method$[ebp], 16	; 00000010H
$LN59@Draw@3:

; 1296 :     
; 1297 :     // draw
; 1298 :     // Grab the first colour
; 1299 :     DWORD color = switchpts[0];

	mov	eax, DWORD PTR [eax]

; 1300 :     const byte* s = s_base + overlay->mOverlayPitch*yo + xo;
; 1301 : 
; 1302 :     // How would this differ from src?
; 1303 :     unsigned long* dst = (unsigned long *)(((char *)spd.bits + spd.pitch * y) + ((x*spd.bpp)>>3));

	mov	esi, DWORD PTR _spd$[ebp]
	mov	edi, DWORD PTR tv1163[ebp]
	imul	edi, DWORD PTR _yo$[ebp]
	add	edi, DWORD PTR _xo$[ebp]
	mov	DWORD PTR _color$[ebp], eax
	mov	eax, DWORD PTR [esi+16]
	mov	esi, DWORD PTR [esi+12]
	add	edi, DWORD PTR _s_base$[ebp]
	imul	esi, ecx
	mov	ecx, eax
	imul	ecx, edx
	mov	edx, DWORD PTR _spd$[ebp]
	sar	esi, 3
	add	esi, ecx
	add	esi, DWORD PTR [edx+24]

; 1304 : 
; 1305 :     // Every remaining line in the bitmap to be rendered...
; 1306 :     switch(draw_method)

	mov	ecx, DWORD PTR _draw_method$[ebp]
	mov	DWORD PTR _s$[ebp], edi
	mov	DWORD PTR _dst$[ebp], esi
	cmp	ecx, 21					; 00000015H
	ja	$LN176@Draw@3
	movzx	ecx, BYTE PTR $LN194@Draw@3[ecx]
	jmp	DWORD PTR $LN227@Draw@3[ecx*4]
$LN195@Draw@3:
	mov	ecx, DWORD PTR _w$[ebp]
	npad	5
$LL55@Draw@3:

; 1307 :     {
; 1308 :     case   DM::SINGLE_COLOR |   DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1309 :     {
; 1310 :         while(h--)

	dec	DWORD PTR _h$[ebp]

; 1311 :         {
; 1312 :             for(int wt=0; wt<w; ++wt)

	xor	eax, eax
	mov	DWORD PTR _wt$317998[ebp], eax
	test	ecx, ecx
	jle	SHORT $LN51@Draw@3
	mov	ecx, DWORD PTR _color$[ebp]
	and	ecx, 16777215				; 00ffffffH
	pxor	xmm2, xmm2

; 1313 :                 // The <<6 is due to pixmix expecting the alpha parameter to be
; 1314 :                 // the multiplication of two 6-bit unsigned numbers but we
; 1315 :                 // only have one here. (No alpha mask.)
; 1316 :                 pixmix_sse2(&dst[wt], color, s[wt]);

	movd	xmm3, ecx
	punpcklbw xmm3, xmm2
$LL53@Draw@3:
	movzx	eax, BYTE PTR [eax+edi]
	lea	edx, DWORD PTR [eax+1]
	shl	edx, 16					; 00000010H
	mov	ecx, 256				; 00000100H
	sub	ecx, eax
	mov	eax, DWORD PTR _wt$317998[ebp]
	or	edx, ecx
	movd	xmm0, edx
	mov	edx, DWORD PTR [esi+eax*4]
	pshufd	xmm1, xmm0, 0
	movd	xmm0, edx
	punpcklbw xmm0, xmm2
	punpcklwd xmm0, xmm3
	pmaddwd	xmm0, xmm1
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	ecx, xmm0
	mov	DWORD PTR [esi+eax*4], ecx
	mov	ecx, DWORD PTR _w$[ebp]
	inc	eax
	mov	DWORD PTR _wt$317998[ebp], eax
	cmp	eax, ecx
	jl	SHORT $LL53@Draw@3
$LN51@Draw@3:

; 1317 :             s += overlayPitch;
; 1318 :             dst = (unsigned long *)((char *)dst + spd.pitch);

	mov	edx, DWORD PTR _spd$[ebp]
	add	edi, DWORD PTR tv1163[ebp]
	add	esi, DWORD PTR [edx+16]
	cmp	DWORD PTR _h$[ebp], 0
	jne	$LL55@Draw@3

; 1470 :         }
; 1471 :     }
; 1472 :     break;
; 1473 :     }
; 1474 :     // Remember to EMMS!
; 1475 :     // Rendering fails in funny ways if we don't do this.
; 1476 :     _mm_empty();

	emms

; 1477 :     return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	test	esi, esi
	jmp	$LN226@Draw@3
$LL49@Draw@3:

; 1319 :         }
; 1320 :     }
; 1321 :     break;
; 1322 :     case   DM::SINGLE_COLOR | 0*DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1323 :     {
; 1324 :         while(h--)

	dec	DWORD PTR _h$[ebp]

; 1325 :         {
; 1326 :             for(int wt=0; wt<w; ++wt)

	xor	eax, eax
	mov	DWORD PTR _wt$318008[ebp], eax
	cmp	DWORD PTR _w$[ebp], eax
	jle	$LN45@Draw@3
	mov	edx, DWORD PTR _color$[ebp]
	mov	ecx, edx
	and	ecx, 16711935				; 00ff00ffH
	and	edx, 65280				; 0000ff00H

; 1327 :                 pixmix(&dst[wt], color, s[wt]);

	mov	DWORD PTR tv1279[ebp], ecx
	mov	DWORD PTR tv1285[ebp], edx
	jmp	SHORT $LN47@Draw@3
$LL214@Draw@3:

; 1319 :         }
; 1320 :     }
; 1321 :     break;
; 1322 :     case   DM::SINGLE_COLOR | 0*DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1323 :     {
; 1324 :         while(h--)

	mov	edx, DWORD PTR tv1285[ebp]
$LN47@Draw@3:

; 1327 :                 pixmix(&dst[wt], color, s[wt]);

	movzx	edi, BYTE PTR [eax+edi]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, eax
	and	esi, 65280				; 0000ff00H
	mov	ecx, 256				; 00000100H
	sub	ecx, edi
	inc	edi
	imul	esi, ecx
	mov	DWORD PTR _a$597381[ebp], edi
	imul	edi, edx
	mov	edx, DWORD PTR tv1279[ebp]
	add	esi, edi
	mov	edi, eax
	and	edi, -65281				; ffff00ffH
	imul	edi, ecx
	mov	DWORD PTR _ia$597382[ebp], ecx
	mov	ecx, DWORD PTR _a$597381[ebp]
	imul	ecx, edx
	add	edi, ecx
	mov	ecx, DWORD PTR _a$597381[ebp]
	xor	esi, edi
	imul	ecx, edx
	mov	edi, eax
	and	edi, 16711935				; 00ff00ffH
	imul	edi, DWORD PTR _ia$597382[ebp]
	shr	eax, 8
	and	eax, 16711680				; 00ff0000H
	imul	eax, DWORD PTR _ia$597382[ebp]
	and	esi, 16711680				; 00ff0000H
	add	edi, ecx
	xor	esi, edi
	mov	edi, DWORD PTR _s$[ebp]
	and	eax, -16777216				; ff000000H
	shr	esi, 8
	or	esi, eax
	mov	eax, DWORD PTR _wt$318008[ebp]
	mov	ecx, esi
	mov	esi, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [esi+eax*4], ecx
	inc	eax
	mov	DWORD PTR _wt$318008[ebp], eax
	cmp	eax, DWORD PTR _w$[ebp]
	jl	$LL214@Draw@3
$LN45@Draw@3:

; 1328 :             s += overlayPitch;
; 1329 :             dst = (unsigned long *)((char *)dst + spd.pitch);

	mov	edx, DWORD PTR _spd$[ebp]
	add	edi, DWORD PTR tv1163[ebp]
	add	esi, DWORD PTR [edx+16]
	cmp	DWORD PTR _h$[ebp], 0
	mov	DWORD PTR _s$[ebp], edi
	mov	DWORD PTR _dst$[ebp], esi
	jne	$LL49@Draw@3

; 1470 :         }
; 1471 :     }
; 1472 :     break;
; 1473 :     }
; 1474 :     // Remember to EMMS!
; 1475 :     // Rendering fails in funny ways if we don't do this.
; 1476 :     _mm_empty();

	emms

; 1477 :     return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	test	esi, esi
	jmp	$LN226@Draw@3
$LN182@Draw@3:

; 1330 :         }
; 1331 :     }
; 1332 :     break;
; 1333 :     case 0*DM::SINGLE_COLOR |   DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1334 :     {
; 1335 :         while(h--)

	sub	edi, DWORD PTR _xo$[ebp]
	mov	edx, DWORD PTR _switchpts$[ebp]
	mov	DWORD PTR tv2067[ebp], edi
	mov	edi, DWORD PTR _w$[ebp]
$LL43@Draw@3:
	dec	DWORD PTR _h$[ebp]

; 1336 :         {
; 1337 :             const DWORD *sw = switchpts;
; 1338 :             for(int wt=0; wt<w; ++wt)

	xor	eax, eax
	mov	DWORD PTR _sw$318018[ebp], edx
	test	edi, edi
	jle	$LN39@Draw@3
	lea	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv1300[ebp], ecx
	mov	ecx, DWORD PTR _xo$[ebp]
	pxor	xmm2, xmm2
	mov	DWORD PTR tv2019[ebp], ecx
	jmp	SHORT $LN41@Draw@3
	npad	7
$LL215@Draw@3:

; 1330 :         }
; 1331 :     }
; 1332 :     break;
; 1333 :     case 0*DM::SINGLE_COLOR |   DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1334 :     {
; 1335 :         while(h--)

	mov	edx, DWORD PTR _sw$318018[ebp]
$LN41@Draw@3:

; 1339 :             {
; 1340 :                 // xo is the offset (usually negative) we have moved into the image
; 1341 :                 // So if we have passed the switchpoint (?) switch to another colour
; 1342 :                 // (So switchpts stores both colours *and* coordinates?)
; 1343 :                 if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];}

	mov	edi, DWORD PTR tv1300[ebp]
	cmp	ecx, DWORD PTR [edi]
	jb	SHORT $LN38@Draw@3
	npad	6
$LL37@Draw@3:
	add	edx, 8
	lea	edi, DWORD PTR [edx+4]
	mov	DWORD PTR tv1300[ebp], edi
	cmp	ecx, DWORD PTR [edi]
	jae	SHORT $LL37@Draw@3
	mov	DWORD PTR _sw$318018[ebp], edx
	mov	edx, DWORD PTR [edx-8]
	mov	DWORD PTR _color$[ebp], edx
$LN38@Draw@3:

; 1344 :                 pixmix_sse2(&dst[wt], color, s[wt]);

	mov	edx, DWORD PTR tv2067[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR $T597407[ebp], edx
	inc	edx
	mov	edi, 256				; 00000100H
	sub	edi, DWORD PTR $T597407[ebp]
	shl	edx, 16					; 00000010H
	or	edx, edi
	mov	edi, DWORD PTR _w$[ebp]
	and	ecx, 16777215				; 00ffffffH
	movd	xmm0, edx
	mov	edx, DWORD PTR [esi+eax*4]
	pshufd	xmm3, xmm0, 0
	movd	xmm1, ecx
	movd	xmm0, edx
	punpcklbw xmm0, xmm2
	punpcklbw xmm1, xmm2
	punpcklwd xmm0, xmm1
	pmaddwd	xmm0, xmm3
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	ecx, xmm0
	mov	DWORD PTR [esi+eax*4], ecx
	mov	ecx, DWORD PTR tv2019[ebp]
	inc	eax
	inc	ecx
	mov	DWORD PTR tv2019[ebp], ecx
	cmp	eax, edi
	jl	$LL215@Draw@3

; 1336 :         {
; 1337 :             const DWORD *sw = switchpts;
; 1338 :             for(int wt=0; wt<w; ++wt)

	mov	edx, DWORD PTR _switchpts$[ebp]
$LN39@Draw@3:

; 1345 :             }
; 1346 :             s += overlayPitch;

	mov	eax, DWORD PTR tv1163[ebp]

; 1347 :             dst = (unsigned long *)((char *)dst + spd.pitch);

	mov	ecx, DWORD PTR _spd$[ebp]
	add	DWORD PTR tv2067[ebp], eax
	add	esi, DWORD PTR [ecx+16]
	cmp	DWORD PTR _h$[ebp], 0
	jne	$LL43@Draw@3

; 1470 :         }
; 1471 :     }
; 1472 :     break;
; 1473 :     }
; 1474 :     // Remember to EMMS!
; 1475 :     // Rendering fails in funny ways if we don't do this.
; 1476 :     _mm_empty();

	emms

; 1477 :     return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	test	esi, esi
	jmp	$LN226@Draw@3
$LN185@Draw@3:

; 1348 :         }
; 1349 :     }
; 1350 :     break;
; 1351 :     case 0*DM::SINGLE_COLOR | 0*DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1352 :     {
; 1353 :         while(h--)

	sub	edi, DWORD PTR _xo$[ebp]
	mov	DWORD PTR tv2201[ebp], edi
$LL34@Draw@3:
	dec	DWORD PTR _h$[ebp]

; 1354 :         {
; 1355 :             const DWORD *sw = switchpts;

	mov	edx, DWORD PTR _switchpts$[ebp]

; 1356 :             for(int wt=0; wt<w; ++wt)

	xor	eax, eax
	mov	DWORD PTR _sw$318033[ebp], edx
	mov	DWORD PTR _wt$318034[ebp], eax
	cmp	DWORD PTR _w$[ebp], eax
	jle	$LN30@Draw@3
	mov	ecx, edx
	add	ecx, 4
	mov	DWORD PTR tv1336[ebp], ecx
	mov	ecx, DWORD PTR _xo$[ebp]
	mov	DWORD PTR tv2094[ebp], ecx
	jmp	SHORT $LN32@Draw@3
	npad	5
$LL213@Draw@3:

; 1348 :         }
; 1349 :     }
; 1350 :     break;
; 1351 :     case 0*DM::SINGLE_COLOR | 0*DM::SSE2 | 0*DM::AYUV_PLANAR :
; 1352 :     {
; 1353 :         while(h--)

	mov	edx, DWORD PTR _sw$318033[ebp]
$LN32@Draw@3:

; 1357 :             {
; 1358 :                 if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];}

	mov	edi, DWORD PTR tv1336[ebp]
	cmp	ecx, DWORD PTR [edi]
	jb	SHORT $LN29@Draw@3
	npad	6
$LL28@Draw@3:
	add	edx, 8
	lea	edi, DWORD PTR [edx+4]
	mov	DWORD PTR tv1336[ebp], edi
	cmp	ecx, DWORD PTR [edi]
	jae	SHORT $LL28@Draw@3
	mov	DWORD PTR _sw$318033[ebp], edx
	mov	edx, DWORD PTR [edx-8]
	mov	DWORD PTR _color$[ebp], edx
$LN29@Draw@3:

; 1359 :                 pixmix(&dst[wt], color, s[wt]);

	mov	eax, DWORD PTR [esi+eax*4]
	mov	edx, DWORD PTR tv2201[ebp]
	movzx	edx, BYTE PTR [edx+ecx]
	mov	esi, DWORD PTR _color$[ebp]
	and	esi, -65281				; ffff00ffH
	mov	edi, eax
	and	edi, -65281				; ffff00ffH
	mov	ecx, 256				; 00000100H
	sub	ecx, edx
	imul	edi, ecx
	inc	edx
	imul	esi, edx
	add	edi, esi
	mov	esi, eax
	mov	DWORD PTR _ia$597411[ebp], ecx
	and	esi, 65280				; 0000ff00H
	imul	esi, ecx
	mov	ecx, DWORD PTR _color$[ebp]
	and	ecx, 65280				; 0000ff00H
	imul	ecx, edx
	add	esi, ecx
	xor	edi, esi
	mov	esi, DWORD PTR _color$[ebp]
	mov	ecx, eax
	and	ecx, 16711935				; 00ff00ffH
	imul	ecx, DWORD PTR _ia$597411[ebp]
	shr	eax, 8
	and	esi, 16711935				; 00ff00ffH
	imul	esi, edx
	and	eax, 16711680				; 00ff0000H
	imul	eax, DWORD PTR _ia$597411[ebp]
	add	ecx, esi
	mov	esi, DWORD PTR _dst$[ebp]
	and	edi, 16711680				; 00ff0000H
	xor	edi, ecx
	mov	ecx, DWORD PTR tv2094[ebp]
	and	eax, -16777216				; ff000000H
	shr	edi, 8
	or	edi, eax
	mov	eax, DWORD PTR _wt$318034[ebp]
	mov	DWORD PTR [esi+eax*4], edi
	inc	eax
	inc	ecx
	mov	DWORD PTR _wt$318034[ebp], eax
	mov	DWORD PTR tv2094[ebp], ecx
	cmp	eax, DWORD PTR _w$[ebp]
	jl	$LL213@Draw@3
$LN30@Draw@3:

; 1360 :             }
; 1361 :             s += overlayPitch;
; 1362 :             dst = (unsigned long *)((char *)dst + spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR tv1163[ebp]
	add	esi, DWORD PTR [eax+16]
	add	DWORD PTR tv2201[ebp], edx
	cmp	DWORD PTR _h$[ebp], 0
	mov	DWORD PTR _dst$[ebp], esi
	jne	$LL34@Draw@3

; 1470 :         }
; 1471 :     }
; 1472 :     break;
; 1473 :     }
; 1474 :     // Remember to EMMS!
; 1475 :     // Rendering fails in funny ways if we don't do this.
; 1476 :     _mm_empty();

	emms

; 1477 :     return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	test	esi, esi
	jmp	$LN226@Draw@3
$LN26@Draw@3:

; 1363 :         }
; 1364 :     }
; 1365 :     break;
; 1366 :     case   DM::SINGLE_COLOR |   DM::SSE2 |   DM::AYUV_PLANAR :
; 1367 :     {
; 1368 :         unsigned char* dst_A = (unsigned char*)dst;
; 1369 :         unsigned char* dst_Y = dst_A + spd.pitch*spd.h;

	mov	ecx, edx
	mov	ecx, DWORD PTR [ecx+8]
	imul	ecx, eax
	lea	edx, DWORD PTR [ecx+esi]
	mov	DWORD PTR _dst_Y$318047[ebp], edx

; 1370 :         unsigned char* dst_U = dst_Y + spd.pitch*spd.h;

	add	edx, ecx

; 1371 :         unsigned char* dst_V = dst_U + spd.pitch*spd.h;
; 1372 : 
; 1373 :         AlphaBlt(dst_Y, s, ((color)>>16)&0xff, h, w, overlayPitch, spd.pitch);

	push	eax
	mov	eax, DWORD PTR _w$[ebp]
	add	ecx, edx
	mov	DWORD PTR _dst_U$318048[ebp], edx
	mov	edx, DWORD PTR tv1163[ebp]
	push	edx
	mov	edx, DWORD PTR _color$[ebp]
	push	eax
	mov	eax, DWORD PTR _dst_Y$318047[ebp]
	mov	DWORD PTR _dst_V$318049[ebp], ecx
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	shr	edx, 16					; 00000010H
	push	edx
	push	edi
	push	eax
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt

; 1374 :         AlphaBlt(dst_U, s, ((color)>>8)&0xff, h, w, overlayPitch, spd.pitch);

	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv1163[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	add	esp, 28					; 0000001cH
	push	edx
	mov	edx, DWORD PTR _h$[ebp]
	push	eax
	mov	eax, DWORD PTR _color$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _dst_U$318048[ebp]
	push	edx
	shr	eax, 8
	push	eax
	push	edi
	push	ecx
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt

; 1375 :         AlphaBlt(dst_V, s, ((color))&0xff, h, w, overlayPitch, spd.pitch);

	mov	edx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR tv1163[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	esp, 28					; 0000001cH
	push	eax
	mov	eax, DWORD PTR _h$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _color$[ebp]
	push	edx
	mov	edx, DWORD PTR _dst_V$318049[ebp]
	push	eax
	push	ecx
	push	edi
	push	edx
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt

; 1376 :         AlphaBlt(dst_A, s, 0, h, w, overlayPitch, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR tv1163[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	add	esp, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR _h$[ebp]
	push	edx
	push	eax
	push	ecx
	push	0
	push	edi
	push	esi
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt
	add	esp, 28					; 0000001cH

; 1470 :         }
; 1471 :     }
; 1472 :     break;
; 1473 :     }
; 1474 :     // Remember to EMMS!
; 1475 :     // Rendering fails in funny ways if we don't do this.
; 1476 :     _mm_empty();

	emms

; 1477 :     return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	test	esi, esi
	jmp	$LN226@Draw@3
$LN25@Draw@3:

; 1382 :         unsigned char* dst_Y = dst_A + spd.pitch*spd.h;

	mov	ecx, DWORD PTR [edx+8]
	imul	ecx, eax
	mov	DWORD PTR _dst_A$318051[ebp], esi
	add	esi, ecx

; 1383 :         unsigned char* dst_U = dst_Y + spd.pitch*spd.h;

	lea	eax, DWORD PTR [ecx+esi]

; 1384 :         unsigned char* dst_V = dst_U + spd.pitch*spd.h;

	add	ecx, eax
	mov	DWORD PTR _dst_V$318055[ebp], ecx

; 1385 : 
; 1386 :         const DWORD *sw = switchpts;
; 1387 :         int last_x = xo;
; 1388 :         color = sw[0];
; 1389 :         while(last_x<w+xo)

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _dst_U$318054[ebp], eax
	mov	eax, DWORD PTR _xo$[ebp]
	add	ecx, eax
	mov	DWORD PTR _dst_Y$318053[ebp], esi
	mov	DWORD PTR tv1383[ebp], ecx
	cmp	eax, ecx
	jge	$LN176@Draw@3

; 1377 :     }
; 1378 :     break;
; 1379 :     case 0*DM::SINGLE_COLOR |   DM::SSE2 |   DM::AYUV_PLANAR :
; 1380 :     {
; 1381 :         unsigned char* dst_A = (unsigned char*)dst;

	mov	esi, DWORD PTR _switchpts$[ebp]
	add	esi, 12					; 0000000cH
	mov	DWORD PTR tv2214[ebp], esi
	jmp	SHORT $LN24@Draw@3
	npad	3
$LL222@Draw@3:
	mov	esi, DWORD PTR tv2214[ebp]
$LN24@Draw@3:

; 1390 :         {
; 1391 :             int new_x = sw[3] < w+xo ? sw[3] : w+xo;

	mov	edx, DWORD PTR [esi]
	cmp	edx, ecx
	jae	SHORT $LN72@Draw@3
	mov	DWORD PTR _new_x$318061[ebp], edx
	jmp	SHORT $LN73@Draw@3
$LN72@Draw@3:
	mov	edx, ecx
	mov	DWORD PTR _new_x$318061[ebp], ecx
$LN73@Draw@3:

; 1392 :             color = sw[0];

	mov	esi, DWORD PTR [esi-12]

; 1393 :             sw += 2;

	add	DWORD PTR tv2214[ebp], 8
	mov	DWORD PTR _color$[ebp], esi

; 1394 :             if( new_x < last_x )

	cmp	edx, eax
	jl	$LN170@Draw@3

; 1395 :                 continue;
; 1396 :             AlphaBlt(dst_Y, s + last_x - xo, (color>>16)&0xff, h, new_x-last_x, overlayPitch, spd.pitch);

	mov	edx, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR tv1163[ebp]
	mov	esi, DWORD PTR _new_x$318061[ebp]
	push	ecx
	mov	ecx, DWORD PTR _h$[ebp]
	push	edx
	mov	edx, DWORD PTR _color$[ebp]
	sub	esi, eax
	sub	eax, DWORD PTR _xo$[ebp]
	push	esi
	push	ecx
	add	eax, edi
	shr	edx, 16					; 00000010H
	push	edx
	push	eax
	mov	DWORD PTR tv1395[ebp], eax
	mov	eax, DWORD PTR _dst_Y$318053[ebp]
	push	eax
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt

; 1397 :             AlphaBlt(dst_U, s + last_x - xo, (color>>8)&0xff, h, new_x-last_x, overlayPitch, spd.pitch);

	mov	ecx, DWORD PTR _spd$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv1163[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	add	esp, 28					; 0000001cH
	push	edx
	mov	edx, DWORD PTR _color$[ebp]
	push	eax
	mov	eax, DWORD PTR tv1395[ebp]
	push	esi
	push	ecx
	mov	ecx, DWORD PTR _dst_U$318054[ebp]
	shr	edx, 8
	push	edx
	push	eax
	push	ecx
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt

; 1398 :             AlphaBlt(dst_V, s + last_x - xo, (color)&0xff, h, new_x-last_x, overlayPitch, spd.pitch);

	mov	edx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR tv1163[ebp]
	mov	edx, DWORD PTR _h$[ebp]
	add	esp, 28					; 0000001cH
	push	eax
	mov	eax, DWORD PTR _color$[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv1395[ebp]
	push	esi
	push	edx
	mov	edx, DWORD PTR _dst_V$318055[ebp]
	push	eax
	push	ecx
	push	edx
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt

; 1399 :             AlphaBlt(dst_A, s + last_x - xo, 0, h, new_x-last_x, overlayPitch, spd.pitch);

	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR tv1163[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	add	esp, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR tv1395[ebp]
	push	edx
	mov	edx, DWORD PTR _dst_A$318051[ebp]
	push	esi
	push	eax
	push	0
	push	ecx
	push	edx
	call	?AlphaBlt@@YAXPAEPBEEHHHH@Z		; AlphaBlt

; 1400 : 
; 1401 :             dst_A += new_x - last_x;

	add	DWORD PTR _dst_A$318051[ebp], esi

; 1402 :             dst_Y += new_x - last_x;

	add	DWORD PTR _dst_Y$318053[ebp], esi

; 1403 :             dst_U += new_x - last_x;

	add	DWORD PTR _dst_U$318054[ebp], esi

; 1404 :             dst_V += new_x - last_x;
; 1405 :             last_x = new_x;

	mov	eax, DWORD PTR _new_x$318061[ebp]
	mov	ecx, DWORD PTR tv1383[ebp]
	add	esp, 28					; 0000001cH
	add	DWORD PTR _dst_V$318055[ebp], esi
$LN170@Draw@3:

; 1385 : 
; 1386 :         const DWORD *sw = switchpts;
; 1387 :         int last_x = xo;
; 1388 :         color = sw[0];
; 1389 :         while(last_x<w+xo)

	cmp	eax, ecx
	jl	$LL222@Draw@3

; 1470 :         }
; 1471 :     }
; 1472 :     break;
; 1473 :     }
; 1474 :     // Remember to EMMS!
; 1475 :     // Rendering fails in funny ways if we don't do this.
; 1476 :     _mm_empty();

	emms

; 1477 :     return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	test	esi, esi
	jmp	$LN226@Draw@3
$LN21@Draw@3:

; 1406 :         }
; 1407 :     }
; 1408 :     break;
; 1409 :     case   DM::SINGLE_COLOR | 0*DM::SSE2 |   DM::AYUV_PLANAR :
; 1410 :     {
; 1411 : //        char * debug_dst=(char*)dst;int h2 = h;
; 1412 : //        XY_DO_ONCE( xy_logger::write_file("G:\\b2_rt", (char*)&color, sizeof(color)) );
; 1413 : //        XY_DO_ONCE( xy_logger::write_file("G:\\b2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1414 : //        debug_dst += spd.pitch*spd.h;
; 1415 : //        XY_DO_ONCE( xy_logger::write_file("G:\\b2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1416 : //        debug_dst += spd.pitch*spd.h;
; 1417 : //        XY_DO_ONCE( xy_logger::write_file("G:\\b2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1418 : //        debug_dst += spd.pitch*spd.h;
; 1419 : //        XY_DO_ONCE( xy_logger::write_file("G:\\b2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1420 : //        debug_dst=(char*)dst;
; 1421 : 
; 1422 :         unsigned char* dst_A = (unsigned char*)dst;
; 1423 :         unsigned char* dst_Y = dst_A + spd.pitch*spd.h;

	mov	ecx, edx
	mov	ecx, DWORD PTR [ecx+8]
	imul	ecx, eax
	lea	edx, DWORD PTR [ecx+esi]

; 1424 :         unsigned char* dst_U = dst_Y + spd.pitch*spd.h;

	lea	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _dst_A$318064[ebp], esi

; 1425 :         unsigned char* dst_V = dst_U + spd.pitch*spd.h;

	lea	esi, DWORD PTR [ecx+eax]
	mov	DWORD PTR _dst_Y$318066[ebp], edx
	mov	DWORD PTR _dst_U$318067[ebp], eax
	mov	DWORD PTR _dst_V$318068[ebp], esi
$LN20@Draw@3:

; 1426 :         while(h--)

	dec	DWORD PTR _h$[ebp]

; 1427 :         {
; 1428 :             for(int wt=0; wt<w; ++wt)

	cmp	DWORD PTR _w$[ebp], 0
	jle	$LN16@Draw@3
	mov	eax, DWORD PTR _color$[ebp]
	mov	ecx, eax
	sub	edi, esi
	and	eax, 65280				; 0000ff00H
	and	ecx, 16711935				; 00ff00ffH
	mov	DWORD PTR tv2288[ebp], edi
	mov	edi, DWORD PTR _dst_U$318067[ebp]
	mov	DWORD PTR tv1285[ebp], eax
	mov	eax, DWORD PTR _dst_A$318064[ebp]
	sub	edi, esi
	sub	edx, esi

; 1429 :             {
; 1430 :                 DWORD temp = COMBINE_AYUV(dst_A[wt], dst_Y[wt], dst_U[wt], dst_V[wt]);

	mov	DWORD PTR tv1279[ebp], ecx
	mov	ecx, DWORD PTR _w$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv2240[ebp], esi
	mov	DWORD PTR tv2293[ebp], edi
	mov	DWORD PTR tv2299[ebp], edx
	mov	DWORD PTR tv2305[ebp], eax
	mov	DWORD PTR tv353[ebp], ecx
$LN18@Draw@3:
	movzx	eax, BYTE PTR [eax+esi]
	movzx	edx, BYTE PTR [edx+esi]
	movzx	ecx, BYTE PTR [edi+esi]
	shl	eax, 8
	or	eax, edx
	movzx	edx, BYTE PTR [esi]
	shl	eax, 8
	or	eax, ecx

; 1431 :                 pixmix(&temp, color, s[wt]);

	mov	ecx, DWORD PTR tv2288[ebp]
	movzx	esi, BYTE PTR [ecx+esi]
	shl	eax, 8
	or	eax, edx
	mov	ecx, eax
	and	ecx, 65280				; 0000ff00H
	mov	edi, 256				; 00000100H
	sub	edi, esi
	imul	ecx, edi
	inc	esi
	mov	edx, esi
	imul	edx, DWORD PTR tv1285[ebp]
	add	ecx, edx
	mov	edx, eax
	mov	DWORD PTR _ia$597418[ebp], edi
	and	edx, -65281				; ffff00ffH
	imul	edx, edi
	mov	DWORD PTR _a$597417[ebp], esi
	mov	edi, esi
	mov	esi, DWORD PTR tv1279[ebp]
	imul	edi, esi
	add	edx, edi
	mov	edi, eax
	xor	ecx, edx
	mov	edx, DWORD PTR _a$597417[ebp]
	shr	eax, 8
	imul	edx, esi

; 1432 :                 SPLIT_AYUV(temp, dst_A+wt, dst_Y+wt, dst_U+wt, dst_V+wt);

	mov	esi, DWORD PTR tv2240[ebp]
	and	edi, 16711935				; 00ff00ffH
	imul	edi, DWORD PTR _ia$597418[ebp]
	and	eax, 16711680				; 00ff0000H
	imul	eax, DWORD PTR _ia$597418[ebp]
	and	ecx, 16711680				; 00ff0000H
	add	edi, edx
	mov	edx, DWORD PTR tv2299[ebp]
	xor	ecx, edi
	mov	edi, DWORD PTR tv2293[ebp]
	and	eax, -16777216				; ff000000H
	shr	ecx, 8
	or	ecx, eax
	mov	BYTE PTR [esi], cl
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [edi+esi], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edx+esi], al
	mov	eax, DWORD PTR tv2305[ebp]
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [eax+esi], cl
	inc	esi
	dec	DWORD PTR tv353[ebp]
	mov	DWORD PTR tv2240[ebp], esi
	jne	$LN18@Draw@3

; 1427 :         {
; 1428 :             for(int wt=0; wt<w; ++wt)

	mov	esi, DWORD PTR _dst_V$318068[ebp]
	mov	edx, DWORD PTR _dst_Y$318066[ebp]
	mov	edi, DWORD PTR _s$[ebp]
$LN16@Draw@3:

; 1433 :             }
; 1434 :             s += overlayPitch;
; 1435 :             dst_A += spd.pitch;

	mov	ecx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	add	edi, DWORD PTR tv1163[ebp]
	add	DWORD PTR _dst_A$318064[ebp], eax

; 1436 :             dst_Y += spd.pitch;
; 1437 :             dst_U += spd.pitch;

	add	DWORD PTR _dst_U$318067[ebp], eax
	add	edx, eax

; 1438 :             dst_V += spd.pitch;

	add	esi, eax
	cmp	DWORD PTR _h$[ebp], 0
	mov	DWORD PTR _s$[ebp], edi
	mov	DWORD PTR _dst_Y$318066[ebp], edx
	mov	DWORD PTR _dst_V$318068[ebp], esi
	jne	$LN20@Draw@3

; 1470 :         }
; 1471 :     }
; 1472 :     break;
; 1473 :     }
; 1474 :     // Remember to EMMS!
; 1475 :     // Rendering fails in funny ways if we don't do this.
; 1476 :     _mm_empty();

	emms

; 1477 :     return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	test	esi, esi
	jmp	$LN226@Draw@3
$LN12@Draw@3:

; 1439 :         }
; 1440 : //        XY_DO_ONCE( xy_logger::write_file("G:\\a2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1441 : //        debug_dst += spd.pitch*spd.h;
; 1442 : //        XY_DO_ONCE( xy_logger::write_file("G:\\a2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1443 : //        debug_dst += spd.pitch*spd.h;
; 1444 : //        XY_DO_ONCE( xy_logger::write_file("G:\\a2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1445 : //        debug_dst += spd.pitch*spd.h;
; 1446 : //        XY_DO_ONCE( xy_logger::write_file("G:\\a2_rt", debug_dst, (h2-1)*spd.pitch) );
; 1447 :     }
; 1448 :     break;
; 1449 :     case 0*DM::SINGLE_COLOR | 0*DM::SSE2 |   DM::AYUV_PLANAR :
; 1450 :     {
; 1451 :         unsigned char* dst_A = (unsigned char*)dst;
; 1452 :         unsigned char* dst_Y = dst_A + spd.pitch*spd.h;

	mov	ecx, DWORD PTR [edx+8]
	imul	ecx, eax
	lea	edx, DWORD PTR [ecx+esi]

; 1453 :         unsigned char* dst_U = dst_Y + spd.pitch*spd.h;

	lea	eax, DWORD PTR [ecx+edx]

; 1454 :         unsigned char* dst_V = dst_U + spd.pitch*spd.h;

	add	ecx, eax
	sub	edi, DWORD PTR _xo$[ebp]
	mov	DWORD PTR _dst_A$318082[ebp], esi
	mov	DWORD PTR _dst_Y$318084[ebp], edx
	mov	DWORD PTR _dst_U$318085[ebp], eax
	mov	DWORD PTR _dst_V$318086[ebp], ecx
	mov	DWORD PTR tv2476[ebp], edi
$LL11@Draw@3:

; 1455 :         while(h--)

	dec	DWORD PTR _h$[ebp]

; 1456 :         {
; 1457 :             const DWORD *sw = switchpts;
; 1458 :             for(int wt=0; wt<w; ++wt)

	cmp	DWORD PTR _w$[ebp], 0
	mov	eax, DWORD PTR _switchpts$[ebp]
	mov	DWORD PTR _sw$318090[ebp], eax
	jle	$LN7@Draw@3
	mov	esi, DWORD PTR _xo$[ebp]
	add	eax, 4
	mov	DWORD PTR tv1463[ebp], eax
	mov	eax, DWORD PTR _dst_U$318085[ebp]
	sub	eax, esi
	mov	edi, ecx
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR tv2422[ebp], eax
	mov	eax, DWORD PTR _dst_A$318082[ebp]
	sub	edi, esi
	sub	edx, esi
	sub	eax, esi
	mov	DWORD PTR tv2360[ebp], esi
	mov	DWORD PTR tv2416[ebp], edi
	mov	DWORD PTR tv2428[ebp], edx
	mov	DWORD PTR tv2434[ebp], eax
	mov	DWORD PTR tv901[ebp], ecx
$LN9@Draw@3:

; 1459 :             {
; 1460 :                 if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];}

	mov	ecx, DWORD PTR tv1463[ebp]
	cmp	esi, DWORD PTR [ecx]
	jb	SHORT $LN6@Draw@3
	npad	3
$LL5@Draw@3:
	mov	ecx, DWORD PTR _sw$318090[ebp]
	add	ecx, 8
	mov	DWORD PTR _sw$318090[ebp], ecx
	add	ecx, 4
	mov	DWORD PTR tv1463[ebp], ecx
	cmp	esi, DWORD PTR [ecx]
	jae	SHORT $LL5@Draw@3
	mov	ecx, DWORD PTR _sw$318090[ebp]
	mov	ecx, DWORD PTR [ecx-8]
	mov	DWORD PTR _color$[ebp], ecx
$LN6@Draw@3:

; 1461 :                 DWORD temp = COMBINE_AYUV(dst_A[wt], dst_Y[wt], dst_U[wt], dst_V[wt]);

	movzx	eax, BYTE PTR [eax+esi]
	movzx	edx, BYTE PTR [edx+esi]
	mov	ecx, DWORD PTR tv2422[ebp]
	shl	eax, 8
	or	eax, edx
	movzx	edx, BYTE PTR [ecx+esi]
	movzx	ecx, BYTE PTR [edi+esi]

; 1462 :                 pixmix(&temp, color, (s[wt]*(color>>24))>>8);

	mov	edi, DWORD PTR _color$[ebp]
	shl	eax, 8
	or	eax, edx
	mov	edx, DWORD PTR tv2476[ebp]
	movzx	edx, BYTE PTR [edx+esi]
	shl	eax, 8
	or	eax, ecx
	mov	ecx, edi
	shr	ecx, 24					; 00000018H
	imul	edx, ecx
	mov	ecx, eax
	and	edi, -65281				; ffff00ffH
	shr	edx, 8
	and	ecx, -65281				; ffff00ffH
	mov	esi, 256				; 00000100H
	sub	esi, edx
	imul	ecx, esi
	inc	edx
	imul	edi, edx
	add	ecx, edi
	mov	edi, eax
	mov	DWORD PTR _ia$597424[ebp], esi
	and	edi, 65280				; 0000ff00H
	imul	edi, esi
	mov	esi, DWORD PTR _color$[ebp]
	and	esi, 65280				; 0000ff00H
	imul	esi, edx
	add	edi, esi
	xor	ecx, edi
	mov	edi, DWORD PTR _color$[ebp]
	mov	esi, eax
	shr	eax, 8
	and	esi, 16711935				; 00ff00ffH
	imul	esi, DWORD PTR _ia$597424[ebp]
	and	edi, 16711935				; 00ff00ffH
	imul	edi, edx
	and	eax, 16711680				; 00ff0000H
	imul	eax, DWORD PTR _ia$597424[ebp]
	and	ecx, 16711680				; 00ff0000H
	add	esi, edi

; 1463 :                 SPLIT_AYUV(temp, dst_A+wt, dst_Y+wt, dst_U+wt, dst_V+wt);

	mov	edi, DWORD PTR tv2416[ebp]
	xor	ecx, esi
	mov	esi, DWORD PTR tv2360[ebp]
	and	eax, -16777216				; ff000000H
	shr	ecx, 8
	or	ecx, eax
	mov	eax, DWORD PTR tv2422[ebp]
	mov	BYTE PTR [edi+esi], cl
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [eax+esi], dl
	mov	edx, DWORD PTR tv2428[ebp]
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edx+esi], al
	mov	eax, DWORD PTR tv2434[ebp]
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [eax+esi], cl
	inc	esi
	dec	DWORD PTR tv901[ebp]
	mov	DWORD PTR tv2360[ebp], esi
	jne	$LN9@Draw@3

; 1456 :         {
; 1457 :             const DWORD *sw = switchpts;
; 1458 :             for(int wt=0; wt<w; ++wt)

	mov	edx, DWORD PTR _dst_Y$318084[ebp]
$LN7@Draw@3:

; 1464 :             }
; 1465 :             s += overlayPitch;

	mov	ecx, DWORD PTR tv1163[ebp]
	add	DWORD PTR tv2476[ebp], ecx

; 1466 :             dst_A += spd.pitch;

	mov	eax, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1467 :             dst_Y += spd.pitch;
; 1468 :             dst_U += spd.pitch;
; 1469 :             dst_V += spd.pitch;

	mov	ecx, DWORD PTR _dst_V$318086[ebp]
	add	DWORD PTR _dst_A$318082[ebp], eax
	add	DWORD PTR _dst_U$318085[ebp], eax
	add	edx, eax
	add	ecx, eax
	cmp	DWORD PTR _h$[ebp], 0
	mov	DWORD PTR _dst_Y$318084[ebp], edx
	mov	DWORD PTR _dst_V$318086[ebp], ecx
	jne	$LL11@Draw@3
$LN176@Draw@3:

; 1470 :         }
; 1471 :     }
; 1472 :     break;
; 1473 :     }
; 1474 :     // Remember to EMMS!
; 1475 :     // Rendering fails in funny ways if we don't do this.
; 1476 :     _mm_empty();

	emms
$LN62@Draw@3:

; 1477 :     return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	test	esi, esi
	jmp	SHORT $LN226@Draw@3
$LN68@Draw@3:

; 1262 :     if(!switchpts || !fBody && !fBorder) return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	cmp	esi, edx
$LN226@Draw@3:
	je	SHORT $LN84@Draw@3
	lea	ecx, DWORD PTR [esi+4]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	jne	SHORT $LN84@Draw@3
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, esi
	call	edx
	lea	eax, DWORD PTR [esi+8]
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	jne	SHORT $LN84@Draw@3
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, esi
	call	eax
$LN84@Draw@3:

; 1478 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	edi
	mov	DWORD PTR fs:0, ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN227@Draw@3:
	DD	$LN185@Draw@3
	DD	$LN182@Draw@3
	DD	$LL49@Draw@3
	DD	$LN195@Draw@3
	DD	$LN12@Draw@3
	DD	$LN25@Draw@3
	DD	$LN21@Draw@3
	DD	$LN26@Draw@3
	DD	$LN176@Draw@3
$LN194@Draw@3:
	DB	0
	DB	1
	DB	8
	DB	8
	DB	2
	DB	3
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	4
	DB	5
	DB	8
	DB	8
	DB	6
	DB	7
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z$0:
	lea	eax, DWORD PTR _overlay$[ebp]
	jmp	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
__ehhandler$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z:
	mov	eax, OFFSET __ehfuncinfo$?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Draw@Rasterizer@@SAXAAUSubPicDesc@@V?$shared_ptr@UOverlay@@@boost@@ABVCRect@@PAEHHPBK_N5@Z ENDP ; Rasterizer::Draw
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\hash.hpp
;	COMDAT ?hash_value@boost@@YAIN@Z
_TEXT	SEGMENT
_v$ = 8							; size = 8
?hash_value@boost@@YAIN@Z PROC				; boost::hash_value, COMDAT

; 333  :     {

	push	ebp
	mov	ebp, esp

; 334  :         return boost::hash_detail::float_hash_value(v);

	fld	QWORD PTR _v$[ebp]
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@hash_value
	fstp	ST(0)
	xor	eax, eax

; 335  :     }

	pop	ebp
	ret	0

; 334  :         return boost::hash_detail::float_hash_value(v);

$LN5@hash_value:
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z ; boost::hash_detail::float_hash_impl2<double>
	add	esp, 8

; 335  :     }

	pop	ebp
	ret	0
?hash_value@boost@@YAIN@Z ENDP				; boost::hash_value
_TEXT	ENDS
PUBLIC	?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z ; Rasterizer::CompositeAlphaMask
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\shared_count.hpp
xdata$x	SEGMENT
__unwindtable$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z$0
__ehfuncinfo$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
xdata$x	ENDS
;	COMDAT ?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z
_TEXT	SEGMENT
$T627595 = -92						; size = 16
_r$ = -76						; size = 16
_result$ = -60						; size = 8
_color$ = -52						; size = 4
_s_base$ = -48						; size = 4
_alpha_mask_data$ = -44					; size = 4
_alpha_mask_pitch$ = -40				; size = 4
_yo$ = -36						; size = 4
_xo$ = -32						; size = 4
$T627606 = -28						; size = 4
_h$ = -24						; size = 4
_w$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_spd$ = 12						; size = 4
_overlay$ = 16						; size = 4
_clipRect$ = 20						; size = 4
_alpha_mask$ = 24					; size = 4
_xsub$ = 28						; size = 4
_ysub$ = 32						; size = 4
tv706 = 36						; size = 4
_switchpts$ = 36					; size = 4
_fBody$ = 40						; size = 1
_fBorder$ = 44						; size = 1
_outputDirtyRect$ = 48					; size = 4
_fSingleColor$ = 51					; size = 1
?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z PROC ; Rasterizer::CompositeAlphaMask, COMDAT

; 1186 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	mov	esi, DWORD PTR _outputDirtyRect$[ebp]
	push	edi

; 1216 :     outputDirtyRect->SetRect(x, y, x+w, y+h);

	xor	edi, edi
	mov	DWORD PTR $T627606[ebp], edi
	mov	DWORD PTR _result$[ebp], edi
	mov	DWORD PTR _result$[ebp+4], edi
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	xor	eax, eax
	xor	ecx, ecx
	mov	DWORD PTR [esi], eax
	xor	edx, edx
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [esi+12], edi
	cmp	DWORD PTR _switchpts$[ebp], edi
	je	SHORT $LN16@CompositeA

; 1187 :     //fix me: check and log error
; 1188 :     SharedPtrByte result;
; 1189 :     *outputDirtyRect = CRect(0, 0, 0, 0);
; 1190 :     if (!switchpts || !fBody && !fBorder) return result;

	cmp	BYTE PTR _fBody$[ebp], al
	jne	SHORT $LN17@CompositeA
	cmp	BYTE PTR _fBorder$[ebp], al
	jne	SHORT $LN119@CompositeA
$LN16@CompositeA:
	mov	ebx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ebx], edi
	mov	esi, edi
	mov	DWORD PTR [ebx+4], edi
	mov	DWORD PTR $T627606[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	esi, edi
	je	SHORT $LN50@CompositeA
	lea	eax, DWORD PTR [esi+4]
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	jne	SHORT $LN50@CompositeA
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR [esi+8]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	jne	SHORT $LN50@CompositeA
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, esi
	call	edx
$LN50@CompositeA:
	mov	eax, ebx

; 1257 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@CompositeA:

; 1191 :     if (fBorder && !overlay->mBorder) return result;

	cmp	BYTE PTR _fBorder$[ebp], al
	je	SHORT $LN15@CompositeA
$LN119@CompositeA:
	mov	eax, DWORD PTR _overlay$[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+8], edi
	jne	SHORT $LN15@CompositeA
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, edi
	mov	DWORD PTR [esi], edi
	lea	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp+4], ecx
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR _result$[ebp], edi
	mov	DWORD PTR $T627606[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], cl
	call	??1?$shared_ptr@E@boost@@QAE@XZ
	mov	eax, esi

; 1257 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@CompositeA:

; 1192 :     // clip
; 1193 :     // Limit drawn area to intersection of rendering surface and rectangular clip area
; 1194 :     CRect r(0, 0, spd.w, spd.h);

	mov	ecx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx+4]

; 1195 :     r &= clipRect;

	mov	edx, DWORD PTR _clipRect$[ebp]
	mov	ebx, DWORD PTR __imp__IntersectRect@12
	mov	DWORD PTR _r$[ebp+12], eax
	push	edx
	lea	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _r$[ebp+8], ecx
	push	eax
	mov	ecx, eax
	push	ecx
	mov	DWORD PTR _r$[ebp], edi
	mov	DWORD PTR _r$[ebp+4], edi
	call	ebx

; 1196 :     if (alpha_mask!=NULL)

	mov	eax, DWORD PTR _alpha_mask$[ebp]
	cmp	eax, edi
	je	SHORT $LN69@CompositeA

; 1197 :     {
; 1198 :         r &= CRect(alpha_mask->left_top, alpha_mask->size);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax+4]
	add	edx, ecx
	mov	DWORD PTR $T627595[ebp+8], edx
	add	edi, eax
	lea	edx, DWORD PTR $T627595[ebp]
	mov	DWORD PTR $T627595[ebp+4], eax
	push	edx
	lea	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR $T627595[ebp], ecx
	push	eax
	mov	ecx, eax
	push	ecx
	mov	DWORD PTR $T627595[ebp+12], edi
	call	ebx
$LN69@CompositeA:

; 1199 :     }
; 1200 : 
; 1201 :     // Remember that all subtitle coordinates are specified in 1/8 pixels
; 1202 :     // (x+4)>>3 rounds to nearest whole pixel.
; 1203 :     // ??? What is xsub, ysub, mOffsetX and mOffsetY ?    
; 1204 :     int x = (xsub + overlay->mOffsetX + 4)>>3;

	mov	edx, DWORD PTR _overlay$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _xsub$[ebp]
	lea	ebx, DWORD PTR [ecx+edx+4]

; 1205 :     int y = (ysub + overlay->mOffsetY + 4)>>3;

	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _ysub$[ebp]
	lea	edi, DWORD PTR [ecx+edx+4]

; 1206 :     int w = overlay->mOverlayWidth;

	mov	ecx, DWORD PTR [eax+32]

; 1207 :     int h = overlay->mOverlayHeight;

	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR _w$[ebp], ecx

; 1208 :     int xo = 0, yo = 0;

	xor	ecx, ecx
	mov	DWORD PTR _xo$[ebp], ecx
	mov	DWORD PTR _yo$[ebp], ecx

; 1209 :     // Again, limiting?
; 1210 :     if(x < r.left) {xo = r.left-x; w -= r.left-x; x = r.left;}

	mov	ecx, DWORD PTR _r$[ebp]
	sar	ebx, 3
	sar	edi, 3
	mov	DWORD PTR _h$[ebp], eax
	cmp	ebx, ecx
	jge	SHORT $LN13@CompositeA
	mov	edx, ecx
	sub	edx, ebx
	sub	ebx, ecx
	add	DWORD PTR _w$[ebp], ebx
	mov	DWORD PTR _xo$[ebp], edx
	mov	ebx, ecx
$LN13@CompositeA:

; 1211 :     if(y < r.top) {yo = r.top-y; h -= r.top-y; y = r.top;}

	mov	ecx, DWORD PTR _r$[ebp+4]
	cmp	edi, ecx
	jge	SHORT $LN12@CompositeA
	mov	edx, ecx
	sub	edx, edi
	sub	edi, ecx
	add	eax, edi
	mov	DWORD PTR _yo$[ebp], edx
	mov	DWORD PTR _h$[ebp], eax
	mov	edi, ecx
$LN12@CompositeA:

; 1212 :     if(x+w > r.right) w = r.right-x;

	mov	edx, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _r$[ebp+8]
	add	edx, ebx
	cmp	edx, ecx
	jle	SHORT $LN11@CompositeA
	sub	ecx, ebx
	mov	DWORD PTR _w$[ebp], ecx
$LN11@CompositeA:

; 1213 :     if(y+h > r.bottom) h = r.bottom-y;

	mov	ecx, DWORD PTR _r$[ebp+12]
	lea	edx, DWORD PTR [eax+edi]
	cmp	edx, ecx
	jle	SHORT $LN10@CompositeA
	sub	ecx, edi
	mov	DWORD PTR _h$[ebp], ecx
	mov	eax, ecx
$LN10@CompositeA:

; 1214 :     // Check if there's actually anything to render
; 1215 :     if(w <= 0 || h <= 0) return(result);

	mov	ecx, DWORD PTR _w$[ebp]
	xor	edx, edx
	cmp	ecx, edx
	jle	$LN8@CompositeA
	cmp	eax, edx
	jle	$LN8@CompositeA

; 1216 :     outputDirtyRect->SetRect(x, y, x+w, y+h);

	add	eax, edi
	push	eax
	add	ecx, ebx
	push	ecx
	push	edi
	push	ebx
	push	esi
	call	DWORD PTR __imp__SetRect@20

; 1217 : 
; 1218 :     bool fSingleColor = (switchpts[1]==0xffffffff);

	mov	eax, DWORD PTR _switchpts$[ebp]
	cmp	DWORD PTR [eax+4], -1

; 1219 : 
; 1220 :     // draw
; 1221 :     // Grab the first colour
; 1222 :     DWORD color = switchpts[0];

	mov	eax, DWORD PTR [eax]

; 1223 :     byte* s_base = (byte*)xy_malloc(overlay->mOverlayPitch * overlay->mOverlayHeight);

	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR _color$[ebp], eax
	mov	eax, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax+36]
	sete	BYTE PTR _fSingleColor$[ebp]
	imul	esi, DWORD PTR [eax+40]
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	mov	esi, eax

; 1224 :     const byte* alpha_mask_data = alpha_mask != NULL ? alpha_mask->data.get() : NULL;

	mov	eax, DWORD PTR _alpha_mask$[ebp]
	mov	DWORD PTR _s_base$[ebp], esi
	test	eax, eax
	je	SHORT $LN20@CompositeA
	mov	edx, DWORD PTR [eax+20]
	jmp	SHORT $LN21@CompositeA
$LN20@CompositeA:
	xor	edx, edx
$LN21@CompositeA:
	mov	DWORD PTR _alpha_mask_data$[ebp], edx

; 1225 :     const int alpha_mask_pitch = alpha_mask != NULL ? alpha_mask->pitch : 0;

	test	eax, eax
	je	SHORT $LN22@CompositeA
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _alpha_mask_pitch$[ebp], ecx
	jmp	SHORT $LN23@CompositeA
$LN22@CompositeA:
	mov	DWORD PTR _alpha_mask_pitch$[ebp], 0
$LN23@CompositeA:

; 1226 :     if(alpha_mask_data!=NULL )

	test	edx, edx
	je	SHORT $LN7@CompositeA

; 1227 :         alpha_mask_data += alpha_mask->pitch * y + x - alpha_mask->left_top.y*alpha_mask->pitch - alpha_mask->left_top.x;

	sub	edi, DWORD PTR [eax+4]
	imul	edi, DWORD PTR [eax+16]
	sub	edi, DWORD PTR [eax]
	add	edi, ebx
	add	edx, edi
	mov	DWORD PTR _alpha_mask_data$[ebp], edx
$LN7@CompositeA:

; 1228 : 
; 1229 :     if(fSingleColor)

	cmp	BYTE PTR _fSingleColor$[ebp], 0
	je	SHORT $LN6@CompositeA

; 1230 :     {
; 1231 :         overlay->FillAlphaMash(s_base, fBody, fBorder, xo, yo, w, h, 
; 1232 :             alpha_mask_data, alpha_mask_pitch,
; 1233 :             color>>24 );

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _color$[ebp]
	mov	edi, DWORD PTR _alpha_mask_pitch$[ebp]
	shr	eax, 24					; 00000018H
	push	eax
	mov	eax, DWORD PTR _yo$[ebp]
	push	edx
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	mov	edx, DWORD PTR _xo$[ebp]
	push	eax
	mov	eax, DWORD PTR _fBorder$[ebp]
	push	edx
	mov	edx, DWORD PTR _fBody$[ebp]
	push	eax
	mov	eax, DWORD PTR _w$[ebp]
	push	edx
	push	esi
	call	?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z ; Overlay::FillAlphaMash

; 1234 :     }
; 1235 :     else

	jmp	$LN3@CompositeA
$LN6@CompositeA:

; 1236 :     {
; 1237 :         int last_x = xo;

	mov	edx, DWORD PTR _xo$[ebp]

; 1238 :         const DWORD *sw = switchpts;
; 1239 :         while( last_x<w+xo )

	mov	eax, DWORD PTR _w$[ebp]
	mov	ebx, DWORD PTR _switchpts$[ebp]
	lea	edi, DWORD PTR [edx+eax]
	mov	DWORD PTR tv706[ebp], edi
	cmp	edx, edi
	jge	SHORT $LN3@CompositeA
	jmp	SHORT $LN4@CompositeA
$LL121@CompositeA:
	mov	edi, DWORD PTR tv706[ebp]
$LN4@CompositeA:

; 1240 :         {   
; 1241 :             byte alpha = sw[0]>>24; 

	mov	al, BYTE PTR [ebx+3]

; 1242 :             while( sw[3]<w+xo && (sw[2]>>24)==alpha )

	cmp	DWORD PTR [ebx+12], edi
	jae	SHORT $LN1@CompositeA
	movzx	ecx, al
$LL2@CompositeA:
	movzx	esi, BYTE PTR [ebx+11]
	cmp	esi, ecx
	jne	SHORT $LN1@CompositeA
	add	ebx, 8
	cmp	DWORD PTR [ebx+12], edi
	jb	SHORT $LL2@CompositeA
$LN1@CompositeA:

; 1243 :             {
; 1244 :                 sw += 2;
; 1245 :             }
; 1246 :             int new_x = sw[3] < w+xo ? sw[3] : w+xo;

	mov	esi, DWORD PTR [ebx+12]
	cmp	esi, edi
	jb	SHORT $LN25@CompositeA
	mov	esi, edi
$LN25@CompositeA:

; 1247 :             overlay->FillAlphaMash(s_base, fBody, fBorder, 
; 1248 :                 last_x, yo, new_x-last_x, h, 
; 1249 :                 alpha_mask_data, alpha_mask_pitch,
; 1250 :                 alpha );   

	mov	edi, DWORD PTR _yo$[ebp]
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR [ecx]
	movzx	eax, al
	push	eax
	mov	eax, DWORD PTR _alpha_mask_data$[ebp]
	push	eax
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	push	edi
	mov	edi, DWORD PTR _alpha_mask_pitch$[ebp]
	push	edx
	mov	eax, esi
	sub	eax, edx
	mov	edx, DWORD PTR _fBorder$[ebp]
	push	edx
	mov	edx, DWORD PTR _fBody$[ebp]
	push	edx
	mov	edx, DWORD PTR _s_base$[ebp]
	push	edx
	call	?FillAlphaMash@Overlay@@QAEXPAE_N1HHHHPBEHK@Z ; Overlay::FillAlphaMash

; 1251 :             last_x = new_x;
; 1252 :             sw += 2;

	add	ebx, 8
	mov	edx, esi
	cmp	esi, DWORD PTR tv706[ebp]
	jl	SHORT $LL121@CompositeA

; 1238 :         const DWORD *sw = switchpts;
; 1239 :         while( last_x<w+xo )

	mov	esi, DWORD PTR _s_base$[ebp]
$LN3@CompositeA:

; 1253 :         }
; 1254 :     }
; 1255 :     result.reset( s_base, xy_free );

	mov	eax, esi
	lea	edi, DWORD PTR _result$[ebp]
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 1256 :     return result;

	mov	eax, DWORD PTR _result$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR _result$[ebp+4]
	xor	ecx, ecx
	mov	edx, ecx
	mov	DWORD PTR [edi+4], eax
	lea	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp+4], edx
	mov	DWORD PTR _result$[ebp], ecx
	mov	DWORD PTR $T627606[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], cl
	call	??1?$shared_ptr@E@boost@@QAE@XZ
	mov	eax, edi

; 1257 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@CompositeA:

; 1214 :     // Check if there's actually anything to render
; 1215 :     if(w <= 0 || h <= 0) return(result);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esi, edx
	mov	DWORD PTR [edi], edx
	mov	DWORD PTR [edi+4], edx
	mov	DWORD PTR $T627606[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], dl
	cmp	esi, edx
	je	SHORT $LN94@CompositeA
	lea	eax, DWORD PTR [esi+4]
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	jne	SHORT $LN94@CompositeA
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR [esi+8]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	jne	SHORT $LN94@CompositeA
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, esi
	call	edx
$LN94@CompositeA:

; 1257 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, edi
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z$0:
	lea	eax, DWORD PTR _result$[ebp]
	jmp	??1?$shared_ptr@E@boost@@QAE@XZ
__unwindfunclet$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z$1:
	mov	eax, DWORD PTR $T627606[ebp]
	and	eax, 1
	je	$LN28@CompositeA
	and	DWORD PTR $T627606[ebp], -2		; fffffffeH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$shared_ptr@E@boost@@QAE@XZ
$LN28@CompositeA:
	ret	0
__ehhandler$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z:
	mov	eax, OFFSET __ehfuncinfo$?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CompositeAlphaMask@Rasterizer@@SA?AV?$shared_ptr@E@boost@@AAUSubPicDesc@@ABV?$shared_ptr@UOverlay@@@3@ABVCRect@@PBUGrayImage2@@HHPBK_N5PAV6@@Z ENDP ; Rasterizer::CompositeAlphaMask
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\functional\hash\hash.hpp
;	COMDAT ??R?$hash@N@boost@@QBEIN@Z
_TEXT	SEGMENT
_v$ = 8							; size = 8
??R?$hash@N@boost@@QBEIN@Z PROC				; boost::hash<double>::operator(), COMDAT

; 440  :     BOOST_HASH_SPECIALIZE(double)

	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _v$[ebp]
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@operator@35
	fstp	ST(0)
	xor	eax, eax
	pop	ebp
	ret	8
$LN7@operator@35:
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z ; boost::hash_detail::float_hash_impl2<double>
	add	esp, 8
	pop	ebp
	ret	8
??R?$hash@N@boost@@QBEIN@Z ENDP				; boost::hash<double>::operator()
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ?bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket, COMDAT
; _k$ = ecx

; 536  :   {

	push	ebp
	mov	ebp, esp
	push	ecx

; 537  :     return buckets.position(hash(k));

	mov	eax, DWORD PTR [ecx+24]
	test	eax, eax
	je	SHORT $LN6@bucket
	lea	ecx, DWORD PTR [eax+16]
$LN6@bucket:
	fld	QWORD PTR [ecx]
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN21@bucket
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	ST(0)
	xor	eax, eax
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	eax, edx
	pop	ecx

; 538  :   }

	pop	ebp
	ret	4

; 537  :     return buckets.position(hash(k));

$LN21@bucket:
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z ; boost::hash_detail::float_hash_impl2<double>
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	add	esp, 8
	div	DWORD PTR [ecx+4]
	mov	eax, edx
	pop	ecx

; 538  :   }

	pop	ebp
	ret	4
?bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QBEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::bucket
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?find_bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?find_bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::find_bucket, COMDAT
; _v$ = ecx

; 973  :   {

	push	ebp
	mov	ebp, esp
	push	ecx

; 974  :     return bucket(key(v));

	mov	eax, DWORD PTR [ecx+24]
	test	eax, eax
	je	SHORT $LN10@find_bucke
	lea	ecx, DWORD PTR [eax+16]
$LN10@find_bucke:
	fld	QWORD PTR [ecx]
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@find_bucke
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	ST(0)
	xor	eax, eax
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	eax, edx
	pop	ecx

; 975  :   }

	pop	ebp
	ret	4

; 974  :     return bucket(key(v));

$LN25@find_bucke:
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z ; boost::hash_detail::float_hash_impl2<double>
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	add	esp, 8
	div	DWORD PTR [ecx+4]
	mov	eax, edx
	pop	ecx

; 975  :   }

	pop	ebp
	ret	4
?find_bucket@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@ABEIABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::find_bucket
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\bucket_array.hpp
_TEXT	ENDS
;	COMDAT ??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z
_TEXT	SEGMENT
_end_$ = 8						; size = 4
??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z PROC ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT
; _this$ = esi
; _size$ = edi

; 104  :   {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ebx, DWORD PTR _end_$[ebp]
	call	?next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z ; boost::multi_index::detail::bucket_array_base::next_prime
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+8], ecx
	test	ecx, ecx
	je	SHORT $LN6@bucket_arr@4
	call	?allocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocate
	jmp	SHORT $LN7@bucket_arr@4
$LN6@bucket_arr@4:
	xor	eax, eax
$LN7@bucket_arr@4:
	mov	DWORD PTR [esi+12], eax

; 105  :     clear();

	mov	ecx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [eax+ecx*4]
	cmp	eax, ecx
	je	SHORT $LN10@bucket_arr@4
	npad	3
$LL12@bucket_arr@4:
	mov	DWORD PTR [eax], eax
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL12@bucket_arr@4
$LN10@bucket_arr@4:

; 106  :     end()->next()=end_;

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+edx*4], ebx

; 107  :     end_->next()=end();

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+12]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ebx], eax

; 108  :   }

	mov	eax, esi
	pop	ebx
	pop	ebp
	ret	4
??0?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@PAU?$hashed_index_node_impl@V?$allocator@D@std@@@123@I@Z ENDP ; boost::multi_index::detail::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::bucket_array<std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
_TEXT	SEGMENT
tv418 = -8						; size = 8
tv420 = -4						; size = 4
tv428 = 8						; size = 4
_fml$647813 = 8						; size = 4
_args_list$ = 8						; size = 4
tv423 = 10						; size = 2
??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>, COMDAT
; _this$ = esi

; 610  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	test	esi, esi
	je	SHORT $LN26@hashed_ind@4
	lea	eax, DWORD PTR [esi-12]
	jmp	SHORT $LN27@hashed_ind@4
$LN26@hashed_ind@4:
	xor	eax, eax
$LN27@hashed_ind@4:
	mov	eax, DWORD PTR [eax+4]
	push	ebx
	test	eax, eax
	je	SHORT $LN32@hashed_ind@4
	lea	ebx, DWORD PTR [eax+40]
	jmp	SHORT $LN33@hashed_ind@4
$LN32@hashed_ind@4:
	xor	ebx, ebx
$LN33@hashed_ind@4:
	mov	eax, DWORD PTR _args_list$[ebp]
	push	edi
	mov	edi, DWORD PTR [eax]
	call	?next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z ; boost::multi_index::detail::bucket_array_base::next_prime
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+12], ecx
	pop	edi
	test	ecx, ecx
	je	SHORT $LN39@hashed_ind@4
	call	?allocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocate
	jmp	SHORT $LN40@hashed_ind@4
$LN39@hashed_ind@4:
	xor	eax, eax
$LN40@hashed_ind@4:
	mov	DWORD PTR [esi+16], eax
	mov	ecx, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [eax+ecx*4]
	cmp	eax, ecx
	je	SHORT $LN43@hashed_ind@4
	npad	1
$LL45@hashed_ind@4:
	mov	DWORD PTR [eax], eax
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL45@hashed_ind@4
$LN43@hashed_ind@4:
	mov	edx, DWORD PTR [esi+4]
	fld1
	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+edx*4], ebx
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi+16]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ebx], eax
	fstp	DWORD PTR [esi+20]
	mov	eax, DWORD PTR [esi+4]

; 611  :     calculate_max_load();

	mov	DWORD PTR tv428[ebp], eax
	fild	DWORD PTR tv428[ebp]
	mov	DWORD PTR [esi+28], eax
	test	eax, eax
	jns	SHORT $LN95@hashed_ind@4
	fadd	DWORD PTR __real@4f800000
$LN95@hashed_ind@4:
	fstp	DWORD PTR _fml$647813[ebp]
	mov	DWORD PTR [esi+24], -1
	fld	DWORD PTR _fml$647813[ebp]
	pop	ebx
	fcom	QWORD PTR __real@41f0000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN93@hashed_ind@4
	fnstcw	WORD PTR tv423[ebp]
	movzx	eax, WORD PTR tv423[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv420[ebp], eax

; 612  :   }

	mov	eax, esi
	fldcw	WORD PTR tv420[ebp]
	fistp	QWORD PTR tv418[ebp]
	mov	ecx, DWORD PTR tv418[ebp]
	mov	DWORD PTR [esi+24], ecx
	fldcw	WORD PTR tv423[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
$LN93@hashed_ind@4:

; 611  :     calculate_max_load();

	fstp	ST(0)

; 612  :   }

	mov	eax, esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z$0
__ehfuncinfo$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
xdata$x	ENDS
;	COMDAT ??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
_TEXT	SEGMENT
$T647918 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T647864 = 8						; size = 4
_args_list$ = 8						; size = 4
??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >, COMDAT

; 195  :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	push	48					; 00000030H
	mov	DWORD PTR _this$[ebp], OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN21@multi_inde@3
	push	esi
	mov	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+4, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _args_list$[ebp]
	push	eax
	mov	esi, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+12
	call	??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>

; 196  :     BOOST_MULTI_INDEX_CHECK_INVARIANT;
; 197  :   }    

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+44, 0
	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4

; 195  :   {

$LN21@multi_inde@3:
	lea	ecx, DWORD PTR $T647864[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T647918[ebp]
	mov	DWORD PTR $T647864[ebp], 0
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T647918[ebp]
	push	edx
	mov	DWORD PTR $T647918[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN38@multi_inde@3:
$LN37@multi_inde@3:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z$0:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
__ehhandler$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@QAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@2@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ$1
__ehfuncinfo$??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
$T648086 = -40						; size = 12
$T647945 = -28						; size = 8
_this$ = -20						; size = 4
$T647998 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	esi
	push	edi
	xor	edi, edi
	push	48					; 00000030H
	mov	DWORD PTR _this$[ebp], OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
	mov	DWORD PTR $T647945[ebp], edi
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, edi
	je	SHORT $LN32@hashed_fac@3
	mov	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+4, eax
	lea	eax, DWORD PTR $T647945[ebp]
	push	eax
	mov	esi, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+12
	mov	DWORD PTR __$EHRec$[ebp+8], edi
	call	??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+44, edi
	pop	edi
	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@hashed_fac@3:
	lea	ecx, DWORD PTR $T647998[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T648086[ebp]
	mov	DWORD PTR $T647998[ebp], edi
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T648086[ebp]
	push	edx
	mov	DWORD PTR $T648086[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN50@hashed_fac@3:
$LN49@hashed_fac@3:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ$1:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
__ehhandler$??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ$2
__ehfuncinfo$??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ
_TEXT	SEGMENT
$T648275 = -40						; size = 12
$T648304 = -28						; size = 8
_this$ = -20						; size = 4
$T648167 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::holder_arg, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	esi
	push	edi
	xor	edi, edi
	push	48					; 00000030H
	mov	DWORD PTR _this$[ebp], OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
	mov	DWORD PTR $T648304[ebp], edi
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, edi
	je	SHORT $LN35@holder_arg@3
	mov	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+4, eax
	lea	eax, DWORD PTR $T648304[ebp]
	push	eax
	mov	esi, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+12
	mov	DWORD PTR __$EHRec$[ebp+8], edi
	call	??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+44, edi
	pop	edi
	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::c
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN35@holder_arg@3:
	lea	ecx, DWORD PTR $T648167[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T648275[ebp]
	mov	DWORD PTR $T648167[ebp], edi
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T648275[ebp]
	push	edx
	mov	DWORD PTR $T648275[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN54@holder_arg@3:
$LN53@holder_arg@3:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ$2:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
__ehhandler$??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0holder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@QAE@XZ ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg::holder_arg
PUBLIC	??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51 ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`local static guard'
;	COMDAT ??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_BSS	SEGMENT
??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51 DD 01H DUP (?) ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`local static guard'
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ$3
__ehfuncinfo$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\static_holder.hpp
xdata$x	ENDS
;	COMDAT ?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ
_TEXT	SEGMENT
$T648559 = -36						; size = 12
$T648533 = -24						; size = 8
$T648383 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ PROC ; boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get, COMDAT

; 32   :   {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 24					; 00000018H

; 33   :     static C c;

	test	BYTE PTR ??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51, 1
	jne	SHORT $LN1@get
	or	DWORD PTR ??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51, 1
	push	esi
	push	edi
	xor	edi, edi
	mov	DWORD PTR __$EHRec$[ebp+8], edi
	push	48					; 00000030H
	mov	DWORD PTR $T648533[ebp], edi
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, edi
	je	SHORT $LN39@get
	mov	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+4, eax
	lea	eax, DWORD PTR $T648533[ebp]
	push	eax
	mov	esi, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+12
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??0?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAE@ABU?$cons@V?$tuple@IU?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@Unull_type@tuples@3@U783@U783@U783@U783@U783@@tuples@boost@@Unull_type@23@@tuples@3@ABV?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>
	push	OFFSET ??__Fc@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@YAXXZ ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`dynamic atexit destructor for 'c''
	mov	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+44, edi
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
$LN1@get:

; 34   :     return c;
; 35   :   }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0

; 33   :     static C c;

$LN39@get:
	lea	ecx, DWORD PTR $T648383[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T648559[ebp]
	mov	DWORD PTR $T648383[ebp], edi
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T648559[ebp]
	push	edx
	mov	DWORD PTR $T648559[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN59@get:
$LN58@get:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ$0:
	mov	eax, DWORD PTR ??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ??_B?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@51, eax
	ret	0
__unwindfunclet$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ$3:
	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+4
	jmp	??1?$header_holder@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@34@@detail@multi_index@boost@@QAE@XZ ; boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >::~header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::index_node_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > > *,boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > > >
__ehhandler$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ:
	mov	eax, OFFSET __ehfuncinfo$?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ ENDP ; boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
;	COMDAT ?init@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA_NXZ
_TEXT	SEGMENT
?init@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA_NXZ PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::init, COMDAT

; 109  :     if(static_initializer)return true;

	cmp	BYTE PTR ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA, 0 ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
	je	SHORT $LN2@init
	mov	al, 1

; 115  :       return static_initializer;
; 116  :     }
; 117  :   }

	ret	0
$LN2@init:

; 110  :     else{
; 111  :       holder_arg& a=holder_type::get();

	call	?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ ; boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get

; 112  :       static_factory_ptr=&a.factory;
; 113  :       static_mutex_ptr=&a.mutex;

	lea	ecx, DWORD PTR [eax+48]

; 114  :       static_initializer=(static_factory_ptr!=0);

	test	eax, eax
	mov	DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A, eax ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
	setne	al
	mov	DWORD PTR ?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A, ecx ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_mutex_ptr
	mov	BYTE PTR ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA, al ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer

; 115  :       return static_initializer;
; 116  :     }
; 117  :   }

	ret	0
?init@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA_NXZ ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::init
_TEXT	ENDS
PUBLIC	?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z	; Overlay::GetSubpixelVariance
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
;	COMDAT ?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z
_TEXT	SEGMENT
_i$318630 = -12						; size = 4
_i$318624 = -12						; size = 4
_align_buf$648630 = -8					; size = 4
_border$ = -4						; size = 4
_src$318623 = 8						; size = 4
_this$ = 8						; size = 4
_xshift$ = 12						; size = 4
_yshift$ = 16						; size = 4
?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z PROC		; Overlay::GetSubpixelVariance, COMDAT

; 1976 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi

; 1977 :     Overlay* overlay = new Overlay();

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	mov	ebx, eax
	xor	edx, edx
	add	esp, 4
	cmp	ebx, edx
	je	$LN59@GetSubpixe

; 1978 :     if(!overlay)
; 1979 :     {
; 1980 :         return NULL;
; 1981 :     }
; 1982 :     xshift &= 7;
; 1983 :     yshift &= 7;
; 1984 : 
; 1985 :     overlay->mOffsetX = mOffsetX - xshift;

	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _xshift$[ebp]
	mov	ecx, DWORD PTR _yshift$[ebp]
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], edx
	mov	DWORD PTR [ebx+8], edx
	mov	DWORD PTR [ebx+12], edx
	mov	DWORD PTR [ebx+28], edx
	mov	DWORD PTR [ebx+24], edx
	mov	DWORD PTR [ebx+20], edx
	mov	DWORD PTR [ebx+16], edx
	mov	DWORD PTR [ebx+40], edx
	mov	DWORD PTR [ebx+36], edx
	mov	DWORD PTR [ebx+32], edx
	mov	BYTE PTR [ebx+44], dl
	mov	edi, DWORD PTR [esi+16]
	and	eax, 7
	sub	edi, eax
	mov	DWORD PTR [ebx+16], edi

; 1986 :     overlay->mOffsetY = mOffsetY - yshift;

	mov	edi, DWORD PTR [esi+20]
	and	ecx, 7
	sub	edi, ecx
	mov	DWORD PTR [ebx+20], edi

; 1987 :     overlay->mWidth = mWidth + xshift;

	mov	edi, DWORD PTR [esi+24]
	add	edi, eax
	mov	DWORD PTR _xshift$[ebp], eax
	mov	DWORD PTR [ebx+24], edi

; 1988 :     overlay->mHeight = mHeight + yshift;

	mov	eax, DWORD PTR [esi+28]
	add	eax, ecx
	mov	DWORD PTR [ebx+28], eax

; 1989 : 
; 1990 :     overlay->mOverlayWidth = ((overlay->mWidth+7)>>3) + 1;

	lea	eax, DWORD PTR [edi+7]
	mov	DWORD PTR _yshift$[ebp], ecx

; 1991 :     overlay->mOverlayHeight = ((overlay->mHeight + 7)>>3) + 1;

	mov	ecx, DWORD PTR [ebx+28]
	sar	eax, 3
	inc	eax
	add	ecx, 7

; 1992 :     overlay->mOverlayPitch = (overlay->mOverlayWidth+15)&~15;

	lea	edi, DWORD PTR [eax+15]
	sar	ecx, 3
	and	edi, -16				; fffffff0H
	inc	ecx
	mov	DWORD PTR [ebx+40], edi

; 1993 :     
; 1994 : 
; 1995 :     overlay->mfWideOutlineEmpty = mfWideOutlineEmpty;
; 1996 : 
; 1997 :     if (overlay->mOverlayPitch * overlay->mOverlayHeight<=0)

	imul	edi, ecx
	mov	DWORD PTR [ebx+32], eax
	mov	DWORD PTR [ebx+36], ecx
	mov	al, BYTE PTR [esi+44]
	mov	BYTE PTR [ebx+44], al
	cmp	edi, edx

; 1998 :     {
; 1999 :         return NULL;

	jle	$LN59@GetSubpixe

; 2000 :     }
; 2001 : 
; 2002 :     BYTE* body = reinterpret_cast<BYTE*>(xy_malloc(overlay->mOverlayPitch * overlay->mOverlayHeight));

	lea	ecx, DWORD PTR [edi+23]
	push	ecx
	call	_malloc
	lea	ecx, DWORD PTR [eax+23]
	mov	edx, ecx
	and	edx, 15					; 0000000fH
	sub	ecx, edx
	mov	DWORD PTR [ecx-4], eax
	mov	DWORD PTR [ecx-8], edi
	add	esp, 4

; 2003 :     if( body==NULL )
; 2004 :     {
; 2005 :         return NULL;
; 2006 :     }
; 2007 :     overlay->mBody.reset(body, xy_free);    

	mov	eax, ecx
	mov	edi, ebx
	mov	DWORD PTR _align_buf$648630[ebp], ecx
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 2008 :     BYTE* border = NULL;

	xor	edi, edi

; 2009 :     if (!overlay->mfWideOutlineEmpty)

	cmp	BYTE PTR [ebx+44], 0
	mov	DWORD PTR _border$[ebp], edi
	jne	SHORT $LN18@GetSubpixe

; 2010 :     {
; 2011 :         border = reinterpret_cast<BYTE*>(xy_malloc(overlay->mOverlayPitch * overlay->mOverlayHeight));

	mov	esi, DWORD PTR [ebx+36]
	imul	esi, DWORD PTR [ebx+40]
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	mov	DWORD PTR _border$[ebp], eax

; 2012 :         if (border==NULL)

	test	eax, eax

; 2013 :         {
; 2014 :             return NULL;

	je	$LN59@GetSubpixe

; 2015 :         }
; 2016 :         overlay->mBorder.reset(border, xy_free);        

	lea	edi, DWORD PTR [ebx+8]
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _border$[ebp]
$LN18@GetSubpixe:

; 2017 :     }
; 2018 :     
; 2019 :     if(overlay->mOverlayPitch==mOverlayPitch && overlay->mOverlayHeight>=mOverlayHeight)

	mov	ecx, DWORD PTR [ebx+40]
	mov	edx, DWORD PTR [esi+40]
	cmp	ecx, edx
	jne	$LN16@GetSubpixe
	mov	eax, DWORD PTR [esi+36]
	cmp	DWORD PTR [ebx+36], eax
	jl	$LN16@GetSubpixe

; 2020 :     {
; 2021 :         if (body && mBody)

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	$LN59@GetSubpixe

; 2022 :         {
; 2023 :             memcpy(body, mBody.get(), mOverlayPitch * mOverlayHeight);

	imul	eax, edx
	push	eax
	mov	eax, DWORD PTR _align_buf$648630[ebp]
	push	ecx
	push	eax
	call	_memcpy

; 2024 :             memset(body+mOverlayPitch*mOverlayHeight, 0, mOverlayPitch * (overlay->mOverlayHeight-mOverlayHeight));

	mov	ecx, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [ebx+36]
	mov	eax, DWORD PTR [esi+40]
	sub	edx, ecx
	imul	edx, eax
	imul	eax, ecx
	add	eax, DWORD PTR _align_buf$648630[ebp]
	add	esp, 12					; 0000000cH
	push	edx
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2025 :         }
; 2026 :         else if ( (!!body)!=(!!mBody)/*==NULL*/)
; 2027 :         {
; 2028 :             return NULL;
; 2029 :         }
; 2030 :         
; 2031 :         if (border && mBorder)

	test	edi, edi
	je	SHORT $LN12@GetSubpixe
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN12@GetSubpixe

; 2032 :         {
; 2033 :             memcpy(border, mBorder.get(), mOverlayPitch * mOverlayHeight);

	mov	ecx, DWORD PTR [esi+40]
	imul	ecx, DWORD PTR [esi+36]
	push	ecx
	push	eax
	push	edi
	call	_memcpy

; 2034 :             memset(border+mOverlayPitch*mOverlayHeight, 0, mOverlayPitch * (overlay->mOverlayHeight-mOverlayHeight));

	mov	eax, DWORD PTR [esi+36]
	mov	esi, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [ebx+36]
	sub	edx, eax
	imul	edx, esi
	imul	esi, eax
	add	esp, 12					; 0000000cH
	push	edx
	push	0
	add	esi, edi
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 2035 :         }
; 2036 :         else if ( (!!border)!=(!!mBorder)/*==NULL*/ )

	jmp	$LN2@GetSubpixe
$LN12@GetSubpixe:
	xor	eax, eax
	cmp	DWORD PTR [esi+8], eax
	setne	al
	xor	ecx, ecx
	test	edi, edi
	setne	cl
	cmp	ecx, eax
	je	$LN2@GetSubpixe
$LN59@GetSubpixe:

; 2037 :         {
; 2038 :             return NULL;

	xor	eax, eax

; 2072 :     }    
; 2073 :     return overlay;
; 2074 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN16@GetSubpixe:

; 2039 :         }
; 2040 :     }
; 2041 :     else
; 2042 :     {
; 2043 :         memset(body, 0, overlay->mOverlayPitch * overlay->mOverlayHeight);                

	mov	edx, DWORD PTR [ebx+36]
	mov	edi, DWORD PTR _align_buf$648630[ebp]
	imul	edx, ecx
	push	edx
	push	0
	push	edi
	call	_memset

; 2044 :         byte* dst = body;
; 2045 :         const byte* src = mBody.get();

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH

; 2046 :         for (int i=0;i<mOverlayHeight;i++)

	cmp	DWORD PTR [esi+36], 0
	mov	DWORD PTR _src$318623[ebp], eax
	mov	DWORD PTR _i$318624[ebp], 0
	jle	SHORT $LN6@GetSubpixe
	mov	eax, DWORD PTR [esi+40]
$LN8@GetSubpixe:

; 2047 :         {
; 2048 :             memcpy(dst, src, mOverlayPitch);

	mov	ecx, DWORD PTR _src$318623[ebp]
	push	eax
	push	ecx
	push	edi
	call	_memcpy
	mov	ecx, DWORD PTR _i$318624[ebp]

; 2049 :             dst += overlay->mOverlayPitch;
; 2050 :             src += mOverlayPitch;

	mov	eax, DWORD PTR [esi+40]
	add	edi, DWORD PTR [ebx+40]
	add	DWORD PTR _src$318623[ebp], eax
	inc	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _i$318624[ebp], ecx
	cmp	ecx, DWORD PTR [esi+36]
	jl	SHORT $LN8@GetSubpixe
$LN6@GetSubpixe:

; 2051 :         }
; 2052 :         if (!overlay->mfWideOutlineEmpty)

	cmp	BYTE PTR [ebx+44], 0
	jne	SHORT $LN60@GetSubpixe

; 2053 :         {
; 2054 :             ASSERT(border && mBorder);
; 2055 :             memset(border, 0, overlay->mOverlayPitch * overlay->mOverlayHeight);

	mov	edx, DWORD PTR [ebx+36]
	imul	edx, DWORD PTR [ebx+40]
	mov	edi, DWORD PTR _border$[ebp]
	push	edx
	push	0
	push	edi
	call	_memset

; 2056 :             dst = border;
; 2057 :             src = mBorder.get();

	mov	eax, DWORD PTR [esi+8]
	add	esp, 12					; 0000000cH

; 2058 :             for (int i=0;i<mOverlayHeight;i++)

	cmp	DWORD PTR [esi+36], 0
	mov	DWORD PTR _src$318623[ebp], eax
	mov	DWORD PTR _i$318630[ebp], 0
	jle	SHORT $LN60@GetSubpixe
	mov	eax, DWORD PTR [esi+40]
$LN4@GetSubpixe:

; 2059 :             {
; 2060 :                 memcpy(dst, src, mOverlayPitch);

	mov	ecx, DWORD PTR _src$318623[ebp]
	push	eax
	push	ecx
	push	edi
	call	_memcpy
	mov	ecx, DWORD PTR _i$318630[ebp]

; 2061 :                 dst += overlay->mOverlayPitch;
; 2062 :                 src += mOverlayPitch;

	mov	eax, DWORD PTR [esi+40]
	add	edi, DWORD PTR [ebx+40]
	add	DWORD PTR _src$318623[ebp], eax
	inc	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _i$318630[ebp], ecx
	cmp	ecx, DWORD PTR [esi+36]
	jl	SHORT $LN4@GetSubpixe
$LN60@GetSubpixe:

; 2058 :             for (int i=0;i<mOverlayHeight;i++)

	mov	edi, DWORD PTR _border$[ebp]
$LN2@GetSubpixe:

; 2063 :             }
; 2064 :         }        
; 2065 :     }
; 2066 :     //not equal
; 2067 :     //  Bilinear(overlay->mpOverlayBuffer.base, overlay->mOverlayWidth, 2*overlay->mOverlayHeight, overlay->mOverlayPitch, xshift, yshift);
; 2068 :     Bilinear(body, overlay->mOverlayWidth, overlay->mOverlayHeight, overlay->mOverlayPitch, xshift, yshift);

	mov	edx, DWORD PTR _yshift$[ebp]
	mov	esi, DWORD PTR _xshift$[ebp]
	mov	eax, DWORD PTR [ebx+40]
	mov	ecx, DWORD PTR [ebx+36]
	push	edx
	mov	edx, DWORD PTR [ebx+32]
	push	esi
	push	eax
	mov	eax, DWORD PTR _align_buf$648630[ebp]
	push	ecx
	push	edx
	push	eax
	call	?Bilinear@@YAXPAEHHHHH@Z		; Bilinear
	add	esp, 24					; 00000018H

; 2069 :     if (!overlay->mfWideOutlineEmpty)

	cmp	BYTE PTR [ebx+44], 0
	jne	SHORT $LN1@GetSubpixe

; 2070 :     {
; 2071 :         Bilinear(border, overlay->mOverlayWidth, overlay->mOverlayHeight, overlay->mOverlayPitch, xshift, yshift);

	mov	ecx, DWORD PTR _yshift$[ebp]
	mov	edx, DWORD PTR [ebx+40]
	mov	eax, DWORD PTR [ebx+36]
	push	ecx
	mov	ecx, DWORD PTR [ebx+32]
	push	esi
	push	edx
	push	eax
	push	ecx
	push	edi
	call	?Bilinear@@YAXPAEHHHHH@Z		; Bilinear
	add	esp, 24					; 00000018H
$LN1@GetSubpixe:

; 2072 :     }    
; 2073 :     return overlay;
; 2074 : }

	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetSubpixelVariance@Overlay@@QAEPAU1@II@Z ENDP		; Overlay::GetSubpixelVariance
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\noncopyable.hpp
xdata$x	SEGMENT
__unwindtable$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z$0
__ehfuncinfo$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
xdata$x	ENDS
;	COMDAT ?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z
_TEXT	SEGMENT
_buckets1$ = -56					; size = 16
_hashes$ = -40						; size = 12
tv874 = -28						; size = 8
tv876 = -24						; size = 4
$T680210 = -24						; size = 4
_x_end$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
tv886 = 8						; size = 4
_fml$680767 = 8						; size = 4
_this$ = 8						; size = 4
tv879 = 10						; size = 2
?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unchecked_rehash, COMDAT
; _n$ = ecx

; 1055 :   {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 44					; 0000002cH
	push	ebx

; 1056 :     bucket_array_type buckets1(get_allocator(),header()->impl(),n);

	mov	ebx, DWORD PTR _this$[ebp]
	push	esi
	push	edi
	test	ebx, ebx
	je	SHORT $LN21@unchecked_
	lea	eax, DWORD PTR [ebx-12]
	jmp	SHORT $LN22@unchecked_
$LN21@unchecked_:
	xor	eax, eax
$LN22@unchecked_:
	mov	eax, DWORD PTR [eax+4]
	test	eax, eax
	je	SHORT $LN27@unchecked_
	lea	esi, DWORD PTR [eax+40]
	jmp	SHORT $LN28@unchecked_
$LN27@unchecked_:
	xor	esi, esi
$LN28@unchecked_:
	mov	edi, ecx
	call	?next_prime@bucket_array_base@detail@multi_index@boost@@KAII@Z ; boost::multi_index::detail::bucket_array_base::next_prime
	mov	edi, eax
	lea	ecx, DWORD PTR [edi+1]
	mov	DWORD PTR _buckets1$[ebp], edi
	mov	DWORD PTR $T680210[ebp], ecx
	mov	DWORD PTR _buckets1$[ebp+8], ecx
	test	ecx, ecx
	je	SHORT $LN40@unchecked_
	call	?allocate@?$allocator@U?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@@std@@QAEPAU?$hashed_index_node_impl@V?$allocator@D@std@@@detail@multi_index@boost@@I@Z ; std::allocator<boost::multi_index::detail::hashed_index_node_impl<std::allocator<char> > >::allocate
	jmp	SHORT $LN41@unchecked_
$LN40@unchecked_:
	xor	eax, eax
$LN41@unchecked_:
	lea	ecx, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _buckets1$[ebp+12], eax
	cmp	eax, ecx
	je	SHORT $LN44@unchecked_
$LL46@unchecked_:
	mov	DWORD PTR [eax], eax
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL46@unchecked_
$LN44@unchecked_:
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [esi], ecx
	xor	edx, edx
	mov	DWORD PTR __$EHRec$[ebp+8], edx

; 1057 :     auto_space<std::size_t,allocator_type> hashes(get_allocator(),size());

	cmp	ebx, edx
	je	SHORT $LN85@unchecked_
	lea	eax, DWORD PTR [ebx-12]
	jmp	SHORT $LN86@unchecked_
$LN85@unchecked_:
	xor	eax, eax
$LN86@unchecked_:
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _hashes$[ebp+4], ecx
	cmp	ecx, edx
	je	SHORT $LN97@unchecked_
	call	?allocate@?$allocator@I@std@@QAEPAII@Z	; std::allocator<unsigned int>::allocate
	mov	DWORD PTR _hashes$[ebp+8], eax
	jmp	SHORT $LN98@unchecked_
$LN97@unchecked_:
	mov	DWORD PTR _hashes$[ebp+8], edx
$LN98@unchecked_:

; 1058 : 
; 1059 :     std::size_t i=0;
; 1060 :     node_impl_pointer x=buckets.begin();
; 1061 :     node_impl_pointer x_end=buckets.end();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx+16]
	mov	ebx, DWORD PTR [ebx+16]
	lea	eax, DWORD PTR [ecx+eax*4]
	xor	esi, esi
	mov	DWORD PTR _x_end$[ebp], eax

; 1062 :     for(;x!=x_end;++x){

	cmp	ebx, eax
	je	SHORT $LN8@unchecked_
$LL10@unchecked_:

; 1063 :       node_impl_pointer y=x->next();

	mov	edi, DWORD PTR [ebx]

; 1064 :       while(y!=x){

	cmp	edi, ebx
	je	SHORT $LN9@unchecked_
$LL7@unchecked_:

; 1065 :         hashes.data()[i++]=hash(key(node_type::from_impl(y)->value()));

	test	edi, edi
	je	SHORT $LN117@unchecked_
	lea	eax, DWORD PTR [edi-40]
	jmp	SHORT $LN118@unchecked_
$LN117@unchecked_:
	xor	eax, eax
$LN118@unchecked_:
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN126@unchecked_
	lea	eax, DWORD PTR [ecx+16]
$LN126@unchecked_:
	fld	QWORD PTR [eax]
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN141@unchecked_
	fstp	ST(0)
	xor	eax, eax
	jmp	SHORT $LN142@unchecked_
$LN141@unchecked_:
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z ; boost::hash_detail::float_hash_impl2<double>
	mov	edx, DWORD PTR _this$[ebp]
	add	esp, 8
$LN142@unchecked_:
	mov	ecx, DWORD PTR _hashes$[ebp+8]
	mov	DWORD PTR [ecx+esi*4], eax

; 1066 :         y=y->next();

	mov	edi, DWORD PTR [edi]
	inc	esi
	cmp	edi, ebx
	jne	SHORT $LL7@unchecked_

; 1064 :       while(y!=x){

	mov	eax, DWORD PTR _x_end$[ebp]
$LN9@unchecked_:

; 1062 :     for(;x!=x_end;++x){

	add	ebx, 4
	cmp	ebx, eax
	jne	SHORT $LL10@unchecked_
$LN8@unchecked_:

; 1067 :       }
; 1068 :     }
; 1069 : 
; 1070 :     i=0;
; 1071 :     x=buckets.begin();

	mov	ebx, DWORD PTR [edx+16]
	xor	edi, edi

; 1072 :     for(;x!=x_end;++x){

	cmp	ebx, eax
	je	SHORT $LN3@unchecked_
$LL5@unchecked_:

; 1073 :       node_impl_pointer y=x->next();

	mov	ecx, DWORD PTR [ebx]

; 1074 :       while(y!=x){

	cmp	ecx, ebx
	je	SHORT $LN4@unchecked_
$LN2@unchecked_:

; 1075 :         node_impl_pointer z=y->next();
; 1076 :         std::size_t       buc1=buckets1.position(hashes.data()[i++]);

	mov	edx, DWORD PTR _hashes$[ebp+8]
	mov	eax, DWORD PTR [edx+edi*4]
	xor	edx, edx
	div	DWORD PTR _buckets1$[ebp]

; 1077 :         node_impl_pointer x1=buckets1.at(buc1);

	mov	eax, DWORD PTR _buckets1$[ebp+12]
	mov	esi, DWORD PTR [ecx]
	inc	edi
	lea	eax, DWORD PTR [eax+edx*4]

; 1078 :         link(y,x1);

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [eax], ecx

; 1079 :         y=z;

	mov	ecx, esi
	cmp	esi, ebx
	jne	SHORT $LN2@unchecked_

; 1074 :       while(y!=x){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x_end$[ebp]
$LN4@unchecked_:

; 1072 :     for(;x!=x_end;++x){

	add	ebx, 4
	cmp	ebx, eax
	jne	SHORT $LL5@unchecked_
$LN3@unchecked_:

; 1080 :       }
; 1081 :     }
; 1082 : 
; 1083 :     buckets.swap(buckets1);

	mov	eax, DWORD PTR _buckets1$[ebp]
	mov	ecx, DWORD PTR $T680210[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	esi, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _buckets1$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edi, DWORD PTR [edx+16]
	mov	DWORD PTR [edx+16], eax

; 1084 :     calculate_max_load();

	fld	DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [edx+4]
	fild	DWORD PTR [edx+4]
	test	ecx, ecx
	jns	SHORT $LN273@unchecked_
	fadd	DWORD PTR __real@4f800000
$LN273@unchecked_:
	fmulp	ST(1), ST(0)
	mov	DWORD PTR [edx+24], -1
	fstp	DWORD PTR _fml$680767[ebp]
	fld	DWORD PTR _fml$680767[ebp]
	fcom	QWORD PTR __real@41f0000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN271@unchecked_
	fnstcw	WORD PTR tv879[ebp]
	movzx	eax, WORD PTR tv879[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv876[ebp], eax
	fldcw	WORD PTR tv876[ebp]
	fistp	QWORD PTR tv874[ebp]
	mov	eax, DWORD PTR tv874[ebp]
	mov	DWORD PTR [edx+24], eax
	fldcw	WORD PTR tv879[ebp]
	jmp	SHORT $LN212@unchecked_
$LN271@unchecked_:
	fstp	ST(0)
$LN212@unchecked_:

; 1085 :     first_bucket=buckets.first_nonempty(0);

	mov	eax, DWORD PTR [edx+16]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], eax
	jne	SHORT $LN258@unchecked_
$LL224@unchecked_:
	add	eax, 4
	inc	ecx
	cmp	DWORD PTR [eax], eax
	je	SHORT $LL224@unchecked_
$LN258@unchecked_:

; 1086 :   }

	cmp	DWORD PTR _hashes$[ebp+4], 0
	mov	DWORD PTR [edx+28], ecx
	je	SHORT $LN238@unchecked_
	mov	ecx, DWORD PTR _hashes$[ebp+8]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN238@unchecked_:
	test	esi, esi
	je	SHORT $LN247@unchecked_
	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN247@unchecked_:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z$0:
	lea	eax, DWORD PTR _buckets1$[ebp]
	jmp	??1?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@QAE@XZ
__ehhandler$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unchecked_rehash
; Function compile flags: /Ogtp
;	COMDAT ?reserve@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z
_TEXT	SEGMENT
tv137 = -16						; size = 8
tv149 = -12						; size = 4
tv139 = -12						; size = 4
_fbc$323943 = -4					; size = 4
tv142 = -2						; size = 2
?reserve@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::reserve, COMDAT
; _this$ = edx
; _n$ = eax

; 1045 :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1046 :     if(n>max_load){

	cmp	eax, DWORD PTR [edx+24]
	jbe	SHORT $LN2@reserve

; 1047 :       size_type bc =(std::numeric_limits<size_type>::max)();

	or	ecx, -1

; 1048 :       float     fbc=static_cast<float>(1+n/mlf);

	mov	DWORD PTR tv149[ebp], eax
	fild	DWORD PTR tv149[ebp]
	test	eax, eax
	jns	SHORT $LN10@reserve
	fadd	DWORD PTR __real@4f800000
$LN10@reserve:
	fdiv	DWORD PTR [edx+20]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _fbc$323943[ebp]

; 1049 :       if(bc>fbc)bc =static_cast<size_type>(fbc);

	fld	DWORD PTR _fbc$323943[ebp]
	fcom	QWORD PTR __real@41f0000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN8@reserve
	fnstcw	WORD PTR tv142[ebp]

; 1050 :       unchecked_rehash(bc);

	push	edx
	movzx	eax, WORD PTR tv142[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv139[ebp], eax
	fldcw	WORD PTR tv139[ebp]
	fistp	QWORD PTR tv137[ebp]
	mov	ecx, DWORD PTR tv137[ebp]
	fldcw	WORD PTR tv142[ebp]
	call	?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unchecked_rehash

; 1051 :     }
; 1052 :   }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@reserve:

; 1050 :       unchecked_rehash(bc);

	push	edx
	fstp	ST(0)
	call	?unchecked_rehash@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::unchecked_rehash
$LN2@reserve:

; 1051 :     }
; 1052 :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?reserve@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::reserve
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?insert_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z
_TEXT	SEGMENT
_buc$ = -8						; size = 4
$T680895 = -4						; size = 1
_pos$ = 8						; size = 4
_v$ = 8							; size = 4
_x$ = 12						; size = 4
?insert_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert_, COMDAT
; _this$ = esi

; 692  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	mov	ebx, DWORD PTR _v$[ebp]
	push	edi

; 693  :     reserve(size()+1);

	test	esi, esi
	je	SHORT $LN12@insert_@2
	lea	eax, DWORD PTR [esi-12]
	jmp	SHORT $LN13@insert_@2
$LN12@insert_@2:
	xor	eax, eax
$LN13@insert_@2:
	mov	eax, DWORD PTR [eax+44]
	inc	eax
	mov	edx, esi
	call	?reserve@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAEXI@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::reserve

; 694  : 
; 695  :     std::size_t       buc=find_bucket(v);

	mov	eax, DWORD PTR [ebx+24]
	test	eax, eax
	je	SHORT $LN25@insert_@2
	add	eax, 16					; 00000010H
	jmp	SHORT $LN24@insert_@2
$LN25@insert_@2:
	mov	eax, ebx
$LN24@insert_@2:
	fld	QWORD PTR [eax]
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN40@insert_@2
	fstp	ST(0)
	xor	eax, eax
	jmp	SHORT $LN41@insert_@2
$LN40@insert_@2:
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	??$float_hash_impl2@N@hash_detail@boost@@YAIN@Z ; boost::hash_detail::float_hash_impl2<double>
	add	esp, 8
$LN41@insert_@2:
	xor	edx, edx
	div	DWORD PTR [esi+4]

; 696  :     node_impl_pointer pos=buckets.at(buc);

	mov	eax, DWORD PTR [esi+16]

; 697  :     if(!link_point(v,pos,Category()))return node_type::from_impl(pos);

	mov	BYTE PTR $T680895[ebp], 0
	lea	edi, DWORD PTR _pos$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _buc$[ebp], edx
	mov	edx, DWORD PTR $T680895[ebp]
	push	edx
	push	ebx
	mov	DWORD PTR _pos$[ebp], ecx
	call	?link_point@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@AAE_NABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@AAPAU?$hashed_index_node_impl@V?$allocator@D@std@@@234@Uhashed_unique_tag@234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::link_point
	test	al, al
	jne	SHORT $LN3@insert_@2
	mov	eax, DWORD PTR _pos$[ebp]
	test	eax, eax
	je	SHORT $LN54@insert_@2
	add	eax, -40				; ffffffd8H

; 703  :     }
; 704  :     return res;
; 705  :   }

	pop	edi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8

; 697  :     if(!link_point(v,pos,Category()))return node_type::from_impl(pos);

$LN54@insert_@2:
	xor	eax, eax

; 703  :     }
; 704  :     return res;
; 705  :   }

	pop	edi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN3@insert_@2:

; 698  : 
; 699  :     node_type* res=static_cast<node_type*>(super::insert_(v,x));

	mov	eax, DWORD PTR _x$[ebp]
	xor	ecx, ecx
	cmp	eax, ecx
	je	SHORT $LN85@insert_@2
	mov	edx, DWORD PTR [ebx+24]
	mov	DWORD PTR [eax+24], edx
	cmp	DWORD PTR [ebx+24], ecx
	jne	SHORT $LN71@insert_@2
	fld	QWORD PTR [ebx]
	fstp	QWORD PTR [eax]
$LN71@insert_@2:
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx

; 700  :     if(res==x){
; 701  :       link(x,pos);

	lea	ecx, DWORD PTR [eax+40]
$LN85@insert_@2:
	mov	edx, DWORD PTR _pos$[ebp]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edi
	mov	DWORD PTR [edx], ecx

; 702  :       if(first_bucket>buc)first_bucket=buc;

	mov	ecx, DWORD PTR _buc$[ebp]
	cmp	DWORD PTR [esi+28], ecx
	jbe	SHORT $LN4@insert_@2
	mov	DWORD PTR [esi+28], ecx
$LN4@insert_@2:

; 703  :     }
; 704  :     return res;
; 705  :   }

	pop	edi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?insert_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert_
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z$0
__tryblocktable$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z$2
__ehfuncinfo$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index_container.hpp
xdata$x	ENDS
;	COMDAT ?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z
_TEXT	SEGMENT
$T681309 = -28						; size = 12
__$EHRec$ = -16						; size = 16
$T681276 = 8						; size = 4
_this$ = 8						; size = 4
__Ptr$681313 = 12					; size = 4
___$ReturnUdt$ = 12					; size = 4
_v$ = 16						; size = 4
?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z PROC ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_, COMDAT

; 485  :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 20					; 00000014H
	push	ebx
	mov	ebx, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp

; 486  :     node_type* x=allocate_node();

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	xor	eax, eax
	add	esp, 4
	mov	DWORD PTR __Ptr$681313[ebp], edi
	cmp	edi, eax
	je	SHORT $LN14@insert_@3

; 487  :     BOOST_TRY{

	mov	DWORD PTR __$EHRec$[ebp+12], eax

; 488  :       node_type* res=super::insert_(v,x);

	mov	eax, DWORD PTR _v$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	push	edi
	push	eax
	add	esi, 12					; 0000000cH
	call	?insert_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEPAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@234@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@PAU5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert_
	mov	esi, eax

; 489  :       if(res==x){

	cmp	esi, edi
	jne	SHORT $LN2@insert_@3

; 490  :         ++node_count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 1
	add	DWORD PTR [eax+44], ecx

; 491  :         return std::pair<node_type*,bool>(res,true);

	mov	DWORD PTR [ebx], esi
	mov	BYTE PTR [ebx+4], cl
$LN61@insert_@3:

; 501  :     }
; 502  :     BOOST_CATCH_END
; 503  :   }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	eax, ebx
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN2@insert_@3:

; 492  :       }
; 493  :       else{
; 494  :         deallocate_node(x);

	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 495  :         return std::pair<node_type*,bool>(res,false);

	mov	DWORD PTR [ebx], esi
	mov	BYTE PTR [ebx+4], 0
	jmp	SHORT $LN61@insert_@3
__catch$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z$0:

; 496  :       }
; 497  :     }
; 498  :     BOOST_CATCH(...){
; 499  :       deallocate_node(x);

	mov	ecx, DWORD PTR __Ptr$681313[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 500  :       BOOST_RETHROW;

	push	0
	push	0
	call	__CxxThrowException@8
$LN62@insert_@3:

; 486  :     node_type* x=allocate_node();

$LN14@insert_@3:
	lea	edx, DWORD PTR $T681276[ebp]
	push	edx
	lea	ecx, DWORD PTR $T681309[ebp]
	mov	DWORD PTR $T681276[ebp], eax
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T681309[ebp]
	push	eax
	mov	DWORD PTR $T681309[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN63@insert_@3:
$LN60@insert_@3:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z:
	mov	eax, OFFSET __ehfuncinfo$?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z ENDP ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\detail\index_base.hpp
;	COMDAT ?final_insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
?final_insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_insert_, COMDAT
; _this$ = eax
; ___$ReturnUdt$ = esi
; _x$ = ecx

; 150  :     {return final().insert_(x);}

	push	ecx
	test	eax, eax
	je	SHORT $LN5@final_inse
	push	ecx
	add	eax, -12				; fffffff4H
	push	esi
	push	eax
	call	?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
	mov	eax, esi
	pop	ecx
	ret	0
$LN5@final_inse:
	push	ecx
	xor	eax, eax
	push	esi
	push	eax
	call	?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
	mov	eax, esi
	pop	ecx
	ret	0
?final_insert_@?$index_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::index_base<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::final_insert_
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\multi_index\hashed_index.hpp
_TEXT	ENDS
;	COMDAT ?insert@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AU?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z
_TEXT	SEGMENT
_p$ = -8						; size = 8
?insert@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AU?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z PROC ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert, COMDAT
; _this$ = edi
; ___$ReturnUdt$ = esi
; _x$ = ecx

; 250  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 251  :     BOOST_MULTI_INDEX_HASHED_INDEX_CHECK_INVARIANT;
; 252  :     std::pair<final_node_type*,bool> p=this->final_insert_(x);

	test	edi, edi
	je	SHORT $LN7@insert
	lea	eax, DWORD PTR [edi-12]
	jmp	SHORT $LN8@insert
$LN7@insert:
	xor	eax, eax
$LN8@insert:
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	push	eax
	call	?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_

; 253  :     return std::pair<iterator,bool>(make_iterator(p.first),p.second);

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [esi], eax
	mov	al, BYTE PTR _p$[ebp+4]
	lea	ecx, DWORD PTR [edi+4]
	mov	BYTE PTR [esi+8], al
	mov	DWORD PTR [esi+4], ecx
	mov	eax, esi

; 254  :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?insert@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AU?$pair@V?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@2flyweights@4@@Z ENDP ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::insert
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\hashed_factory.hpp
_TEXT	ENDS
;	COMDAT ?insert@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@ABV4523@@Z
_TEXT	SEGMENT
_p$681544 = -8						; size = 8
?insert@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@ABV4523@@Z PROC ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::insert, COMDAT
; _this$ = eax
; _x$ = ecx

; 71   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 72   :     return &*cont.insert(x).first;

	add	eax, 12					; 0000000cH
	je	SHORT $LN9@insert@2
	push	ecx
	lea	edx, DWORD PTR _p$681544[ebp]
	add	eax, -12				; fffffff4H
	push	edx
	push	eax
	call	?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
	mov	eax, DWORD PTR _p$681544[ebp]

; 73   :   }

	mov	esp, ebp
	pop	ebp
	ret	0

; 72   :     return &*cont.insert(x).first;

$LN9@insert@2:
	push	ecx
	lea	edx, DWORD PTR _p$681544[ebp]
	xor	eax, eax
	push	edx
	push	eax
	call	?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_
	mov	eax, DWORD PTR _p$681544[ebp]

; 73   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?insert@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@flyweights@boost@@QAEPBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@23@ABV4523@@Z ENDP ; boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::insert
_TEXT	ENDS
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
xdata$x	SEGMENT
__unwindtable$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
xdata$x	ENDS
;	COMDAT ?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z
_TEXT	SEGMENT
_e$ = -68						; size = 40
_p$681749 = -24						; size = 8
$T681582 = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert_rep, COMDAT
; _x$ = ecx

; 168  :   {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 60					; 0000003cH
	push	ebx
	xor	ebx, ebx
	push	esi
	mov	DWORD PTR $T681582[ebp], ebx
	push	edi
	mov	esi, ecx

; 169  :     init();

	cmp	BYTE PTR ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA, bl ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
	jne	SHORT $LN11@insert_rep
	call	?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ ; boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get
	cmp	eax, ebx
	lea	ecx, DWORD PTR [eax+48]
	setne	dl
	mov	DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A, eax ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
	mov	DWORD PTR ?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A, ecx ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_mutex_ptr
	mov	BYTE PTR ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA, dl ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
$LN11@insert_rep:

; 170  :     entry_type       e(x);

	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR _e$[ebp+24], eax
	cmp	eax, ebx
	jne	SHORT $LN20@insert_rep
	fld	QWORD PTR [esi]
	fstp	QWORD PTR _e$[ebp]
$LN20@insert_rep:
	mov	DWORD PTR _e$[ebp+32], ebx
	mov	DWORD PTR _e$[ebp+36], ebx
	mov	DWORD PTR __$EHRec$[ebp+8], ebx

; 171  :     lock_type        lock(mutex());
; 172  :     base_handle_type h(factory().insert(e));

	mov	eax, DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
	add	eax, 12					; 0000000cH
	cmp	eax, ebx
	je	SHORT $LN42@insert_rep
	add	eax, -12				; fffffff4H
	jmp	SHORT $LN43@insert_rep
$LN42@insert_rep:
	xor	eax, eax
$LN43@insert_rep:
	lea	ecx, DWORD PTR _e$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$681749[ebp]
	push	edx
	push	eax
	call	?insert_@?$multi_index_container@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@multi_index@boost@@IAE?AU?$pair@PAU?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@_N@std@@ABV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@3@@Z ; boost::multi_index::multi_index_container<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >::insert_

; 173  :     BOOST_TRY{
; 174  :       ValuePolicy::construct_value(
; 175  :         static_cast<const rep_type&>(entry(h)));

	mov	esi, DWORD PTR _p$681749[ebp]
	cmp	DWORD PTR [esi+24], esi
	lea	edi, DWORD PTR [esi+24]
	je	SHORT $LN74@insert_rep
	fld	QWORD PTR [esi]
	mov	DWORD PTR [edi], edi
	fldz
	sub	esp, 8
	fstp	QWORD PTR [esi+16]
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	fstp	QWORD PTR [esp]
	mov	DWORD PTR [esi+12], ebx
	call	?generate_tables@ass_synth_priv@@QAEHN@Z ; ass_synth_priv::generate_tables
	mov	DWORD PTR [edi], esi
$LN74@insert_rep:

; 176  :     }
; 177  :     BOOST_CATCH(...){
; 178  :       factory().erase(h);
; 179  :       BOOST_RETHROW;
; 180  :     }
; 181  :     BOOST_CATCH_END
; 182  :     return static_cast<handle_type>(h);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], esi
	add	esi, 32					; 00000020H
	mov	eax, 1
	lock	 xadd	 DWORD PTR [esi], eax
	inc	eax
	cmp	eax, 1
	jne	SHORT $LN136@insert_rep
	mov	eax, DWORD PTR [ecx]
	inc	DWORD PTR [eax+36]
$LN136@insert_rep:
	mov	esi, DWORD PTR _e$[ebp+24]
	cmp	esi, ebx
	je	SHORT $LN158@insert_rep
	lea	edx, DWORD PTR _e$[ebp]
	cmp	esi, edx
	jne	SHORT $LN158@insert_rep
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_free
	mov	ecx, DWORD PTR [esi+12]
	add	esp, 4
	push	ecx
	mov	DWORD PTR [esi+8], ebx
	call	_free
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	mov	DWORD PTR [esi+12], ebx

; 183  :   }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN158@insert_rep:
	pop	edi
	mov	eax, ecx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z$2:
	lea	eax, DWORD PTR _e$[ebp]
	jmp	??1?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@QAE@XZ
__ehhandler$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z:
	mov	eax, OFFSET __ehfuncinfo$?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert_rep
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
xdata$x	SEGMENT
__unwindtable$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z$0
__ehfuncinfo$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\pp_perfect_fwd.hpp
xdata$x	ENDS
;	COMDAT ??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z
_TEXT	SEGMENT
$T682095 = -48						; size = 32
$T682098 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z PROC ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert<double>, COMDAT
; ___$ReturnUdt$ = esi
; _t0$ = ecx

; 124  : BOOST_FLYWEIGHT_PERFECT_FWD_OVERLOADS

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 36					; 00000024H
	fld	QWORD PTR [ecx]
	xor	eax, eax
	fstp	QWORD PTR $T682095[ebp]
	mov	DWORD PTR $T682098[ebp], eax
	mov	DWORD PTR $T682095[ebp+24], eax
	push	esi
	lea	ecx, DWORD PTR $T682095[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], eax
	call	?insert_rep@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@CA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@234@ABVrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@234@@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert_rep
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	add	esp, 4
	mov	eax, esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z$0:
	lea	eax, DWORD PTR $T682095[ebp]
	jmp	??1rep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@QAE@XZ ; boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type::~rep_type
__ehhandler$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z:
	mov	eax, OFFSET __ehfuncinfo$??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z ENDP ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert<double>
; Function compile flags: /Ogtp
;	COMDAT ??$?0N@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@AAN@Z
_TEXT	SEGMENT
??$?0N@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@AAN@Z PROC ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_><double>, COMDAT
; _this$ = eax
; _t0$ = ecx

; 124  : BOOST_FLYWEIGHT_PERFECT_FWD_OVERLOADS

	push	esi
	mov	esi, eax
	call	??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert<double>
	mov	eax, esi
	pop	esi
	ret	0
??$?0N@?$flyweight@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Uno_locking@23@Uvoid_@parameter@3@U563@U563@U563@@flyweights@boost@@QAE@AAN@Z ENDP ; boost::flyweights::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::flyweight<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::flyweights::no_locking,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_><double>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase, COMDAT
; ___$ReturnUdt$ = edi

; 1190 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ebx
	mov	ebx, eax
	cmp	eax, ecx
	je	SHORT $LN34@erase@5

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

	mov	edx, DWORD PTR _this$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx+4]
	call	??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	pop	esi
$LN34@erase@5:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

	mov	DWORD PTR [edi], ebx
	mov	eax, edi
	pop	ebx

; 1214 : 		}

	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@2@0@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear, COMDAT
; _this$ = edi

; 1218 : 		erase(begin(), end());

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN19@clear@5
	push	esi
	mov	esi, ecx
	call	??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN19@clear@5:

; 1219 : 		}

	ret	0
?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$0
__tryblocktable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Cat$682494 = 8					; size = 1
__Ptr$319792 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	ebx
	mov	ebx, DWORD PTR __Count$[ebp]
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 747  : 		if (max_size() < _Count)

	cmp	ebx, 268435455				; 0fffffffH
	jbe	SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN42@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

	mov	eax, DWORD PTR [esi+8]
	sub	eax, DWORD PTR [esi]
	sar	eax, 4
	cmp	eax, ebx
	jae	SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	ecx, ebx
	call	?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate

; 752  : 
; 753  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR __Ptr$319792[ebp], eax
	mov	edi, DWORD PTR __Cat$682494[ebp]
	push	edi
	push	ecx
	call	??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U12@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::pair<unsigned __int64,unsigned __int64> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR [esi+4]
	add	esp, 8
	sub	edi, eax

; 761  : 			if (this->_Myfirst != 0)

	test	eax, eax
	je	SHORT $LN35@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Ptr$319792[ebp]
	shl	ebx, 4
	add	ebx, eax

; 770  : 			this->_Mylast = _Ptr + _Size;

	and	edi, -16				; fffffff0H
	add	edi, eax
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

	mov	DWORD PTR [esi], eax
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Ptr$319792[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 757  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN43@reserve@2:
$LN41@reserve@2:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
PUBLIC	?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z ; Rasterizer::Blur
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\sp_counted_base_w32.hpp
xdata$x	SEGMENT
__unwindtable$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z$1
__ehfuncinfo$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
xdata$x	ENDS
;	COMDAT ?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z
_TEXT	SEGMENT
$T683127 = -44						; size = 8
tv766 = -40						; size = 4
_fw_priv_blur$317586 = -40				; size = 4
$T682713 = -36						; size = 4
_plan_selected$311423 = -36				; size = 4
_j$311417 = -36						; size = 4
_tmp_buf$ = -32						; size = 8
_align_buf$682711 = -28					; size = 4
_i$311410 = -28						; size = 4
_border$ = -24						; size = 4
_align_buf$682649 = -20					; size = 4
_plan_selected$311414 = -16				; size = 4
__$EHRec$ = -12						; size = 12
_input_overlay$ = 8					; size = 4
_fBlur$ = 12						; size = 4
_fGaussianBlur$ = 16					; size = 8
_output_overlay$ = 24					; size = 8
?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z PROC ; Rasterizer::Blur, COMDAT

; 800  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	mov	ebx, DWORD PTR _input_overlay$[ebp]
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 801  :     using namespace ::boost::flyweights;
; 802  : 
; 803  :     if(!output_overlay)

	mov	esi, DWORD PTR _output_overlay$[ebp]
	test	esi, esi
	jne	SHORT $LN24@Blur@2

; 804  :     {
; 805  :         return false;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _output_overlay$[ebp+4]
	test	esi, esi
	je	SHORT $LN51@Blur@2
	lea	eax, DWORD PTR [esi+4]
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	jne	SHORT $LN51@Blur@2
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR [esi+8]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	jne	SHORT $LN51@Blur@2
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, esi
	call	edx
$LN51@Blur@2:
	xor	al, al

; 910  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@Blur@2:

; 806  :     }
; 807  :     output_overlay->CleanUp();

	mov	edi, esi
	call	??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char>
	lea	edi, DWORD PTR [esi+8]
	call	??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char>

; 808  : 
; 809  :     output_overlay->mOffsetX = input_overlay.mOffsetX;
; 810  :     output_overlay->mOffsetY = input_overlay.mOffsetY;
; 811  :     output_overlay->mWidth = input_overlay.mWidth;
; 812  :     output_overlay->mHeight = input_overlay.mHeight;
; 813  :     output_overlay->mOverlayWidth = input_overlay.mOverlayWidth;
; 814  :     output_overlay->mOverlayHeight = input_overlay.mOverlayHeight;
; 815  :     output_overlay->mfWideOutlineEmpty = input_overlay.mfWideOutlineEmpty;
; 816  : 
; 817  :     int bluradjust = 0;
; 818  :     if(fBlur || fGaussianBlur > 0.1)

	fld	QWORD PTR _fGaussianBlur$[ebp]
	mov	BYTE PTR [esi+44], 0
	xor	edi, edi
	mov	DWORD PTR [esi+28], edi
	mov	DWORD PTR [esi+24], edi
	mov	DWORD PTR [esi+20], edi
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+40], edi
	mov	DWORD PTR [esi+36], edi
	mov	DWORD PTR [esi+32], edi
	mov	eax, DWORD PTR [ebx+16]
	mov	ecx, DWORD PTR _output_overlay$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR _output_overlay$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR [ebx+24]
	mov	edx, DWORD PTR _output_overlay$[ebp]
	mov	DWORD PTR [edx+24], ecx
	mov	eax, DWORD PTR [ebx+28]
	mov	ecx, DWORD PTR _output_overlay$[ebp]
	mov	DWORD PTR [ecx+28], eax
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR _output_overlay$[ebp]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ebx+36]
	mov	edx, DWORD PTR _output_overlay$[ebp]
	mov	DWORD PTR [edx+36], ecx
	mov	al, BYTE PTR [ebx+44]
	mov	ecx, DWORD PTR _output_overlay$[ebp]
	xor	esi, esi
	mov	BYTE PTR [ecx+44], al
	cmp	DWORD PTR _fBlur$[ebp], edi
	jne	SHORT $LN22@Blur@2
	fld	QWORD PTR __real@3fb999999999999a
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN22@Blur@2

; 833  :     }
; 834  :     else
; 835  :     {
; 836  :         return false;

	lea	eax, DWORD PTR _output_overlay$[ebp]
	fstp	ST(0)
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	xor	al, al

; 910  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@Blur@2:

; 819  :     {
; 820  :         if (fGaussianBlur > 0)

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN284@Blur@2

; 821  :             bluradjust += (int)(fGaussianBlur*3*8 + 0.5) | 1;

	fmul	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR __real@4020000000000000
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	esi, eax
	or	esi, 1
	jmp	SHORT $LN21@Blur@2
$LN284@Blur@2:
	fstp	ST(0)
$LN21@Blur@2:

; 822  :         if (fBlur)

	cmp	DWORD PTR _fBlur$[ebp], edi
	je	SHORT $LN20@Blur@2

; 823  :             bluradjust += 8;

	add	esi, 8
$LN20@Blur@2:

; 824  :         // Expand the buffer a bit when we're blurring, since that can also widen the borders a bit
; 825  :         bluradjust = (bluradjust+7)&~7;
; 826  : 
; 827  :         output_overlay->mOffsetX -= bluradjust;

	mov	eax, DWORD PTR _output_overlay$[ebp]
	add	esi, 7
	and	esi, -8					; fffffff8H
	sub	DWORD PTR [eax+16], esi

; 828  :         output_overlay->mOffsetY -= bluradjust;

	mov	eax, DWORD PTR _output_overlay$[ebp]
	sub	DWORD PTR [eax+20], esi

; 829  :         output_overlay->mWidth += (bluradjust<<1);

	mov	ecx, DWORD PTR _output_overlay$[ebp]
	lea	eax, DWORD PTR [esi+esi]
	add	DWORD PTR [ecx+24], eax

; 830  :         output_overlay->mHeight += (bluradjust<<1);

	mov	ecx, DWORD PTR _output_overlay$[ebp]
	add	DWORD PTR [ecx+28], eax

; 831  :         output_overlay->mOverlayWidth += (bluradjust>>2);

	mov	ecx, DWORD PTR _output_overlay$[ebp]
	mov	eax, esi
	sar	eax, 2
	add	DWORD PTR [ecx+32], eax

; 832  :         output_overlay->mOverlayHeight += (bluradjust>>2);

	mov	ecx, DWORD PTR _output_overlay$[ebp]
	add	DWORD PTR [ecx+36], eax

; 837  :     }
; 838  : 
; 839  :     output_overlay->mOverlayPitch = (output_overlay->mOverlayWidth+15)&~15;

	mov	eax, DWORD PTR _output_overlay$[ebp]
	mov	edx, DWORD PTR [eax+32]
	add	edx, 15					; 0000000fH
	and	edx, -16				; fffffff0H
	mov	DWORD PTR [eax+40], edx

; 840  : 
; 841  :     BYTE* body = reinterpret_cast<BYTE*>(xy_malloc(output_overlay->mOverlayPitch * output_overlay->mOverlayHeight));

	mov	eax, DWORD PTR _output_overlay$[ebp]
	mov	edi, DWORD PTR [eax+40]
	imul	edi, DWORD PTR [eax+36]
	lea	eax, DWORD PTR [edi+23]
	push	eax
	call	_malloc
	lea	ecx, DWORD PTR [eax+23]
	mov	edx, ecx
	and	edx, 15					; 0000000fH
	sub	ecx, edx
	mov	DWORD PTR [ecx-4], eax
	mov	DWORD PTR [ecx-8], edi

; 842  :     if( body==NULL )
; 843  :     {
; 844  :         return false;
; 845  :     }
; 846  :     output_overlay->mBody.reset(body, xy_free);

	mov	edi, DWORD PTR _output_overlay$[ebp]
	add	esp, 4
	mov	eax, ecx
	mov	DWORD PTR _align_buf$682649[ebp], ecx
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 847  :     memset(body, 0, output_overlay->mOverlayPitch * output_overlay->mOverlayHeight);

	mov	eax, DWORD PTR _output_overlay$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	imul	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _align_buf$682649[ebp]
	push	ecx
	push	0
	push	edx
	call	_memset

; 848  :     BYTE* border = NULL;
; 849  :     if (!output_overlay->mfWideOutlineEmpty)

	mov	edi, DWORD PTR _output_overlay$[ebp]
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR [edi+44], 0
	mov	DWORD PTR _border$[ebp], 0
	jne	SHORT $LN17@Blur@2

; 850  :     {
; 851  :         border = reinterpret_cast<BYTE*>(xy_malloc(output_overlay->mOverlayPitch * output_overlay->mOverlayHeight));

	mov	eax, DWORD PTR [edi+40]
	imul	eax, DWORD PTR [edi+36]
	mov	DWORD PTR $T682713[ebp], eax
	add	eax, 23					; 00000017H
	push	eax
	call	_malloc
	lea	ecx, DWORD PTR [eax+23]
	mov	edx, ecx
	and	edx, 15					; 0000000fH
	sub	ecx, edx
	mov	DWORD PTR [ecx-4], eax
	mov	eax, DWORD PTR $T682713[ebp]
	mov	DWORD PTR [ecx-8], eax

; 852  :         if (border==NULL)
; 853  :         {
; 854  :             return false;
; 855  :         }
; 856  :         output_overlay->mBorder.reset(border, xy_free);

	mov	edi, DWORD PTR _output_overlay$[ebp]
	add	esp, 4
	add	edi, 8
	mov	eax, ecx
	mov	DWORD PTR _align_buf$682711[ebp], ecx
	mov	DWORD PTR _border$[ebp], ecx
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 857  :         memset(border, 0, output_overlay->mOverlayPitch * output_overlay->mOverlayHeight);

	mov	eax, DWORD PTR _output_overlay$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	imul	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _align_buf$682711[ebp]
	push	ecx
	push	0
	push	edx
	call	_memset
	mov	edi, DWORD PTR _output_overlay$[ebp]
	add	esp, 12					; 0000000cH
$LN17@Blur@2:

; 858  :     }
; 859  : 
; 860  :     //copy buffer
; 861  :     for(int i = 1; i >= 0; i--)

	mov	edx, DWORD PTR [edi+40]
	mov	eax, esi
	sar	eax, 3
	mov	DWORD PTR _i$311410[ebp], 1

; 870  :             {
; 871  :                 memcpy(plan_selected, plan_input, input_overlay.mOverlayPitch);

	mov	DWORD PTR tv766[ebp], eax
	jmp	SHORT $LN15@Blur@2
	npad	4
$LL276@Blur@2:
	mov	eax, DWORD PTR tv766[ebp]
$LN15@Blur@2:

; 862  :     {
; 863  :         byte* plan_selected = i==0 ? body : border;

	cmp	DWORD PTR _i$311410[ebp], 0
	jne	SHORT $LN27@Blur@2
	mov	ecx, DWORD PTR _align_buf$682649[ebp]

; 864  :         const byte* plan_input = i==0 ? input_overlay.mBody.get() : input_overlay.mBorder.get();

	mov	esi, DWORD PTR [ebx]
	mov	DWORD PTR _plan_selected$311414[ebp], ecx
	jmp	SHORT $LN128@Blur@2
$LN27@Blur@2:

; 862  :     {
; 863  :         byte* plan_selected = i==0 ? body : border;

	mov	ecx, DWORD PTR _border$[ebp]

; 864  :         const byte* plan_input = i==0 ? input_overlay.mBody.get() : input_overlay.mBorder.get();

	mov	esi, DWORD PTR [ebx+8]
	mov	DWORD PTR _plan_selected$311414[ebp], ecx
$LN128@Blur@2:

; 865  : 
; 866  :         plan_selected += (bluradjust>>3) + (bluradjust>>3)*output_overlay->mOverlayPitch;

	lea	ecx, DWORD PTR [edx+1]
	imul	ecx, eax
	add	DWORD PTR _plan_selected$311414[ebp], ecx

; 867  :         if ( plan_selected!=NULL && plan_input!=NULL )

	je	SHORT $LN14@Blur@2
	test	esi, esi
	je	SHORT $LN14@Blur@2

; 868  :         {
; 869  :             for (int j=0;j<input_overlay.mOverlayHeight;j++)

	cmp	DWORD PTR [ebx+36], 0
	mov	DWORD PTR _j$311417[ebp], 0
	jle	SHORT $LN14@Blur@2
	mov	eax, DWORD PTR [ebx+40]
$LN11@Blur@2:

; 870  :             {
; 871  :                 memcpy(plan_selected, plan_input, input_overlay.mOverlayPitch);

	mov	edx, DWORD PTR _plan_selected$311414[ebp]
	push	eax
	push	esi
	push	edx
	call	_memcpy

; 872  :                 plan_selected += output_overlay->mOverlayPitch;

	mov	edi, DWORD PTR _output_overlay$[ebp]
	mov	ecx, DWORD PTR _j$311417[ebp]
	mov	edx, DWORD PTR [edi+40]

; 873  :                 plan_input += input_overlay.mOverlayPitch;

	mov	eax, DWORD PTR [ebx+40]
	add	DWORD PTR _plan_selected$311414[ebp], edx
	inc	ecx
	add	esp, 12					; 0000000cH
	add	esi, eax
	mov	DWORD PTR _j$311417[ebp], ecx
	cmp	ecx, DWORD PTR [ebx+36]
	jl	SHORT $LN11@Blur@2
$LN14@Blur@2:

; 858  :     }
; 859  : 
; 860  :     //copy buffer
; 861  :     for(int i = 1; i >= 0; i--)

	dec	DWORD PTR _i$311410[ebp]
	jns	SHORT $LL276@Blur@2

; 874  :             }
; 875  :         }
; 876  :     }
; 877  : 
; 878  :     ass_tmp_buf tmp_buf( max((output_overlay->mOverlayPitch+1)*(output_overlay->mOverlayHeight+1),0) );        

	mov	eax, DWORD PTR [edi+40]
	mov	ecx, DWORD PTR [edi+36]
	inc	eax
	inc	ecx
	imul	eax, ecx
	xor	edx, edx
	test	eax, eax
	setle	dl
	lea	esi, DWORD PTR [edx-1]
	and	esi, eax
	lea	eax, DWORD PTR [esi*4]
	push	eax
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	mov	DWORD PTR _tmp_buf$[ebp+4], ebx
	mov	DWORD PTR _tmp_buf$[ebp], esi
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 879  :     //flyweight<key_value<int, ass_tmp_buf, ass_tmp_buf_get_size>, no_locking> tmp_buf((overlay->mOverlayWidth+1)*(overlay->mOverlayPitch+1));
; 880  :     // Do some gaussian blur magic    
; 881  :     if (fGaussianBlur > 0.1)//(fGaussianBlur > 0) return true even if fGaussianBlur very small

	fld	QWORD PTR __real@3fb999999999999a
	fcomp	QWORD PTR _fGaussianBlur$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN219@Blur@2

; 882  :     {
; 883  :         byte* plan_selected= output_overlay->mfWideOutlineEmpty ? body : border;

	cmp	BYTE PTR [edi+44], 0
	je	SHORT $LN33@Blur@2
	mov	ecx, DWORD PTR _align_buf$682649[ebp]
	mov	DWORD PTR _plan_selected$311423[ebp], ecx
	jmp	SHORT $LN34@Blur@2
$LN33@Blur@2:
	mov	edx, DWORD PTR _border$[ebp]
	mov	DWORD PTR _plan_selected$311423[ebp], edx
$LN34@Blur@2:

; 884  :         flyweight<key_value<double, ass_synth_priv, ass_synth_priv_key>, no_locking> fw_priv_blur(fGaussianBlur);

	lea	ecx, DWORD PTR _fGaussianBlur$[ebp]
	lea	esi, DWORD PTR _fw_priv_blur$317586[ebp]
	call	??$insert@N@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@SA?AV?$refcounted_handle@PBV?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@U?$flyweight_core_tracking_helper@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@234@@123@AAN@Z ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::insert<double>

; 885  :         const ass_synth_priv& priv_blur = fw_priv_blur.get();
; 886  :         if (output_overlay->mOverlayWidth>=priv_blur.g_w && output_overlay->mOverlayHeight>=priv_blur.g_w)

	mov	ecx, DWORD PTR _output_overlay$[ebp]
	mov	esi, DWORD PTR _fw_priv_blur$317586[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [esi+4]
	cmp	edx, eax
	jl	SHORT $LN7@Blur@2
	mov	edi, DWORD PTR [ecx+36]
	cmp	edi, eax
	jl	SHORT $LN7@Blur@2

; 887  :         {   
; 888  :             ass_gauss_blur(plan_selected, tmp_buf.tmp, output_overlay->mOverlayWidth, output_overlay->mOverlayHeight, output_overlay->mOverlayPitch, 
; 889  :                 priv_blur.gt2, priv_blur.g_r, priv_blur.g_w);

	mov	ebx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ecx+40]
	push	ebx
	mov	ebx, DWORD PTR [esi+12]
	push	ebx
	mov	ebx, DWORD PTR _tmp_buf$[ebp+4]
	push	ecx
	push	edi
	push	edx
	mov	edx, DWORD PTR _plan_selected$311423[ebp]
	push	ebx
	push	edx
	call	?ass_gauss_blur@@YAXPAEPAIHHHPBIHH@Z	; ass_gauss_blur
	add	esp, 28					; 0000001cH
$LN7@Blur@2:

; 890  :         }
; 891  :     }

	lea	eax, DWORD PTR [esi+32]
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	jne	SHORT $LN268@Blur@2
	dec	DWORD PTR [esi+36]
	jne	SHORT $LN268@Blur@2
	mov	eax, DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
	lea	ecx, DWORD PTR [eax+16]
	push	ecx
	push	esi
	lea	edx, DWORD PTR $T683127[ebp]
	push	edx
	add	eax, 12					; 0000000cH
	push	eax
	call	?erase@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@QAE?AV?$hashed_index_iterator@U?$hashed_index_node@U?$index_node_base@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@multi_index@boost@@@detail@multi_index@boost@@V?$bucket_array@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@234@@234@V5234@@Z ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::erase
$LN268@Blur@2:
	mov	edi, DWORD PTR _output_overlay$[ebp]
$LN219@Blur@2:

; 892  : 
; 893  :     if(output_overlay->mOverlayWidth >= 3 && output_overlay->mOverlayHeight >= 3)

	mov	eax, 3
	cmp	DWORD PTR [edi+32], eax
	jl	SHORT $LN3@Blur@2
	cmp	DWORD PTR [edi+36], eax
	jl	SHORT $LN3@Blur@2

; 894  :     {
; 895  :         for (int pass = 0; pass < fBlur; pass++)

	mov	eax, DWORD PTR _fBlur$[ebp]
	test	eax, eax
	jle	SHORT $LN3@Blur@2
	mov	esi, eax
	jmp	SHORT $LN5@Blur@2
$LL269@Blur@2:
	mov	edi, DWORD PTR _output_overlay$[ebp]
$LN5@Blur@2:

; 896  :         {
; 897  :             int pitch = output_overlay->mOverlayPitch;
; 898  :             byte* plan_selected= output_overlay->mfWideOutlineEmpty ? body : border;

	cmp	BYTE PTR [edi+44], 0
	mov	ecx, DWORD PTR [edi+40]
	mov	eax, DWORD PTR _align_buf$682649[ebp]
	jne	SHORT $LN36@Blur@2
	mov	eax, DWORD PTR _border$[ebp]
$LN36@Blur@2:

; 899  :             if (g_cpuid.m_flags & CCpuID::sse2)

	test	BYTE PTR ?g_cpuid@@3VCCpuID@@A, 8

; 900  :             {
; 901  :                 be_blur(plan_selected, tmp_buf.tmp, output_overlay->mOverlayWidth, output_overlay->mOverlayHeight, pitch);

	mov	edx, DWORD PTR [edi+32]
	push	ecx
	mov	ecx, DWORD PTR [edi+36]
	push	ecx
	push	edx
	push	eax
	je	SHORT $LN2@Blur@2
	call	?be_blur@@YAXPAEPAIHHH@Z		; be_blur

; 902  :             }
; 903  :             else

	jmp	SHORT $LN286@Blur@2
$LN2@Blur@2:

; 904  :             {
; 905  :                 be_blur_c(plan_selected, tmp_buf.tmp, output_overlay->mOverlayWidth, output_overlay->mOverlayHeight, pitch);

	call	?be_blur_c@@YAXPAEPAIHHH@Z		; be_blur_c
$LN286@Blur@2:
	add	esp, 16					; 00000010H
	dec	esi
	jne	SHORT $LL269@Blur@2
$LN3@Blur@2:

; 906  :             }
; 907  :         }
; 908  :     }
; 909  :     return true;

	push	ebx
	call	_free
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _output_overlay$[ebp+4]
	add	esp, 4
	test	esi, esi
	je	SHORT $LN258@Blur@2
	lea	eax, DWORD PTR [esi+4]
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	jne	SHORT $LN258@Blur@2
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR [esi+8]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	jne	SHORT $LN258@Blur@2
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, esi
	call	edx
$LN258@Blur@2:

; 910  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	edi
	pop	esi
	mov	al, 1
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z$0:
	lea	eax, DWORD PTR _output_overlay$[ebp]
	jmp	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
__unwindfunclet$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z$1:
	lea	eax, DWORD PTR _tmp_buf$[ebp]
	jmp	??1ass_tmp_buf@@QAE@XZ			; ass_tmp_buf::~ass_tmp_buf
__ehhandler$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Blur@Rasterizer@@SA_NABUOverlay@@HNV?$shared_ptr@UOverlay@@@boost@@@Z ENDP ; Rasterizer::Blur
PUBLIC	?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z ; Rasterizer::Rasterize
EXTRN	__aullshr:PROC
;	COMDAT xdata$x
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\smart_ptr\detail\sp_counted_base_w32.hpp
xdata$x	SEGMENT
__unwindtable$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z$0
__ehfuncinfo$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
xdata$x	ENDS
;	COMDAT ?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z
_TEXT	SEGMENT
_pOutline$ = -48					; size = 8
_align_buf$683366 = -40					; size = 4
_itEnd$311344 = -36					; size = 4
_pitch$311347 = -32					; size = 4
_i$311256 = -28						; size = 4
_scan_line_data$ = -28					; size = 4
tv591 = -24						; size = 4
_x2$311371 = -24					; size = 4
_plan_selected$311346 = -20				; size = 4
_border$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_xsub$ = 8						; size = 4
_ysub$ = 12						; size = 4
_overlay$ = 16						; size = 8
?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z PROC ; Rasterizer::Rasterize, COMDAT
; _scan_line_data2$ = ecx

; 703  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	mov	esi, ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 704  :     using namespace ::boost::flyweights;
; 705  : 
; 706  :     if(!overlay)

	mov	edi, DWORD PTR _overlay$[ebp]
	test	edi, edi
	jne	SHORT $LN18@Rasterize@2

; 707  :     {
; 708  :         return false;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	test	esi, esi
	je	SHORT $LN35@Rasterize@2
	lea	eax, DWORD PTR [esi+4]
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	jne	SHORT $LN35@Rasterize@2
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR [esi+8]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	jne	SHORT $LN35@Rasterize@2
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, esi
	call	edx
$LN35@Rasterize@2:
	xor	al, al

; 795  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Rasterize@2:

; 709  :     }
; 710  :     overlay->CleanUp();

	mov	ebx, edi
	call	??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char>
	lea	edi, DWORD PTR [ebx+8]
	call	??$reset@E@?$shared_ptr@E@boost@@QAEXPAE@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char>
	xor	eax, eax
	mov	DWORD PTR [ebx+28], eax
	mov	DWORD PTR [ebx+24], eax
	mov	DWORD PTR [ebx+20], eax
	mov	DWORD PTR [ebx+16], eax
	mov	DWORD PTR [ebx+40], eax
	mov	DWORD PTR [ebx+36], eax
	mov	DWORD PTR [ebx+32], eax
	mov	BYTE PTR [ebx+44], al

; 711  :     const ScanLineData& scan_line_data = *scan_line_data2.m_scan_line_data;

	mov	edx, DWORD PTR [esi]

; 712  :     if(!scan_line_data.mWidth || !scan_line_data.mHeight)

	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _scan_line_data$[ebp], edx
	cmp	ecx, eax
	je	$LN16@Rasterize@2
	mov	edx, DWORD PTR [edx+28]
	cmp	edx, eax
	je	$LN16@Rasterize@2

; 715  :     }
; 716  :     xsub &= 7;
; 717  :     ysub &= 7;

	mov	eax, DWORD PTR _ysub$[ebp]
	mov	edi, DWORD PTR _xsub$[ebp]

; 718  :     //xsub = ysub = 0;
; 719  :     int width = scan_line_data.mWidth + xsub;
; 720  :     int height = scan_line_data.mHeight + ysub;
; 721  :     overlay->mfWideOutlineEmpty = scan_line_data2.mWideOutline.empty();

	mov	ebx, DWORD PTR [esi+16]
	and	eax, 7
	add	edx, eax
	mov	DWORD PTR _ysub$[ebp], eax
	lea	eax, DWORD PTR [esi+16]
	and	edi, 7
	add	ecx, edi
	cmp	ebx, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR tv591[ebp], eax
	sete	al
	mov	BYTE PTR [ebx+44], al

; 722  :     if(!overlay->mfWideOutlineEmpty)

	mov	eax, DWORD PTR _overlay$[ebp]
	cmp	BYTE PTR [eax+44], 0
	mov	DWORD PTR _xsub$[ebp], edi
	jne	SHORT $LN15@Rasterize@2

; 723  :     {
; 724  :         int wide_border = (scan_line_data2.mWideBorder+7)&~7;

	mov	eax, DWORD PTR [esi+32]
	add	eax, 7
	and	eax, -8					; fffffff8H

; 725  : 
; 726  :         width += 2*wide_border ;
; 727  :         height += 2*wide_border ;
; 728  :         xsub += wide_border ;

	add	edi, eax

; 729  :         ysub += wide_border ;

	add	DWORD PTR _ysub$[ebp], eax
	lea	ecx, DWORD PTR [ecx+eax*2]
	lea	edx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _xsub$[ebp], edi
$LN15@Rasterize@2:

; 730  :     }
; 731  :     overlay->mOffsetX = scan_line_data2.mPathOffsetX - xsub;

	mov	eax, DWORD PTR [esi+8]
	sub	eax, edi
	mov	edi, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edi+16], eax

; 732  :     overlay->mOffsetY = scan_line_data2.mPathOffsetY - ysub;

	mov	eax, DWORD PTR [esi+12]
	sub	eax, DWORD PTR _ysub$[ebp]
	mov	esi, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [esi+20], eax

; 733  : 
; 734  :     overlay->mWidth = width;

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 735  :     overlay->mHeight = height;

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [eax+28], edx

; 736  :     overlay->mOverlayWidth = ((width+7)>>3) + 1;

	mov	eax, DWORD PTR _overlay$[ebp]
	add	ecx, 7

; 737  :     overlay->mOverlayHeight = ((height+7)>>3) + 1;

	add	edx, 7
	sar	ecx, 3
	sar	edx, 3
	inc	ecx
	mov	DWORD PTR [eax+32], ecx
	mov	ecx, DWORD PTR _overlay$[ebp]
	inc	edx
	mov	DWORD PTR [ecx+36], edx

; 738  :     overlay->mOverlayPitch = (overlay->mOverlayWidth+15)&~15;

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	edx, DWORD PTR [eax+32]
	add	edx, 15					; 0000000fH
	and	edx, -16				; fffffff0H
	mov	DWORD PTR [eax+40], edx

; 739  : 
; 740  :     BYTE* body = reinterpret_cast<BYTE*>(xy_malloc(overlay->mOverlayPitch * overlay->mOverlayHeight));

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	edi, DWORD PTR [eax+40]
	imul	edi, DWORD PTR [eax+36]
	lea	eax, DWORD PTR [edi+23]
	push	eax
	call	_malloc
	lea	ebx, DWORD PTR [eax+23]
	mov	ecx, ebx
	and	ecx, 15					; 0000000fH
	sub	ebx, ecx
	mov	DWORD PTR [ebx-4], eax
	mov	DWORD PTR [ebx-8], edi

; 741  :     if( body==NULL )
; 742  :     {
; 743  :         return false;
; 744  :     }
; 745  :     overlay->mBody.reset(body, xy_free);

	mov	edi, DWORD PTR _overlay$[ebp]
	add	esp, 4
	mov	eax, ebx
	mov	DWORD PTR _align_buf$683366[ebp], ebx
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 746  :     memset(body, 0, overlay->mOverlayPitch * overlay->mOverlayHeight);

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	edx, DWORD PTR [eax+40]
	imul	edx, DWORD PTR [eax+36]
	push	edx
	push	0
	push	ebx
	call	_memset

; 747  :     BYTE* border = NULL;
; 748  :     if (!overlay->mfWideOutlineEmpty)

	mov	ecx, DWORD PTR _overlay$[ebp]
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR [ecx+44], 0
	mov	DWORD PTR _border$[ebp], 0
	jne	SHORT $LN13@Rasterize@2

; 749  :     {
; 750  :         border = reinterpret_cast<BYTE*>(xy_malloc(overlay->mOverlayPitch * overlay->mOverlayHeight));

	mov	esi, DWORD PTR [ecx+40]
	imul	esi, DWORD PTR [ecx+36]
	call	?xy_malloc@@YAPAXH@Z			; xy_malloc
	mov	esi, eax
	mov	DWORD PTR _border$[ebp], esi

; 751  :         if (border==NULL)

	test	esi, esi
	jne	SHORT $LN12@Rasterize@2

; 752  :         {
; 753  :             return false;

	lea	eax, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
	xor	al, al

; 795  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@Rasterize@2:

; 754  :         }
; 755  :         overlay->mBorder.reset(border, xy_free);

	mov	edi, DWORD PTR _overlay$[ebp]
	add	edi, 8
	call	??$reset@EP6AXPAX@Z@?$shared_ptr@E@boost@@QAEXPAEP6AXPAX@Z@Z ; boost::shared_ptr<unsigned char>::reset<unsigned char,void (__cdecl*)(void *)>

; 756  :         memset(border, 0, overlay->mOverlayPitch * overlay->mOverlayHeight);

	mov	eax, DWORD PTR _overlay$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	imul	ecx, DWORD PTR [eax+36]
	push	ecx
	push	0
	push	esi
	call	_memset
	mov	ecx, DWORD PTR _overlay$[ebp]
	add	esp, 12					; 0000000cH
$LN13@Rasterize@2:

; 757  :     }
; 758  : 
; 759  :     // Are we doing a border?
; 760  :     const ScanLineData::tSpanBuffer* pOutline[2] = {&(scan_line_data.mOutline), &(scan_line_data2.mWideOutline)};

	mov	edx, DWORD PTR _scan_line_data$[ebp]
	mov	eax, DWORD PTR tv591[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _pOutline$[ebp], edx

; 761  :     for(int i = countof(pOutline)-1; i >= 0; i--)

	mov	edx, 1
	mov	DWORD PTR _pOutline$[ebp+4], eax
	mov	DWORD PTR _i$311256[ebp], edx
	npad	1
$LL11@Rasterize@2:

; 762  :     {
; 763  :         ScanLineData::tSpanBuffer::const_iterator it = pOutline[i]->begin();

	mov	eax, DWORD PTR _pOutline$[ebp+edx*4]
	mov	edi, DWORD PTR [eax]

; 764  :         ScanLineData::tSpanBuffer::const_iterator itEnd = pOutline[i]->end();

	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _itEnd$311344[ebp], eax

; 765  :         byte* plan_selected = i==0 ? body : border;

	test	edx, edx
	jne	SHORT $LN21@Rasterize@2
	mov	DWORD PTR _plan_selected$311346[ebp], ebx
	jmp	SHORT $LN22@Rasterize@2
$LN21@Rasterize@2:
	mov	esi, DWORD PTR _border$[ebp]
	mov	DWORD PTR _plan_selected$311346[ebp], esi
$LN22@Rasterize@2:

; 766  :         int pitch = overlay->mOverlayPitch;

	mov	esi, DWORD PTR [ecx+40]
	mov	DWORD PTR _pitch$311347[ebp], esi

; 767  :         for(; it!=itEnd; ++it)

	cmp	edi, eax
	je	$LN10@Rasterize@2
$LN116@Rasterize@2:

; 768  :         {
; 769  :             int y = (int)(((*it).first >> 32) - 0x40000000 + ysub);

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [edi+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _ysub$[ebp]

; 770  :             int x1 = (int)(((*it).first & 0xffffffff) - 0x40000000 + xsub);

	mov	edx, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+ecx-1073741824]
	mov	ecx, DWORD PTR _xsub$[ebp]
	lea	ebx, DWORD PTR [edx+ecx-1073741824]

; 771  :             int x2 = (int)(((*it).second & 0xffffffff) - 0x40000000 + xsub);

	mov	edx, DWORD PTR [edi+8]
	lea	edx, DWORD PTR [edx+ecx-1073741824]
	mov	DWORD PTR _x2$311371[ebp], edx

; 772  :             if(x2 > x1)

	cmp	edx, ebx
	jle	SHORT $LN7@Rasterize@2

; 773  :             {
; 774  :                 int first = x1>>3;
; 775  :                 int last = (x2-1)>>3;
; 776  :                 byte* dst = plan_selected + (pitch*(y>>3) + first);

	sar	eax, 3
	imul	eax, DWORD PTR _pitch$311347[ebp]
	mov	ecx, ebx
	sar	ecx, 3
	dec	edx
	lea	esi, DWORD PTR [ecx+eax]
	add	esi, DWORD PTR _plan_selected$311346[ebp]
	sar	edx, 3

; 777  :                 if(first == last)

	cmp	ecx, edx
	jne	SHORT $LN4@Rasterize@2

; 778  :                     *dst += x2-x1;

	mov	al, BYTE PTR _x2$311371[ebp]
	sub	al, bl

; 779  :                 else

	jmp	SHORT $LN161@Rasterize@2
$LN4@Rasterize@2:

; 780  :                 {
; 781  :                     *dst += ((first+1)<<3) - x1;

	mov	al, cl
	add	al, al
	add	al, al
	add	al, al
	sub	al, bl
	add	al, 8
	add	BYTE PTR [esi], al

; 782  :                     dst += 1;
; 783  :                     while(++first < last)

	inc	ecx
	inc	esi
	cmp	ecx, edx
	jge	SHORT $LN1@Rasterize@2

; 780  :                 {
; 781  :                     *dst += ((first+1)<<3) - x1;

	mov	eax, edx
	sub	eax, ecx
$LL2@Rasterize@2:

; 784  :                     {
; 785  :                         *dst += 0x08;

	add	BYTE PTR [esi], 8

; 786  :                         dst += 1;

	inc	esi
	dec	eax
	jne	SHORT $LL2@Rasterize@2
$LN1@Rasterize@2:

; 787  :                     }
; 788  :                     *dst += x2 - (last<<3);

	mov	al, BYTE PTR _x2$311371[ebp]
	add	dl, dl
	add	dl, dl
	add	dl, dl
	sub	al, dl
$LN161@Rasterize@2:
	add	BYTE PTR [esi], al
$LN7@Rasterize@2:

; 767  :         for(; it!=itEnd; ++it)

	add	edi, 16					; 00000010H
	cmp	edi, DWORD PTR _itEnd$311344[ebp]
	jne	$LN116@Rasterize@2
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	ebx, DWORD PTR _align_buf$683366[ebp]
	mov	edx, DWORD PTR _i$311256[ebp]
$LN10@Rasterize@2:

; 761  :     for(int i = countof(pOutline)-1; i >= 0; i--)

	dec	edx
	mov	DWORD PTR _i$311256[ebp], edx
	jns	$LL11@Rasterize@2

; 789  :                 }
; 790  :             }
; 791  :         }
; 792  :     }
; 793  : 
; 794  :     return true;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	test	esi, esi
	jmp	SHORT $LN165@Rasterize@2
$LN16@Rasterize@2:

; 713  :     {
; 714  :         return true;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, DWORD PTR _overlay$[ebp+4]
	cmp	esi, eax
$LN165@Rasterize@2:
	je	SHORT $LN53@Rasterize@2
	or	edx, -1
	lea	ecx, DWORD PTR [esi+4]
	lock	 xadd	 DWORD PTR [ecx], edx
	jne	SHORT $LN53@Rasterize@2
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, esi
	call	edx
	or	ecx, -1
	lea	eax, DWORD PTR [esi+8]
	lock	 xadd	 DWORD PTR [eax], ecx
	jne	SHORT $LN53@Rasterize@2
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, esi
	call	eax
$LN53@Rasterize@2:

; 795  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	edi
	pop	esi
	mov	al, 1
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z$0:
	lea	eax, DWORD PTR _overlay$[ebp]
	jmp	??1?$shared_ptr@UOverlay@@@boost@@QAE@XZ
__ehhandler$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Rasterize@Rasterizer@@SA_NABVScanLineData2@@HHV?$shared_ptr@UOverlay@@@boost@@@Z ENDP ; Rasterizer::Rasterize
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve, COMDAT
; _this$ = ecx

; 1291 : 		size_type _Size = size();

	mov	eax, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	sub	eax, esi
	sar	eax, 4

; 1292 : 		if (max_size() - _Count < _Size)

	cmp	eax, 268435454				; 0ffffffeH
	jbe	SHORT $LN4@Reserve

; 1293 : 			_Xlen();

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, esi
	inc	eax
	sar	edx, 4
	cmp	eax, edx
	jbe	SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

	push	edi
	mov	esi, edx
	shr	esi, 1
	mov	edi, 268435455				; 0fffffffH
	sub	edi, esi
	cmp	edi, edx
	pop	edi
	jae	SHORT $LN23@Reserve
	xor	edx, edx
	jmp	SHORT $LN24@Reserve
$LN23@Reserve:
	add	edx, esi
$LN24@Reserve:
	cmp	edx, eax
	jae	SHORT $LN20@Reserve
	mov	edx, eax
$LN20@Reserve:
	push	edx
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
$LN1@Reserve:

; 1298 : 		}

	pop	esi
	ret	0
$LN33@Reserve:
?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z
_TEXT	SEGMENT
?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back, COMDAT
; _this$ = edi
; __Val$ = eax

; 976  : 		{	// insert element at end

	push	esi
	mov	esi, eax

; 977  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR [edi+4]
	cmp	esi, eax
	jae	SHORT $LN4@push_back@2
	mov	ecx, DWORD PTR [edi]
	cmp	ecx, esi
	ja	SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	sub	esi, ecx

; 980  : 			if (this->_Mylast == this->_Myend)

	cmp	eax, DWORD PTR [edi+8]
	jne	SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

	mov	ecx, edi
	call	?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

	and	esi, -16				; fffffff0H
	add	esi, DWORD PTR [edi]

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

	jmp	SHORT $LN1@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

	cmp	eax, DWORD PTR [edi+8]
	jne	SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

	mov	ecx, edi
	call	?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN47@push_back@2
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
$LN47@push_back@2:

; 996  : 			++this->_Mylast;

	add	DWORD PTR [edi+4], 16			; 00000010H
	pop	esi

; 997  : 			}
; 998  : 		}

	ret	0
?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z
_TEXT	SEGMENT
?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back, COMDAT
; _this$ = edi
; __Val$ = eax

; 631  : 		{	// insert element at end

	push	esi
	mov	esi, eax

; 632  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR [edi+4]
	cmp	esi, eax
	jae	SHORT $LN4@push_back@3
	mov	ecx, DWORD PTR [edi]
	cmp	ecx, esi
	ja	SHORT $LN4@push_back@3

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	sub	esi, ecx

; 635  : 			if (this->_Mylast == this->_Myend)

	cmp	eax, DWORD PTR [edi+8]
	jne	SHORT $LN3@push_back@3

; 636  : 				_Reserve(1);

	mov	ecx, edi
	call	?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
$LN3@push_back@3:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

	and	esi, -16				; fffffff0H
	add	esi, DWORD PTR [edi]

; 641  : 			++this->_Mylast;
; 642  : 			}
; 643  : 		else

	jmp	SHORT $LN1@push_back@3
$LN4@push_back@3:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

	cmp	eax, DWORD PTR [edi+8]
	jne	SHORT $LN1@push_back@3

; 646  : 				_Reserve(1);

	mov	ecx, edi
	call	?_Reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Reserve
$LN1@push_back@3:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN53@push_back@3
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
$LN53@push_back@3:

; 651  : 			++this->_Mylast;

	add	DWORD PTR [edi+4], 16			; 00000010H
	pop	esi

; 652  : 			}
; 653  : 		}

	ret	0
?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAU?$pair@_K_K@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
_TEXT	ENDS
PUBLIC	?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z ; ScanLineData::ScanConvert
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z$0
__ehfuncinfo$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
xdata$x	ENDS
;	COMDAT ?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z
_TEXT	SEGMENT
$T697486 = -84						; size = 16
$T697485 = -68						; size = 16
_heap$ = -52						; size = 16
_y$ = -36						; size = 8
tv2295 = -28						; size = 4
tv1696 = -24						; size = 4
__Size$699003 = -24					; size = 4
$T698222 = -24						; size = 4
__Idx$698150 = -24					; size = 4
_x2$319393 = -24					; size = 4
_x1$319392 = -20					; size = 4
_lastmoveto$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
tv2379 = 12						; size = 4
_itX1$319384 = 12					; size = 4
_ptr$319242 = 12					; size = 4
_path_data$ = 12					; size = 4
_count$319241 = 16					; size = 4
_size$ = 16						; size = 4
?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z PROC ; ScanLineData::ScanConvert, COMDAT

; 2420 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	mov	ebx, DWORD PTR _path_data$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _this$[ebp]

; 2421 :     int lastmoveto = -1;
; 2422 :     int i;
; 2423 :     // Drop any outlines we may have.
; 2424 :     mOutline.clear();

	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [edi+32]
	mov	DWORD PTR _lastmoveto$[ebp], -1
	cmp	eax, ecx
	je	SHORT $LN54@ScanConver@2
	mov	esi, ecx
	call	??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
	mov	DWORD PTR [edi+36], eax
$LN54@ScanConver@2:

; 2425 :     // Determine bounding box
; 2426 :     if(!path_data.mPathPoints)

	xor	eax, eax
	cmp	DWORD PTR [ebx+8], eax
	jne	SHORT $LN32@ScanConver@2

; 2427 :     {
; 2428 :         mWidth = mHeight = 0;

	mov	DWORD PTR [edi+28], eax
	mov	DWORD PTR [edi+24], eax

; 2429 :         return false;

	xor	al, al

; 2527 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN32@ScanConver@2:

; 2430 :     }
; 2431 :     mWidth = size.cx;

	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edi+24], ecx

; 2432 :     mHeight = size.cy;

	mov	edx, DWORD PTR [eax+4]

; 2433 :     // Initialize edge buffer.  We use edge 0 as a sentinel.
; 2434 :     mEdgeNext = 1;
; 2435 :     mEdgeHeapSize = 2048;
; 2436 :     mpEdgeBuffer = (Edge*)malloc(sizeof(Edge)*mEdgeHeapSize);

	push	16384					; 00004000H
	mov	DWORD PTR [edi+28], edx
	mov	DWORD PTR [edi+56], 1
	mov	DWORD PTR [edi+52], 2048		; 00000800H
	call	_malloc
	mov	DWORD PTR [edi+48], eax

; 2437 :     // Initialize scanline list.
; 2438 :     mpScanBuffer = new unsigned int[mHeight];

	mov	eax, DWORD PTR [edi+28]
	xor	ecx, ecx
	add	esp, 4
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]

; 2439 :     memset(mpScanBuffer, 0, mHeight*sizeof(unsigned int));

	mov	ecx, DWORD PTR [edi+28]
	add	ecx, ecx
	add	esp, 4
	add	ecx, ecx
	push	ecx
	xor	esi, esi
	push	esi
	push	eax
	mov	DWORD PTR [edi+60], eax
	call	_memset

; 2440 :     // Scan convert the outline.  Yuck, Bezier curves....
; 2441 :     // Unfortunately, Windows 95/98 GDI has a bad habit of giving us text
; 2442 :     // paths with all but the first figure left open, so we can't rely
; 2443 :     // on the PT_CLOSEFIGURE flag being used appropriately.
; 2444 :     fFirstSet = false;

	mov	BYTE PTR [edi+4], 0

; 2445 :     firstp.x = firstp.y = 0;

	mov	DWORD PTR [edi+12], esi
	mov	DWORD PTR [edi+8], esi

; 2446 :     lastp.x = lastp.y = 0;

	mov	DWORD PTR [edi+20], esi
	mov	DWORD PTR [edi+16], esi

; 2447 :     for(i=0; i<path_data.mPathPoints; ++i)

	mov	eax, DWORD PTR [ebx+8]
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	$LN15@ScanConver@2

; 2430 :     }
; 2431 :     mWidth = size.cx;

	mov	DWORD PTR tv2379[ebp], -1
$LN31@ScanConver@2:

; 2448 :     {
; 2449 :         BYTE t = path_data.mpPathTypes[i] & ~PT_CLOSEFIGURE;

	mov	edx, DWORD PTR [ebx]
	mov	cl, BYTE PTR [esi+edx]
	and	cl, 254					; 000000feH

; 2450 :         switch(t)

	movzx	ecx, cl
	add	ecx, -2					; fffffffeH
	cmp	ecx, 250				; 000000faH
	ja	$LN30@ScanConver@2
	movzx	ecx, BYTE PTR $LN525@ScanConver@2[ecx]
	jmp	DWORD PTR $LN538@ScanConver@2[ecx*4]
$LN26@ScanConver@2:

; 2451 :         {
; 2452 :         case PT_MOVETO:
; 2453 :             if(lastmoveto >= 0 && firstp != lastp)

	cmp	DWORD PTR _lastmoveto$[ebp], 0
	jl	SHORT $LN25@ScanConver@2
	mov	eax, DWORD PTR [edi+16]
	mov	ecx, DWORD PTR [edi+20]
	cmp	DWORD PTR [edi+8], eax
	jne	SHORT $LN89@ScanConver@2
	cmp	DWORD PTR [edi+12], ecx
	je	SHORT $LN25@ScanConver@2
$LN89@ScanConver@2:

; 2454 :                 _EvaluateLine(lastp.x, lastp.y, firstp.x, firstp.y);

	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [edi+8]
	push	edx
	mov	edx, DWORD PTR [edi+16]
	push	eax
	push	ecx
	push	edx
	mov	ecx, edi
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine
$LN25@ScanConver@2:

; 2455 :             lastmoveto = i;
; 2456 :             fFirstSet = false;

	mov	BYTE PTR [edi+4], 0

; 2457 :             lastp = path_data.mpPathPoints[i];

	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR [eax+esi*8+4]
	mov	DWORD PTR _lastmoveto$[ebp], esi
	mov	DWORD PTR [edi+16], ecx
	mov	DWORD PTR [edi+20], eax

; 2458 :             break;

	jmp	SHORT $LN30@ScanConver@2
$LN23@ScanConver@2:

; 2459 :         case PT_MOVETONC:
; 2460 :             break;
; 2461 :         case PT_LINETO:
; 2462 :             if(path_data.mPathPoints - (i-1) >= 2) _EvaluateLine(path_data, i-1, i);

	sub	eax, esi
	inc	eax
	cmp	eax, 2
	jl	SHORT $LN30@ScanConver@2
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [eax+esi*8+4]
	mov	edx, DWORD PTR [eax+esi*8]
	lea	eax, DWORD PTR [eax+esi*8]
	push	ecx
	mov	ecx, DWORD PTR [eax-4]
	push	edx
	mov	edx, DWORD PTR [eax-8]
	push	ecx
	push	edx
	mov	ecx, edi
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine

; 2463 :             break;

	jmp	SHORT $LN30@ScanConver@2
$LN21@ScanConver@2:

; 2464 :         case PT_BEZIERTO:
; 2465 :             if(path_data.mPathPoints - (i-1) >= 4) _EvaluateBezier(path_data, i-1, false);

	sub	eax, esi
	inc	eax
	cmp	eax, 4
	jl	SHORT $LN20@ScanConver@2
	push	0
$LN535@ScanConver@2:
	mov	edx, DWORD PTR tv2379[ebp]
	push	edi
	mov	eax, ebx
	call	?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z ; ScanLineData::_EvaluateBezier
$LN20@ScanConver@2:

; 2466 :             i += 2;

	add	esi, 2
	add	DWORD PTR tv2379[ebp], 2

; 2467 :             break;

	jmp	SHORT $LN30@ScanConver@2
$LN19@ScanConver@2:

; 2468 :         case PT_BSPLINETO:
; 2469 :             if(path_data.mPathPoints - (i-1) >= 4) _EvaluateBezier(path_data, i-1, true);

	sub	eax, esi
	inc	eax
	cmp	eax, 4
	jl	SHORT $LN20@ScanConver@2
	push	1

; 2470 :             i += 2;
; 2471 :             break;

	jmp	SHORT $LN535@ScanConver@2
$LN17@ScanConver@2:

; 2472 :         case PT_BSPLINEPATCHTO:
; 2473 :             if(path_data.mPathPoints - (i-3) >= 4) _EvaluateBezier(path_data, i-3, true);

	sub	eax, esi
	add	eax, 3
	cmp	eax, 4
	jl	SHORT $LN30@ScanConver@2
	push	1
	lea	edx, DWORD PTR [esi-3]
	push	edi
	mov	eax, ebx
	call	?_EvaluateBezier@ScanLineData@@AAEXABUPathData@@H_N@Z ; ScanLineData::_EvaluateBezier
$LN30@ScanConver@2:

; 2447 :     for(i=0; i<path_data.mPathPoints; ++i)

	mov	eax, DWORD PTR [ebx+8]
	inc	DWORD PTR tv2379[ebp]
	inc	esi
	cmp	esi, eax
	jl	$LN31@ScanConver@2

; 2474 :             break;
; 2475 :         }
; 2476 :     }
; 2477 :     if(lastmoveto >= 0 && firstp != lastp)

	cmp	DWORD PTR _lastmoveto$[ebp], 0
	jl	SHORT $LN15@ScanConver@2
	mov	eax, DWORD PTR [edi+16]
	mov	ecx, DWORD PTR [edi+20]
	cmp	DWORD PTR [edi+8], eax
	jne	SHORT $LN97@ScanConver@2
	cmp	DWORD PTR [edi+12], ecx
	je	SHORT $LN15@ScanConver@2
$LN97@ScanConver@2:

; 2478 :         _EvaluateLine(lastp.x, lastp.y, firstp.x, firstp.y);

	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [edi+20]
	push	eax
	mov	eax, DWORD PTR [edi+16]
	push	ecx
	push	edx
	push	eax
	mov	ecx, edi
	call	?_EvaluateLine@ScanLineData@@AAEXHHHH@Z	; ScanLineData::_EvaluateLine
$LN15@ScanConver@2:

; 2479 :     // Convert the edges to spans.  We couldn't do this before because some of
; 2480 :     // the regions may have winding numbers >+1 and it would have been a pain
; 2481 :     // to try to adjust the spans on the fly.  We use one heap to detangle
; 2482 :     // a scanline's worth of edges from the singly-linked lists, and another
; 2483 :     // to collect the actual scans.
; 2484 :     std::vector<int> heap;

	xor	esi, esi
	xor	ebx, ebx
	mov	DWORD PTR _heap$[ebp], ebx
	mov	DWORD PTR _heap$[ebp+4], esi
	mov	DWORD PTR _heap$[ebp+8], esi
	mov	DWORD PTR __$EHRec$[ebp+8], esi

; 2485 :     mOutline.reserve(mEdgeNext / 2);

	mov	ecx, DWORD PTR [edi+56]
	shr	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR [edi+32]
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve

; 2486 :     __int64 y = 0;
; 2487 :     for(y=0; y<mHeight; ++y)

	xor	eax, eax
	mov	DWORD PTR _y$[ebp], eax
	mov	DWORD PTR _y$[ebp+4], eax
	cmp	DWORD PTR [edi+28], eax
	jle	$LN12@ScanConver@2
$LL14@ScanConver@2:

; 2488 :     {
; 2489 :         int count = 0;
; 2490 :         // Detangle scanline into edge heap.
; 2491 :         for(unsigned ptr = (unsigned)(mpScanBuffer[y]&0xffffffff); ptr; ptr = mpEdgeBuffer[ptr].next)

	mov	edx, DWORD PTR [edi+60]
	mov	eax, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _count$319241[ebp], 0
	mov	DWORD PTR _ptr$319242[ebp], eax
	test	eax, eax
	je	$LN9@ScanConver@2
	npad	4
$LL11@ScanConver@2:

; 2492 :         {
; 2493 :             heap.push_back(mpEdgeBuffer[ptr].posandflag);

	mov	ecx, DWORD PTR [edi+48]
	lea	edx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR $T698222[ebp], edx
	cmp	edx, esi
	jae	SHORT $LN110@ScanConver@2
	cmp	ebx, edx
	ja	SHORT $LN110@ScanConver@2
	sub	edx, ebx
	sar	edx, 2
	mov	DWORD PTR __Idx$698150[ebp], edx
	cmp	esi, DWORD PTR _heap$[ebp+8]
	jne	SHORT $LN121@ScanConver@2
	mov	eax, esi
	sub	eax, ebx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN513@ScanConver@2
	mov	ecx, DWORD PTR _heap$[ebp+8]
	sub	ecx, ebx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN121@ScanConver@2
	mov	edx, ecx
	shr	edx, 1
	mov	esi, 1073741823				; 3fffffffH
	sub	esi, edx
	cmp	esi, ecx
	jae	SHORT $LN143@ScanConver@2
	xor	ecx, ecx
	jmp	SHORT $LN144@ScanConver@2
$LN143@ScanConver@2:
	add	ecx, edx
$LN144@ScanConver@2:
	cmp	ecx, eax
	jae	SHORT $LN140@ScanConver@2
	mov	ecx, eax
$LN140@ScanConver@2:
	push	ecx
	lea	esi, DWORD PTR _heap$[ebp]
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
	mov	esi, DWORD PTR _heap$[ebp+4]
	mov	ebx, DWORD PTR _heap$[ebp]
$LN121@ScanConver@2:
	test	esi, esi
	je	SHORT $LN162@ScanConver@2
	mov	edx, DWORD PTR __Idx$698150[ebp]
	mov	eax, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [esi], eax
$LN162@ScanConver@2:
	mov	eax, DWORD PTR _ptr$319242[ebp]
	jmp	SHORT $LN210@ScanConver@2
$LN110@ScanConver@2:
	cmp	esi, DWORD PTR _heap$[ebp+8]
	jne	SHORT $LN168@ScanConver@2
	mov	eax, esi
	sub	eax, ebx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN513@ScanConver@2
	mov	ecx, DWORD PTR _heap$[ebp+8]
	sub	ecx, ebx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN530@ScanConver@2
	mov	edx, ecx
	shr	edx, 1
	mov	esi, 1073741823				; 3fffffffH
	sub	esi, edx
	cmp	esi, ecx
	jae	SHORT $LN190@ScanConver@2
	xor	ecx, ecx
	jmp	SHORT $LN191@ScanConver@2
$LN190@ScanConver@2:
	add	ecx, edx
$LN191@ScanConver@2:
	cmp	ecx, eax
	jae	SHORT $LN187@ScanConver@2
	mov	ecx, eax
$LN187@ScanConver@2:
	push	ecx
	lea	esi, DWORD PTR _heap$[ebp]
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
	mov	esi, DWORD PTR _heap$[ebp+4]
	mov	ebx, DWORD PTR _heap$[ebp]
	mov	edx, DWORD PTR $T698222[ebp]
$LN530@ScanConver@2:
	mov	eax, DWORD PTR _ptr$319242[ebp]
$LN168@ScanConver@2:
	test	esi, esi
	je	SHORT $LN210@ScanConver@2
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [esi], ecx
$LN210@ScanConver@2:

; 2488 :     {
; 2489 :         int count = 0;
; 2490 :         // Detangle scanline into edge heap.
; 2491 :         for(unsigned ptr = (unsigned)(mpScanBuffer[y]&0xffffffff); ptr; ptr = mpEdgeBuffer[ptr].next)

	mov	edx, DWORD PTR [edi+48]
	mov	eax, DWORD PTR [edx+eax*8]

; 2492 :         {
; 2493 :             heap.push_back(mpEdgeBuffer[ptr].posandflag);

	add	esi, 4
	mov	DWORD PTR _heap$[ebp+4], esi
	mov	DWORD PTR _ptr$319242[ebp], eax
	test	eax, eax
	jne	$LL11@ScanConver@2
$LN9@ScanConver@2:

; 2494 :         }
; 2495 :         // Sort edge heap.  Note that we conveniently made the opening edges
; 2496 :         // one more than closing edges at the same spot, so we won't have any
; 2497 :         // problems with abutting spans.
; 2498 :         std::sort(heap.begin(), heap.end()/*begin() + heap.size()*/);

	mov	eax, esi
	sub	eax, ebx
	sar	eax, 2
	push	eax
	push	esi
	push	ebx
	call	??$_Sort@PAHH@std@@YAXPAH0H@Z		; std::_Sort<int *,int>
	add	esp, 12					; 0000000cH

; 2499 :         // Process edges and add spans.  Since we only check for a non-zero
; 2500 :         // winding number, it doesn't matter which way the outlines go!
; 2501 :         std::vector<int>::iterator itX1 = heap.begin();

	mov	DWORD PTR _itX1$319384[ebp], ebx

; 2502 :         std::vector<int>::iterator itX2 = heap.end(); // begin() + heap.size();
; 2503 :         int x1, x2;
; 2504 :         for(; itX1 != itX2; ++itX1)

	cmp	ebx, esi
	je	$LN459@ScanConver@2
	npad	7
$LL527@ScanConver@2:
	mov	ecx, DWORD PTR _count$319241[ebp]

; 2505 :         {
; 2506 :             int x = *itX1;

	mov	edx, DWORD PTR _itX1$319384[ebp]
	mov	eax, DWORD PTR [edx]

; 2507 :             if(!count)

	test	ecx, ecx
	jne	SHORT $LN5@ScanConver@2

; 2508 :                 x1 = (x>>1);

	mov	edx, eax
	sar	edx, 1
	mov	DWORD PTR _x1$319392[ebp], edx
$LN5@ScanConver@2:

; 2509 :             if(x&1)

	test	al, 1
	je	SHORT $LN4@ScanConver@2

; 2510 :                 ++count;

	inc	ecx

; 2511 :             else

	jmp	SHORT $LN536@ScanConver@2
$LN4@ScanConver@2:

; 2512 :                 --count;

	dec	ecx
$LN536@ScanConver@2:
	mov	DWORD PTR _count$319241[ebp], ecx

; 2513 :             if(!count)

	test	ecx, ecx
	jne	$LN7@ScanConver@2

; 2514 :             {
; 2515 :                 x2 = (x>>1);

	sar	eax, 1
	mov	DWORD PTR _x2$319393[ebp], eax

; 2516 :                 if(x2>x1)

	cmp	eax, DWORD PTR _x1$319392[ebp]
	jle	$LN7@ScanConver@2

; 2517 :                     mOutline.push_back(std::pair<__int64,__int64>((y<<32)+x1+0x4000000040000000i64, (y<<32)+x2+0x4000000040000000i64)); // G: damn Avery, this is evil! :)

	mov	eax, DWORD PTR _x1$319392[ebp]
	cdq
	mov	esi, eax
	mov	eax, DWORD PTR _x2$319393[ebp]
	add	esi, ecx
	mov	edi, edx
	adc	edi, DWORD PTR _y$[ebp]
	cdq
	add	esi, 1073741824				; 40000000H
	adc	edi, 1073741824				; 40000000H
	mov	ebx, eax
	mov	eax, DWORD PTR _this$[ebp]
	add	ebx, ecx
	adc	edx, DWORD PTR _y$[ebp]
	add	ebx, 1073741824				; 40000000H
	adc	edx, 1073741824				; 40000000H
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv1696[ebp], eax
	mov	eax, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR $T697485[ebp]
	mov	DWORD PTR $T697486[ebp+12], edx
	mov	DWORD PTR $T697485[ebp], esi
	mov	DWORD PTR $T697485[ebp+4], edi
	mov	DWORD PTR $T697485[ebp+8], ebx
	mov	DWORD PTR $T697485[ebp+12], edx
	cmp	ecx, eax
	jae	$LN309@ScanConver@2
	mov	edx, DWORD PTR tv1696[ebp]
	mov	edx, DWORD PTR [edx]
	cmp	edx, ecx
	ja	SHORT $LN528@ScanConver@2
	mov	esi, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	sub	esi, edx
	cmp	eax, ecx
	jne	SHORT $LN320@ScanConver@2
	sub	eax, edx
	sar	eax, 4
	cmp	eax, 268435454				; 0ffffffeH
	ja	$LN513@ScanConver@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 4
	cmp	eax, ecx
	jbe	SHORT $LN320@ScanConver@2
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 268435455				; 0fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN342@ScanConver@2
	xor	ecx, ecx
	jmp	SHORT $LN343@ScanConver@2
$LN342@ScanConver@2:
	add	ecx, edx
$LN343@ScanConver@2:
	cmp	ecx, eax
	jae	SHORT $LN339@ScanConver@2
	mov	ecx, eax
$LN339@ScanConver@2:
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
$LN320@ScanConver@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	and	esi, -16				; fffffff0H
	add	esi, DWORD PTR [ecx+32]
	test	eax, eax
	je	$LN423@ScanConver@2
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [esi+12]
	jmp	SHORT $LN537@ScanConver@2
$LN528@ScanConver@2:
	mov	edx, DWORD PTR $T697486[ebp+12]
$LN309@ScanConver@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR tv2295[ebp], ecx
	cmp	eax, ecx
	jne	SHORT $LN381@ScanConver@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	sub	eax, ecx
	sar	eax, 4
	cmp	eax, 268435454				; 0ffffffeH
	ja	$LN513@ScanConver@2
	inc	eax
	mov	DWORD PTR __Size$699003[ebp], eax
	mov	eax, DWORD PTR tv2295[ebp]
	sub	eax, ecx
	sar	eax, 4
	cmp	DWORD PTR __Size$699003[ebp], eax
	jbe	SHORT $LN381@ScanConver@2
	mov	ecx, eax
	shr	ecx, 1
	mov	edx, 268435455				; 0fffffffH
	sub	edx, ecx
	cmp	edx, eax
	jae	SHORT $LN403@ScanConver@2
	xor	eax, eax
	jmp	SHORT $LN404@ScanConver@2
$LN403@ScanConver@2:
	add	eax, ecx
$LN404@ScanConver@2:
	mov	ecx, DWORD PTR __Size$699003[ebp]
	cmp	eax, ecx
	jae	SHORT $LN400@ScanConver@2
	mov	eax, ecx
$LN400@ScanConver@2:
	mov	ecx, DWORD PTR _this$[ebp]
	push	eax
	add	ecx, 32					; 00000020H
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
	mov	edx, DWORD PTR $T697486[ebp+12]
$LN381@ScanConver@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	test	eax, eax
	je	SHORT $LN423@ScanConver@2
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ebx
$LN537@ScanConver@2:
	mov	DWORD PTR [eax+12], edx
$LN423@ScanConver@2:
	add	DWORD PTR [ecx+36], 16			; 00000010H
$LN7@ScanConver@2:

; 2502 :         std::vector<int>::iterator itX2 = heap.end(); // begin() + heap.size();
; 2503 :         int x1, x2;
; 2504 :         for(; itX1 != itX2; ++itX1)

	mov	eax, DWORD PTR _itX1$319384[ebp]
	add	eax, 4
	mov	DWORD PTR _itX1$319384[ebp], eax
	cmp	eax, DWORD PTR _heap$[ebp+4]
	jne	$LL527@ScanConver@2

; 2518 :             }
; 2519 :         }
; 2520 :         heap.clear();

	mov	eax, DWORD PTR _heap$[ebp+4]
	mov	esi, DWORD PTR _heap$[ebp]
	push	0
	push	eax
	push	esi
	call	_memmove
	mov	edi, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _heap$[ebp+4], esi
	mov	ebx, esi
$LN459@ScanConver@2:

; 2486 :     __int64 y = 0;
; 2487 :     for(y=0; y<mHeight; ++y)

	add	DWORD PTR _y$[ebp], 1
	mov	ecx, DWORD PTR _y$[ebp+4]
	mov	eax, DWORD PTR [edi+28]
	adc	ecx, 0
	cdq
	mov	DWORD PTR _y$[ebp+4], ecx
	cmp	ecx, edx
	jl	$LL14@ScanConver@2
	jg	SHORT $LN12@ScanConver@2
	cmp	DWORD PTR _y$[ebp], eax
	jb	$LL14@ScanConver@2
$LN12@ScanConver@2:

; 2521 :     }
; 2522 :     // Dump the edge and scan buffers, since we no longer need them.
; 2523 :     free(mpEdgeBuffer);

	mov	ecx, DWORD PTR [edi+48]
	push	ecx
	call	_free

; 2524 :     delete [] mpScanBuffer;

	mov	edx, DWORD PTR [edi+60]
	add	esp, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2525 :     // All done!
; 2526 :     return true;

	test	ebx, ebx
	je	SHORT $LN505@ScanConver@2
	push	ebx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN505@ScanConver@2:

; 2527 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	edi
	pop	esi
	mov	al, 1
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN513@ScanConver@2:

; 2492 :         {
; 2493 :             heap.push_back(mpEdgeBuffer[ptr].posandflag);

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN539@ScanConver@2:
$LN534@ScanConver@2:
$LN538@ScanConver@2:

; 2527 : }

	DD	$LN23@ScanConver@2
	DD	$LN21@ScanConver@2
	DD	$LN26@ScanConver@2
	DD	$LN17@ScanConver@2
	DD	$LN19@ScanConver@2
	DD	$LN30@ScanConver@2
$LN525@ScanConver@2:
	DB	0
	DB	5
	DB	1
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z$0:
	lea	esi, DWORD PTR _heap$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ScanConvert@ScanLineData@@QAE_NABUPathData@@ABVCSize@@@Z ENDP ; ScanLineData::ScanConvert
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Assign_rv, COMDAT
; _this$ = esi
; __Right$ = edi

; 607  : 		if (this == &_Right)

	cmp	esi, edi
	je	SHORT $LN1@Assign_rv

; 608  : 			;
; 609  : 		else if (get_allocator() != _Right.get_allocator())
; 610  : 			{	// move construct a copy
; 611  : 			clear();
; 612  : 			for (iterator _Next = _Right.begin(); _Next != _Right.end();
; 613  : 				++_Next)
; 614  : 				push_back(_STD forward<_Ty>(*_Next));
; 615  : 			}
; 616  : 		else
; 617  : 			{	// clear this and steal from _Right
; 618  : 			_Tidy();

	mov	eax, DWORD PTR [esi]
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN183@Assign_rv
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN183@Assign_rv:
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx

; 619  : 			this->_Swap_all((_Myt&)_Right);
; 620  : 			this->_Myfirst = _Right._Myfirst;

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 621  : 			this->_Mylast = _Right._Mylast;

	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], ecx

; 622  : 			this->_Myend = _Right._Myend;

	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], edx

; 623  : 
; 624  : 			_Right._Myfirst = 0;

	mov	DWORD PTR [edi], ebx

; 625  : 			_Right._Mylast = 0;

	mov	DWORD PTR [edi+4], ebx

; 626  : 			_Right._Myend = 0;

	mov	DWORD PTR [edi+8], ebx
	pop	ebx
$LN1@Assign_rv:

; 627  : 			}
; 628  : 		}

	ret	0
?_Assign_rv@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEX$$QAV12@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Assign_rv
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator=, COMDAT
; _this$ = esi
; __Right$ = edi

; 601  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	cmp	esi, edi
	je	SHORT $LN193@operator@40
	mov	eax, DWORD PTR [esi]
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN187@operator@40
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN187@operator@40:
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], ecx
	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi+8], ebx
	pop	ebx
$LN193@operator@40:

; 602  : 		return (*this);

	mov	eax, esi

; 603  : 		}

	ret	0
??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator=
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = eax
; __Right$ = ecx

; 595  : 		{	// construct by moving _Right

	xor	edx, edx
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx

; 596  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	cmp	eax, ecx
	je	SHORT $LN11@vector@3
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edx
	mov	DWORD PTR [ecx+8], edx
	pop	esi
$LN11@vector@3:

; 597  : 		}

	ret	0
??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z DD 0ffffffffH
	DD	00H
__ehfuncinfo$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::swap, COMDAT
; _this$ = ecx

; 1222 : 		{	// exchange contents with _Right

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z
	push	eax
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR fs:0, esp
	push	esi

; 1223 : 		if (this == &_Right)

	cmp	ecx, eax
	je	SHORT $LL130@swap

; 1224 : 			;	// same object, do nothing
; 1225 : 		else if (this->_Alval == _Right._Alval)
; 1226 : 			{	// same allocator, swap control information
; 1227 : 			this->_Swap_all(_Right);
; 1228 : 			_STD swap(this->_Myfirst, _Right._Myfirst);

	mov	esi, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx

; 1229 : 			_STD swap(this->_Mylast, _Right._Mylast);

	mov	esi, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [eax+4], edx

; 1230 : 			_STD swap(this->_Myend, _Right._Myend);

	mov	esi, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+8], esi
	mov	DWORD PTR [eax+8], edx

; 1231 : 			}
; 1232 : 		else
; 1233 : 			{	// different allocator, do multiple assigns
; 1234 : 			_Myt _Ts = _Move(*this);

$LL130@swap:

; 1235 : 
; 1236 : 			*this = _Move(_Right);
; 1237 : 			_Right = _Move(_Ts);
; 1238 : 			}
; 1239 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z:
	mov	eax, OFFSET __ehfuncinfo$?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::swap
PUBLIC	?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z ; ScanLineData2::_OverlapRegion
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$0
	DD	00H
	DD	00H
__ehfuncinfo$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\subtitles\rasterizer.cpp
xdata$x	ENDS
;	COMDAT ?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z
_TEXT	SEGMENT
$T719853 = -148						; size = 16
$T719849 = -132						; size = 16
_temp$ = -116						; size = 16
$T719855 = -100						; size = 16
$T719850 = -92						; size = 8
$T719847 = -84						; size = 8
_x1$319697 = -76					; size = 8
_x1$319665 = -68					; size = 8
_x2$319698 = -60					; size = 8
_x2$319666 = -52					; size = 8
_offset2$ = -44						; size = 8
_offset1$ = -36						; size = 8
_itBE$ = -24						; size = 4
_itA$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Size$726789 = 8					; size = 4
__Size$726724 = 8					; size = 4
_dst$ = 8						; size = 4
__Size$725613 = 12					; size = 4
__Size$724831 = 12					; size = 4
_dx$ = 12						; size = 4
tv4191 = 16						; size = 4
tv4137 = 16						; size = 4
_dy$ = 16						; size = 4
?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z PROC ; ScanLineData2::_OverlapRegion, COMDAT
; _src$ = ecx

; 2537 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi

; 2538 :     tSpanBuffer temp;

	xor	ebx, ebx
	push	edi
	mov	edi, DWORD PTR _dst$[ebp]
	mov	esi, ecx
	mov	DWORD PTR _temp$[ebp], ebx
	mov	DWORD PTR _temp$[ebp+4], ebx
	mov	DWORD PTR _temp$[ebp+8], ebx
	mov	DWORD PTR __$EHRec$[ebp+8], ebx

; 2539 :     temp.reserve(dst.size() + src.size());

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [esi]
	sub	ecx, DWORD PTR [edi]
	sar	eax, 4
	sar	ecx, 4
	add	eax, ecx
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve

; 2540 :     dst.swap(temp);

	lea	edx, DWORD PTR _temp$[ebp]
	cmp	edi, edx
	je	SHORT $LN181@OverlapReg@2
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [edi], ecx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR _temp$[ebp], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [edi+4], edx
	mov	DWORD PTR _temp$[ebp+4], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edi+8], ecx
	mov	DWORD PTR _temp$[ebp+8], eax
$LN181@OverlapReg@2:

; 2541 :     tSpanBuffer::iterator itA = temp.begin();
; 2542 :     tSpanBuffer::iterator itAE = temp.end();
; 2543 :     tSpanBuffer::const_iterator itB = src.begin();
; 2544 :     tSpanBuffer::const_iterator itBE = src.end();

	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR _temp$[ebp]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR _itBE$[ebp], eax

; 2545 :     // Don't worry -- even if dy<0 this will still work! // G: hehe, the evil twin :)
; 2546 :     unsigned __int64 offset1 = (((__int64)dy)<<32) - dx;

	mov	eax, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _itA$[ebp], edx
	cdq
	mov	esi, eax
	mov	eax, DWORD PTR _dx$[ebp]
	xor	ecx, ecx
	cdq
	mov	ebx, ecx
	sub	ebx, eax
	mov	DWORD PTR _offset1$[ebp], ebx
	mov	ebx, esi
	sbb	ebx, edx

; 2547 :     unsigned __int64 offset2 = (((__int64)dy)<<32) + dx;

	add	eax, ecx

; 2548 :     while(itA != itAE && itB != itBE)

	mov	ecx, DWORD PTR _temp$[ebp+4]
	adc	edx, esi
	mov	DWORD PTR _offset1$[ebp+4], ebx
	mov	DWORD PTR _offset2$[ebp], eax
	mov	DWORD PTR _offset2$[ebp+4], edx
	cmp	DWORD PTR _temp$[ebp], ecx
	je	$LN1532@OverlapReg@2
	mov	edx, DWORD PTR _itA$[ebp]
$LN36@OverlapReg@2:
	cmp	edi, DWORD PTR _itBE$[ebp]
	je	$LN1531@OverlapReg@2

; 2549 :     {
; 2550 :         if((*itB).first + offset1 < (*itA).first)

	mov	ecx, DWORD PTR _offset1$[ebp]
	add	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR _offset1$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	mov	esi, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edx]
	cmp	eax, esi
	ja	$LN970@OverlapReg@2
	jb	SHORT $LN1553@OverlapReg@2
	cmp	ecx, ebx
	jae	$LN970@OverlapReg@2
$LN1553@OverlapReg@2:

; 2551 :         {
; 2552 :             // B span is earlier.  Use it.
; 2553 :             unsigned __int64 x1 = (*itB).first + offset1;
; 2554 :             unsigned __int64 x2 = (*itB).second + offset2;

	mov	ebx, DWORD PTR [edi+8]
	add	ebx, DWORD PTR _offset2$[ebp]
	mov	esi, DWORD PTR [edi+12]
	adc	esi, DWORD PTR _offset2$[ebp+4]

; 2555 :             ++itB;
; 2556 :             // B spans don't overlap, so begin merge loop with A first.
; 2557 :             for(;;)
; 2558 :             {
; 2559 :                 // If we run out of A spans or the A span doesn't overlap,
; 2560 :                 // then the next B span can't either (because B spans don't
; 2561 :                 // overlap) and we exit.
; 2562 :                 if(itA == itAE || (*itA).first > x2)

	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR _x1$319665[ebp+4], eax
	mov	eax, DWORD PTR _itA$[ebp]
	add	edi, 16					; 00000010H
	mov	DWORD PTR _x1$319665[ebp], ecx
	mov	DWORD PTR _x2$319666[ebp], ebx
	mov	DWORD PTR _x2$319666[ebp+4], esi
	cmp	eax, edx
	je	$LN1533@OverlapReg@2
$LN33@OverlapReg@2:
	cmp	DWORD PTR [eax+4], esi
	ja	$LN1533@OverlapReg@2
	jb	SHORT $LL29@OverlapReg@2
	cmp	DWORD PTR [eax], ebx
	ja	$LN1533@OverlapReg@2
$LL29@OverlapReg@2:

; 2563 :                     break;
; 2564 :                 do {x2 = _MAX(x2, (*itA++).second);}

	mov	ecx, eax
	add	ecx, 8
	add	eax, 16					; 00000010H
	cmp	esi, DWORD PTR [ecx+4]
	ja	SHORT $LN770@OverlapReg@2
	jb	SHORT $LN771@OverlapReg@2
	cmp	ebx, DWORD PTR [ecx]
	jb	SHORT $LN771@OverlapReg@2
$LN770@OverlapReg@2:
	lea	ecx, DWORD PTR _x2$319666[ebp]
$LN771@OverlapReg@2:
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR _x2$319666[ebp], ebx
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR _x2$319666[ebp+4], esi

; 2565 :                 while(itA != itAE && (*itA).first <= x2);

	cmp	eax, edx
	je	SHORT $LN1598@OverlapReg@2
	cmp	DWORD PTR [eax+4], esi
	jb	SHORT $LL29@OverlapReg@2
	ja	SHORT $LN1598@OverlapReg@2
	cmp	DWORD PTR [eax], ebx
	jbe	SHORT $LL29@OverlapReg@2
$LN1598@OverlapReg@2:

; 2563 :                     break;
; 2564 :                 do {x2 = _MAX(x2, (*itA++).second);}

	mov	DWORD PTR _itA$[ebp], eax

; 2566 :                 // If we run out of B spans or the B span doesn't overlap,
; 2567 :                 // then the next A span can't either (because A spans don't
; 2568 :                 // overlap) and we exit.
; 2569 :                 if(itB == itBE || (*itB).first + offset1 > x2)

	cmp	edi, DWORD PTR _itBE$[ebp]
	je	SHORT $LN1533@OverlapReg@2
	mov	ecx, DWORD PTR _offset1$[ebp]
	add	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR _offset1$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	cmp	eax, esi
	ja	SHORT $LN1533@OverlapReg@2
	jb	SHORT $LN23@OverlapReg@2
	cmp	ecx, ebx
	ja	SHORT $LN1533@OverlapReg@2
$LN23@OverlapReg@2:

; 2570 :                     break;
; 2571 :                 do {x2 = _MAX(x2, (*itB++).second + offset2);}

	mov	eax, edi
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	add	edi, 16					; 00000010H
	add	ecx, DWORD PTR _offset2$[ebp]
	adc	eax, DWORD PTR _offset2$[ebp+4]
	mov	DWORD PTR $T719847[ebp], ecx
	mov	DWORD PTR $T719847[ebp+4], eax
	cmp	esi, eax
	ja	SHORT $LN805@OverlapReg@2
	jb	SHORT $LN1558@OverlapReg@2
	cmp	ebx, ecx
	jae	SHORT $LN805@OverlapReg@2
$LN1558@OverlapReg@2:
	lea	eax, DWORD PTR $T719847[ebp]
	jmp	SHORT $LN806@OverlapReg@2
$LN805@OverlapReg@2:
	lea	eax, DWORD PTR _x2$319666[ebp]
$LN806@OverlapReg@2:
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR _x2$319666[ebp], ebx
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR _x2$319666[ebp+4], esi

; 2572 :                 while(itB != itBE && (*itB).first + offset1 <= x2);

	cmp	edi, DWORD PTR _itBE$[ebp]
	je	SHORT $LN20@OverlapReg@2
	mov	ecx, DWORD PTR _offset1$[ebp]
	add	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR _offset1$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	cmp	eax, esi
	jb	SHORT $LN23@OverlapReg@2
	ja	SHORT $LN20@OverlapReg@2
	cmp	ecx, ebx
	jbe	SHORT $LN23@OverlapReg@2
$LN20@OverlapReg@2:

; 2555 :             ++itB;
; 2556 :             // B spans don't overlap, so begin merge loop with A first.
; 2557 :             for(;;)
; 2558 :             {
; 2559 :                 // If we run out of A spans or the A span doesn't overlap,
; 2560 :                 // then the next B span can't either (because B spans don't
; 2561 :                 // overlap) and we exit.
; 2562 :                 if(itA == itAE || (*itA).first > x2)

	mov	eax, DWORD PTR _itA$[ebp]
	mov	edx, DWORD PTR _temp$[ebp+4]
	cmp	eax, edx
	jne	$LN33@OverlapReg@2
$LN1533@OverlapReg@2:

; 2573 :             }
; 2574 :             // Flush span.
; 2575 :             dst.push_back(tSpan(x1, x2));

	mov	eax, DWORD PTR _x1$319665[ebp+4]
	mov	edx, DWORD PTR _x1$319665[ebp]
	mov	DWORD PTR $T719849[ebp+4], eax
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T719849[ebp], edx
	lea	edx, DWORD PTR $T719849[ebp]
	mov	DWORD PTR $T719849[ebp+8], ebx
	mov	DWORD PTR $T719849[ebp+12], esi
	cmp	edx, ecx
	jae	$LN833@OverlapReg@2
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR $T719849[ebp]
	cmp	edx, ecx
	ja	SHORT $LN1578@OverlapReg@2
	mov	ebx, DWORD PTR [eax+4]
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax+8]
	sub	esi, edx
	cmp	ebx, ecx
	jne	SHORT $LN844@OverlapReg@2
	sub	ebx, edx
	sar	ebx, 4
	cmp	ebx, 268435454				; 0ffffffeH
	ja	$LN1537@OverlapReg@2
	sub	ecx, edx
	inc	ebx
	sar	ecx, 4
	cmp	ebx, ecx
	jbe	SHORT $LN844@OverlapReg@2
	mov	eax, ecx
	shr	ecx, 1
	mov	edx, 268435455				; 0fffffffH
	sub	edx, ecx
	cmp	edx, eax
	jae	SHORT $LN866@OverlapReg@2
	xor	eax, eax
	jmp	SHORT $LN867@OverlapReg@2
$LN866@OverlapReg@2:
	add	eax, ecx
$LN867@OverlapReg@2:
	cmp	eax, ebx
	jae	SHORT $LN863@OverlapReg@2
	mov	eax, ebx
$LN863@OverlapReg@2:
	mov	ecx, DWORD PTR _dst$[ebp]
	push	eax
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
	mov	eax, DWORD PTR _dst$[ebp]
$LN844@OverlapReg@2:
	mov	ecx, DWORD PTR [eax+4]
	and	esi, -16				; fffffff0H
	add	esi, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN887@OverlapReg@2
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [ecx+12], edx
$LN887@OverlapReg@2:
	add	DWORD PTR [eax+4], 16			; 00000010H
	mov	edx, DWORD PTR _itA$[ebp]
	jmp	$LN1071@OverlapReg@2
$LN1578@OverlapReg@2:
	mov	ecx, DWORD PTR [eax+4]
$LN833@OverlapReg@2:
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN905@OverlapReg@2
	mov	edx, DWORD PTR [eax]
	sub	ecx, edx
	sar	ecx, 4
	cmp	ecx, 268435454				; 0ffffffeH
	ja	$LN1537@OverlapReg@2
	inc	ecx
	mov	DWORD PTR __Size$724831[ebp], ecx
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	sar	ecx, 4
	cmp	DWORD PTR __Size$724831[ebp], ecx
	jbe	SHORT $LN905@OverlapReg@2
	mov	eax, ecx
	shr	ecx, 1
	mov	edx, 268435455				; 0fffffffH
	sub	edx, ecx
	cmp	edx, eax
	jae	SHORT $LN927@OverlapReg@2
	xor	eax, eax
	jmp	SHORT $LN928@OverlapReg@2
$LN927@OverlapReg@2:
	add	eax, ecx
$LN928@OverlapReg@2:
	mov	ecx, DWORD PTR __Size$724831[ebp]
	cmp	eax, ecx
	jae	SHORT $LN924@OverlapReg@2
	mov	eax, ecx
$LN924@OverlapReg@2:
	mov	ecx, DWORD PTR _dst$[ebp]
	push	eax
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
	mov	eax, DWORD PTR _dst$[ebp]
$LN905@OverlapReg@2:
	mov	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN947@OverlapReg@2
	mov	edx, DWORD PTR _x1$319665[ebp]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _x1$319665[ebp+4]
	mov	DWORD PTR [ecx+4], edx
	mov	DWORD PTR [ecx+8], ebx
	mov	DWORD PTR [ecx+12], esi
$LN947@OverlapReg@2:
	add	DWORD PTR [eax+4], 16			; 00000010H

; 2576 :         }
; 2577 :         else

	mov	edx, DWORD PTR _itA$[ebp]
	jmp	$LN1071@OverlapReg@2

; 2578 :         {
; 2579 :             // A span is earlier.  Use it.
; 2580 :             unsigned __int64 x1 = (*itA).first;

$LN970@OverlapReg@2:
	mov	DWORD PTR _x1$319697[ebp], ebx

; 2581 :             unsigned __int64 x2 = (*itA).second;

	mov	ebx, DWORD PTR [edx+8]
	mov	DWORD PTR _x1$319697[ebp+4], esi
	mov	esi, DWORD PTR [edx+12]

; 2582 :             ++itA;

	add	edx, 16					; 00000010H
	mov	DWORD PTR _x2$319698[ebp], ebx
	mov	DWORD PTR _x2$319698[ebp+4], esi
	mov	DWORD PTR _itA$[ebp], edx
$LN18@OverlapReg@2:

; 2583 :             // A spans don't overlap, so begin merge loop with B first.
; 2584 :             for(;;)
; 2585 :             {
; 2586 :                 // If we run out of B spans or the B span doesn't overlap,
; 2587 :                 // then the next A span can't either (because A spans don't
; 2588 :                 // overlap) and we exit.
; 2589 :                 if(itB == itBE || (*itB).first + offset1 > x2)

	mov	ecx, DWORD PTR _offset1$[ebp]
	add	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR _offset1$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	cmp	eax, esi
	ja	$LN1535@OverlapReg@2
	jb	SHORT $LN14@OverlapReg@2
	cmp	ecx, ebx
	ja	$LN1535@OverlapReg@2
$LN14@OverlapReg@2:

; 2590 :                     break;
; 2591 :                 do {x2 = _MAX(x2, (*itB++).second + offset2);}

	mov	eax, edi
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	add	edi, 16					; 00000010H
	add	ecx, DWORD PTR _offset2$[ebp]
	adc	eax, DWORD PTR _offset2$[ebp+4]
	mov	DWORD PTR $T719850[ebp], ecx
	mov	DWORD PTR $T719850[ebp+4], eax
	cmp	esi, eax
	ja	SHORT $LN1004@OverlapReg@2
	jb	SHORT $LN1561@OverlapReg@2
	cmp	ebx, ecx
	jae	SHORT $LN1004@OverlapReg@2
$LN1561@OverlapReg@2:
	lea	eax, DWORD PTR $T719850[ebp]
	jmp	SHORT $LN1005@OverlapReg@2
$LN1004@OverlapReg@2:
	lea	eax, DWORD PTR _x2$319698[ebp]
$LN1005@OverlapReg@2:
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR _x2$319698[ebp], ebx
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR _x2$319698[ebp+4], esi

; 2592 :                 while(itB != itBE && (*itB).first + offset1 <= x2);

	cmp	edi, DWORD PTR _itBE$[ebp]
	je	SHORT $LN11@OverlapReg@2
	mov	ecx, DWORD PTR _offset1$[ebp]
	add	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR _offset1$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	cmp	eax, esi
	jb	SHORT $LN14@OverlapReg@2
	ja	SHORT $LN11@OverlapReg@2
	cmp	ecx, ebx
	jbe	SHORT $LN14@OverlapReg@2
$LN11@OverlapReg@2:

; 2593 :                 // If we run out of A spans or the A span doesn't overlap,
; 2594 :                 // then the next B span can't either (because B spans don't
; 2595 :                 // overlap) and we exit.
; 2596 :                 if(itA == itAE || (*itA).first > x2)

	mov	edx, DWORD PTR _itA$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp+4]
	cmp	edx, ecx
	je	SHORT $LN1535@OverlapReg@2
	cmp	DWORD PTR [edx+4], esi
	ja	SHORT $LN1535@OverlapReg@2
	jb	SHORT $LL8@OverlapReg@2
	cmp	DWORD PTR [edx], ebx
	ja	SHORT $LN1535@OverlapReg@2
	npad	2
$LL8@OverlapReg@2:

; 2597 :                     break;
; 2598 :                 do {x2 = _MAX(x2, (*itA++).second);}

	mov	eax, edx
	add	eax, 8
	add	edx, 16					; 00000010H
	cmp	esi, DWORD PTR [eax+4]
	ja	SHORT $LN1043@OverlapReg@2
	jb	SHORT $LN1044@OverlapReg@2
	cmp	ebx, DWORD PTR [eax]
	jb	SHORT $LN1044@OverlapReg@2
$LN1043@OverlapReg@2:
	lea	eax, DWORD PTR _x2$319698[ebp]
$LN1044@OverlapReg@2:
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR _x2$319698[ebp], ebx
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR _x2$319698[ebp+4], esi

; 2599 :                 while(itA != itAE && (*itA).first <= x2);

	cmp	edx, ecx
	je	SHORT $LN1600@OverlapReg@2
	cmp	DWORD PTR [edx+4], esi
	jb	SHORT $LL8@OverlapReg@2
	ja	SHORT $LN1600@OverlapReg@2
	cmp	DWORD PTR [edx], ebx
	jbe	SHORT $LL8@OverlapReg@2
$LN1600@OverlapReg@2:

; 2597 :                     break;
; 2598 :                 do {x2 = _MAX(x2, (*itA++).second);}

	mov	DWORD PTR _itA$[ebp], edx
	cmp	edi, DWORD PTR _itBE$[ebp]
	jne	$LN18@OverlapReg@2
$LN1535@OverlapReg@2:

; 2600 :             }
; 2601 :             // Flush span.
; 2602 :             dst.push_back(tSpan(x1, x2));

	mov	ecx, DWORD PTR _x1$319697[ebp]
	mov	eax, DWORD PTR _x1$319697[ebp+4]
	mov	DWORD PTR $T719853[ebp], ecx
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR $T719853[ebp+4], eax
	mov	eax, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR $T719853[ebp]
	mov	DWORD PTR $T719853[ebp+8], ebx
	mov	DWORD PTR $T719853[ebp+12], esi
	cmp	ecx, eax
	jae	$LN1073@OverlapReg@2
	mov	edx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [edx]
	cmp	edx, ecx
	ja	SHORT $LN1587@OverlapReg@2
	mov	ebx, DWORD PTR _dst$[ebp]
	mov	esi, ecx
	mov	ecx, DWORD PTR [ebx+8]
	sub	esi, edx
	cmp	eax, ecx
	jne	SHORT $LN1084@OverlapReg@2
	sub	eax, edx
	sar	eax, 4
	cmp	eax, 268435454				; 0ffffffeH
	ja	$LN1537@OverlapReg@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 4
	cmp	eax, ecx
	jbe	SHORT $LN1084@OverlapReg@2
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 268435455				; 0fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN1106@OverlapReg@2
	xor	ecx, ecx
	jmp	SHORT $LN1107@OverlapReg@2
$LN1106@OverlapReg@2:
	add	ecx, edx
$LN1107@OverlapReg@2:
	cmp	ecx, eax
	jae	SHORT $LN1103@OverlapReg@2
	mov	ecx, eax
$LN1103@OverlapReg@2:
	push	ecx
	mov	ecx, DWORD PTR _dst$[ebp]
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
	mov	ebx, DWORD PTR _dst$[ebp]
$LN1084@OverlapReg@2:
	mov	eax, DWORD PTR [ebx+4]
	and	esi, -16				; fffffff0H
	add	esi, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN1127@OverlapReg@2
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
$LN1127@OverlapReg@2:
	add	DWORD PTR [ebx+4], 16			; 00000010H
	mov	edx, DWORD PTR _itA$[ebp]
	jmp	SHORT $LN1071@OverlapReg@2
$LN1587@OverlapReg@2:
	mov	edx, DWORD PTR _itA$[ebp]
$LN1073@OverlapReg@2:
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv4191[ebp], ecx
	cmp	eax, ecx
	jne	SHORT $LN1145@OverlapReg@2
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	eax, ecx
	sar	eax, 4
	cmp	eax, 268435454				; 0ffffffeH
	ja	SHORT $LN1537@OverlapReg@2
	inc	eax
	mov	DWORD PTR __Size$725613[ebp], eax
	mov	eax, DWORD PTR tv4191[ebp]
	sub	eax, ecx
	sar	eax, 4
	cmp	DWORD PTR __Size$725613[ebp], eax
	jbe	SHORT $LN1145@OverlapReg@2
	mov	ecx, eax
	shr	ecx, 1
	mov	edx, 268435455				; 0fffffffH
	sub	edx, ecx
	cmp	edx, eax
	jae	SHORT $LN1167@OverlapReg@2
	xor	eax, eax
	jmp	SHORT $LN1168@OverlapReg@2
$LN1167@OverlapReg@2:
	add	eax, ecx
$LN1168@OverlapReg@2:
	mov	ecx, DWORD PTR __Size$725613[ebp]
	cmp	eax, ecx
	jae	SHORT $LN1164@OverlapReg@2
	mov	eax, ecx
$LN1164@OverlapReg@2:
	mov	ecx, DWORD PTR _dst$[ebp]
	push	eax
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
	mov	edx, DWORD PTR _itA$[ebp]
$LN1145@OverlapReg@2:
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN1187@OverlapReg@2
	mov	ecx, DWORD PTR _x1$319697[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _x1$319697[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], esi
$LN1187@OverlapReg@2:
	add	DWORD PTR [ecx+4], 16			; 00000010H
$LN1071@OverlapReg@2:

; 2548 :     while(itA != itAE && itB != itBE)

	cmp	edx, DWORD PTR _temp$[ebp+4]
	jne	$LN36@OverlapReg@2

; 2609 :     {
; 2610 :         dst.push_back(tSpan((*itB).first + offset1, (*itB).second + offset2));

	jmp	$LN1532@OverlapReg@2
$LN1537@OverlapReg@2:

; 2573 :             }
; 2574 :             // Flush span.
; 2575 :             dst.push_back(tSpan(x1, x2));

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN1605@OverlapReg@2:
$LN1531@OverlapReg@2:

; 2603 :         }
; 2604 :     }
; 2605 :     // Copy over leftover spans.
; 2606 :     while(itA != itAE)

	cmp	edx, DWORD PTR _temp$[ebp+4]
	je	$LN1532@OverlapReg@2
	mov	ecx, DWORD PTR _dst$[ebp]
$LN4@OverlapReg@2:

; 2607 :         dst.push_back(*itA++);

	mov	eax, DWORD PTR _itA$[ebp]
	mov	esi, eax
	add	eax, 16					; 00000010H
	mov	DWORD PTR _itA$[ebp], eax
	mov	eax, DWORD PTR [ecx+4]
	cmp	esi, eax
	jae	SHORT $LN1227@OverlapReg@2
	mov	ebx, DWORD PTR [ecx]
	cmp	ebx, esi
	ja	SHORT $LN1227@OverlapReg@2
	mov	edx, DWORD PTR [ecx+8]
	sub	esi, ebx
	cmp	eax, edx
	jne	SHORT $LN1238@OverlapReg@2
	sub	eax, ebx
	sar	eax, 4
	cmp	eax, 268435454				; 0ffffffeH
	ja	SHORT $LN1537@OverlapReg@2
	sub	edx, ebx
	inc	eax
	sar	edx, 4
	cmp	eax, edx
	jbe	SHORT $LN1238@OverlapReg@2
	mov	ecx, edx
	shr	edx, 1
	mov	ebx, 268435455				; 0fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN1260@OverlapReg@2
	xor	ecx, ecx
	jmp	SHORT $LN1261@OverlapReg@2
$LN1260@OverlapReg@2:
	add	ecx, edx
$LN1261@OverlapReg@2:
	cmp	ecx, eax
	jae	SHORT $LN1257@OverlapReg@2
	mov	ecx, eax
$LN1257@OverlapReg@2:
	push	ecx
	mov	ecx, DWORD PTR _dst$[ebp]
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
	mov	ecx, DWORD PTR _dst$[ebp]
$LN1238@OverlapReg@2:
	and	esi, -16				; fffffff0H
	add	esi, DWORD PTR [ecx]
	jmp	SHORT $LN1293@OverlapReg@2
$LN1227@OverlapReg@2:
	mov	edx, DWORD PTR [ecx+8]
	cmp	eax, edx
	jne	SHORT $LN1293@OverlapReg@2
	mov	ebx, DWORD PTR [ecx]
	sub	eax, ebx
	sar	eax, 4
	cmp	eax, 268435454				; 0ffffffeH
	ja	$LN1537@OverlapReg@2
	sub	edx, ebx
	inc	eax
	sar	edx, 4
	cmp	eax, edx
	jbe	SHORT $LN1293@OverlapReg@2
	mov	ecx, edx
	shr	edx, 1
	mov	ebx, 268435455				; 0fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN1315@OverlapReg@2
	xor	ecx, ecx
	jmp	SHORT $LN1316@OverlapReg@2
$LN1315@OverlapReg@2:
	add	ecx, edx
$LN1316@OverlapReg@2:
	cmp	ecx, eax
	jae	SHORT $LN1312@OverlapReg@2
	mov	ecx, eax
$LN1312@OverlapReg@2:
	push	ecx
	mov	ecx, DWORD PTR _dst$[ebp]
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
	mov	ecx, DWORD PTR _dst$[ebp]
$LN1293@OverlapReg@2:
	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN1335@OverlapReg@2
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
$LN1335@OverlapReg@2:
	mov	eax, DWORD PTR _itA$[ebp]
	add	DWORD PTR [ecx+4], 16			; 00000010H
	cmp	eax, DWORD PTR _temp$[ebp+4]
	jne	$LN4@OverlapReg@2
$LN1532@OverlapReg@2:

; 2608 :     while(itB != itBE)

	cmp	edi, DWORD PTR _itBE$[ebp]
	je	$LN1@OverlapReg@2
	mov	ebx, DWORD PTR _dst$[ebp]
	npad	5
$LL2@OverlapReg@2:

; 2609 :     {
; 2610 :         dst.push_back(tSpan((*itB).first + offset1, (*itB).second + offset2));

	mov	esi, DWORD PTR _offset1$[ebp]
	add	esi, DWORD PTR [edi]
	mov	eax, DWORD PTR _offset1$[ebp+4]
	adc	eax, DWORD PTR [edi+4]
	lea	ecx, DWORD PTR $T719855[ebp]
	mov	DWORD PTR $T719855[ebp+4], eax
	mov	eax, DWORD PTR [edi+8]
	add	eax, DWORD PTR _offset2$[ebp]
	mov	DWORD PTR $T719855[ebp], esi
	mov	DWORD PTR $T719855[ebp+8], eax
	mov	eax, DWORD PTR [edi+12]
	adc	eax, DWORD PTR _offset2$[ebp+4]
	mov	DWORD PTR $T719855[ebp+12], eax
	mov	eax, DWORD PTR [ebx+4]
	cmp	ecx, eax
	jae	SHORT $LN1376@OverlapReg@2
	mov	edx, DWORD PTR [ebx]
	cmp	edx, ecx
	ja	SHORT $LN1376@OverlapReg@2
	mov	esi, ecx
	mov	ecx, DWORD PTR [ebx+8]
	sub	esi, edx
	cmp	eax, ecx
	jne	SHORT $LN1387@OverlapReg@2
	sub	eax, edx
	sar	eax, 4
	cmp	eax, 268435454				; 0ffffffeH
	ja	$LN1537@OverlapReg@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 4
	mov	DWORD PTR __Size$726724[ebp], eax
	cmp	eax, ecx
	jbe	SHORT $LN1387@OverlapReg@2
	mov	eax, ecx
	shr	eax, 1
	mov	edx, 268435455				; 0fffffffH
	sub	edx, eax
	cmp	edx, ecx
	jae	SHORT $LN1409@OverlapReg@2
	xor	ecx, ecx
	jmp	SHORT $LN1410@OverlapReg@2
$LN1409@OverlapReg@2:
	add	ecx, eax
$LN1410@OverlapReg@2:
	mov	eax, DWORD PTR __Size$726724[ebp]
	cmp	ecx, eax
	jae	SHORT $LN1406@OverlapReg@2
	mov	ecx, eax
$LN1406@OverlapReg@2:
	push	ecx
	mov	ecx, ebx
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
$LN1387@OverlapReg@2:
	mov	eax, DWORD PTR [ebx+4]
	and	esi, -16				; fffffff0H
	add	esi, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN1490@OverlapReg@2
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
	jmp	SHORT $LN1490@OverlapReg@2
$LN1376@OverlapReg@2:
	mov	ecx, DWORD PTR [ebx+8]
	cmp	eax, ecx
	jne	SHORT $LN1448@OverlapReg@2
	mov	edx, DWORD PTR [ebx]
	sub	eax, edx
	sar	eax, 4
	cmp	eax, 268435454				; 0ffffffeH
	ja	$LN1537@OverlapReg@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 4
	mov	DWORD PTR __Size$726789[ebp], eax
	cmp	eax, ecx
	jbe	SHORT $LN1448@OverlapReg@2
	mov	eax, ecx
	shr	eax, 1
	mov	edx, 268435455				; 0fffffffH
	sub	edx, eax
	cmp	edx, ecx
	jae	SHORT $LN1470@OverlapReg@2
	xor	ecx, ecx
	jmp	SHORT $LN1471@OverlapReg@2
$LN1470@OverlapReg@2:
	add	ecx, eax
$LN1471@OverlapReg@2:
	mov	eax, DWORD PTR __Size$726789[ebp]
	cmp	ecx, eax
	jae	SHORT $LN1467@OverlapReg@2
	mov	ecx, eax
$LN1467@OverlapReg@2:
	push	ecx
	mov	ecx, ebx
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
$LN1448@OverlapReg@2:
	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN1490@OverlapReg@2
	mov	ecx, DWORD PTR $T719855[ebp+4]
	mov	edx, DWORD PTR $T719855[ebp+8]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR $T719855[ebp+12]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
$LN1490@OverlapReg@2:
	add	DWORD PTR [ebx+4], 16			; 00000010H

; 2611 :         ++itB;

	add	edi, 16					; 00000010H
	cmp	edi, DWORD PTR _itBE$[ebp]
	jne	$LL2@OverlapReg@2
$LN1@OverlapReg@2:

; 2612 :     }
; 2613 : }

	mov	eax, DWORD PTR _temp$[ebp]
	test	eax, eax
	je	SHORT $LN1517@OverlapReg@2
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1517@OverlapReg@2:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1602@OverlapReg@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z$0:
	lea	esi, DWORD PTR _temp$[ebp]
	jmp	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
__ehhandler$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z:
	mov	eax, OFFSET __ehfuncinfo$?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z ENDP ; ScanLineData2::_OverlapRegion
PUBLIC	??1ScanLineData@@UAE@XZ				; ScanLineData::~ScanLineData
; Function compile flags: /Ogtp
;	COMDAT ??1ScanLineData@@UAE@XZ
_TEXT	SEGMENT
??1ScanLineData@@UAE@XZ PROC				; ScanLineData::~ScanLineData, COMDAT
; _this$ = ecx

; 2264 : {    

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7ScanLineData@@6B@

; 2265 : }

	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN10@ScanLineDa@5
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN10@ScanLineDa@5:
	mov	DWORD PTR [esi+32], 0
	mov	DWORD PTR [esi+36], 0
	mov	DWORD PTR [esi+40], 0
	pop	esi
	ret	0
??1ScanLineData@@UAE@XZ ENDP				; ScanLineData::~ScanLineData
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GScanLineData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GScanLineData@@UAEPAXI@Z PROC			; ScanLineData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7ScanLineData@@6B@
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN13@scalar@49
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN13@scalar@49:
	test	BYTE PTR ___flags$[ebp], 1
	mov	DWORD PTR [esi+32], 0
	mov	DWORD PTR [esi+36], 0
	mov	DWORD PTR [esi+40], 0
	je	SHORT $LN17@scalar@49
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN17@scalar@49:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GScanLineData@@UAEPAXI@Z ENDP			; ScanLineData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0ScanLineData@@QAE@XZ				; ScanLineData::ScanLineData
; Function compile flags: /Ogtp
;	COMDAT ??0ScanLineData@@QAE@XZ
_TEXT	SEGMENT
??0ScanLineData@@QAE@XZ PROC				; ScanLineData::ScanLineData, COMDAT
; _this$ = eax

; 2260 : {

	xor	ecx, ecx
	mov	DWORD PTR [eax], OFFSET ??_7ScanLineData@@6B@
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx
	mov	DWORD PTR [eax+40], ecx

; 2261 : }

	ret	0
??0ScanLineData@@QAE@XZ ENDP				; ScanLineData::ScanLineData
PUBLIC	?CreateWidenedRegion@ScanLineData2@@QAE_NHH@Z	; ScanLineData2::CreateWidenedRegion
; Function compile flags: /Ogtp
;	COMDAT ?CreateWidenedRegion@ScanLineData2@@QAE_NHH@Z
_TEXT	SEGMENT
tv383 = -8						; size = 4
tv380 = -4						; size = 4
tv371 = 8						; size = 4
_this$ = 8						; size = 4
tv443 = 12						; size = 4
tv437 = 12						; size = 4
_rx$ = 12						; size = 4
_ry$ = 16						; size = 4
?CreateWidenedRegion@ScanLineData2@@QAE_NHH@Z PROC	; ScanLineData2::CreateWidenedRegion, COMDAT

; 2616 : {

	push	ebp
	mov	ebp, esp

; 2617 :     if(rx < 0) rx = 0;

	mov	ecx, DWORD PTR _rx$[ebp]
	sub	esp, 8
	push	ebx
	mov	ebx, DWORD PTR _this$[ebp]
	xor	edx, edx
	push	esi
	push	edi
	cmp	ecx, edx
	jge	SHORT $LN8@CreateWide@2
	mov	DWORD PTR _rx$[ebp], edx
	mov	ecx, edx
$LN8@CreateWide@2:

; 2618 :     if(ry < 0) ry = 0;

	mov	eax, DWORD PTR _ry$[ebp]
	cmp	eax, edx
	jge	SHORT $LN7@CreateWide@2
	mov	DWORD PTR _ry$[ebp], edx
	mov	eax, edx
$LN7@CreateWide@2:

; 2619 :     mWideBorder = max(rx,ry);

	cmp	ecx, eax
	jle	SHORT $LN11@CreateWide@2
	mov	eax, ecx
$LN11@CreateWide@2:

; 2620 :     mWideOutline.clear();

	lea	edi, DWORD PTR [ebx+16]
	mov	DWORD PTR [ebx+32], eax
	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN31@CreateWide@2
	mov	esi, ecx
	call	??$_Move@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00@Z ; std::_Move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
	mov	DWORD PTR [edi+4], eax
$LN31@CreateWide@2:

; 2621 : 
; 2622 :     const tSpanBuffer& out_line = m_scan_line_data->mOutline;

	mov	ebx, DWORD PTR [ebx]

; 2623 :     if (ry > 0)

	mov	eax, DWORD PTR _ry$[ebp]
	add	ebx, 32					; 00000020H
	test	eax, eax
	jle	SHORT $LN76@CreateWide@2

; 2624 :     {
; 2625 :         // Do a half circle.
; 2626 :         // _OverlapRegion mirrors this so both halves are done.
; 2627 :         for(int y = -ry; y <= ry; ++y)

	mov	esi, eax
	neg	esi
	cmp	esi, eax
	jg	$LN74@CreateWide@2
	fild	DWORD PTR _rx$[ebp]
	imul	eax, eax
	fstp	DWORD PTR tv380[ebp]
	fild	DWORD PTR _ry$[ebp]
	fstp	DWORD PTR tv383[ebp]

; 2634 :     {
; 2635 :         // There are artifacts if we don't make at least two overlaps of the line, even at same Y coord
; 2636 :         _OverlapRegion(mWideOutline, out_line, rx, 0);

	mov	DWORD PTR tv371[ebp], eax
	jmp	SHORT $LN5@CreateWide@2
$LL75@CreateWide@2:

; 2624 :     {
; 2625 :         // Do a half circle.
; 2626 :         // _OverlapRegion mirrors this so both halves are done.
; 2627 :         for(int y = -ry; y <= ry; ++y)

	mov	eax, DWORD PTR tv371[ebp]
$LN5@CreateWide@2:

; 2628 :         {
; 2629 :             int x = (int)(0.5 + sqrt(float(ry*ry - y*y)) * float(rx)/float(ry));

	mov	ecx, esi
	imul	ecx, esi
	sub	eax, ecx

; 2630 :             _OverlapRegion(mWideOutline, out_line, x, y);

	mov	DWORD PTR tv443[ebp], eax
	push	esi
	fild	DWORD PTR tv443[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv437[ebp]
	fld	DWORD PTR tv437[ebp]
	fmul	DWORD PTR tv380[ebp]
	fdiv	DWORD PTR tv383[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	push	eax
	push	edi
	mov	ecx, ebx
	call	?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z ; ScanLineData2::_OverlapRegion
	inc	esi
	add	esp, 12					; 0000000cH
	cmp	esi, DWORD PTR _ry$[ebp]
	jle	SHORT $LL75@CreateWide@2

; 2638 :     }
; 2639 :     return true;

	mov	al, 1

; 2640 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN76@CreateWide@2:

; 2631 :         }
; 2632 :     }
; 2633 :     else if (ry == 0 && rx > 0)

	jne	SHORT $LN74@CreateWide@2
	mov	esi, DWORD PTR _rx$[ebp]
	test	esi, esi
	jle	SHORT $LN74@CreateWide@2

; 2634 :     {
; 2635 :         // There are artifacts if we don't make at least two overlaps of the line, even at same Y coord
; 2636 :         _OverlapRegion(mWideOutline, out_line, rx, 0);

	push	0
	push	esi
	push	edi
	mov	ecx, ebx
	call	?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z ; ScanLineData2::_OverlapRegion
	add	esp, 12					; 0000000cH

; 2637 :         _OverlapRegion(mWideOutline, out_line, rx, 0);

	push	0
	push	esi
	push	edi
	mov	ecx, ebx
	call	?_OverlapRegion@ScanLineData2@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@ABV23@HH@Z ; ScanLineData2::_OverlapRegion
	add	esp, 12					; 0000000cH
$LN74@CreateWide@2:

; 2640 : }

	pop	edi
	pop	esi
	mov	al, 1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CreateWidenedRegion@ScanLineData2@@QAE_NHH@Z ENDP	; ScanLineData2::CreateWidenedRegion
; Function compile flags: /Ogtp
; File e:\github\codesandnotes\xy-vsfilter\src\thirdparty\boost_1_47_0\boost\flyweight\detail\flyweight_core.hpp
;	COMDAT ??__E?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA@@YAXXZ
text$yc	SEGMENT
??__E?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA@@YAXXZ PROC ; `dynamic initializer for 'boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer'', COMDAT

; 218  :       FactorySpecifier,LockingPolicy,HolderSpecifier>::init();

	cmp	BYTE PTR ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA, 0 ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
	je	SHORT $LN4@static_ini@3
	mov	al, 1
	mov	BYTE PTR ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA, al ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
	ret	0
$LN4@static_ini@3:
	call	?get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ ; boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get
	lea	ecx, DWORD PTR [eax+48]
	test	eax, eax
	mov	DWORD PTR ?static_factory_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAV?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@A, eax ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_factory_ptr
	setne	al
	mov	DWORD PTR ?static_mutex_ptr@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0PAUmutex_type@no_locking@34@A, ecx ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_mutex_ptr
	mov	BYTE PTR ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA, al ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
	ret	0
??__E?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA@@YAXXZ ENDP ; `dynamic initializer for 'boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fc@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@YAXXZ
text$yd	SEGMENT
??__Fc@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@YAXXZ PROC ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`dynamic atexit destructor for 'c'', COMDAT
	mov	eax, OFFSET ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+12
	call	?delete_all_nodes_@?$hashed_index@U?$identity@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@multi_index@boost@@U?$hash@N@3@U?$equal_to@N@std@@U?$nth_layer@$00V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@Uindex_list@?$hashed_factory_class@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@NUna@mpl@4@U564@U564@@34@V?$allocator@V?$refcounted_value@Vrep_type@?$optimized_key_value@NVass_synth_priv@@Uass_synth_priv_key@@@detail@flyweights@boost@@N@detail@flyweights@boost@@@std@@@detail@23@U?$vector0@Una@mpl@boost@@@mpl@3@Uhashed_unique_tag@823@@detail@multi_index@boost@@IAEXXZ ; boost::multi_index::detail::hashed_index<boost::multi_index::identity<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> >,boost::hash<double>,std::equal_to<double>,boost::multi_index::detail::nth_layer<1,boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,boost::flyweights::hashed_factory_class<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double>,double,boost::mpl::na,boost::mpl::na,boost::mpl::na>::index_list,std::allocator<boost::flyweights::detail::refcounted_value<boost::flyweights::detail::optimized_key_value<double,ass_synth_priv,ass_synth_priv_key>::rep_type,double> > >,boost::mpl::vector0<boost::mpl::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_
	cmp	DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+24, 0
	je	SHORT $LN18@dynamic
	mov	eax, DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+28
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN18@dynamic:
	mov	ecx, DWORD PTR ?c@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@34@XZ@4U56734@A+4
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
??__Fc@?1??get@?$static_holder_class@Uholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@@flyweights@boost@@SAAAUholder_arg@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@23@XZ@YAXXZ ENDP ; `boost::flyweights::static_holder_class<boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::holder_arg>::get'::`2'::`dynamic atexit destructor for 'c''
PUBLIC	?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
;	COMDAT ?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA
_BSS	SEGMENT
?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA DB 01H DUP (?) ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?static_initializer$initializer$@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0P6AXXZA DD FLAT:??__E?static_initializer@?$flyweight_core@U?$key_value@NVass_synth_priv@@Uass_synth_priv_key@@@flyweights@boost@@Una@mpl@3@Urefcounted@23@U?$hashed_factory@Una@mpl@boost@@U123@U123@$0A@@23@Uno_locking@23@Ustatic_holder@23@@detail@flyweights@boost@@0_NA@@YAXXZ ; boost::flyweights::detail::flyweight_core<boost::flyweights::key_value<double,ass_synth_priv,ass_synth_priv_key>,boost::mpl::na,boost::flyweights::refcounted,boost::flyweights::hashed_factory<boost::mpl::na,boost::mpl::na,boost::mpl::na,0>,boost::flyweights::no_locking,boost::flyweights::static_holder>::static_initializer$initializer$
CRT$XCU	ENDS
END
END
