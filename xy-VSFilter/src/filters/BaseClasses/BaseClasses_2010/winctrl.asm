; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	E:\GitHub\codesandnotes\xy-vsfilter\src\filters\BaseClasses\winctrl.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_IAMFilterGraphCallback
CONST	SEGMENT
$SG79827 DB	'F', 00H, 'o', 00H, 'r', 00H, 'w', 00H, 'a', 00H, 'r', 00H
	DB	'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '%', 00H, 'x'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'd', 00H, 'r', 00H
	DB	'a', 00H, 'i', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG79837 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79838 DB	'm', 00H, '_', 00H, 'p', 00H, 'F', 00H, 'i', 00H, 'l', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG79840 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79841 DB	'm', 00H, '_', 00H, 'p', 00H, 'I', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, 'L'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, 00H, 00H
	ORG $+2
$SG79843 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79844 DB	'p', 00H, 'h', 00H, 'r', 00H, 00H, 00H
$SG79861 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG79862 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79863 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG79875 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG79876 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79877 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG79888 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG79889 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79890 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG79910 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG79911 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79912 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG79925 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG79926 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79927 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG79939 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG79940 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79941 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG79953 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79954 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H
	DB	'd', 00H, ',', 00H, '&', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	')', 00H, 00H, 00H
$SG79975 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG79976 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79977 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG79989 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG79990 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79991 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG79996 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG79997 DB	'p', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'w', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG80010 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80011 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80012 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80030 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80031 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80032 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80044 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80045 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80046 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80062 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80063 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80064 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80075 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80076 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80077 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80084 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG80085 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H
	DB	'd', 00H, ',', 00H, '&', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	')', 00H, 00H, 00H
$SG80101 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80102 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80103 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80109 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80110 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H
	DB	'd', 00H, ',', 00H, '&', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	')', 00H, 00H, 00H
$SG80117 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80118 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80119 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80126 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80127 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H
	DB	'd', 00H, ',', 00H, '&', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	')', 00H, 00H, 00H
$SG80143 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80144 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80145 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80151 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80152 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H
	DB	'd', 00H, ',', 00H, '&', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	')', 00H, 00H, 00H
$SG80159 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80160 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80161 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80168 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80169 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H
	DB	'd', 00H, ',', 00H, '&', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	')', 00H, 00H, 00H
$SG80185 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80186 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80187 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80193 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80194 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H
	DB	'd', 00H, ',', 00H, '&', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	')', 00H, 00H, 00H
$SG80201 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80202 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80203 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80210 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80211 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H
	DB	'd', 00H, ',', 00H, '&', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	')', 00H, 00H, 00H
$SG80227 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80228 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80229 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80235 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80236 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H
	DB	'd', 00H, ',', 00H, '&', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	')', 00H, 00H, 00H
$SG80243 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80244 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80245 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80254 DB	'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '%', 00H, 'l', 00H, 'x', 00H, 00H, 00H
	ORG $+2
$SG80263 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80264 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80265 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80276 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80277 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80278 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80291 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80292 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80293 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80307 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80308 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80309 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80331 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80332 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80333 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80347 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80348 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80349 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80356 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80357 DB	'I', 00H, 's', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'w'
	DB	00H, 'n', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80360 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80361 DB	'b', 00H, 'S', 00H, 'u', 00H, 'c', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG80362 DB	'S', 00H, 'W', 00H, 'P', 00H, ' ', 00H, 'f', 00H, 'a', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'e', 00H, 'r'
	DB	00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '%', 00H, 'd', 00H
	DB	00H, 00H
$SG80382 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80383 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80384 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80390 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG80391 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H
	DB	'd', 00H, ',', 00H, '&', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	')', 00H, 00H, 00H
$SG80409 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80410 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80411 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80418 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80419 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 'c'
	DB	00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '(', 00H
	DB	'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H, ','
	DB	00H, '&', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	')', 00H, 00H, 00H
$SG80431 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80432 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80433 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80444 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80445 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80446 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80457 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80458 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80459 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80477 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80478 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80479 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80494 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80495 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80496 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80511 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80512 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80513 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80533 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80534 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80535 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80550 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80551 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80552 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80567 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80568 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80569 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80582 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80583 DB	'm', 00H, '_', 00H, 'p', 00H, 'F', 00H, 'i', 00H, 'l', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG80585 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80586 DB	'm', 00H, '_', 00H, 'p', 00H, 'I', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, 'L'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, 00H, 00H
	ORG $+2
$SG80588 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80589 DB	'p', 00H, 'h', 00H, 'r', 00H, 00H, 00H
$SG80606 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80607 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80608 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80628 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80629 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80630 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80648 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80649 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80650 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80668 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80669 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80670 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80688 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80689 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80690 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80711 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80712 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80713 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80761 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80762 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80763 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80782 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80783 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80784 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80815 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80816 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80817 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80833 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80834 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80835 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80866 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80867 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80868 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80881 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80882 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80883 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80905 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80906 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80907 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80920 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80921 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80922 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80944 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80945 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80946 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80959 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80960 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80961 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80983 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80984 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG80985 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80998 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG80999 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81000 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81022 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81023 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81024 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81037 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81038 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81039 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81061 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81062 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81063 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81076 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81077 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81078 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81100 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81101 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81102 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81115 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81116 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81117 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81139 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81140 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81141 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81154 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81155 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81156 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81178 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81179 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81180 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81192 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81193 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81194 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81209 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81210 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81211 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81222 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81223 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81224 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81239 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81240 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81241 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81256 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG81257 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81258 DB	'!', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H
	DB	'"', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '"', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81281 DB	'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'I'
	DB	00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 'S', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 00H, 00H
$SG81283 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81284 DB	'p', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, 00H, 00H
$SG81292 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG81293 DB	'I', 00H, 's', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'E', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, '(', 00H, 'p'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H
	DB	'E', 00H, 00H, 00H
$SG81318 DB	'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'C', 00H, 'o', 00H, 'p', 00H, 'y'
	DB	00H, 'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG81320 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81321 DB	'p', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, 00H, 00H
$SG81330 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG81331 DB	'I', 00H, 's', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'E', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, '(', 00H, 'p'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H
	DB	'E', 00H, 00H, 00H
$SG81445 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG81446 DB	'I', 00H, 's', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'E', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, '(', 00H, 'p'
	DB	00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H
	DB	'E', 00H, 00H, 00H
CONST	ENDS
;	COMDAT _IID_IAMFilterGraphCallback
CONST	SEGMENT
_IID_IAMFilterGraphCallback DD 056a868fdH
	DW	0ad4H
	DW	011ceH
	DB	0b0H
	DB	0a3H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0a7H
	DB	070H
CONST	ENDS
PUBLIC	?PossiblyEatMessage@@YGHPAUHWND__@@IIJ@Z	; PossiblyEatMessage
EXTRN	__imp__PostMessageW@16:PROC
EXTRN	?DbgLogInfo@@YAXKKPB_WZZ:PROC			; DbgLogInfo
EXTRN	__imp__InSendMessage@0:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\winctrl.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv67 = -4						; size = 4
_hwndDrain$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?PossiblyEatMessage@@YGHPAUHWND__@@IIJ@Z PROC		; PossiblyEatMessage
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 31
	cmp	DWORD PTR _hwndDrain$[ebp], 0
	je	$LN4@PossiblyEa
	mov	esi, esp
	call	DWORD PTR __imp__InSendMessage@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@PossiblyEa
; Line 33
	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 263		; 00000107H
	ja	SHORT $LN7@PossiblyEa
	cmp	DWORD PTR tv67[ebp], 256		; 00000100H
	jae	SHORT $LN1@PossiblyEa
	cmp	DWORD PTR tv67[ebp], 33			; 00000021H
	je	SHORT $LN1@PossiblyEa
	cmp	DWORD PTR tv67[ebp], 159		; 0000009fH
	jbe	SHORT $LN4@PossiblyEa
	cmp	DWORD PTR tv67[ebp], 169		; 000000a9H
	jbe	SHORT $LN1@PossiblyEa
	jmp	SHORT $LN4@PossiblyEa
$LN7@PossiblyEa:
	cmp	DWORD PTR tv67[ebp], 512		; 00000200H
	jb	SHORT $LN4@PossiblyEa
	cmp	DWORD PTR tv67[ebp], 521		; 00000209H
	jbe	SHORT $LN1@PossiblyEa
	jmp	SHORT $LN4@PossiblyEa
$LN1@PossiblyEa:
; Line 67
	push	OFFSET $SG79827
	push	2
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 68
	mov	esi, esp
	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _uMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwndDrain$[ebp]
	push	ecx
	call	DWORD PTR __imp__PostMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 70
	mov	eax, 1
	jmp	SHORT $LN5@PossiblyEa
$LN4@PossiblyEa:
; Line 73
	xor	eax, eax
$LN5@PossiblyEa:
; Line 74
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?PossiblyEatMessage@@YGHPAUHWND__@@IIJ@Z ENDP		; PossiblyEatMessage
_TEXT	ENDS
PUBLIC	??1CBaseVideoWindow@@UAE@XZ			; CBaseVideoWindow::~CBaseVideoWindow
PUBLIC	??_7CBaseControlWindow@@6B@			; CBaseControlWindow::`vftable'
PUBLIC	??_7CBaseControlWindow@@6BCUnknown@@@		; CBaseControlWindow::`vftable'
PUBLIC	??_7CBaseControlWindow@@6BIVideoWindow@@@	; CBaseControlWindow::`vftable'
PUBLIC	??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z ; CBaseControlWindow::CBaseControlWindow
PUBLIC	??_R4CBaseControlWindow@@6BIVideoWindow@@@	; CBaseControlWindow::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBaseControlWindow@@@8			; CBaseControlWindow `RTTI Type Descriptor'
PUBLIC	??_R3CBaseControlWindow@@8			; CBaseControlWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseControlWindow@@8			; CBaseControlWindow::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseControlWindow@@8		; CBaseControlWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CBaseVideoWindow@@8		; CBaseVideoWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCBaseVideoWindow@@@8			; CBaseVideoWindow `RTTI Type Descriptor'
PUBLIC	??_R3CBaseVideoWindow@@8			; CBaseVideoWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseVideoWindow@@8			; CBaseVideoWindow::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IVideoWindow@@8			; IVideoWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIVideoWindow@@@8			; IVideoWindow `RTTI Type Descriptor'
PUBLIC	??_R3IVideoWindow@@8				; IVideoWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IVideoWindow@@8				; IVideoWindow::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IDispatch@@8			; IDispatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIDispatch@@@8				; IDispatch `RTTI Type Descriptor'
PUBLIC	??_R3IDispatch@@8				; IDispatch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IDispatch@@8				; IDispatch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CUnknown@@8			; CUnknown::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCUnknown@@@8				; CUnknown `RTTI Type Descriptor'
PUBLIC	??_R3CUnknown@@8				; CUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CUnknown@@8				; CUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CUnknown@@8			; CUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@INonDelegatingUnknown@@8		; INonDelegatingUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUINonDelegatingUnknown@@@8		; INonDelegatingUnknown `RTTI Type Descriptor'
PUBLIC	??_R3INonDelegatingUnknown@@8			; INonDelegatingUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INonDelegatingUnknown@@8			; INonDelegatingUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CBaseObject@@8			; CBaseObject::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCBaseObject@@@8				; CBaseObject `RTTI Type Descriptor'
PUBLIC	??_R3CBaseObject@@8				; CBaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseObject@@8				; CBaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseObject@@8			; CBaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@INonDelegatingUnknown@@8		; INonDelegatingUnknown::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R17?0A@EA@CBaseObject@@8			; CBaseObject::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R1BI@?0A@EA@CBaseWindow@@8			; CBaseWindow::`RTTI Base Class Descriptor at (24,-1,0,64)'
PUBLIC	??_R0?AVCBaseWindow@@@8				; CBaseWindow `RTTI Type Descriptor'
PUBLIC	??_R3CBaseWindow@@8				; CBaseWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseWindow@@8				; CBaseWindow::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseWindow@@8			; CBaseWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CBaseVideoWindow@@UAGJABU_GUID@@PAPAX@Z ; CBaseVideoWindow::QueryInterface
PUBLIC	?AddRef@CBaseVideoWindow@@UAGKXZ		; CBaseVideoWindow::AddRef
PUBLIC	?Release@CBaseVideoWindow@@UAGKXZ		; CBaseVideoWindow::Release
PUBLIC	?put_Caption@CBaseControlWindow@@UAGJPA_W@Z	; CBaseControlWindow::put_Caption
PUBLIC	?get_Caption@CBaseControlWindow@@UAGJPAPA_W@Z	; CBaseControlWindow::get_Caption
PUBLIC	?put_WindowStyle@CBaseControlWindow@@UAGJJ@Z	; CBaseControlWindow::put_WindowStyle
PUBLIC	?get_WindowStyle@CBaseControlWindow@@UAGJPAJ@Z	; CBaseControlWindow::get_WindowStyle
PUBLIC	?put_WindowStyleEx@CBaseControlWindow@@UAGJJ@Z	; CBaseControlWindow::put_WindowStyleEx
PUBLIC	?get_WindowStyleEx@CBaseControlWindow@@UAGJPAJ@Z ; CBaseControlWindow::get_WindowStyleEx
PUBLIC	?put_AutoShow@CBaseControlWindow@@UAGJJ@Z	; CBaseControlWindow::put_AutoShow
PUBLIC	?get_AutoShow@CBaseControlWindow@@UAGJPAJ@Z	; CBaseControlWindow::get_AutoShow
PUBLIC	?put_WindowState@CBaseControlWindow@@UAGJJ@Z	; CBaseControlWindow::put_WindowState
PUBLIC	?get_WindowState@CBaseControlWindow@@UAGJPAJ@Z	; CBaseControlWindow::get_WindowState
PUBLIC	?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z ; CBaseControlWindow::put_BackgroundPalette
PUBLIC	?get_BackgroundPalette@CBaseControlWindow@@UAGJPAJ@Z ; CBaseControlWindow::get_BackgroundPalette
PUBLIC	?put_Visible@CBaseControlWindow@@UAGJJ@Z	; CBaseControlWindow::put_Visible
PUBLIC	?get_Visible@CBaseControlWindow@@UAGJPAJ@Z	; CBaseControlWindow::get_Visible
PUBLIC	?put_Left@CBaseControlWindow@@UAGJJ@Z		; CBaseControlWindow::put_Left
PUBLIC	?get_Left@CBaseControlWindow@@UAGJPAJ@Z		; CBaseControlWindow::get_Left
PUBLIC	?put_Width@CBaseControlWindow@@UAGJJ@Z		; CBaseControlWindow::put_Width
PUBLIC	?get_Width@CBaseControlWindow@@UAGJPAJ@Z	; CBaseControlWindow::get_Width
PUBLIC	?put_Top@CBaseControlWindow@@UAGJJ@Z		; CBaseControlWindow::put_Top
PUBLIC	?get_Top@CBaseControlWindow@@UAGJPAJ@Z		; CBaseControlWindow::get_Top
PUBLIC	?put_Height@CBaseControlWindow@@UAGJJ@Z		; CBaseControlWindow::put_Height
PUBLIC	?get_Height@CBaseControlWindow@@UAGJPAJ@Z	; CBaseControlWindow::get_Height
PUBLIC	?put_Owner@CBaseControlWindow@@UAGJJ@Z		; CBaseControlWindow::put_Owner
PUBLIC	?get_Owner@CBaseControlWindow@@UAGJPAJ@Z	; CBaseControlWindow::get_Owner
PUBLIC	?put_MessageDrain@CBaseControlWindow@@UAGJJ@Z	; CBaseControlWindow::put_MessageDrain
PUBLIC	?get_MessageDrain@CBaseControlWindow@@UAGJPAJ@Z	; CBaseControlWindow::get_MessageDrain
PUBLIC	?get_BorderColor@CBaseControlWindow@@UAGJPAJ@Z	; CBaseControlWindow::get_BorderColor
PUBLIC	?put_BorderColor@CBaseControlWindow@@UAGJJ@Z	; CBaseControlWindow::put_BorderColor
PUBLIC	?get_FullScreenMode@CBaseControlWindow@@UAGJPAJ@Z ; CBaseControlWindow::get_FullScreenMode
PUBLIC	?put_FullScreenMode@CBaseControlWindow@@UAGJJ@Z	; CBaseControlWindow::put_FullScreenMode
PUBLIC	?SetWindowForeground@CBaseControlWindow@@UAGJJ@Z ; CBaseControlWindow::SetWindowForeground
PUBLIC	?NotifyOwnerMessage@CBaseControlWindow@@UAGJJJJJ@Z ; CBaseControlWindow::NotifyOwnerMessage
PUBLIC	?SetWindowPosition@CBaseControlWindow@@UAGJJJJJ@Z ; CBaseControlWindow::SetWindowPosition
PUBLIC	?GetWindowPosition@CBaseControlWindow@@UAGJPAJ000@Z ; CBaseControlWindow::GetWindowPosition
PUBLIC	?GetMinIdealImageSize@CBaseControlWindow@@UAGJPAJ0@Z ; CBaseControlWindow::GetMinIdealImageSize
PUBLIC	?GetMaxIdealImageSize@CBaseControlWindow@@UAGJPAJ0@Z ; CBaseControlWindow::GetMaxIdealImageSize
PUBLIC	?GetRestorePosition@CBaseControlWindow@@UAGJPAJ000@Z ; CBaseControlWindow::GetRestorePosition
PUBLIC	?HideCursor@CBaseControlWindow@@UAGJJ@Z		; CBaseControlWindow::HideCursor
PUBLIC	?IsCursorHidden@CBaseControlWindow@@UAGJPAJ@Z	; CBaseControlWindow::IsCursorHidden
PUBLIC	??_R4CBaseControlWindow@@6BCUnknown@@@		; CBaseControlWindow::`RTTI Complete Object Locator'
PUBLIC	??_ECBaseControlWindow@@W3AEPAXI@Z		; [thunk]:CBaseControlWindow::`vector deleting destructor'
PUBLIC	??_R4CBaseControlWindow@@6B@			; CBaseControlWindow::`RTTI Complete Object Locator'
PUBLIC	??_ECBaseControlWindow@@WBI@AEPAXI@Z		; [thunk]:CBaseControlWindow::`vector deleting destructor'
PUBLIC	?PossiblyEatMessage@CBaseControlWindow@@UAEHIIJ@Z ; CBaseControlWindow::PossiblyEatMessage
EXTRN	??1CBaseWindow@@UAE@XZ:PROC			; CBaseWindow::~CBaseWindow
EXTRN	?DbgAssert@@YGXPB_W0H@Z:PROC			; DbgAssert
EXTRN	??0CBaseWindow@@QAE@H_N@Z:PROC			; CBaseWindow::CBaseWindow
EXTRN	??0CBaseVideoWindow@@QAE@PB_WPAUIUnknown@@@Z:PROC ; CBaseVideoWindow::CBaseVideoWindow
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?GetTypeInfoCount@CBaseVideoWindow@@UAGJPAI@Z:PROC ; CBaseVideoWindow::GetTypeInfoCount
EXTRN	?GetTypeInfo@CBaseVideoWindow@@UAGJIKPAPAUITypeInfo@@@Z:PROC ; CBaseVideoWindow::GetTypeInfo
EXTRN	?GetIDsOfNames@CBaseVideoWindow@@UAGJABU_GUID@@PAPA_WIKPAJ@Z:PROC ; CBaseVideoWindow::GetIDsOfNames
EXTRN	?Invoke@CBaseVideoWindow@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z:PROC ; CBaseVideoWindow::Invoke
EXTRN	?NonDelegatingQueryInterface@CBaseVideoWindow@@UAGJABU_GUID@@PAPAX@Z:PROC ; CBaseVideoWindow::NonDelegatingQueryInterface
EXTRN	?NonDelegatingAddRef@CUnknown@@UAGKXZ:PROC	; CUnknown::NonDelegatingAddRef
EXTRN	?NonDelegatingRelease@CUnknown@@UAGKXZ:PROC	; CUnknown::NonDelegatingRelease
EXTRN	?OnPaletteChange@CBaseWindow@@MAEJPAUHWND__@@I@Z:PROC ; CBaseWindow::OnPaletteChange
EXTRN	?DoneWithWindow@CBaseWindow@@UAEJXZ:PROC	; CBaseWindow::DoneWithWindow
EXTRN	?PrepareWindow@CBaseWindow@@UAEJXZ:PROC		; CBaseWindow::PrepareWindow
EXTRN	?InactivateWindow@CBaseWindow@@UAEJXZ:PROC	; CBaseWindow::InactivateWindow
EXTRN	?ActivateWindow@CBaseWindow@@UAEJXZ:PROC	; CBaseWindow::ActivateWindow
EXTRN	?OnSize@CBaseWindow@@UAEHJJ@Z:PROC		; CBaseWindow::OnSize
EXTRN	?OnClose@CBaseWindow@@UAEHXZ:PROC		; CBaseWindow::OnClose
EXTRN	?GetDefaultRect@CBaseWindow@@UAE?AUtagRECT@@XZ:PROC ; CBaseWindow::GetDefaultRect
EXTRN	?UninitialiseWindow@CBaseWindow@@UAEJXZ:PROC	; CBaseWindow::UninitialiseWindow
EXTRN	?InitialiseWindow@CBaseWindow@@UAEJPAUHWND__@@@Z:PROC ; CBaseWindow::InitialiseWindow
EXTRN	?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z:PROC ; CBaseWindow::SetPalette
EXTRN	?DoRealisePalette@CBaseWindow@@UAEJH@Z:PROC	; CBaseWindow::DoRealisePalette
EXTRN	?OnReceiveMessage@CBaseWindow@@UAEJPAUHWND__@@IIJ@Z:PROC ; CBaseWindow::OnReceiveMessage
EXTRN	__purecall:PROC
;	COMDAT ??_R4CBaseControlWindow@@6B@
rdata$r	SEGMENT
??_R4CBaseControlWindow@@6B@ DD 00H			; CBaseControlWindow::`RTTI Complete Object Locator'
	DD	018H
	DD	00H
	DD	FLAT:??_R0?AVCBaseControlWindow@@@8
	DD	FLAT:??_R3CBaseControlWindow@@8
rdata$r	ENDS
;	COMDAT ??_R4CBaseControlWindow@@6BCUnknown@@@
rdata$r	SEGMENT
??_R4CBaseControlWindow@@6BCUnknown@@@ DD 00H		; CBaseControlWindow::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCBaseControlWindow@@@8
	DD	FLAT:??_R3CBaseControlWindow@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseWindow@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseWindow@@8 DD FLAT:??_R0?AVCBaseWindow@@@8 ; CBaseWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseWindow@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseWindow@@8
rdata$r	SEGMENT
??_R2CBaseWindow@@8 DD FLAT:??_R1A@?0A@EA@CBaseWindow@@8 ; CBaseWindow::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBaseWindow@@8
rdata$r	SEGMENT
??_R3CBaseWindow@@8 DD 00H				; CBaseWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBaseWindow@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseWindow@@@8
_DATA	SEGMENT
??_R0?AVCBaseWindow@@@8 DD FLAT:??_7type_info@@6B@	; CBaseWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseWindow@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BI@?0A@EA@CBaseWindow@@8
rdata$r	SEGMENT
??_R1BI@?0A@EA@CBaseWindow@@8 DD FLAT:??_R0?AVCBaseWindow@@@8 ; CBaseWindow::`RTTI Base Class Descriptor at (24,-1,0,64)'
	DD	00H
	DD	018H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseWindow@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@CBaseObject@@8
rdata$r	SEGMENT
??_R17?0A@EA@CBaseObject@@8 DD FLAT:??_R0?AVCBaseObject@@@8 ; CBaseObject::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EA@INonDelegatingUnknown@@8 DD FLAT:??_R0?AUINonDelegatingUnknown@@@8 ; INonDelegatingUnknown::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INonDelegatingUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseObject@@8 DD FLAT:??_R0?AVCBaseObject@@@8 ; CBaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseObject@@8
rdata$r	SEGMENT
??_R2CBaseObject@@8 DD FLAT:??_R1A@?0A@EA@CBaseObject@@8 ; CBaseObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBaseObject@@8
rdata$r	SEGMENT
??_R3CBaseObject@@8 DD 00H				; CBaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseObject@@@8
_DATA	SEGMENT
??_R0?AVCBaseObject@@@8 DD FLAT:??_7type_info@@6B@	; CBaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CBaseObject@@8
rdata$r	SEGMENT
??_R13?0A@EA@CBaseObject@@8 DD FLAT:??_R0?AVCBaseObject@@@8 ; CBaseObject::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R2INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R2INonDelegatingUnknown@@8 DD FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8 ; INonDelegatingUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R3INonDelegatingUnknown@@8 DD 00H			; INonDelegatingUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2INonDelegatingUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUINonDelegatingUnknown@@@8
_DATA	SEGMENT
??_R0?AUINonDelegatingUnknown@@@8 DD FLAT:??_7type_info@@6B@ ; INonDelegatingUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUINonDelegatingUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INonDelegatingUnknown@@8 DD FLAT:??_R0?AUINonDelegatingUnknown@@@8 ; INonDelegatingUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INonDelegatingUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CUnknown@@8 DD FLAT:??_R0?AVCUnknown@@@8	; CUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2CUnknown@@8
rdata$r	SEGMENT
??_R2CUnknown@@8 DD FLAT:??_R1A@?0A@EA@CUnknown@@8	; CUnknown::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CUnknown@@8
rdata$r	SEGMENT
??_R3CUnknown@@8 DD 00H					; CUnknown::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCUnknown@@@8
_DATA	SEGMENT
??_R0?AVCUnknown@@@8 DD FLAT:??_7type_info@@6B@		; CUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EA@CUnknown@@8 DD FLAT:??_R0?AVCUnknown@@@8	; CUnknown::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	02H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IDispatch@@8
rdata$r	SEGMENT
??_R2IDispatch@@8 DD FLAT:??_R1A@?0A@EA@IDispatch@@8	; IDispatch::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IDispatch@@8
rdata$r	SEGMENT
??_R3IDispatch@@8 DD 00H				; IDispatch::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IDispatch@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIDispatch@@@8
_DATA	SEGMENT
??_R0?AUIDispatch@@@8 DD FLAT:??_7type_info@@6B@	; IDispatch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIDispatch@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IDispatch@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IDispatch@@8 DD FLAT:??_R0?AUIDispatch@@@8 ; IDispatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IDispatch@@8
rdata$r	ENDS
;	COMDAT ??_R2IVideoWindow@@8
rdata$r	SEGMENT
??_R2IVideoWindow@@8 DD FLAT:??_R1A@?0A@EA@IVideoWindow@@8 ; IVideoWindow::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IDispatch@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IVideoWindow@@8
rdata$r	SEGMENT
??_R3IVideoWindow@@8 DD 00H				; IVideoWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IVideoWindow@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIVideoWindow@@@8
_DATA	SEGMENT
??_R0?AUIVideoWindow@@@8 DD FLAT:??_7type_info@@6B@	; IVideoWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIVideoWindow@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IVideoWindow@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IVideoWindow@@8 DD FLAT:??_R0?AUIVideoWindow@@@8 ; IVideoWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IVideoWindow@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseVideoWindow@@8
rdata$r	SEGMENT
??_R2CBaseVideoWindow@@8 DD FLAT:??_R1A@?0A@EA@CBaseVideoWindow@@8 ; CBaseVideoWindow::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IVideoWindow@@8
	DD	FLAT:??_R1A@?0A@EA@IDispatch@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CUnknown@@8
	DD	FLAT:??_R13?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R17?0A@EA@CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseVideoWindow@@8
rdata$r	SEGMENT
??_R3CBaseVideoWindow@@8 DD 00H				; CBaseVideoWindow::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2CBaseVideoWindow@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseVideoWindow@@@8
_DATA	SEGMENT
??_R0?AVCBaseVideoWindow@@@8 DD FLAT:??_7type_info@@6B@	; CBaseVideoWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseVideoWindow@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseVideoWindow@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseVideoWindow@@8 DD FLAT:??_R0?AVCBaseVideoWindow@@@8 ; CBaseVideoWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseVideoWindow@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseControlWindow@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseControlWindow@@8 DD FLAT:??_R0?AVCBaseControlWindow@@@8 ; CBaseControlWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseControlWindow@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseControlWindow@@8
rdata$r	SEGMENT
??_R2CBaseControlWindow@@8 DD FLAT:??_R1A@?0A@EA@CBaseControlWindow@@8 ; CBaseControlWindow::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseVideoWindow@@8
	DD	FLAT:??_R1A@?0A@EA@IVideoWindow@@8
	DD	FLAT:??_R1A@?0A@EA@IDispatch@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CUnknown@@8
	DD	FLAT:??_R13?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R17?0A@EA@CBaseObject@@8
	DD	FLAT:??_R1BI@?0A@EA@CBaseWindow@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseControlWindow@@8
rdata$r	SEGMENT
??_R3CBaseControlWindow@@8 DD 00H			; CBaseControlWindow::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2CBaseControlWindow@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseControlWindow@@@8
_DATA	SEGMENT
??_R0?AVCBaseControlWindow@@@8 DD FLAT:??_7type_info@@6B@ ; CBaseControlWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseControlWindow@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBaseControlWindow@@6BIVideoWindow@@@
rdata$r	SEGMENT
??_R4CBaseControlWindow@@6BIVideoWindow@@@ DD 00H	; CBaseControlWindow::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseControlWindow@@@8
	DD	FLAT:??_R3CBaseControlWindow@@8
rdata$r	ENDS
;	COMDAT ??_7CBaseControlWindow@@6B@
CONST	SEGMENT
??_7CBaseControlWindow@@6B@ DD FLAT:??_R4CBaseControlWindow@@6B@ ; CBaseControlWindow::`vftable'
	DD	FLAT:?OnPaletteChange@CBaseWindow@@MAEJPAUHWND__@@I@Z
	DD	FLAT:??_ECBaseControlWindow@@WBI@AEPAXI@Z
	DD	FLAT:?DoneWithWindow@CBaseWindow@@UAEJXZ
	DD	FLAT:?PrepareWindow@CBaseWindow@@UAEJXZ
	DD	FLAT:?InactivateWindow@CBaseWindow@@UAEJXZ
	DD	FLAT:?ActivateWindow@CBaseWindow@@UAEJXZ
	DD	FLAT:?OnSize@CBaseWindow@@UAEHJJ@Z
	DD	FLAT:?OnClose@CBaseWindow@@UAEHXZ
	DD	FLAT:?GetDefaultRect@CBaseWindow@@UAE?AUtagRECT@@XZ
	DD	FLAT:?UninitialiseWindow@CBaseWindow@@UAEJXZ
	DD	FLAT:?InitialiseWindow@CBaseWindow@@UAEJPAUHWND__@@@Z
	DD	FLAT:?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z
	DD	FLAT:?DoRealisePalette@CBaseWindow@@UAEJH@Z
	DD	FLAT:?PossiblyEatMessage@CBaseControlWindow@@UAEHIIJ@Z
	DD	FLAT:?OnReceiveMessage@CBaseWindow@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7CBaseControlWindow@@6BCUnknown@@@
CONST	SEGMENT
??_7CBaseControlWindow@@6BCUnknown@@@ DD FLAT:??_R4CBaseControlWindow@@6BCUnknown@@@ ; CBaseControlWindow::`vftable'
	DD	FLAT:?NonDelegatingQueryInterface@CBaseVideoWindow@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?NonDelegatingAddRef@CUnknown@@UAGKXZ
	DD	FLAT:?NonDelegatingRelease@CUnknown@@UAGKXZ
	DD	FLAT:??_ECBaseControlWindow@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CBaseControlWindow@@6BIVideoWindow@@@
CONST	SEGMENT
??_7CBaseControlWindow@@6BIVideoWindow@@@ DD FLAT:??_R4CBaseControlWindow@@6BIVideoWindow@@@ ; CBaseControlWindow::`vftable'
	DD	FLAT:?QueryInterface@CBaseVideoWindow@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseVideoWindow@@UAGKXZ
	DD	FLAT:?Release@CBaseVideoWindow@@UAGKXZ
	DD	FLAT:?GetTypeInfoCount@CBaseVideoWindow@@UAGJPAI@Z
	DD	FLAT:?GetTypeInfo@CBaseVideoWindow@@UAGJIKPAPAUITypeInfo@@@Z
	DD	FLAT:?GetIDsOfNames@CBaseVideoWindow@@UAGJABU_GUID@@PAPA_WIKPAJ@Z
	DD	FLAT:?Invoke@CBaseVideoWindow@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z
	DD	FLAT:?put_Caption@CBaseControlWindow@@UAGJPA_W@Z
	DD	FLAT:?get_Caption@CBaseControlWindow@@UAGJPAPA_W@Z
	DD	FLAT:?put_WindowStyle@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_WindowStyle@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_WindowStyleEx@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_WindowStyleEx@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_AutoShow@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_AutoShow@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_WindowState@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_WindowState@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_BackgroundPalette@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_Visible@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_Visible@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_Left@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_Left@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_Width@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_Width@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_Top@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_Top@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_Height@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_Height@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_Owner@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_Owner@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_MessageDrain@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_MessageDrain@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?get_BorderColor@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_BorderColor@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?get_FullScreenMode@CBaseControlWindow@@UAGJPAJ@Z
	DD	FLAT:?put_FullScreenMode@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?SetWindowForeground@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?NotifyOwnerMessage@CBaseControlWindow@@UAGJJJJJ@Z
	DD	FLAT:?SetWindowPosition@CBaseControlWindow@@UAGJJJJJ@Z
	DD	FLAT:?GetWindowPosition@CBaseControlWindow@@UAGJPAJ000@Z
	DD	FLAT:?GetMinIdealImageSize@CBaseControlWindow@@UAGJPAJ0@Z
	DD	FLAT:?GetMaxIdealImageSize@CBaseControlWindow@@UAGJPAJ0@Z
	DD	FLAT:?GetRestorePosition@CBaseControlWindow@@UAGJPAJ000@Z
	DD	FLAT:?HideCursor@CBaseControlWindow@@UAGJJ@Z
	DD	FLAT:?IsCursorHidden@CBaseControlWindow@@UAGJPAJ@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z$1
__ehfuncinfo$??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pFilter$ = 8						; size = 4
_pInterfaceLock$ = 12					; size = 4
_pName$ = 16						; size = 4
_pUnk$ = 20						; size = 4
_phr$ = 24						; size = 4
??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z PROC ; CBaseControlWindow::CBaseControlWindow
; _this$ = ecx
; Line 99
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pUnk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseVideoWindow@@QAE@PB_WPAUIUnknown@@@Z ; CBaseVideoWindow::CBaseVideoWindow
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0CBaseWindow@@QAE@H_N@Z		; CBaseWindow::CBaseWindow
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CBaseControlWindow@@6BIVideoWindow@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], OFFSET ??_7CBaseControlWindow@@6BCUnknown@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET ??_7CBaseControlWindow@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pFilter$[ebp]
	mov	DWORD PTR [edx+172], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+176], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pInterfaceLock$[ebp]
	mov	DWORD PTR [edx+180], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], 0
; Line 100
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+172], 0
	jne	SHORT $LN3@CBaseContr
	push	100					; 00000064H
	push	OFFSET $SG79837
	push	OFFSET $SG79838
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CBaseContr:
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jne	SHORT $LN2@CBaseContr
	push	101					; 00000065H
	push	OFFSET $SG79840
	push	OFFSET $SG79841
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CBaseContr:
; Line 102
	cmp	DWORD PTR _phr$[ebp], 0
	jne	SHORT $LN1@CBaseContr
	push	102					; 00000066H
	push	OFFSET $SG79843
	push	OFFSET $SG79844
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@CBaseContr:
; Line 103
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+184], 0
; Line 104
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseVideoWindow@@UAE@XZ
__unwindfunclet$??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1CBaseWindow@@UAE@XZ			; CBaseWindow::~CBaseWindow
__ehhandler$??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseControlWindow@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z ENDP ; CBaseControlWindow::CBaseControlWindow
PUBLIC	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ		; CUnknown::GetOwner
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CBaseVideoWindow@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv71 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?QueryInterface@CBaseVideoWindow@@UAGJABU_GUID@@PAPAX@Z PROC ; CBaseVideoWindow::QueryInterface, COMDAT
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\ctlutil.h
; Line 495
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv71[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _ppv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	mov	eax, DWORD PTR tv71[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBaseVideoWindow@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBaseVideoWindow::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ PROC		; CUnknown::GetOwner, COMDAT
; _this$ = ecx
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\combase.h
; Line 224
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 226
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ ENDP		; CUnknown::GetOwner
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBaseVideoWindow@@UAGKXZ
_TEXT	SEGMENT
tv71 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBaseVideoWindow@@UAGKXZ PROC			; CBaseVideoWindow::AddRef, COMDAT
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\ctlutil.h
; Line 495
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv71[ebp], eax
	mov	eax, DWORD PTR tv71[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBaseVideoWindow@@UAGKXZ ENDP			; CBaseVideoWindow::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBaseVideoWindow@@UAGKXZ
_TEXT	SEGMENT
tv71 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBaseVideoWindow@@UAGKXZ PROC			; CBaseVideoWindow::Release, COMDAT
; Line 495
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv71[ebp], eax
	mov	eax, DWORD PTR tv71[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBaseVideoWindow@@UAGKXZ ENDP			; CBaseVideoWindow::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?PossiblyEatMessage@CBaseControlWindow@@UAEHIIJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?PossiblyEatMessage@CBaseControlWindow@@UAEHIIJ@Z PROC	; CBaseControlWindow::PossiblyEatMessage, COMDAT
; _this$ = ecx
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\winctrl.h
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	call	?PossiblyEatMessage@@YGHPAUHWND__@@IIJ@Z ; PossiblyEatMessage
; Line 47
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PossiblyEatMessage@CBaseControlWindow@@UAEHIIJ@Z ENDP	; CBaseControlWindow::PossiblyEatMessage
_TEXT	ENDS
PUBLIC	??1CUnknown@@UAE@XZ				; CUnknown::~CUnknown
EXTRN	??1CBaseDispatch@@QAE@XZ:PROC			; CBaseDispatch::~CBaseDispatch
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBaseVideoWindow@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBaseVideoWindow@@UAE@XZ$0
__ehfuncinfo$??1CBaseVideoWindow@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CBaseVideoWindow@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBaseVideoWindow@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBaseVideoWindow@@UAE@XZ PROC			; CBaseVideoWindow::~CBaseVideoWindow, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBaseVideoWindow@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1CBaseDispatch@@QAE@XZ		; CBaseDispatch::~CBaseDispatch
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBaseVideoWindow@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__ehhandler$??1CBaseVideoWindow@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBaseVideoWindow@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBaseVideoWindow@@UAE@XZ ENDP			; CBaseVideoWindow::~CBaseVideoWindow
EXTRN	??1CBaseObject@@QAE@XZ:PROC			; CBaseObject::~CBaseObject
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CUnknown@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CUnknown@@UAE@XZ PROC				; CUnknown::~CUnknown, COMDAT
; _this$ = ecx
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\combase.h
; Line 212
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CBaseObject@@QAE@XZ			; CBaseObject::~CBaseObject
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CUnknown@@UAE@XZ ENDP				; CUnknown::~CUnknown
_TEXT	ENDS
PUBLIC	?IsConnected@CBasePin@@QAEHXZ			; CBasePin::IsConnected
EXTRN	__imp__SetWindowTextW@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_strCaption$ = 12					; size = 4
?put_Caption@CBaseControlWindow@@UAGJPA_W@Z PROC	; CBaseControlWindow::put_Caption
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\winctrl.cpp
; Line 113
	push	ebp
	mov	ebp, esp
	push	esi
; Line 114
	cmp	DWORD PTR _strCaption$[ebp], 0
	jne	SHORT $LN5@put_Captio
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@put_Captio
$LN5@put_Captio:
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@put_Captio
	mov	ecx, OFFSET $SG79861
	test	ecx, ecx
	je	SHORT $LN3@put_Captio
	push	115					; 00000073H
	push	OFFSET $SG79862
	push	OFFSET $SG79863
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@put_Captio:
	jmp	SHORT $LN2@put_Captio
$LN4@put_Captio:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@put_Captio
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@put_Captio
$LN2@put_Captio:
; Line 117
	mov	esi, esp
	mov	eax, DWORD PTR _strCaption$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__SetWindowTextW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 124
	xor	eax, eax
$LN6@put_Captio:
; Line 125
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?put_Caption@CBaseControlWindow@@UAGJPA_W@Z ENDP	; CBaseControlWindow::put_Caption
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsConnected@CBasePin@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsConnected@CBasePin@@QAEHXZ PROC			; CBasePin::IsConnected, COMDAT
; _this$ = ecx
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\amfilter.h
; Line 499
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+28], 0
	setne	cl
	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsConnected@CBasePin@@QAEHXZ ENDP			; CBasePin::IsConnected
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_WriteBSTR@8:PROC
EXTRN	__imp__GetWindowTextW@12:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WideCaption$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pstrCaption$ = 12					; size = 4
?get_Caption@CBaseControlWindow@@UAGJPAPA_W@Z PROC	; CBaseControlWindow::get_Caption
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\winctrl.cpp
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 136
	cmp	DWORD PTR _pstrCaption$[ebp], 0
	jne	SHORT $LN5@get_Captio
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@get_Captio
$LN5@get_Captio:
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@get_Captio
	mov	ecx, OFFSET $SG79875
	test	ecx, ecx
	je	SHORT $LN3@get_Captio
	push	137					; 00000089H
	push	OFFSET $SG79876
	push	OFFSET $SG79877
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Captio:
	jmp	SHORT $LN2@get_Captio
$LN4@get_Captio:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Captio
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Captio
$LN2@get_Captio:
; Line 141
	mov	esi, esp
	push	256					; 00000100H
	lea	eax, DWORD PTR _WideCaption$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowTextW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 149
	lea	eax, DWORD PTR _WideCaption$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstrCaption$[ebp]
	push	ecx
	call	_WriteBSTR@8
$LN6@get_Captio:
; Line 150
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@get_Captio
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN10@get_Captio:
	DD	1
	DD	$LN9@get_Captio
$LN9@get_Captio:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN8@get_Captio
$LN8@get_Captio:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
?get_Caption@CBaseControlWindow@@UAGJPAPA_W@Z ENDP	; CBaseControlWindow::get_Caption
_TEXT	ENDS
PUBLIC	?DoSetWindowStyle@CBaseControlWindow@@QAEJJJ@Z	; CBaseControlWindow::DoSetWindowStyle
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__GetWindowLongW@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_WindowStyleEx$ = 12					; size = 4
?put_WindowStyleEx@CBaseControlWindow@@UAGJJ@Z PROC	; CBaseControlWindow::put_WindowStyleEx
; Line 156
	push	ebp
	mov	ebp, esp
	push	esi
; Line 157
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN8@put_Window
	mov	ecx, OFFSET $SG79888
	test	ecx, ecx
	je	SHORT $LN7@put_Window
	push	157					; 0000009dH
	push	OFFSET $SG79889
	push	OFFSET $SG79890
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@put_Window:
	jmp	SHORT $LN6@put_Window
$LN8@put_Window:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN6@put_Window
	mov	eax, -2147220983			; 80040209H
	jmp	$LN9@put_Window
$LN6@put_Window:
; Line 161
	mov	esi, esp
	push	-20					; ffffffecH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, 8
	je	SHORT $LN4@put_Window
; Line 162
	mov	edx, DWORD PTR _WindowStyleEx$[ebp]
	and	edx, 8
	jne	SHORT $LN4@put_Window
; Line 163
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@put_Window:
; Line 169
	mov	ecx, DWORD PTR _WindowStyleEx$[ebp]
	and	ecx, 8
	je	SHORT $LN2@put_Window
; Line 170
	mov	esi, esp
	push	0
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 171
	mov	eax, DWORD PTR _WindowStyleEx$[ebp]
	and	eax, -9					; fffffff7H
	mov	DWORD PTR _WindowStyleEx$[ebp], eax
; Line 172
	jne	SHORT $LN2@put_Window
	xor	eax, eax
	jmp	SHORT $LN9@put_Window
$LN2@put_Window:
; Line 174
	push	-20					; ffffffecH
	mov	ecx, DWORD PTR _WindowStyleEx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoSetWindowStyle@CBaseControlWindow@@QAEJJJ@Z ; CBaseControlWindow::DoSetWindowStyle
$LN9@put_Window:
; Line 175
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?put_WindowStyleEx@CBaseControlWindow@@UAGJJ@Z ENDP	; CBaseControlWindow::put_WindowStyleEx
_TEXT	ENDS
PUBLIC	?DoGetWindowStyle@CBaseControlWindow@@QAEJPAJJ@Z ; CBaseControlWindow::DoGetWindowStyle
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pWindowStyleEx$ = 12					; size = 4
?get_WindowStyleEx@CBaseControlWindow@@UAGJPAJ@Z PROC	; CBaseControlWindow::get_WindowStyleEx
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	cmp	DWORD PTR _pWindowStyleEx$[ebp], 0
	jne	SHORT $LN5@get_Window
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@get_Window
$LN5@get_Window:
; Line 183
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@get_Window
	mov	ecx, OFFSET $SG79910
	test	ecx, ecx
	je	SHORT $LN3@get_Window
	push	183					; 000000b7H
	push	OFFSET $SG79911
	push	OFFSET $SG79912
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Window:
	jmp	SHORT $LN2@get_Window
$LN4@get_Window:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Window
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Window
$LN2@get_Window:
; Line 184
	push	-20					; ffffffecH
	mov	eax, DWORD PTR _pWindowStyleEx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoGetWindowStyle@CBaseControlWindow@@QAEJPAJJ@Z ; CBaseControlWindow::DoGetWindowStyle
$LN6@get_Window:
; Line 185
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?get_WindowStyleEx@CBaseControlWindow@@UAGJPAJ@Z ENDP	; CBaseControlWindow::get_WindowStyleEx
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_WindowStyle$ = 12					; size = 4
?put_WindowStyle@CBaseControlWindow@@UAGJJ@Z PROC	; CBaseControlWindow::put_WindowStyle
; Line 191
	push	ebp
	mov	ebp, esp
; Line 199
	mov	eax, DWORD PTR _WindowStyle$[ebp]
	and	eax, 134217728				; 08000000H
	jne	SHORT $LN5@put_Window@2
	mov	ecx, DWORD PTR _WindowStyle$[ebp]
	and	ecx, 536870912				; 20000000H
	jne	SHORT $LN5@put_Window@2
	mov	edx, DWORD PTR _WindowStyle$[ebp]
	and	edx, 16777216				; 01000000H
	jne	SHORT $LN5@put_Window@2
	mov	eax, DWORD PTR _WindowStyle$[ebp]
	and	eax, 536870912				; 20000000H
	jne	SHORT $LN5@put_Window@2
	mov	ecx, DWORD PTR _WindowStyle$[ebp]
	and	ecx, 1048576				; 00100000H
	jne	SHORT $LN5@put_Window@2
	mov	edx, DWORD PTR _WindowStyle$[ebp]
	and	edx, 2097152				; 00200000H
	je	SHORT $LN6@put_Window@2
$LN5@put_Window@2:
; Line 201
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN7@put_Window@2
$LN6@put_Window@2:
; Line 204
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@put_Window@2
	mov	ecx, OFFSET $SG79925
	test	ecx, ecx
	je	SHORT $LN3@put_Window@2
	push	204					; 000000ccH
	push	OFFSET $SG79926
	push	OFFSET $SG79927
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@put_Window@2:
	jmp	SHORT $LN2@put_Window@2
$LN4@put_Window@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@put_Window@2
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@put_Window@2
$LN2@put_Window@2:
; Line 205
	push	-16					; fffffff0H
	mov	eax, DWORD PTR _WindowStyle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoSetWindowStyle@CBaseControlWindow@@QAEJJJ@Z ; CBaseControlWindow::DoSetWindowStyle
$LN7@put_Window@2:
; Line 206
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?put_WindowStyle@CBaseControlWindow@@UAGJJ@Z ENDP	; CBaseControlWindow::put_WindowStyle
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_pWindowStyle$ = 12					; size = 4
?get_WindowStyle@CBaseControlWindow@@UAGJPAJ@Z PROC	; CBaseControlWindow::get_WindowStyle
; Line 212
	push	ebp
	mov	ebp, esp
; Line 213
	cmp	DWORD PTR _pWindowStyle$[ebp], 0
	jne	SHORT $LN5@get_Window@2
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@get_Window@2
$LN5@get_Window@2:
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@get_Window@2
	mov	ecx, OFFSET $SG79939
	test	ecx, ecx
	je	SHORT $LN3@get_Window@2
	push	214					; 000000d6H
	push	OFFSET $SG79940
	push	OFFSET $SG79941
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Window@2:
	jmp	SHORT $LN2@get_Window@2
$LN4@get_Window@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Window@2
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Window@2
$LN2@get_Window@2:
; Line 215
	push	-16					; fffffff0H
	mov	eax, DWORD PTR _pWindowStyle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoGetWindowStyle@CBaseControlWindow@@QAEJPAJJ@Z ; CBaseControlWindow::DoGetWindowStyle
$LN6@get_Window@2:
; Line 216
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?get_WindowStyle@CBaseControlWindow@@UAGJPAJ@Z ENDP	; CBaseControlWindow::get_WindowStyle
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__MapWindowPoints@16:PROC
EXTRN	__imp__GetParent@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__GetSystemMetrics@4:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__SetWindowLongW@12:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__IsWindowVisible@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WindowFlags$ = -40					; size = 4
_bVisible$ = -36					; size = 4
_WindowRect$ = -28					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Style$ = 8						; size = 4
_WindowLong$ = 12					; size = 4
?DoSetWindowStyle@CBaseControlWindow@@QAEJJJ@Z PROC	; CBaseControlWindow::DoSetWindowStyle
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 231
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__IsWindowVisible@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bVisible$[ebp], eax
; Line 232
	mov	esi, esp
	lea	edx, DWORD PTR _WindowRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@DoSetWindo
	push	232					; 000000e8H
	push	OFFSET $SG79953
	push	OFFSET $SG79954
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@DoSetWindo:
; Line 235
	mov	esi, esp
	mov	edx, DWORD PTR _Style$[ebp]
	push	edx
	mov	eax, DWORD PTR _WindowLong$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__SetWindowLongW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 236
	mov	DWORD PTR _WindowFlags$[ebp], 112	; 00000070H
; Line 237
	mov	eax, DWORD PTR _WindowFlags$[ebp]
	or	eax, 7
	mov	DWORD PTR _WindowFlags$[ebp], eax
; Line 241
	cmp	DWORD PTR _bVisible$[ebp], 1
	jne	SHORT $LN2@DoSetWindo
; Line 246
	mov	esi, esp
	mov	ecx, DWORD PTR _WindowFlags$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 248
	xor	eax, eax
	jmp	$LN4@DoSetWindo
$LN2@DoSetWindo:
; Line 258
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _WindowRect$[ebp+12]
	sub	ecx, DWORD PTR _WindowRect$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _WindowRect$[ebp+8]
	sub	edx, DWORD PTR _WindowRect$[ebp]
	push	edx
	mov	edi, esp
	push	1
	call	DWORD PTR __imp__GetSystemMetrics@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edi, esp
	push	0
	call	DWORD PTR __imp__GetSystemMetrics@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__MoveWindow@24
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 265
	mov	esi, esp
	mov	edx, DWORD PTR _WindowFlags$[ebp]
	push	edx
	push	0
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 267
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 269
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetParent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@DoSetWindo
; Line 271
	mov	esi, esp
	push	2
	lea	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetParent@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	0
	call	DWORD PTR __imp__MapWindowPoints@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DoSetWindo:
; Line 279
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _WindowRect$[ebp+12]
	sub	eax, DWORD PTR _WindowRect$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _WindowRect$[ebp+8]
	sub	ecx, DWORD PTR _WindowRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _WindowRect$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__MoveWindow@24
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 281
	xor	eax, eax
$LN4@DoSetWindo:
; Line 282
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DoSetWindo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN8@DoSetWindo:
	DD	1
	DD	$LN7@DoSetWindo
$LN7@DoSetWindo:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN6@DoSetWindo
$LN6@DoSetWindo:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?DoSetWindowStyle@CBaseControlWindow@@QAEJJJ@Z ENDP	; CBaseControlWindow::DoSetWindowStyle
; Function compile flags: /Odtp /RTCsu
_this$ = -4						; size = 4
_pStyle$ = 8						; size = 4
_WindowLong$ = 12					; size = 4
?DoGetWindowStyle@CBaseControlWindow@@QAEJPAJJ@Z PROC	; CBaseControlWindow::DoGetWindowStyle
; _this$ = ecx
; Line 288
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 289
	mov	esi, esp
	mov	eax, DWORD PTR _WindowLong$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _pStyle$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 290
	xor	eax, eax
; Line 291
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?DoGetWindowStyle@CBaseControlWindow@@QAEJPAJJ@Z ENDP	; CBaseControlWindow::DoGetWindowStyle
_TEXT	ENDS
EXTRN	?DoShowWindow@CBaseWindow@@QAEJJ@Z:PROC		; CBaseWindow::DoShowWindow
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_WindowState$ = 12					; size = 4
?put_WindowState@CBaseControlWindow@@UAGJJ@Z PROC	; CBaseControlWindow::put_WindowState
; Line 300
	push	ebp
	mov	ebp, esp
; Line 301
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@put_Window@3
	mov	ecx, OFFSET $SG79975
	test	ecx, ecx
	je	SHORT $LN3@put_Window@3
	push	301					; 0000012dH
	push	OFFSET $SG79976
	push	OFFSET $SG79977
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@put_Window@3:
	jmp	SHORT $LN2@put_Window@3
$LN4@put_Window@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@put_Window@3
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN5@put_Window@3
$LN2@put_Window@3:
; Line 302
	mov	eax, DWORD PTR _WindowState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?DoShowWindow@CBaseWindow@@QAEJJ@Z	; CBaseWindow::DoShowWindow
; Line 303
	xor	eax, eax
$LN5@put_Window@3:
; Line 304
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?put_WindowState@CBaseControlWindow@@UAGJJ@Z ENDP	; CBaseControlWindow::put_WindowState
_TEXT	ENDS
EXTRN	__imp__IsZoomed@4:PROC
EXTRN	__imp__IsIconic@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pWindowState$ = 12					; size = 4
?get_WindowState@CBaseControlWindow@@UAGJPAJ@Z PROC	; CBaseControlWindow::get_WindowState
; Line 314
	push	ebp
	mov	ebp, esp
	push	esi
; Line 315
	cmp	DWORD PTR _pWindowState$[ebp], 0
	jne	SHORT $LN12@get_Window@3
	mov	eax, -2147467261			; 80004003H
	jmp	$LN13@get_Window@3
$LN12@get_Window@3:
; Line 316
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN11@get_Window@3
	mov	ecx, OFFSET $SG79989
	test	ecx, ecx
	je	SHORT $LN10@get_Window@3
	push	316					; 0000013cH
	push	OFFSET $SG79990
	push	OFFSET $SG79991
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN10@get_Window@3:
	jmp	SHORT $LN9@get_Window@3
$LN11@get_Window@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN9@get_Window@3
	mov	eax, -2147220983			; 80040209H
	jmp	$LN13@get_Window@3
$LN9@get_Window@3:
; Line 317
	cmp	DWORD PTR _pWindowState$[ebp], 0
	jne	SHORT $LN7@get_Window@3
	push	317					; 0000013dH
	push	OFFSET $SG79996
	push	OFFSET $SG79997
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@get_Window@3:
; Line 318
	mov	eax, DWORD PTR _pWindowState$[ebp]
	mov	DWORD PTR [eax], 0
; Line 324
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__IsWindowVisible@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@get_Window@3
; Line 327
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__IsIconic@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@get_Window@3
; Line 328
	mov	edx, DWORD PTR _pWindowState$[ebp]
	mov	eax, DWORD PTR [edx]
	or	eax, 6
	mov	ecx, DWORD PTR _pWindowState$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN4@get_Window@3
$LN5@get_Window@3:
; Line 332
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN3@get_Window@3
; Line 333
	mov	ecx, DWORD PTR _pWindowState$[ebp]
	mov	edx, DWORD PTR [ecx]
	or	edx, 3
	mov	eax, DWORD PTR _pWindowState$[ebp]
	mov	DWORD PTR [eax], edx
; Line 337
	jmp	SHORT $LN4@get_Window@3
$LN3@get_Window@3:
; Line 338
	mov	ecx, DWORD PTR _pWindowState$[ebp]
	mov	edx, DWORD PTR [ecx]
	or	edx, 5
	mov	eax, DWORD PTR _pWindowState$[ebp]
	mov	DWORD PTR [eax], edx
$LN4@get_Window@3:
; Line 341
	jmp	SHORT $LN1@get_Window@3
$LN6@get_Window@3:
; Line 342
	mov	ecx, DWORD PTR _pWindowState$[ebp]
	mov	edx, DWORD PTR _pWindowState$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
$LN1@get_Window@3:
; Line 344
	xor	eax, eax
$LN13@get_Window@3:
; Line 345
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?get_WindowState@CBaseControlWindow@@UAGJPAJ@Z ENDP	; CBaseControlWindow::get_WindowState
_TEXT	ENDS
PUBLIC	??1CAutoLock@@QAE@XZ				; CAutoLock::~CAutoLock
PUBLIC	??0CAutoLock@@QAE@PAVCCritSec@@@Z		; CAutoLock::CAutoLock
EXTRN	?PaintWindow@CBaseWindow@@QAEXH@Z:PROC		; CBaseWindow::PaintWindow
xdata$x	SEGMENT
__unwindtable$?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z$0
__ehfuncinfo$?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T81917 = -32						; size = 4
$T81916 = -28						; size = 4
_cWindowLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_BackgroundPalette$ = 12				; size = 4
?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z PROC	; CBaseControlWindow::put_BackgroundPalette
; Line 355
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 356
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN6@put_Backgr
	mov	ecx, OFFSET $SG80010
	test	ecx, ecx
	je	SHORT $LN5@put_Backgr
	push	356					; 00000164H
	push	OFFSET $SG80011
	push	OFFSET $SG80012
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_Backgr:
	jmp	SHORT $LN4@put_Backgr
$LN6@put_Backgr:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_Backgr
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@put_Backgr
$LN4@put_Backgr:
; Line 357
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	lea	ecx, DWORD PTR _cWindowLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 361
	cmp	DWORD PTR _BackgroundPalette$[ebp], -1
	je	SHORT $LN2@put_Backgr
; Line 362
	cmp	DWORD PTR _BackgroundPalette$[ebp], 0
	je	SHORT $LN2@put_Backgr
; Line 363
	mov	DWORD PTR $T81916[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cWindowLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T81916[ebp]
	jmp	SHORT $LN7@put_Backgr
$LN2@put_Backgr:
; Line 369
	xor	ecx, ecx
	cmp	DWORD PTR _BackgroundPalette$[ebp], -1
	sete	cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+89], cl
; Line 370
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	DWORD PTR __imp__PostMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 371
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?PaintWindow@CBaseWindow@@QAEXH@Z	; CBaseWindow::PaintWindow
; Line 373
	mov	DWORD PTR $T81917[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cWindowLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T81917[ebp]
$LN7@put_Backgr:
; Line 374
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@put_Backgr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN13@put_Backgr:
	DD	1
	DD	$LN12@put_Backgr
$LN12@put_Backgr:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@put_Backgr
$LN10@put_Backgr:
	DB	99					; 00000063H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z$0:
	lea	ecx, DWORD PTR _cWindowLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?put_BackgroundPalette@CBaseControlWindow@@UAGJJ@Z ENDP	; CBaseControlWindow::put_BackgroundPalette
EXTRN	?Lock@CCritSec@@QAEXXZ:PROC			; CCritSec::Lock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CAutoLock@@QAE@PAVCCritSec@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_plock$ = 8						; size = 4
??0CAutoLock@@QAE@PAVCCritSec@@@Z PROC			; CAutoLock::CAutoLock, COMDAT
; _this$ = ecx
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\wxutil.h
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _plock$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 97
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Lock@CCritSec@@QAEXXZ			; CCritSec::Lock
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CAutoLock@@QAE@PAVCCritSec@@@Z ENDP			; CAutoLock::CAutoLock
_TEXT	ENDS
EXTRN	?Unlock@CCritSec@@QAEXXZ:PROC			; CCritSec::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAutoLock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAutoLock@@QAE@XZ PROC				; CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx
; Line 100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Unlock@CCritSec@@QAEXXZ		; CCritSec::Unlock
; Line 102
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAutoLock@@QAE@XZ ENDP				; CAutoLock::~CAutoLock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
$T81931 = -16						; size = 4
_cWindowLock$ = -8					; size = 4
_this$ = 8						; size = 4
_pBackgroundPalette$ = 12				; size = 4
?get_BackgroundPalette@CBaseControlWindow@@UAGJPAJ@Z PROC ; CBaseControlWindow::get_BackgroundPalette
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\winctrl.cpp
; Line 381
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 382
	cmp	DWORD PTR _pBackgroundPalette$[ebp], 0
	jne	SHORT $LN5@get_Backgr
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@get_Backgr
$LN5@get_Backgr:
; Line 383
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@get_Backgr
	mov	ecx, OFFSET $SG80030
	test	ecx, ecx
	je	SHORT $LN3@get_Backgr
	push	383					; 0000017fH
	push	OFFSET $SG80031
	push	OFFSET $SG80032
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Backgr:
	jmp	SHORT $LN2@get_Backgr
$LN4@get_Backgr:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Backgr
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Backgr
$LN2@get_Backgr:
; Line 384
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	lea	ecx, DWORD PTR _cWindowLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
; Line 388
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+89]
	sub	edx, 1
	neg	edx
	sbb	edx, edx
	neg	edx
	sub	edx, 1
	mov	eax, DWORD PTR _pBackgroundPalette$[ebp]
	mov	DWORD PTR [eax], edx
; Line 389
	mov	DWORD PTR $T81931[ebp], 0
	lea	ecx, DWORD PTR _cWindowLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T81931[ebp]
$LN6@get_Backgr:
; Line 390
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@get_Backgr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN11@get_Backgr:
	DD	1
	DD	$LN10@get_Backgr
$LN10@get_Backgr:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@get_Backgr
$LN9@get_Backgr:
	DB	99					; 00000063H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?get_BackgroundPalette@CBaseControlWindow@@UAGJPAJ@Z ENDP ; CBaseControlWindow::get_BackgroundPalette
; Function compile flags: /Odtp /RTCsu
_Mode$ = -4						; size = 4
_this$ = 8						; size = 4
_Visible$ = 12						; size = 4
?put_Visible@CBaseControlWindow@@UAGJJ@Z PROC		; CBaseControlWindow::put_Visible
; Line 396
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 397
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN6@put_Visibl
	mov	ecx, OFFSET $SG80044
	test	ecx, ecx
	je	SHORT $LN5@put_Visibl
	push	397					; 0000018dH
	push	OFFSET $SG80045
	push	OFFSET $SG80046
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_Visibl:
	jmp	SHORT $LN4@put_Visibl
$LN6@put_Visibl:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_Visibl
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@put_Visibl
$LN4@put_Visibl:
; Line 401
	cmp	DWORD PTR _Visible$[ebp], -1
	je	SHORT $LN2@put_Visibl
; Line 402
	cmp	DWORD PTR _Visible$[ebp], 0
	je	SHORT $LN2@put_Visibl
; Line 403
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN7@put_Visibl
$LN2@put_Visibl:
; Line 409
	xor	eax, eax
	cmp	DWORD PTR _Visible$[ebp], -1
	sete	al
	mov	DWORD PTR _Mode$[ebp], eax
; Line 410
	mov	ecx, DWORD PTR _Mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?DoShowWindow@CBaseWindow@@QAEJJ@Z	; CBaseWindow::DoShowWindow
; Line 411
	xor	eax, eax
$LN7@put_Visibl:
; Line 412
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?put_Visible@CBaseControlWindow@@UAGJJ@Z ENDP		; CBaseControlWindow::put_Visible
; Function compile flags: /Odtp /RTCsu
_Mode$ = -4						; size = 4
_this$ = 8						; size = 4
_pVisible$ = 12						; size = 4
?get_Visible@CBaseControlWindow@@UAGJPAJ@Z PROC		; CBaseControlWindow::get_Visible
; Line 418
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 419
	cmp	DWORD PTR _pVisible$[ebp], 0
	jne	SHORT $LN5@get_Visibl
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@get_Visibl
$LN5@get_Visibl:
; Line 420
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@get_Visibl
	mov	ecx, OFFSET $SG80062
	test	ecx, ecx
	je	SHORT $LN3@get_Visibl
	push	420					; 000001a4H
	push	OFFSET $SG80063
	push	OFFSET $SG80064
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Visibl:
	jmp	SHORT $LN2@get_Visibl
$LN4@get_Visibl:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Visibl
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Visibl
$LN2@get_Visibl:
; Line 426
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__IsWindowVisible@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Mode$[ebp], eax
; Line 427
	mov	edx, DWORD PTR _Mode$[ebp]
	sub	edx, 1
	neg	edx
	sbb	edx, edx
	neg	edx
	sub	edx, 1
	mov	eax, DWORD PTR _pVisible$[ebp]
	mov	DWORD PTR [eax], edx
; Line 428
	xor	eax, eax
$LN6@get_Visibl:
; Line 429
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?get_Visible@CBaseControlWindow@@UAGJPAJ@Z ENDP		; CBaseControlWindow::get_Visible
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WindowFlags$ = -36					; size = 4
_WindowRect$ = -28					; size = 16
_bSuccess$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_Left$ = 12						; size = 4
?put_Left@CBaseControlWindow@@UAGJJ@Z PROC		; CBaseControlWindow::put_Left
; Line 437
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN7@put_Left
	mov	ecx, OFFSET $SG80075
	test	ecx, ecx
	je	SHORT $LN6@put_Left
	push	438					; 000001b6H
	push	OFFSET $SG80076
	push	OFFSET $SG80077
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@put_Left:
	jmp	SHORT $LN5@put_Left
$LN7@put_Left:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN5@put_Left
	mov	eax, -2147220983			; 80040209H
	jmp	$LN8@put_Left
$LN5@put_Left:
; Line 443
	mov	esi, esp
	lea	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@put_Left
	push	443					; 000001bbH
	push	OFFSET $SG80084
	push	OFFSET $SG80085
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@put_Left:
; Line 445
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__GetParent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@put_Left
; Line 447
	mov	esi, esp
	push	2
	lea	edx, DWORD PTR _WindowRect$[ebp]
	push	edx
	mov	edi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__GetParent@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	0
	call	DWORD PTR __imp__MapWindowPoints@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@put_Left:
; Line 454
	mov	edx, DWORD PTR _WindowRect$[ebp+12]
	sub	edx, DWORD PTR _WindowRect$[ebp+4]
	mov	DWORD PTR _WindowRect$[ebp+12], edx
; Line 455
	mov	eax, DWORD PTR _WindowRect$[ebp+8]
	sub	eax, DWORD PTR _WindowRect$[ebp]
	mov	DWORD PTR _WindowRect$[ebp+8], eax
; Line 456
	mov	DWORD PTR _WindowFlags$[ebp], 52	; 00000034H
; Line 464
	mov	esi, esp
	mov	ecx, DWORD PTR _WindowFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _WindowRect$[ebp+12]
	push	edx
	mov	eax, DWORD PTR _WindowRect$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _WindowRect$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _Left$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bSuccess$[ebp], eax
; Line 466
	cmp	DWORD PTR _bSuccess$[ebp], 0
	jne	SHORT $LN1@put_Left
; Line 467
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN8@put_Left
$LN1@put_Left:
; Line 469
	xor	eax, eax
$LN8@put_Left:
; Line 470
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@put_Left
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN12@put_Left:
	DD	1
	DD	$LN11@put_Left
$LN11@put_Left:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN10@put_Left
$LN10@put_Left:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?put_Left@CBaseControlWindow@@UAGJJ@Z ENDP		; CBaseControlWindow::put_Left
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WindowRect$ = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pLeft$ = 12						; size = 4
?get_Left@CBaseControlWindow@@UAGJPAJ@Z PROC		; CBaseControlWindow::get_Left
; Line 476
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 477
	cmp	DWORD PTR _pLeft$[ebp], 0
	jne	SHORT $LN6@get_Left
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@get_Left
$LN6@get_Left:
; Line 478
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN5@get_Left
	mov	ecx, OFFSET $SG80101
	test	ecx, ecx
	je	SHORT $LN4@get_Left
	push	478					; 000001deH
	push	OFFSET $SG80102
	push	OFFSET $SG80103
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@get_Left:
	jmp	SHORT $LN3@get_Left
$LN5@get_Left:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@get_Left
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@get_Left
$LN3@get_Left:
; Line 481
	mov	esi, esp
	lea	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@get_Left
	push	481					; 000001e1H
	push	OFFSET $SG80109
	push	OFFSET $SG80110
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@get_Left:
; Line 482
	mov	eax, DWORD PTR _pLeft$[ebp]
	mov	ecx, DWORD PTR _WindowRect$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 483
	xor	eax, eax
$LN7@get_Left:
; Line 484
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@get_Left
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN11@get_Left:
	DD	1
	DD	$LN10@get_Left
$LN10@get_Left:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN9@get_Left
$LN9@get_Left:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?get_Left@CBaseControlWindow@@UAGJPAJ@Z ENDP		; CBaseControlWindow::get_Left
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WindowFlags$ = -36					; size = 4
_WindowRect$ = -28					; size = 16
_bSuccess$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_Width$ = 12						; size = 4
?put_Width@CBaseControlWindow@@UAGJJ@Z PROC		; CBaseControlWindow::put_Width
; Line 493
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 494
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN7@put_Width
	mov	ecx, OFFSET $SG80117
	test	ecx, ecx
	je	SHORT $LN6@put_Width
	push	494					; 000001eeH
	push	OFFSET $SG80118
	push	OFFSET $SG80119
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@put_Width:
	jmp	SHORT $LN5@put_Width
$LN7@put_Width:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN5@put_Width
	mov	eax, -2147220983			; 80040209H
	jmp	$LN8@put_Width
$LN5@put_Width:
; Line 502
	mov	esi, esp
	lea	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@put_Width
	push	502					; 000001f6H
	push	OFFSET $SG80126
	push	OFFSET $SG80127
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@put_Width:
; Line 504
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__GetParent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@put_Width
; Line 506
	mov	esi, esp
	push	2
	lea	edx, DWORD PTR _WindowRect$[ebp]
	push	edx
	mov	edi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__GetParent@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	0
	call	DWORD PTR __imp__MapWindowPoints@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@put_Width:
; Line 509
	mov	edx, DWORD PTR _WindowRect$[ebp+12]
	sub	edx, DWORD PTR _WindowRect$[ebp+4]
	mov	DWORD PTR _WindowRect$[ebp+12], edx
; Line 510
	mov	DWORD PTR _WindowFlags$[ebp], 52	; 00000034H
; Line 522
	mov	esi, esp
	mov	eax, DWORD PTR _WindowFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _WindowRect$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _Width$[ebp]
	push	edx
	mov	eax, DWORD PTR _WindowRect$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _WindowRect$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bSuccess$[ebp], eax
; Line 524
	cmp	DWORD PTR _bSuccess$[ebp], 0
	jne	SHORT $LN1@put_Width
; Line 525
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN8@put_Width
$LN1@put_Width:
; Line 527
	xor	eax, eax
$LN8@put_Width:
; Line 528
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@put_Width
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@put_Width:
	DD	1
	DD	$LN11@put_Width
$LN11@put_Width:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN10@put_Width
$LN10@put_Width:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?put_Width@CBaseControlWindow@@UAGJJ@Z ENDP		; CBaseControlWindow::put_Width
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WindowRect$ = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pWidth$ = 12						; size = 4
?get_Width@CBaseControlWindow@@UAGJPAJ@Z PROC		; CBaseControlWindow::get_Width
; Line 534
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 535
	cmp	DWORD PTR _pWidth$[ebp], 0
	jne	SHORT $LN6@get_Width
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@get_Width
$LN6@get_Width:
; Line 536
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN5@get_Width
	mov	ecx, OFFSET $SG80143
	test	ecx, ecx
	je	SHORT $LN4@get_Width
	push	536					; 00000218H
	push	OFFSET $SG80144
	push	OFFSET $SG80145
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@get_Width:
	jmp	SHORT $LN3@get_Width
$LN5@get_Width:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@get_Width
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@get_Width
$LN3@get_Width:
; Line 539
	mov	esi, esp
	lea	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@get_Width
	push	539					; 0000021bH
	push	OFFSET $SG80151
	push	OFFSET $SG80152
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@get_Width:
; Line 540
	mov	eax, DWORD PTR _WindowRect$[ebp+8]
	sub	eax, DWORD PTR _WindowRect$[ebp]
	mov	ecx, DWORD PTR _pWidth$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 541
	xor	eax, eax
$LN7@get_Width:
; Line 542
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@get_Width
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN11@get_Width:
	DD	1
	DD	$LN10@get_Width
$LN10@get_Width:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN9@get_Width
$LN9@get_Width:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?get_Width@CBaseControlWindow@@UAGJPAJ@Z ENDP		; CBaseControlWindow::get_Width
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WindowFlags$ = -36					; size = 4
_WindowRect$ = -28					; size = 16
_bSuccess$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_Top$ = 12						; size = 4
?put_Top@CBaseControlWindow@@UAGJJ@Z PROC		; CBaseControlWindow::put_Top
; Line 550
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 551
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN7@put_Top
	mov	ecx, OFFSET $SG80159
	test	ecx, ecx
	je	SHORT $LN6@put_Top
	push	551					; 00000227H
	push	OFFSET $SG80160
	push	OFFSET $SG80161
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@put_Top:
	jmp	SHORT $LN5@put_Top
$LN7@put_Top:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN5@put_Top
	mov	eax, -2147220983			; 80040209H
	jmp	$LN8@put_Top
$LN5@put_Top:
; Line 556
	mov	esi, esp
	lea	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@put_Top
	push	556					; 0000022cH
	push	OFFSET $SG80168
	push	OFFSET $SG80169
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@put_Top:
; Line 558
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__GetParent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@put_Top
; Line 560
	mov	esi, esp
	push	2
	lea	edx, DWORD PTR _WindowRect$[ebp]
	push	edx
	mov	edi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__GetParent@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	0
	call	DWORD PTR __imp__MapWindowPoints@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@put_Top:
; Line 567
	mov	edx, DWORD PTR _WindowRect$[ebp+12]
	sub	edx, DWORD PTR _WindowRect$[ebp+4]
	mov	DWORD PTR _WindowRect$[ebp+12], edx
; Line 568
	mov	eax, DWORD PTR _WindowRect$[ebp+8]
	sub	eax, DWORD PTR _WindowRect$[ebp]
	mov	DWORD PTR _WindowRect$[ebp+8], eax
; Line 569
	mov	DWORD PTR _WindowFlags$[ebp], 52	; 00000034H
; Line 577
	mov	esi, esp
	mov	ecx, DWORD PTR _WindowFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _WindowRect$[ebp+12]
	push	edx
	mov	eax, DWORD PTR _WindowRect$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _Top$[ebp]
	push	ecx
	mov	edx, DWORD PTR _WindowRect$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bSuccess$[ebp], eax
; Line 579
	cmp	DWORD PTR _bSuccess$[ebp], 0
	jne	SHORT $LN1@put_Top
; Line 580
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN8@put_Top
$LN1@put_Top:
; Line 582
	xor	eax, eax
$LN8@put_Top:
; Line 583
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@put_Top
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN12@put_Top:
	DD	1
	DD	$LN11@put_Top
$LN11@put_Top:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN10@put_Top
$LN10@put_Top:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?put_Top@CBaseControlWindow@@UAGJJ@Z ENDP		; CBaseControlWindow::put_Top
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WindowRect$ = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pTop$ = 12						; size = 4
?get_Top@CBaseControlWindow@@UAGJPAJ@Z PROC		; CBaseControlWindow::get_Top
; Line 589
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 590
	cmp	DWORD PTR _pTop$[ebp], 0
	jne	SHORT $LN6@get_Top
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@get_Top
$LN6@get_Top:
; Line 591
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN5@get_Top
	mov	ecx, OFFSET $SG80185
	test	ecx, ecx
	je	SHORT $LN4@get_Top
	push	591					; 0000024fH
	push	OFFSET $SG80186
	push	OFFSET $SG80187
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@get_Top:
	jmp	SHORT $LN3@get_Top
$LN5@get_Top:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@get_Top
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@get_Top
$LN3@get_Top:
; Line 594
	mov	esi, esp
	lea	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@get_Top
	push	594					; 00000252H
	push	OFFSET $SG80193
	push	OFFSET $SG80194
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@get_Top:
; Line 595
	mov	eax, DWORD PTR _pTop$[ebp]
	mov	ecx, DWORD PTR _WindowRect$[ebp+4]
	mov	DWORD PTR [eax], ecx
; Line 596
	xor	eax, eax
$LN7@get_Top:
; Line 597
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@get_Top
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN11@get_Top:
	DD	1
	DD	$LN10@get_Top
$LN10@get_Top:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN9@get_Top
$LN9@get_Top:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?get_Top@CBaseControlWindow@@UAGJPAJ@Z ENDP		; CBaseControlWindow::get_Top
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WindowFlags$ = -36					; size = 4
_WindowRect$ = -28					; size = 16
_bSuccess$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_Height$ = 12						; size = 4
?put_Height@CBaseControlWindow@@UAGJJ@Z PROC		; CBaseControlWindow::put_Height
; Line 606
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 607
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN7@put_Height
	mov	ecx, OFFSET $SG80201
	test	ecx, ecx
	je	SHORT $LN6@put_Height
	push	607					; 0000025fH
	push	OFFSET $SG80202
	push	OFFSET $SG80203
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@put_Height:
	jmp	SHORT $LN5@put_Height
$LN7@put_Height:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN5@put_Height
	mov	eax, -2147220983			; 80040209H
	jmp	$LN8@put_Height
$LN5@put_Height:
; Line 615
	mov	esi, esp
	lea	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@put_Height
	push	615					; 00000267H
	push	OFFSET $SG80210
	push	OFFSET $SG80211
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@put_Height:
; Line 617
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__GetParent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@put_Height
; Line 619
	mov	esi, esp
	push	2
	lea	edx, DWORD PTR _WindowRect$[ebp]
	push	edx
	mov	edi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__GetParent@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	0
	call	DWORD PTR __imp__MapWindowPoints@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@put_Height:
; Line 622
	mov	edx, DWORD PTR _WindowRect$[ebp+8]
	sub	edx, DWORD PTR _WindowRect$[ebp]
	mov	DWORD PTR _WindowRect$[ebp+8], edx
; Line 623
	mov	DWORD PTR _WindowFlags$[ebp], 52	; 00000034H
; Line 631
	mov	esi, esp
	mov	eax, DWORD PTR _WindowFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _WindowRect$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _WindowRect$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _WindowRect$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bSuccess$[ebp], eax
; Line 633
	cmp	DWORD PTR _bSuccess$[ebp], 0
	jne	SHORT $LN1@put_Height
; Line 634
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN8@put_Height
$LN1@put_Height:
; Line 636
	xor	eax, eax
$LN8@put_Height:
; Line 637
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@put_Height
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@put_Height:
	DD	1
	DD	$LN11@put_Height
$LN11@put_Height:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN10@put_Height
$LN10@put_Height:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?put_Height@CBaseControlWindow@@UAGJJ@Z ENDP		; CBaseControlWindow::put_Height
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WindowRect$ = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pHeight$ = 12						; size = 4
?get_Height@CBaseControlWindow@@UAGJPAJ@Z PROC		; CBaseControlWindow::get_Height
; Line 643
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 644
	cmp	DWORD PTR _pHeight$[ebp], 0
	jne	SHORT $LN6@get_Height
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@get_Height
$LN6@get_Height:
; Line 645
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN5@get_Height
	mov	ecx, OFFSET $SG80227
	test	ecx, ecx
	je	SHORT $LN4@get_Height
	push	645					; 00000285H
	push	OFFSET $SG80228
	push	OFFSET $SG80229
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@get_Height:
	jmp	SHORT $LN3@get_Height
$LN5@get_Height:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@get_Height
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@get_Height
$LN3@get_Height:
; Line 648
	mov	esi, esp
	lea	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@get_Height
	push	648					; 00000288H
	push	OFFSET $SG80235
	push	OFFSET $SG80236
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@get_Height:
; Line 649
	mov	eax, DWORD PTR _WindowRect$[ebp+12]
	sub	eax, DWORD PTR _WindowRect$[ebp+4]
	mov	ecx, DWORD PTR _pHeight$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 650
	xor	eax, eax
$LN7@get_Height:
; Line 651
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@get_Height
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN11@get_Height:
	DD	1
	DD	$LN10@get_Height
$LN10@get_Height:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN9@get_Height
$LN9@get_Height:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?get_Height@CBaseControlWindow@@UAGJPAJ@Z ENDP		; CBaseControlWindow::get_Height
_TEXT	ENDS
EXTRN	__imp__SetParent@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_Style$ = -8						; size = 4
_hwndParent$ = -4					; size = 4
_this$ = 8						; size = 4
_Owner$ = 12						; size = 4
?put_Owner@CBaseControlWindow@@UAGJJ@Z PROC		; CBaseControlWindow::put_Owner
; Line 666
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 669
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN6@put_Owner
	mov	ecx, OFFSET $SG80243
	test	ecx, ecx
	je	SHORT $LN5@put_Owner
	push	669					; 0000029dH
	push	OFFSET $SG80244
	push	OFFSET $SG80245
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_Owner:
	jmp	SHORT $LN4@put_Owner
$LN6@put_Owner:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_Owner
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@put_Owner
$LN4@put_Owner:
; Line 670
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Owner$[ebp]
	mov	DWORD PTR [eax+192], ecx
; Line 671
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	DWORD PTR _hwndParent$[ebp], eax
; Line 675
	mov	esi, esp
	push	-16					; fffffff0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Style$[ebp], eax
; Line 676
	cmp	DWORD PTR _Owner$[ebp], 0
	jne	SHORT $LN2@put_Owner
; Line 677
	mov	eax, DWORD PTR _Style$[ebp]
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR _Style$[ebp], eax
; Line 678
	jmp	SHORT $LN1@put_Owner
$LN2@put_Owner:
; Line 679
	mov	ecx, DWORD PTR _Style$[ebp]
	or	ecx, 1073741824				; 40000000H
	mov	DWORD PTR _Style$[ebp], ecx
$LN1@put_Owner:
; Line 681
	mov	esi, esp
	mov	edx, DWORD PTR _Style$[ebp]
	push	edx
	push	-16					; fffffff0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__SetWindowLongW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 685
	mov	esi, esp
	mov	edx, DWORD PTR _hwndParent$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__SetParent@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 687
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?PaintWindow@CBaseWindow@@QAEXH@Z	; CBaseWindow::PaintWindow
; Line 688
	mov	edx, DWORD PTR _hwndParent$[ebp]
	push	edx
	push	OFFSET $SG80254
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 690
	xor	eax, eax
$LN7@put_Owner:
; Line 691
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?put_Owner@CBaseControlWindow@@UAGJJ@Z ENDP		; CBaseControlWindow::put_Owner
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_Owner$ = 12						; size = 4
?get_Owner@CBaseControlWindow@@UAGJPAJ@Z PROC		; CBaseControlWindow::get_Owner
; Line 701
	push	ebp
	mov	ebp, esp
; Line 702
	cmp	DWORD PTR _Owner$[ebp], 0
	jne	SHORT $LN5@get_Owner
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@get_Owner
$LN5@get_Owner:
; Line 703
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@get_Owner
	mov	ecx, OFFSET $SG80263
	test	ecx, ecx
	je	SHORT $LN3@get_Owner
	push	703					; 000002bfH
	push	OFFSET $SG80264
	push	OFFSET $SG80265
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Owner:
	jmp	SHORT $LN2@get_Owner
$LN4@get_Owner:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Owner
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Owner
$LN2@get_Owner:
; Line 704
	mov	eax, DWORD PTR _Owner$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	mov	DWORD PTR [eax], edx
; Line 705
	xor	eax, eax
$LN6@get_Owner:
; Line 706
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?get_Owner@CBaseControlWindow@@UAGJPAJ@Z ENDP		; CBaseControlWindow::get_Owner
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_Drain$ = 12						; size = 4
?put_MessageDrain@CBaseControlWindow@@UAGJJ@Z PROC	; CBaseControlWindow::put_MessageDrain
; Line 715
	push	ebp
	mov	ebp, esp
; Line 718
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@put_Messag
	mov	ecx, OFFSET $SG80276
	test	ecx, ecx
	je	SHORT $LN3@put_Messag
	push	718					; 000002ceH
	push	OFFSET $SG80277
	push	OFFSET $SG80278
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@put_Messag:
	jmp	SHORT $LN2@put_Messag
$LN4@put_Messag:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@put_Messag
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN5@put_Messag
$LN2@put_Messag:
; Line 719
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Drain$[ebp]
	mov	DWORD PTR [eax+196], ecx
; Line 720
	xor	eax, eax
$LN5@put_Messag:
; Line 721
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?put_MessageDrain@CBaseControlWindow@@UAGJJ@Z ENDP	; CBaseControlWindow::put_MessageDrain
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_Drain$ = 12						; size = 4
?get_MessageDrain@CBaseControlWindow@@UAGJPAJ@Z PROC	; CBaseControlWindow::get_MessageDrain
; Line 727
	push	ebp
	mov	ebp, esp
; Line 728
	cmp	DWORD PTR _Drain$[ebp], 0
	jne	SHORT $LN5@get_Messag
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@get_Messag
$LN5@get_Messag:
; Line 729
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@get_Messag
	mov	ecx, OFFSET $SG80291
	test	ecx, ecx
	je	SHORT $LN3@get_Messag
	push	729					; 000002d9H
	push	OFFSET $SG80292
	push	OFFSET $SG80293
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Messag:
	jmp	SHORT $LN2@get_Messag
$LN4@get_Messag:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Messag
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Messag
$LN2@get_Messag:
; Line 730
	mov	eax, DWORD PTR _Drain$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	mov	DWORD PTR [eax], edx
; Line 731
	xor	eax, eax
$LN6@get_Messag:
; Line 732
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?get_MessageDrain@CBaseControlWindow@@UAGJPAJ@Z ENDP	; CBaseControlWindow::get_MessageDrain
; Function compile flags: /Odtp /RTCsu
tv74 = -4						; size = 4
_this$ = 8						; size = 4
_hwnd$ = 12						; size = 4
_uMsg$ = 16						; size = 4
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
?NotifyOwnerMessage@CBaseControlWindow@@UAGJJJJJ@Z PROC	; CBaseControlWindow::NotifyOwnerMessage
; Line 747
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 748
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN9@NotifyOwne
	mov	ecx, OFFSET $SG80307
	test	ecx, ecx
	je	SHORT $LN8@NotifyOwne
	push	748					; 000002ecH
	push	OFFSET $SG80308
	push	OFFSET $SG80309
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN8@NotifyOwne:
	jmp	SHORT $LN7@NotifyOwne
$LN9@NotifyOwne:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN7@NotifyOwne
	mov	eax, -2147220983			; 80040209H
	jmp	$LN10@NotifyOwne
$LN7@NotifyOwne:
; Line 752
	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv74[ebp], eax
	cmp	DWORD PTR tv74[ebp], 28			; 0000001cH
	jg	SHORT $LN12@NotifyOwne
	cmp	DWORD PTR tv74[ebp], 27			; 0000001bH
	jge	SHORT $LN3@NotifyOwne
	cmp	DWORD PTR tv74[ebp], 3
	je	SHORT $LN1@NotifyOwne
	cmp	DWORD PTR tv74[ebp], 21			; 00000015H
	je	SHORT $LN3@NotifyOwne
	jmp	SHORT $LN4@NotifyOwne
$LN12@NotifyOwne:
	cmp	DWORD PTR tv74[ebp], 126		; 0000007eH
	je	SHORT $LN3@NotifyOwne
	cmp	DWORD PTR tv74[ebp], 782		; 0000030eH
	jle	SHORT $LN4@NotifyOwne
	cmp	DWORD PTR tv74[ebp], 785		; 00000311H
	jle	SHORT $LN3@NotifyOwne
	jmp	SHORT $LN4@NotifyOwne
$LN3@NotifyOwne:
; Line 764
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	jne	SHORT $LN2@NotifyOwne
; Line 765
	xor	eax, eax
	jmp	SHORT $LN10@NotifyOwne
$LN2@NotifyOwne:
; Line 767
	mov	esi, esp
	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uMsg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 768
	jmp	SHORT $LN4@NotifyOwne
$LN1@NotifyOwne:
; Line 775
	mov	esi, esp
	push	0
	push	0
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__PostMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@NotifyOwne:
; Line 778
	xor	eax, eax
$LN10@NotifyOwne:
; Line 779
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?NotifyOwnerMessage@CBaseControlWindow@@UAGJJJJJ@Z ENDP	; CBaseControlWindow::NotifyOwnerMessage
_TEXT	ENDS
EXTRN	?DoSetWindowForeground@CBaseWindow@@QAEXH@Z:PROC ; CBaseWindow::DoSetWindowForeground
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bFocus$ = -4						; size = 4
_this$ = 8						; size = 4
_Focus$ = 12						; size = 4
?SetWindowForeground@CBaseControlWindow@@UAGJJ@Z PROC	; CBaseControlWindow::SetWindowForeground
; Line 787
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 790
	cmp	DWORD PTR _Focus$[ebp], -1
	je	SHORT $LN6@SetWindowF
; Line 791
	cmp	DWORD PTR _Focus$[ebp], 0
	je	SHORT $LN6@SetWindowF
; Line 792
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN7@SetWindowF
$LN6@SetWindowF:
; Line 798
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@SetWindowF
	mov	ecx, OFFSET $SG80331
	test	ecx, ecx
	je	SHORT $LN3@SetWindowF
	push	798					; 0000031eH
	push	OFFSET $SG80332
	push	OFFSET $SG80333
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@SetWindowF:
	jmp	SHORT $LN2@SetWindowF
$LN4@SetWindowF:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@SetWindowF
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@SetWindowF
$LN2@SetWindowF:
; Line 799
	xor	eax, eax
	cmp	DWORD PTR _Focus$[ebp], -1
	sete	al
	mov	DWORD PTR _bFocus$[ebp], eax
; Line 800
	mov	ecx, DWORD PTR _bFocus$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?DoSetWindowForeground@CBaseWindow@@QAEXH@Z ; CBaseWindow::DoSetWindowForeground
; Line 802
	xor	eax, eax
$LN7@SetWindowF:
; Line 803
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetWindowForeground@CBaseControlWindow@@UAGJJ@Z ENDP	; CBaseControlWindow::SetWindowForeground
_TEXT	ENDS
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__IsWindow@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WindowFlags$ = -8					; size = 4
_bSuccess$ = -4						; size = 4
_this$ = 8						; size = 4
_Left$ = 12						; size = 4
_Top$ = 16						; size = 4
_Width$ = 20						; size = 4
_Height$ = 24						; size = 4
?SetWindowPosition@CBaseControlWindow@@UAGJJJJJ@Z PROC	; CBaseControlWindow::SetWindowPosition
; Line 813
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 814
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN7@SetWindowP
	mov	ecx, OFFSET $SG80347
	test	ecx, ecx
	je	SHORT $LN6@SetWindowP
	push	814					; 0000032eH
	push	OFFSET $SG80348
	push	OFFSET $SG80349
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@SetWindowP:
	jmp	SHORT $LN5@SetWindowP
$LN7@SetWindowP:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN5@SetWindowP
	mov	eax, -2147220983			; 80040209H
	jmp	$LN8@SetWindowP
$LN5@SetWindowP:
; Line 818
	mov	DWORD PTR _WindowFlags$[ebp], 52	; 00000034H
; Line 820
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__IsWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@SetWindowP
	push	820					; 00000334H
	push	OFFSET $SG80356
	push	OFFSET $SG80357
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@SetWindowP:
; Line 827
	mov	esi, esp
	mov	edx, DWORD PTR _WindowFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Top$[ebp]
	push	edx
	mov	eax, DWORD PTR _Left$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bSuccess$[ebp], eax
; Line 828
	cmp	DWORD PTR _bSuccess$[ebp], 0
	jne	SHORT $LN2@SetWindowP
	push	828					; 0000033cH
	push	OFFSET $SG80360
	push	OFFSET $SG80361
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@SetWindowP:
; Line 830
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET $SG80362
	push	1
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 832
	cmp	DWORD PTR _bSuccess$[ebp], 0
	jne	SHORT $LN1@SetWindowP
; Line 833
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN8@SetWindowP
$LN1@SetWindowP:
; Line 835
	xor	eax, eax
$LN8@SetWindowP:
; Line 836
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SetWindowPosition@CBaseControlWindow@@UAGJJJJJ@Z ENDP	; CBaseControlWindow::SetWindowPosition
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WindowRect$ = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pLeft$ = 12						; size = 4
_pTop$ = 16						; size = 4
_pWidth$ = 20						; size = 4
_pHeight$ = 24						; size = 4
?GetWindowPosition@CBaseControlWindow@@UAGJPAJ000@Z PROC ; CBaseControlWindow::GetWindowPosition
; Line 846
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 849
	cmp	DWORD PTR _pLeft$[ebp], 0
	jne	SHORT $LN9@GetWindowP
	mov	eax, -2147467261			; 80004003H
	jmp	$LN10@GetWindowP
$LN9@GetWindowP:
; Line 850
	cmp	DWORD PTR _pTop$[ebp], 0
	jne	SHORT $LN8@GetWindowP
	mov	eax, -2147467261			; 80004003H
	jmp	$LN10@GetWindowP
$LN8@GetWindowP:
; Line 851
	cmp	DWORD PTR _pWidth$[ebp], 0
	jne	SHORT $LN7@GetWindowP
	mov	eax, -2147467261			; 80004003H
	jmp	$LN10@GetWindowP
$LN7@GetWindowP:
; Line 852
	cmp	DWORD PTR _pHeight$[ebp], 0
	jne	SHORT $LN6@GetWindowP
	mov	eax, -2147467261			; 80004003H
	jmp	$LN10@GetWindowP
$LN6@GetWindowP:
; Line 853
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN5@GetWindowP
	mov	ecx, OFFSET $SG80382
	test	ecx, ecx
	je	SHORT $LN4@GetWindowP
	push	853					; 00000355H
	push	OFFSET $SG80383
	push	OFFSET $SG80384
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@GetWindowP:
	jmp	SHORT $LN3@GetWindowP
$LN5@GetWindowP:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@GetWindowP
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN10@GetWindowP
$LN3@GetWindowP:
; Line 858
	mov	esi, esp
	lea	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@GetWindowP
	push	858					; 0000035aH
	push	OFFSET $SG80390
	push	OFFSET $SG80391
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetWindowP:
; Line 862
	mov	eax, DWORD PTR _pLeft$[ebp]
	mov	ecx, DWORD PTR _WindowRect$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 863
	mov	edx, DWORD PTR _pTop$[ebp]
	mov	eax, DWORD PTR _WindowRect$[ebp+4]
	mov	DWORD PTR [edx], eax
; Line 864
	mov	ecx, DWORD PTR _WindowRect$[ebp+8]
	sub	ecx, DWORD PTR _WindowRect$[ebp]
	mov	edx, DWORD PTR _pWidth$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 865
	mov	eax, DWORD PTR _WindowRect$[ebp+12]
	sub	eax, DWORD PTR _WindowRect$[ebp+4]
	mov	ecx, DWORD PTR _pHeight$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 867
	xor	eax, eax
$LN10@GetWindowP:
; Line 868
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@GetWindowP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN14@GetWindowP:
	DD	1
	DD	$LN13@GetWindowP
$LN13@GetWindowP:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN12@GetWindowP
$LN12@GetWindowP:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?GetWindowPosition@CBaseControlWindow@@UAGJPAJ000@Z ENDP ; CBaseControlWindow::GetWindowPosition
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__SystemParametersInfoW@16:PROC
EXTRN	__imp__GetWindowPlacement@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_WorkArea$ = -76					; size = 16
_Place$ = -52						; size = 44
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pLeft$ = 12						; size = 4
_pTop$ = 16						; size = 4
_pWidth$ = 20						; size = 4
_pHeight$ = 24						; size = 4
?GetRestorePosition@CBaseControlWindow@@UAGJPAJ000@Z PROC ; CBaseControlWindow::GetRestorePosition
; Line 879
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 882
	cmp	DWORD PTR _pLeft$[ebp], 0
	jne	SHORT $LN11@GetRestore
	mov	eax, -2147467261			; 80004003H
	jmp	$LN12@GetRestore
$LN11@GetRestore:
; Line 883
	cmp	DWORD PTR _pTop$[ebp], 0
	jne	SHORT $LN10@GetRestore
	mov	eax, -2147467261			; 80004003H
	jmp	$LN12@GetRestore
$LN10@GetRestore:
; Line 884
	cmp	DWORD PTR _pWidth$[ebp], 0
	jne	SHORT $LN9@GetRestore
	mov	eax, -2147467261			; 80004003H
	jmp	$LN12@GetRestore
$LN9@GetRestore:
; Line 885
	cmp	DWORD PTR _pHeight$[ebp], 0
	jne	SHORT $LN8@GetRestore
	mov	eax, -2147467261			; 80004003H
	jmp	$LN12@GetRestore
$LN8@GetRestore:
; Line 886
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN7@GetRestore
	mov	ecx, OFFSET $SG80409
	test	ecx, ecx
	je	SHORT $LN6@GetRestore
	push	886					; 00000376H
	push	OFFSET $SG80410
	push	OFFSET $SG80411
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@GetRestore:
	jmp	SHORT $LN5@GetRestore
$LN7@GetRestore:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN5@GetRestore
	mov	eax, -2147220983			; 80040209H
	jmp	$LN12@GetRestore
$LN5@GetRestore:
; Line 891
	mov	DWORD PTR _Place$[ebp], 44		; 0000002cH
; Line 892
	mov	esi, esp
	lea	eax, DWORD PTR _Place$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetWindowPlacement@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@GetRestore
	push	892					; 0000037cH
	push	OFFSET $SG80418
	push	OFFSET $SG80419
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@GetRestore:
; Line 898
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _WorkArea$[ebp]
	push	eax
	push	0
	push	48					; 00000030H
	call	DWORD PTR __imp__SystemParametersInfoW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@GetRestore
; Line 899
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__GetParent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@GetRestore
; Line 900
	mov	eax, DWORD PTR _Place$[ebp+32]
	add	eax, DWORD PTR _WorkArea$[ebp+4]
	mov	DWORD PTR _Place$[ebp+32], eax
; Line 901
	mov	ecx, DWORD PTR _Place$[ebp+40]
	add	ecx, DWORD PTR _WorkArea$[ebp+4]
	mov	DWORD PTR _Place$[ebp+40], ecx
; Line 902
	mov	edx, DWORD PTR _Place$[ebp+28]
	add	edx, DWORD PTR _WorkArea$[ebp]
	mov	DWORD PTR _Place$[ebp+28], edx
; Line 903
	mov	eax, DWORD PTR _Place$[ebp+36]
	add	eax, DWORD PTR _WorkArea$[ebp]
	mov	DWORD PTR _Place$[ebp+36], eax
$LN2@GetRestore:
; Line 909
	mov	ecx, DWORD PTR _pLeft$[ebp]
	mov	edx, DWORD PTR _Place$[ebp+28]
	mov	DWORD PTR [ecx], edx
; Line 910
	mov	eax, DWORD PTR _pTop$[ebp]
	mov	ecx, DWORD PTR _Place$[ebp+32]
	mov	DWORD PTR [eax], ecx
; Line 911
	mov	edx, DWORD PTR _Place$[ebp+36]
	sub	edx, DWORD PTR _Place$[ebp+28]
	mov	eax, DWORD PTR _pWidth$[ebp]
	mov	DWORD PTR [eax], edx
; Line 912
	mov	ecx, DWORD PTR _Place$[ebp+40]
	sub	ecx, DWORD PTR _Place$[ebp+32]
	mov	edx, DWORD PTR _pHeight$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 914
	xor	eax, eax
$LN12@GetRestore:
; Line 915
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@GetRestore
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN17@GetRestore:
	DD	2
	DD	$LN16@GetRestore
$LN16@GetRestore:
	DD	-52					; ffffffccH
	DD	44					; 0000002cH
	DD	$LN14@GetRestore
	DD	-76					; ffffffb4H
	DD	16					; 00000010H
	DD	$LN15@GetRestore
$LN15@GetRestore:
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	0
$LN14@GetRestore:
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
?GetRestorePosition@CBaseControlWindow@@UAGJPAJ000@Z ENDP ; CBaseControlWindow::GetRestorePosition
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_Color$ = 12						; size = 4
?get_BorderColor@CBaseControlWindow@@UAGJPAJ@Z PROC	; CBaseControlWindow::get_BorderColor
; Line 924
	push	ebp
	mov	ebp, esp
; Line 925
	cmp	DWORD PTR _Color$[ebp], 0
	jne	SHORT $LN5@get_Border
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@get_Border
$LN5@get_Border:
; Line 926
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@get_Border
	mov	ecx, OFFSET $SG80431
	test	ecx, ecx
	je	SHORT $LN3@get_Border
	push	926					; 0000039eH
	push	OFFSET $SG80432
	push	OFFSET $SG80433
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Border:
	jmp	SHORT $LN2@get_Border
$LN4@get_Border:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Border
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Border
$LN2@get_Border:
; Line 927
	mov	eax, DWORD PTR _Color$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	mov	DWORD PTR [eax], edx
; Line 928
	xor	eax, eax
$LN6@get_Border:
; Line 929
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?get_BorderColor@CBaseControlWindow@@UAGJPAJ@Z ENDP	; CBaseControlWindow::get_BorderColor
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_Color$ = 12						; size = 4
?put_BorderColor@CBaseControlWindow@@UAGJJ@Z PROC	; CBaseControlWindow::put_BorderColor
; Line 935
	push	ebp
	mov	ebp, esp
; Line 936
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@put_Border
	mov	ecx, OFFSET $SG80444
	test	ecx, ecx
	je	SHORT $LN3@put_Border
	push	936					; 000003a8H
	push	OFFSET $SG80445
	push	OFFSET $SG80446
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@put_Border:
	jmp	SHORT $LN2@put_Border
$LN4@put_Border:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@put_Border
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN5@put_Border
$LN2@put_Border:
; Line 940
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Color$[ebp]
	mov	DWORD PTR [eax+184], ecx
; Line 941
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?PaintWindow@CBaseWindow@@QAEXH@Z	; CBaseWindow::PaintWindow
; Line 942
	xor	eax, eax
$LN5@put_Border:
; Line 943
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?put_BorderColor@CBaseControlWindow@@UAGJJ@Z ENDP	; CBaseControlWindow::put_BorderColor
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_FullScreenMode$ = 12					; size = 4
?get_FullScreenMode@CBaseControlWindow@@UAGJPAJ@Z PROC	; CBaseControlWindow::get_FullScreenMode
; Line 949
	push	ebp
	mov	ebp, esp
; Line 950
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN5@get_FullSc
	mov	ecx, OFFSET $SG80457
	test	ecx, ecx
	je	SHORT $LN4@get_FullSc
	push	950					; 000003b6H
	push	OFFSET $SG80458
	push	OFFSET $SG80459
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@get_FullSc:
	jmp	SHORT $LN3@get_FullSc
$LN5@get_FullSc:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@get_FullSc
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_FullSc
$LN3@get_FullSc:
; Line 951
	cmp	DWORD PTR _FullScreenMode$[ebp], 0
	jne	SHORT $LN1@get_FullSc
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@get_FullSc
$LN1@get_FullSc:
; Line 952
	mov	eax, -2147467263			; 80004001H
$LN6@get_FullSc:
; Line 953
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?get_FullScreenMode@CBaseControlWindow@@UAGJPAJ@Z ENDP	; CBaseControlWindow::get_FullScreenMode
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_FullScreenMode$ = 12					; size = 4
?put_FullScreenMode@CBaseControlWindow@@UAGJJ@Z PROC	; CBaseControlWindow::put_FullScreenMode
; Line 959
	push	ebp
	mov	ebp, esp
; Line 960
	mov	eax, -2147467263			; 80004001H
; Line 961
	pop	ebp
	ret	8
?put_FullScreenMode@CBaseControlWindow@@UAGJJ@Z ENDP	; CBaseControlWindow::put_FullScreenMode
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_AutoShow$ = 12						; size = 4
?put_AutoShow@CBaseControlWindow@@UAGJJ@Z PROC		; CBaseControlWindow::put_AutoShow
; Line 970
	push	ebp
	mov	ebp, esp
; Line 971
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN6@put_AutoSh
	mov	ecx, OFFSET $SG80477
	test	ecx, ecx
	je	SHORT $LN5@put_AutoSh
	push	971					; 000003cbH
	push	OFFSET $SG80478
	push	OFFSET $SG80479
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_AutoSh:
	jmp	SHORT $LN4@put_AutoSh
$LN6@put_AutoSh:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_AutoSh
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@put_AutoSh
$LN4@put_AutoSh:
; Line 975
	cmp	DWORD PTR _AutoShow$[ebp], -1
	je	SHORT $LN2@put_AutoSh
; Line 976
	cmp	DWORD PTR _AutoShow$[ebp], 0
	je	SHORT $LN2@put_AutoSh
; Line 977
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN7@put_AutoSh
$LN2@put_AutoSh:
; Line 981
	xor	eax, eax
	cmp	DWORD PTR _AutoShow$[ebp], -1
	sete	al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], eax
; Line 982
	xor	eax, eax
$LN7@put_AutoSh:
; Line 983
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?put_AutoShow@CBaseControlWindow@@UAGJJ@Z ENDP		; CBaseControlWindow::put_AutoShow
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_AutoShow$ = 12						; size = 4
?get_AutoShow@CBaseControlWindow@@UAGJPAJ@Z PROC	; CBaseControlWindow::get_AutoShow
; Line 991
	push	ebp
	mov	ebp, esp
; Line 992
	cmp	DWORD PTR _AutoShow$[ebp], 0
	jne	SHORT $LN5@get_AutoSh
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@get_AutoSh
$LN5@get_AutoSh:
; Line 993
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@get_AutoSh
	mov	ecx, OFFSET $SG80494
	test	ecx, ecx
	je	SHORT $LN3@get_AutoSh
	push	993					; 000003e1H
	push	OFFSET $SG80495
	push	OFFSET $SG80496
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_AutoSh:
	jmp	SHORT $LN2@get_AutoSh
$LN4@get_AutoSh:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_AutoSh
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_AutoSh
$LN2@get_AutoSh:
; Line 994
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	sub	ecx, 1
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	sub	ecx, 1
	mov	edx, DWORD PTR _AutoShow$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 995
	xor	eax, eax
$LN6@get_AutoSh:
; Line 996
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?get_AutoShow@CBaseControlWindow@@UAGJPAJ@Z ENDP	; CBaseControlWindow::get_AutoShow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_DefaultRect$ = -36					; size = 16
_State$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pWidth$ = 12						; size = 4
_pHeight$ = 16						; size = 4
?GetMinIdealImageSize@CBaseControlWindow@@UAGJPAJ0@Z PROC ; CBaseControlWindow::GetMinIdealImageSize
; Line 1006
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1007
	cmp	DWORD PTR _pWidth$[ebp], 0
	jne	SHORT $LN7@GetMinIdea
	mov	eax, -2147467261			; 80004003H
	jmp	$LN8@GetMinIdea
$LN7@GetMinIdea:
; Line 1008
	cmp	DWORD PTR _pHeight$[ebp], 0
	jne	SHORT $LN6@GetMinIdea
	mov	eax, -2147467261			; 80004003H
	jmp	$LN8@GetMinIdea
$LN6@GetMinIdea:
; Line 1009
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN5@GetMinIdea
	mov	ecx, OFFSET $SG80511
	test	ecx, ecx
	je	SHORT $LN4@GetMinIdea
	push	1009					; 000003f1H
	push	OFFSET $SG80512
	push	OFFSET $SG80513
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@GetMinIdea:
	jmp	SHORT $LN3@GetMinIdea
$LN5@GetMinIdea:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@GetMinIdea
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN8@GetMinIdea
$LN3@GetMinIdea:
; Line 1014
	mov	esi, esp
	lea	eax, DWORD PTR _State$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [edx+16]
	push	ecx
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1015
	cmp	DWORD PTR _State$[ebp], 0
	jne	SHORT $LN1@GetMinIdea
; Line 1016
	mov	eax, -2147220953			; 80040227H
	jmp	SHORT $LN8@GetMinIdea
$LN1@GetMinIdea:
; Line 1019
	mov	esi, esp
	lea	ecx, DWORD PTR _DefaultRect$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1020
	mov	eax, DWORD PTR _DefaultRect$[ebp+8]
	sub	eax, DWORD PTR _DefaultRect$[ebp]
	mov	ecx, DWORD PTR _pWidth$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1021
	mov	edx, DWORD PTR _DefaultRect$[ebp+12]
	sub	edx, DWORD PTR _DefaultRect$[ebp+4]
	mov	eax, DWORD PTR _pHeight$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1022
	xor	eax, eax
$LN8@GetMinIdea:
; Line 1023
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetMinIdea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN13@GetMinIdea:
	DD	2
	DD	$LN12@GetMinIdea
$LN12@GetMinIdea:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN10@GetMinIdea
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN11@GetMinIdea
$LN11@GetMinIdea:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@GetMinIdea:
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
?GetMinIdealImageSize@CBaseControlWindow@@UAGJPAJ0@Z ENDP ; CBaseControlWindow::GetMinIdealImageSize
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_DefaultRect$ = -36					; size = 16
_State$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pWidth$ = 12						; size = 4
_pHeight$ = 16						; size = 4
?GetMaxIdealImageSize@CBaseControlWindow@@UAGJPAJ0@Z PROC ; CBaseControlWindow::GetMaxIdealImageSize
; Line 1033
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1034
	cmp	DWORD PTR _pWidth$[ebp], 0
	jne	SHORT $LN7@GetMaxIdea
	mov	eax, -2147467261			; 80004003H
	jmp	$LN8@GetMaxIdea
$LN7@GetMaxIdea:
; Line 1035
	cmp	DWORD PTR _pHeight$[ebp], 0
	jne	SHORT $LN6@GetMaxIdea
	mov	eax, -2147467261			; 80004003H
	jmp	$LN8@GetMaxIdea
$LN6@GetMaxIdea:
; Line 1036
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN5@GetMaxIdea
	mov	ecx, OFFSET $SG80533
	test	ecx, ecx
	je	SHORT $LN4@GetMaxIdea
	push	1036					; 0000040cH
	push	OFFSET $SG80534
	push	OFFSET $SG80535
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@GetMaxIdea:
	jmp	SHORT $LN3@GetMaxIdea
$LN5@GetMaxIdea:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@GetMaxIdea
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN8@GetMaxIdea
$LN3@GetMaxIdea:
; Line 1041
	mov	esi, esp
	lea	eax, DWORD PTR _State$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [edx+16]
	push	ecx
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1042
	cmp	DWORD PTR _State$[ebp], 0
	jne	SHORT $LN1@GetMaxIdea
; Line 1043
	mov	eax, -2147220953			; 80040227H
	jmp	SHORT $LN8@GetMaxIdea
$LN1@GetMaxIdea:
; Line 1046
	mov	esi, esp
	lea	ecx, DWORD PTR _DefaultRect$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1047
	mov	eax, DWORD PTR _DefaultRect$[ebp+8]
	sub	eax, DWORD PTR _DefaultRect$[ebp]
	mov	ecx, DWORD PTR _pWidth$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1048
	mov	edx, DWORD PTR _DefaultRect$[ebp+12]
	sub	edx, DWORD PTR _DefaultRect$[ebp+4]
	mov	eax, DWORD PTR _pHeight$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1049
	xor	eax, eax
$LN8@GetMaxIdea:
; Line 1050
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetMaxIdea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN13@GetMaxIdea:
	DD	2
	DD	$LN12@GetMaxIdea
$LN12@GetMaxIdea:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN10@GetMaxIdea
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN11@GetMaxIdea
$LN11@GetMaxIdea:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@GetMaxIdea:
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
?GetMaxIdealImageSize@CBaseControlWindow@@UAGJPAJ0@Z ENDP ; CBaseControlWindow::GetMaxIdealImageSize
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_HideCursor$ = 12					; size = 4
?HideCursor@CBaseControlWindow@@UAGJJ@Z PROC		; CBaseControlWindow::HideCursor
; Line 1057
	push	ebp
	mov	ebp, esp
; Line 1058
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN6@HideCursor
	mov	ecx, OFFSET $SG80550
	test	ecx, ecx
	je	SHORT $LN5@HideCursor
	push	1058					; 00000422H
	push	OFFSET $SG80551
	push	OFFSET $SG80552
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@HideCursor:
	jmp	SHORT $LN4@HideCursor
$LN6@HideCursor:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@HideCursor
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@HideCursor
$LN4@HideCursor:
; Line 1062
	cmp	DWORD PTR _HideCursor$[ebp], -1
	je	SHORT $LN2@HideCursor
; Line 1063
	cmp	DWORD PTR _HideCursor$[ebp], 0
	je	SHORT $LN2@HideCursor
; Line 1064
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN7@HideCursor
$LN2@HideCursor:
; Line 1068
	xor	eax, eax
	cmp	DWORD PTR _HideCursor$[ebp], -1
	sete	al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], eax
; Line 1069
	xor	eax, eax
$LN7@HideCursor:
; Line 1070
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?HideCursor@CBaseControlWindow@@UAGJJ@Z ENDP		; CBaseControlWindow::HideCursor
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_CursorHidden$ = 12					; size = 4
?IsCursorHidden@CBaseControlWindow@@UAGJPAJ@Z PROC	; CBaseControlWindow::IsCursorHidden
; Line 1076
	push	ebp
	mov	ebp, esp
; Line 1077
	cmp	DWORD PTR _CursorHidden$[ebp], 0
	jne	SHORT $LN5@IsCursorHi
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@IsCursorHi
$LN5@IsCursorHi:
; Line 1078
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jne	SHORT $LN4@IsCursorHi
	mov	ecx, OFFSET $SG80567
	test	ecx, ecx
	je	SHORT $LN3@IsCursorHi
	push	1078					; 00000436H
	push	OFFSET $SG80568
	push	OFFSET $SG80569
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@IsCursorHi:
	jmp	SHORT $LN2@IsCursorHi
$LN4@IsCursorHi:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@IsCursorHi
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@IsCursorHi
$LN2@IsCursorHi:
; Line 1079
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	sub	ecx, 1
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	sub	ecx, 1
	mov	edx, DWORD PTR _CursorHidden$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1080
	xor	eax, eax
$LN6@IsCursorHi:
; Line 1081
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?IsCursorHidden@CBaseControlWindow@@UAGJPAJ@Z ENDP	; CBaseControlWindow::IsCursorHidden
_TEXT	ENDS
PUBLIC	??1CBaseBasicVideo@@UAE@XZ			; CBaseBasicVideo::~CBaseBasicVideo
PUBLIC	??_7CBaseControlVideo@@6BCUnknown@@@		; CBaseControlVideo::`vftable'
PUBLIC	??_7CBaseControlVideo@@6BIBasicVideo2@@@	; CBaseControlVideo::`vftable'
PUBLIC	??0CBaseControlVideo@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z ; CBaseControlVideo::CBaseControlVideo
PUBLIC	??_R4CBaseControlVideo@@6BIBasicVideo2@@@	; CBaseControlVideo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBaseControlVideo@@@8			; CBaseControlVideo `RTTI Type Descriptor'
PUBLIC	??_R3CBaseControlVideo@@8			; CBaseControlVideo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseControlVideo@@8			; CBaseControlVideo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseControlVideo@@8		; CBaseControlVideo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CBaseBasicVideo@@8		; CBaseBasicVideo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCBaseBasicVideo@@@8			; CBaseBasicVideo `RTTI Type Descriptor'
PUBLIC	??_R3CBaseBasicVideo@@8				; CBaseBasicVideo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseBasicVideo@@8				; CBaseBasicVideo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IBasicVideo2@@8			; IBasicVideo2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIBasicVideo2@@@8			; IBasicVideo2 `RTTI Type Descriptor'
PUBLIC	??_R3IBasicVideo2@@8				; IBasicVideo2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IBasicVideo2@@8				; IBasicVideo2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IBasicVideo@@8			; IBasicVideo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIBasicVideo@@@8				; IBasicVideo `RTTI Type Descriptor'
PUBLIC	??_R3IBasicVideo@@8				; IBasicVideo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IBasicVideo@@8				; IBasicVideo::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CBaseBasicVideo@@UAGJABU_GUID@@PAPAX@Z ; CBaseBasicVideo::QueryInterface
PUBLIC	?AddRef@CBaseBasicVideo@@UAGKXZ			; CBaseBasicVideo::AddRef
PUBLIC	?Release@CBaseBasicVideo@@UAGKXZ		; CBaseBasicVideo::Release
PUBLIC	?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z ; CBaseControlVideo::get_AvgTimePerFrame
PUBLIC	?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z	; CBaseControlVideo::get_BitRate
PUBLIC	?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z	; CBaseControlVideo::get_BitErrorRate
PUBLIC	?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z	; CBaseControlVideo::get_VideoWidth
PUBLIC	?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z	; CBaseControlVideo::get_VideoHeight
PUBLIC	?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z	; CBaseControlVideo::put_SourceLeft
PUBLIC	?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z	; CBaseControlVideo::get_SourceLeft
PUBLIC	?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z	; CBaseControlVideo::put_SourceWidth
PUBLIC	?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z	; CBaseControlVideo::get_SourceWidth
PUBLIC	?put_SourceTop@CBaseControlVideo@@UAGJJ@Z	; CBaseControlVideo::put_SourceTop
PUBLIC	?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z	; CBaseControlVideo::get_SourceTop
PUBLIC	?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z	; CBaseControlVideo::put_SourceHeight
PUBLIC	?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z	; CBaseControlVideo::get_SourceHeight
PUBLIC	?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z	; CBaseControlVideo::put_DestinationLeft
PUBLIC	?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z ; CBaseControlVideo::get_DestinationLeft
PUBLIC	?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z ; CBaseControlVideo::put_DestinationWidth
PUBLIC	?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z ; CBaseControlVideo::get_DestinationWidth
PUBLIC	?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z	; CBaseControlVideo::put_DestinationTop
PUBLIC	?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z ; CBaseControlVideo::get_DestinationTop
PUBLIC	?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z ; CBaseControlVideo::put_DestinationHeight
PUBLIC	?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z ; CBaseControlVideo::get_DestinationHeight
PUBLIC	?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z ; CBaseControlVideo::SetSourcePosition
PUBLIC	?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z ; CBaseControlVideo::GetSourcePosition
PUBLIC	?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ ; CBaseControlVideo::SetDefaultSourcePosition
PUBLIC	?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z ; CBaseControlVideo::SetDestinationPosition
PUBLIC	?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z ; CBaseControlVideo::GetDestinationPosition
PUBLIC	?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ ; CBaseControlVideo::SetDefaultDestinationPosition
PUBLIC	?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z	; CBaseControlVideo::GetVideoSize
PUBLIC	?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z ; CBaseControlVideo::GetVideoPaletteEntries
PUBLIC	?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z	; CBaseControlVideo::GetCurrentImage
PUBLIC	?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ	; CBaseControlVideo::IsUsingDefaultSource
PUBLIC	?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ ; CBaseControlVideo::IsUsingDefaultDestination
PUBLIC	?GetPreferredAspectRatio@CBaseBasicVideo@@UAGJPAJ0@Z ; CBaseBasicVideo::GetPreferredAspectRatio
PUBLIC	?OnUpdateRectangles@CBaseControlVideo@@UAEJXZ	; CBaseControlVideo::OnUpdateRectangles
PUBLIC	?OnVideoSizeChange@CBaseControlVideo@@UAEJXZ	; CBaseControlVideo::OnVideoSizeChange
PUBLIC	?CheckSourceRect@CBaseControlVideo@@UAEJPAUtagRECT@@@Z ; CBaseControlVideo::CheckSourceRect
PUBLIC	?CheckTargetRect@CBaseControlVideo@@UAEJPAUtagRECT@@@Z ; CBaseControlVideo::CheckTargetRect
PUBLIC	??_R4CBaseControlVideo@@6BCUnknown@@@		; CBaseControlVideo::`RTTI Complete Object Locator'
PUBLIC	??_ECBaseControlVideo@@W3AEPAXI@Z		; [thunk]:CBaseControlVideo::`vector deleting destructor'
EXTRN	??0CBaseBasicVideo@@QAE@PB_WPAUIUnknown@@@Z:PROC ; CBaseBasicVideo::CBaseBasicVideo
EXTRN	?GetTypeInfoCount@CBaseBasicVideo@@UAGJPAI@Z:PROC ; CBaseBasicVideo::GetTypeInfoCount
EXTRN	?GetTypeInfo@CBaseBasicVideo@@UAGJIKPAPAUITypeInfo@@@Z:PROC ; CBaseBasicVideo::GetTypeInfo
EXTRN	?GetIDsOfNames@CBaseBasicVideo@@UAGJABU_GUID@@PAPA_WIKPAJ@Z:PROC ; CBaseBasicVideo::GetIDsOfNames
EXTRN	?Invoke@CBaseBasicVideo@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z:PROC ; CBaseBasicVideo::Invoke
EXTRN	?NonDelegatingQueryInterface@CBaseBasicVideo@@UAGJABU_GUID@@PAPAX@Z:PROC ; CBaseBasicVideo::NonDelegatingQueryInterface
;	COMDAT ??_R4CBaseControlVideo@@6BCUnknown@@@
rdata$r	SEGMENT
??_R4CBaseControlVideo@@6BCUnknown@@@ DD 00H		; CBaseControlVideo::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCBaseControlVideo@@@8
	DD	FLAT:??_R3CBaseControlVideo@@8
rdata$r	ENDS
;	COMDAT ??_R2IBasicVideo@@8
rdata$r	SEGMENT
??_R2IBasicVideo@@8 DD FLAT:??_R1A@?0A@EA@IBasicVideo@@8 ; IBasicVideo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IDispatch@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IBasicVideo@@8
rdata$r	SEGMENT
??_R3IBasicVideo@@8 DD 00H				; IBasicVideo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IBasicVideo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIBasicVideo@@@8
_DATA	SEGMENT
??_R0?AUIBasicVideo@@@8 DD FLAT:??_7type_info@@6B@	; IBasicVideo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIBasicVideo@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IBasicVideo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IBasicVideo@@8 DD FLAT:??_R0?AUIBasicVideo@@@8 ; IBasicVideo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IBasicVideo@@8
rdata$r	ENDS
;	COMDAT ??_R2IBasicVideo2@@8
rdata$r	SEGMENT
??_R2IBasicVideo2@@8 DD FLAT:??_R1A@?0A@EA@IBasicVideo2@@8 ; IBasicVideo2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IBasicVideo@@8
	DD	FLAT:??_R1A@?0A@EA@IDispatch@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IBasicVideo2@@8
rdata$r	SEGMENT
??_R3IBasicVideo2@@8 DD 00H				; IBasicVideo2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2IBasicVideo2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIBasicVideo2@@@8
_DATA	SEGMENT
??_R0?AUIBasicVideo2@@@8 DD FLAT:??_7type_info@@6B@	; IBasicVideo2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIBasicVideo2@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IBasicVideo2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IBasicVideo2@@8 DD FLAT:??_R0?AUIBasicVideo2@@@8 ; IBasicVideo2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IBasicVideo2@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseBasicVideo@@8
rdata$r	SEGMENT
??_R2CBaseBasicVideo@@8 DD FLAT:??_R1A@?0A@EA@CBaseBasicVideo@@8 ; CBaseBasicVideo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IBasicVideo2@@8
	DD	FLAT:??_R1A@?0A@EA@IBasicVideo@@8
	DD	FLAT:??_R1A@?0A@EA@IDispatch@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CUnknown@@8
	DD	FLAT:??_R13?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R17?0A@EA@CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseBasicVideo@@8
rdata$r	SEGMENT
??_R3CBaseBasicVideo@@8 DD 00H				; CBaseBasicVideo::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2CBaseBasicVideo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseBasicVideo@@@8
_DATA	SEGMENT
??_R0?AVCBaseBasicVideo@@@8 DD FLAT:??_7type_info@@6B@	; CBaseBasicVideo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseBasicVideo@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseBasicVideo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseBasicVideo@@8 DD FLAT:??_R0?AVCBaseBasicVideo@@@8 ; CBaseBasicVideo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseBasicVideo@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseControlVideo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseControlVideo@@8 DD FLAT:??_R0?AVCBaseControlVideo@@@8 ; CBaseControlVideo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseControlVideo@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseControlVideo@@8
rdata$r	SEGMENT
??_R2CBaseControlVideo@@8 DD FLAT:??_R1A@?0A@EA@CBaseControlVideo@@8 ; CBaseControlVideo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseBasicVideo@@8
	DD	FLAT:??_R1A@?0A@EA@IBasicVideo2@@8
	DD	FLAT:??_R1A@?0A@EA@IBasicVideo@@8
	DD	FLAT:??_R1A@?0A@EA@IDispatch@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CUnknown@@8
	DD	FLAT:??_R13?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R17?0A@EA@CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseControlVideo@@8
rdata$r	SEGMENT
??_R3CBaseControlVideo@@8 DD 00H			; CBaseControlVideo::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2CBaseControlVideo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseControlVideo@@@8
_DATA	SEGMENT
??_R0?AVCBaseControlVideo@@@8 DD FLAT:??_7type_info@@6B@ ; CBaseControlVideo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseControlVideo@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBaseControlVideo@@6BIBasicVideo2@@@
rdata$r	SEGMENT
??_R4CBaseControlVideo@@6BIBasicVideo2@@@ DD 00H	; CBaseControlVideo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseControlVideo@@@8
	DD	FLAT:??_R3CBaseControlVideo@@8
rdata$r	ENDS
;	COMDAT ??_7CBaseControlVideo@@6BCUnknown@@@
CONST	SEGMENT
??_7CBaseControlVideo@@6BCUnknown@@@ DD FLAT:??_R4CBaseControlVideo@@6BCUnknown@@@ ; CBaseControlVideo::`vftable'
	DD	FLAT:?NonDelegatingQueryInterface@CBaseBasicVideo@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?NonDelegatingAddRef@CUnknown@@UAGKXZ
	DD	FLAT:?NonDelegatingRelease@CUnknown@@UAGKXZ
	DD	FLAT:??_ECBaseControlVideo@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CBaseControlVideo@@6BIBasicVideo2@@@
CONST	SEGMENT
??_7CBaseControlVideo@@6BIBasicVideo2@@@ DD FLAT:??_R4CBaseControlVideo@@6BIBasicVideo2@@@ ; CBaseControlVideo::`vftable'
	DD	FLAT:?QueryInterface@CBaseBasicVideo@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseBasicVideo@@UAGKXZ
	DD	FLAT:?Release@CBaseBasicVideo@@UAGKXZ
	DD	FLAT:?GetTypeInfoCount@CBaseBasicVideo@@UAGJPAI@Z
	DD	FLAT:?GetTypeInfo@CBaseBasicVideo@@UAGJIKPAPAUITypeInfo@@@Z
	DD	FLAT:?GetIDsOfNames@CBaseBasicVideo@@UAGJABU_GUID@@PAPA_WIKPAJ@Z
	DD	FLAT:?Invoke@CBaseBasicVideo@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z
	DD	FLAT:?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z
	DD	FLAT:?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z
	DD	FLAT:?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z
	DD	FLAT:?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?put_SourceTop@CBaseControlVideo@@UAGJJ@Z
	DD	FLAT:?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z
	DD	FLAT:?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z
	DD	FLAT:?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z
	DD	FLAT:?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z
	DD	FLAT:?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z
	DD	FLAT:?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z
	DD	FLAT:?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z
	DD	FLAT:?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z
	DD	FLAT:?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ
	DD	FLAT:?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z
	DD	FLAT:?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z
	DD	FLAT:?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ
	DD	FLAT:?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z
	DD	FLAT:?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z
	DD	FLAT:?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z
	DD	FLAT:?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ
	DD	FLAT:?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ
	DD	FLAT:?GetPreferredAspectRatio@CBaseBasicVideo@@UAGJPAJ0@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?OnUpdateRectangles@CBaseControlVideo@@UAEJXZ
	DD	FLAT:?OnVideoSizeChange@CBaseControlVideo@@UAEJXZ
	DD	FLAT:?CheckSourceRect@CBaseControlVideo@@UAEJPAUtagRECT@@@Z
	DD	FLAT:?CheckTargetRect@CBaseControlVideo@@UAEJPAUtagRECT@@@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CBaseControlVideo@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseControlVideo@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z$0
__ehfuncinfo$??0CBaseControlVideo@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseControlVideo@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pFilter$ = 8						; size = 4
_pInterfaceLock$ = 12					; size = 4
_pName$ = 16						; size = 4
_pUnk$ = 20						; size = 4
_phr$ = 24						; size = 4
??0CBaseControlVideo@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z PROC ; CBaseControlVideo::CBaseControlVideo
; _this$ = ecx
; Line 1102
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseControlVideo@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pUnk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseBasicVideo@@QAE@PB_WPAUIUnknown@@@Z ; CBaseBasicVideo::CBaseBasicVideo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CBaseControlVideo@@6BIBasicVideo2@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], OFFSET ??_7CBaseControlVideo@@6BCUnknown@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pFilter$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pInterfaceLock$[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 1103
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN3@CBaseContr@2
	push	1103					; 0000044fH
	push	OFFSET $SG80582
	push	OFFSET $SG80583
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CBaseContr@2:
; Line 1104
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	SHORT $LN2@CBaseContr@2
	push	1104					; 00000450H
	push	OFFSET $SG80585
	push	OFFSET $SG80586
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CBaseContr@2:
; Line 1105
	cmp	DWORD PTR _phr$[ebp], 0
	jne	SHORT $LN4@CBaseContr@2
	push	1105					; 00000451H
	push	OFFSET $SG80588
	push	OFFSET $SG80589
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@CBaseContr@2:
; Line 1106
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CBaseControlVideo@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseBasicVideo@@UAE@XZ
__ehhandler$??0CBaseControlVideo@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseControlVideo@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseControlVideo@@QAE@PAVCBaseFilter@@PAVCCritSec@@PA_WPAUIUnknown@@PAJ@Z ENDP ; CBaseControlVideo::CBaseControlVideo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CBaseBasicVideo@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv71 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?QueryInterface@CBaseBasicVideo@@UAGJABU_GUID@@PAPAX@Z PROC ; CBaseBasicVideo::QueryInterface, COMDAT
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\ctlutil.h
; Line 445
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv71[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _ppv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	mov	eax, DWORD PTR tv71[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBaseBasicVideo@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBaseBasicVideo::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBaseBasicVideo@@UAGKXZ
_TEXT	SEGMENT
tv71 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBaseBasicVideo@@UAGKXZ PROC			; CBaseBasicVideo::AddRef, COMDAT
; Line 445
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv71[ebp], eax
	mov	eax, DWORD PTR tv71[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBaseBasicVideo@@UAGKXZ ENDP			; CBaseBasicVideo::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBaseBasicVideo@@UAGKXZ
_TEXT	SEGMENT
tv71 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBaseBasicVideo@@UAGKXZ PROC			; CBaseBasicVideo::Release, COMDAT
; Line 445
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv71[ebp], eax
	mov	eax, DWORD PTR tv71[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBaseBasicVideo@@UAGKXZ ENDP			; CBaseBasicVideo::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPreferredAspectRatio@CBaseBasicVideo@@UAGJPAJ0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_plAspectX$ = 12					; size = 4
_plAspectY$ = 16					; size = 4
?GetPreferredAspectRatio@CBaseBasicVideo@@UAGJPAJ0@Z PROC ; CBaseBasicVideo::GetPreferredAspectRatio, COMDAT
; Line 478
	push	ebp
	mov	ebp, esp
; Line 479
	mov	eax, -2147467263			; 80004001H
; Line 480
	pop	ebp
	ret	12					; 0000000cH
?GetPreferredAspectRatio@CBaseBasicVideo@@UAGJPAJ0@Z ENDP ; CBaseBasicVideo::GetPreferredAspectRatio
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?OnUpdateRectangles@CBaseControlVideo@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnUpdateRectangles@CBaseControlVideo@@UAEJXZ PROC	; CBaseControlVideo::OnUpdateRectangles, COMDAT
; _this$ = ecx
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\winctrl.h
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?OnUpdateRectangles@CBaseControlVideo@@UAEJXZ ENDP	; CBaseControlVideo::OnUpdateRectangles
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBaseBasicVideo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBaseBasicVideo@@UAE@XZ$0
__ehfuncinfo$??1CBaseBasicVideo@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CBaseBasicVideo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBaseBasicVideo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBaseBasicVideo@@UAE@XZ PROC				; CBaseBasicVideo::~CBaseBasicVideo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBaseBasicVideo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1CBaseDispatch@@QAE@XZ		; CBaseDispatch::~CBaseDispatch
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBaseBasicVideo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__ehhandler$??1CBaseBasicVideo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBaseBasicVideo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBaseBasicVideo@@UAE@XZ ENDP				; CBaseBasicVideo::~CBaseBasicVideo
PUBLIC	??BCOARefTime@@QAENXZ				; COARefTime::operator double
PUBLIC	??0COARefTime@@QAE@_J@Z				; COARefTime::COARefTime
EXTRN	__fltused:DWORD
xdata$x	SEGMENT
__unwindtable$?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z$0
__ehfuncinfo$?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82045 = -52						; size = 4
$T82044 = -48						; size = 4
_AvgTime$ = -40						; size = 8
_pVideoInfo$ = -28					; size = 4
_cInterfaceLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pAvgTimePerFrame$ = 12					; size = 4
?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z PROC	; CBaseControlVideo::get_AvgTimePerFrame
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\winctrl.cpp
; Line 1111
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1112
	cmp	DWORD PTR _pAvgTimePerFrame$[ebp], 0
	jne	SHORT $LN6@get_AvgTim
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@get_AvgTim
$LN6@get_AvgTim:
; Line 1113
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@get_AvgTim
	mov	ecx, OFFSET $SG80606
	test	ecx, ecx
	je	SHORT $LN4@get_AvgTim
	push	1113					; 00000459H
	push	OFFSET $SG80607
	push	OFFSET $SG80608
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@get_AvgTim:
	jmp	SHORT $LN2@get_AvgTim
$LN5@get_AvgTim:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_AvgTim
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@get_AvgTim
$LN2@get_AvgTim:
; Line 1114
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1116
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pVideoInfo$[ebp], eax
; Line 1117
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	jne	SHORT $LN1@get_AvgTim
; Line 1118
	mov	DWORD PTR $T82044[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82044[ebp]
	jmp	SHORT $LN7@get_AvgTim
$LN1@get_AvgTim:
; Line 1119
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR [eax+40]
	push	edx
	lea	ecx, DWORD PTR _AvgTime$[ebp]
	call	??0COARefTime@@QAE@_J@Z			; COARefTime::COARefTime
; Line 1120
	lea	ecx, DWORD PTR _AvgTime$[ebp]
	call	??BCOARefTime@@QAENXZ			; COARefTime::operator double
	mov	eax, DWORD PTR _pAvgTimePerFrame$[ebp]
	fstp	QWORD PTR [eax]
; Line 1122
	mov	DWORD PTR $T82045[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82045[ebp]
$LN7@get_AvgTim:
; Line 1123
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@get_AvgTim
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@get_AvgTim:
	DD	2
	DD	$LN13@get_AvgTim
$LN13@get_AvgTim:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@get_AvgTim
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN11@get_AvgTim
$LN11@get_AvgTim:
	DB	65					; 00000041H
	DB	118					; 00000076H
	DB	103					; 00000067H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN10@get_AvgTim:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_AvgTimePerFrame@CBaseControlVideo@@UAGJPAN@Z ENDP	; CBaseControlVideo::get_AvgTimePerFrame
PUBLIC	??0CRefTime@@QAE@_J@Z				; CRefTime::CRefTime
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COARefTime@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 8
??0COARefTime@@QAE@_J@Z PROC				; COARefTime::COARefTime, COMDAT
; _this$ = ecx
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\ctlutil.h
; Line 199
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _t$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CRefTime@@QAE@_J@Z			; CRefTime::CRefTime
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0COARefTime@@QAE@_J@Z ENDP				; COARefTime::COARefTime
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CRefTime@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rt$ = 8						; size = 8
??0CRefTime@@QAE@_J@Z PROC				; CRefTime::CRefTime, COMDAT
; _this$ = ecx
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\reftime.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rt$[ebp+4]
	mov	DWORD PTR [eax+4], edx
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0CRefTime@@QAE@_J@Z ENDP				; CRefTime::CRefTime
_TEXT	ENDS
PUBLIC	__real@416312d000000000
;	COMDAT __real@416312d000000000
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\ctlutil.h
CONST	SEGMENT
__real@416312d000000000 DQ 0416312d000000000r	; 1e+007
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??BCOARefTime@@QAENXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCOARefTime@@QAENXZ PROC				; COARefTime::operator double, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 207
	mov	eax, DWORD PTR _this$[ebp]
	fild	QWORD PTR [eax]
	fdiv	QWORD PTR __real@416312d000000000
; Line 208
	mov	esp, ebp
	pop	ebp
	ret	0
??BCOARefTime@@QAENXZ ENDP				; COARefTime::operator double
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82066 = -36						; size = 4
$T82065 = -32						; size = 4
_pVideoInfo$ = -28					; size = 4
_cInterfaceLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pBitRate$ = 12						; size = 4
?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z PROC		; CBaseControlVideo::get_BitRate
; File e:\github\codesandnotes\xy-vsfilter\src\filters\baseclasses\winctrl.cpp
; Line 1129
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1130
	cmp	DWORD PTR _pBitRate$[ebp], 0
	jne	SHORT $LN6@get_BitRat
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@get_BitRat
$LN6@get_BitRat:
; Line 1131
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@get_BitRat
	mov	ecx, OFFSET $SG80628
	test	ecx, ecx
	je	SHORT $LN4@get_BitRat
	push	1131					; 0000046bH
	push	OFFSET $SG80629
	push	OFFSET $SG80630
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@get_BitRat:
	jmp	SHORT $LN3@get_BitRat
$LN5@get_BitRat:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@get_BitRat
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@get_BitRat
$LN3@get_BitRat:
; Line 1132
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1134
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pVideoInfo$[ebp], eax
; Line 1135
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	jne	SHORT $LN1@get_BitRat
; Line 1136
	mov	DWORD PTR $T82065[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82065[ebp]
	jmp	SHORT $LN7@get_BitRat
$LN1@get_BitRat:
; Line 1137
	mov	eax, DWORD PTR _pBitRate$[ebp]
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax], edx
; Line 1138
	mov	DWORD PTR $T82066[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82066[ebp]
$LN7@get_BitRat:
; Line 1139
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_BitRat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@get_BitRat:
	DD	1
	DD	$LN12@get_BitRat
$LN12@get_BitRat:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@get_BitRat
$LN10@get_BitRat:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_BitRate@CBaseControlVideo@@UAGJPAJ@Z ENDP		; CBaseControlVideo::get_BitRate
xdata$x	SEGMENT
__unwindtable$?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82077 = -36						; size = 4
$T82076 = -32						; size = 4
_pVideoInfo$ = -28					; size = 4
_cInterfaceLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pBitErrorRate$ = 12					; size = 4
?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z PROC	; CBaseControlVideo::get_BitErrorRate
; Line 1145
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1146
	cmp	DWORD PTR _pBitErrorRate$[ebp], 0
	jne	SHORT $LN6@get_BitErr
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@get_BitErr
$LN6@get_BitErr:
; Line 1147
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@get_BitErr
	mov	ecx, OFFSET $SG80648
	test	ecx, ecx
	je	SHORT $LN4@get_BitErr
	push	1147					; 0000047bH
	push	OFFSET $SG80649
	push	OFFSET $SG80650
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@get_BitErr:
	jmp	SHORT $LN3@get_BitErr
$LN5@get_BitErr:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@get_BitErr
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@get_BitErr
$LN3@get_BitErr:
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1150
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pVideoInfo$[ebp], eax
; Line 1151
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	jne	SHORT $LN1@get_BitErr
; Line 1152
	mov	DWORD PTR $T82076[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82076[ebp]
	jmp	SHORT $LN7@get_BitErr
$LN1@get_BitErr:
; Line 1153
	mov	eax, DWORD PTR _pBitErrorRate$[ebp]
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax], edx
; Line 1154
	mov	DWORD PTR $T82077[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82077[ebp]
$LN7@get_BitErr:
; Line 1155
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_BitErr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@get_BitErr:
	DD	1
	DD	$LN12@get_BitErr
$LN12@get_BitErr:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@get_BitErr
$LN10@get_BitErr:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_BitErrorRate@CBaseControlVideo@@UAGJPAJ@Z ENDP	; CBaseControlVideo::get_BitErrorRate
xdata$x	SEGMENT
__unwindtable$?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82088 = -36						; size = 4
$T82087 = -32						; size = 4
_pVideoInfo$ = -28					; size = 4
_cInterfaceLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pVideoWidth$ = 12					; size = 4
?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z PROC	; CBaseControlVideo::get_VideoWidth
; Line 1161
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1162
	cmp	DWORD PTR _pVideoWidth$[ebp], 0
	jne	SHORT $LN6@get_VideoW
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@get_VideoW
$LN6@get_VideoW:
; Line 1163
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@get_VideoW
	mov	ecx, OFFSET $SG80668
	test	ecx, ecx
	je	SHORT $LN4@get_VideoW
	push	1163					; 0000048bH
	push	OFFSET $SG80669
	push	OFFSET $SG80670
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@get_VideoW:
	jmp	SHORT $LN3@get_VideoW
$LN5@get_VideoW:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@get_VideoW
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@get_VideoW
$LN3@get_VideoW:
; Line 1164
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1166
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pVideoInfo$[ebp], eax
; Line 1167
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	jne	SHORT $LN1@get_VideoW
; Line 1168
	mov	DWORD PTR $T82087[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82087[ebp]
	jmp	SHORT $LN7@get_VideoW
$LN1@get_VideoW:
; Line 1169
	mov	eax, DWORD PTR _pVideoWidth$[ebp]
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax], edx
; Line 1170
	mov	DWORD PTR $T82088[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82088[ebp]
$LN7@get_VideoW:
; Line 1171
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_VideoW
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@get_VideoW:
	DD	1
	DD	$LN12@get_VideoW
$LN12@get_VideoW:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@get_VideoW
$LN10@get_VideoW:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_VideoWidth@CBaseControlVideo@@UAGJPAJ@Z ENDP	; CBaseControlVideo::get_VideoWidth
xdata$x	SEGMENT
__unwindtable$?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82099 = -36						; size = 4
$T82098 = -32						; size = 4
_pVideoInfo$ = -28					; size = 4
_cInterfaceLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pVideoHeight$ = 12					; size = 4
?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z PROC	; CBaseControlVideo::get_VideoHeight
; Line 1177
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1178
	cmp	DWORD PTR _pVideoHeight$[ebp], 0
	jne	SHORT $LN6@get_VideoH
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@get_VideoH
$LN6@get_VideoH:
; Line 1179
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@get_VideoH
	mov	ecx, OFFSET $SG80688
	test	ecx, ecx
	je	SHORT $LN4@get_VideoH
	push	1179					; 0000049bH
	push	OFFSET $SG80689
	push	OFFSET $SG80690
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@get_VideoH:
	jmp	SHORT $LN3@get_VideoH
$LN5@get_VideoH:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@get_VideoH
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN7@get_VideoH
$LN3@get_VideoH:
; Line 1180
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1182
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pVideoInfo$[ebp], eax
; Line 1183
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	jne	SHORT $LN1@get_VideoH
; Line 1184
	mov	DWORD PTR $T82098[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82098[ebp]
	jmp	SHORT $LN7@get_VideoH
$LN1@get_VideoH:
; Line 1185
	mov	eax, DWORD PTR _pVideoHeight$[ebp]
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax], edx
; Line 1186
	mov	DWORD PTR $T82099[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82099[ebp]
$LN7@get_VideoH:
; Line 1187
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_VideoH
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@get_VideoH:
	DD	1
	DD	$LN12@get_VideoH
$LN12@get_VideoH:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@get_VideoH
$LN10@get_VideoH:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_VideoHeight@CBaseControlVideo@@UAGJPAJ@Z ENDP	; CBaseControlVideo::get_VideoHeight
PUBLIC	__$ArrayPad$
EXTRN	??1CMediaType@@QAE@XZ:PROC			; CMediaType::~CMediaType
EXTRN	??0CMediaType@@QAE@XZ:PROC			; CMediaType::CMediaType
xdata$x	SEGMENT
__unwindtable$?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z$1
__ehfuncinfo$?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv138 = -168						; size = 4
tv139 = -164						; size = 4
tv135 = -160						; size = 4
$T82121 = -156						; size = 4
$T82120 = -152						; size = 4
$T82113 = -148						; size = 4
$T82112 = -144						; size = 4
$T82111 = -140						; size = 4
$T82110 = -136						; size = 4
_Count$80745 = -132					; size = 4
_pColours$ = -128					; size = 4
_pEntries$ = -124					; size = 4
_Available$ = -120					; size = 4
_pHeader$ = -116					; size = 4
_pVideoInfo$ = -112					; size = 4
_MediaType$ = -104					; size = 72
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_StartIndex$ = 12					; size = 4
_Entries$ = 16						; size = 4
_pRetrieved$ = 20					; size = 4
_pPalette$ = 24						; size = 4
?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z PROC ; CBaseControlVideo::GetVideoPaletteEntries
; Line 1201
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 156				; 0000009cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-168]
	mov	ecx, 39					; 00000027H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1202
	cmp	DWORD PTR _pRetrieved$[ebp], 0
	jne	SHORT $LN14@GetVideoPa
	mov	eax, -2147467261			; 80004003H
	jmp	$LN15@GetVideoPa
$LN14@GetVideoPa:
; Line 1203
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN13@GetVideoPa
	mov	ecx, OFFSET $SG80711
	test	ecx, ecx
	je	SHORT $LN12@GetVideoPa
	push	1203					; 000004b3H
	push	OFFSET $SG80712
	push	OFFSET $SG80713
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN12@GetVideoPa:
	jmp	SHORT $LN11@GetVideoPa
$LN13@GetVideoPa:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN11@GetVideoPa
	mov	eax, -2147220983			; 80040209H
	jmp	$LN15@GetVideoPa
$LN11@GetVideoPa:
; Line 1204
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1205
	lea	ecx, DWORD PTR _MediaType$[ebp]
	call	??0CMediaType@@QAE@XZ			; CMediaType::CMediaType
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 1209
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pVideoInfo$[ebp], eax
; Line 1210
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	jne	SHORT $LN9@GetVideoPa
; Line 1211
	mov	DWORD PTR $T82110[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _MediaType$[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82110[ebp]
	jmp	$LN15@GetVideoPa
$LN9@GetVideoPa:
; Line 1212
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _pHeader$[ebp], eax
; Line 1216
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	movzx	edx, WORD PTR [ecx+62]
	xor	eax, eax
	cmp	edx, 8
	setle	al
	test	eax, eax
	jne	SHORT $LN8@GetVideoPa
; Line 1217
	mov	ecx, DWORD PTR _pRetrieved$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 1218
	mov	DWORD PTR $T82111[ebp], -2147220960	; 80040220H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _MediaType$[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82111[ebp]
	jmp	$LN15@GetVideoPa
$LN8@GetVideoPa:
; Line 1223
	cmp	DWORD PTR _pPalette$[ebp], 0
	jne	SHORT $LN7@GetVideoPa
; Line 1224
	mov	edx, DWORD PTR _pRetrieved$[ebp]
	mov	eax, DWORD PTR _pHeader$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx], ecx
; Line 1225
	mov	DWORD PTR $T82112[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _MediaType$[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82112[ebp]
	jmp	$LN15@GetVideoPa
$LN7@GetVideoPa:
; Line 1230
	mov	edx, DWORD PTR _pHeader$[ebp]
	mov	eax, DWORD PTR _StartIndex$[ebp]
	cmp	eax, DWORD PTR [edx+32]
	jge	SHORT $LN5@GetVideoPa
	cmp	DWORD PTR _StartIndex$[ebp], 0
	jge	SHORT $LN6@GetVideoPa
$LN5@GetVideoPa:
; Line 1231
	mov	ecx, DWORD PTR _pRetrieved$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 1232
	mov	DWORD PTR $T82113[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _MediaType$[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82113[ebp]
	jmp	$LN15@GetVideoPa
$LN6@GetVideoPa:
; Line 1237
	mov	edx, DWORD PTR _pHeader$[ebp]
	mov	eax, DWORD PTR [edx+32]
	sub	eax, DWORD PTR _StartIndex$[ebp]
	mov	DWORD PTR _Available$[ebp], eax
; Line 1238
	mov	ecx, DWORD PTR _Available$[ebp]
	cmp	ecx, DWORD PTR _Entries$[ebp]
	jge	SHORT $LN17@GetVideoPa
	mov	edx, DWORD PTR _Available$[ebp]
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN18@GetVideoPa
$LN17@GetVideoPa:
	mov	eax, DWORD PTR _Entries$[ebp]
	mov	DWORD PTR tv135[ebp], eax
$LN18@GetVideoPa:
	cmp	DWORD PTR tv135[ebp], 0
	jge	SHORT $LN21@GetVideoPa
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN22@GetVideoPa
$LN21@GetVideoPa:
	mov	ecx, DWORD PTR _Available$[ebp]
	cmp	ecx, DWORD PTR _Entries$[ebp]
	jge	SHORT $LN19@GetVideoPa
	mov	edx, DWORD PTR _Available$[ebp]
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN20@GetVideoPa
$LN19@GetVideoPa:
	mov	eax, DWORD PTR _Entries$[ebp]
	mov	DWORD PTR tv138[ebp], eax
$LN20@GetVideoPa:
	mov	ecx, DWORD PTR tv138[ebp]
	mov	DWORD PTR tv139[ebp], ecx
$LN22@GetVideoPa:
	mov	edx, DWORD PTR _pRetrieved$[ebp]
	mov	eax, DWORD PTR tv139[ebp]
	mov	DWORD PTR [edx], eax
; Line 1239
	mov	ecx, DWORD PTR _pRetrieved$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN4@GetVideoPa
; Line 1240
	mov	DWORD PTR $T82120[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _MediaType$[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82120[ebp]
	jmp	$LN15@GetVideoPa
$LN4@GetVideoPa:
; Line 1245
	mov	edx, DWORD PTR _pPalette$[ebp]
	mov	DWORD PTR _pEntries$[ebp], edx
; Line 1246
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	lea	eax, DWORD PTR [edx+ecx+48]
	mov	ecx, DWORD PTR _StartIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _pColours$[ebp], edx
; Line 1248
	mov	DWORD PTR _Count$80745[ebp], 0
	jmp	SHORT $LN3@GetVideoPa
$LN2@GetVideoPa:
	mov	eax, DWORD PTR _Count$80745[ebp]
	add	eax, 1
	mov	DWORD PTR _Count$80745[ebp], eax
$LN3@GetVideoPa:
	mov	ecx, DWORD PTR _pRetrieved$[ebp]
	mov	edx, DWORD PTR _Count$80745[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN1@GetVideoPa
; Line 1249
	mov	eax, DWORD PTR _Count$80745[ebp]
	mov	ecx, DWORD PTR _pEntries$[ebp]
	mov	edx, DWORD PTR _Count$80745[ebp]
	mov	esi, DWORD PTR _pColours$[ebp]
	mov	dl, BYTE PTR [esi+edx*4+2]
	mov	BYTE PTR [ecx+eax*4], dl
; Line 1250
	mov	eax, DWORD PTR _Count$80745[ebp]
	mov	ecx, DWORD PTR _pEntries$[ebp]
	mov	edx, DWORD PTR _Count$80745[ebp]
	mov	esi, DWORD PTR _pColours$[ebp]
	mov	dl, BYTE PTR [esi+edx*4+1]
	mov	BYTE PTR [ecx+eax*4+1], dl
; Line 1251
	mov	eax, DWORD PTR _Count$80745[ebp]
	mov	ecx, DWORD PTR _pEntries$[ebp]
	mov	edx, DWORD PTR _Count$80745[ebp]
	mov	esi, DWORD PTR _pColours$[ebp]
	mov	dl, BYTE PTR [esi+edx*4]
	mov	BYTE PTR [ecx+eax*4+2], dl
; Line 1252
	mov	eax, DWORD PTR _Count$80745[ebp]
	mov	ecx, DWORD PTR _pEntries$[ebp]
	mov	BYTE PTR [ecx+eax*4+3], 0
; Line 1253
	jmp	SHORT $LN2@GetVideoPa
$LN1@GetVideoPa:
; Line 1254
	mov	DWORD PTR $T82121[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _MediaType$[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82121[ebp]
$LN15@GetVideoPa:
; Line 1255
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@GetVideoPa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 168				; 000000a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN29@GetVideoPa:
	DD	2
	DD	$LN28@GetVideoPa
$LN28@GetVideoPa:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN25@GetVideoPa
	DD	-104					; ffffff98H
	DD	72					; 00000048H
	DD	$LN26@GetVideoPa
$LN26@GetVideoPa:
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN25@GetVideoPa:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__unwindfunclet$?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z$1:
	lea	ecx, DWORD PTR _MediaType$[ebp]
	jmp	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
__ehhandler$?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-168]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetVideoPaletteEntries@CBaseControlVideo@@UAGJJJPAJ0@Z ENDP ; CBaseControlVideo::GetVideoPaletteEntries
xdata$x	SEGMENT
__unwindtable$?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z$0
__ehfuncinfo$?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82134 = -36						; size = 4
$T82133 = -32						; size = 4
_pVideoInfo$ = -28					; size = 4
_cInterfaceLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pWidth$ = 12						; size = 4
_pHeight$ = 16						; size = 4
?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z PROC	; CBaseControlVideo::GetVideoSize
; Line 1264
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1265
	cmp	DWORD PTR _pWidth$[ebp], 0
	jne	SHORT $LN7@GetVideoSi
	mov	eax, -2147467261			; 80004003H
	jmp	$LN8@GetVideoSi
$LN7@GetVideoSi:
; Line 1266
	cmp	DWORD PTR _pHeight$[ebp], 0
	jne	SHORT $LN6@GetVideoSi
	mov	eax, -2147467261			; 80004003H
	jmp	$LN8@GetVideoSi
$LN6@GetVideoSi:
; Line 1267
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@GetVideoSi
	mov	ecx, OFFSET $SG80761
	test	ecx, ecx
	je	SHORT $LN4@GetVideoSi
	push	1267					; 000004f3H
	push	OFFSET $SG80762
	push	OFFSET $SG80763
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@GetVideoSi:
	jmp	SHORT $LN3@GetVideoSi
$LN5@GetVideoSi:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@GetVideoSi
	mov	eax, -2147220983			; 80040209H
	jmp	$LN8@GetVideoSi
$LN3@GetVideoSi:
; Line 1268
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1271
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pVideoInfo$[ebp], eax
; Line 1272
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	jne	SHORT $LN1@GetVideoSi
; Line 1273
	mov	DWORD PTR $T82133[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82133[ebp]
	jmp	SHORT $LN8@GetVideoSi
$LN1@GetVideoSi:
; Line 1274
	mov	eax, DWORD PTR _pWidth$[ebp]
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax], edx
; Line 1275
	mov	eax, DWORD PTR _pHeight$[ebp]
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax], edx
; Line 1276
	mov	DWORD PTR $T82134[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82134[ebp]
$LN8@GetVideoSi:
; Line 1277
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@GetVideoSi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN14@GetVideoSi:
	DD	1
	DD	$LN13@GetVideoSi
$LN13@GetVideoSi:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@GetVideoSi
$LN11@GetVideoSi:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetVideoSize@CBaseControlVideo@@UAGJPAJ0@Z ENDP	; CBaseControlVideo::GetVideoSize
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z$0
__ehfuncinfo$?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82147 = -68						; size = 4
$T82146 = -64						; size = 4
$T82145 = -60						; size = 4
_hr$ = -56						; size = 4
_SourceRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_Left$ = 12						; size = 4
_Top$ = 16						; size = 4
_Width$ = 20						; size = 4
_Height$ = 24						; size = 4
?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z PROC	; CBaseControlVideo::SetSourcePosition
; Line 1286
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1287
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@SetSourceP
	mov	ecx, OFFSET $SG80782
	test	ecx, ecx
	je	SHORT $LN5@SetSourceP
	push	1287					; 00000507H
	push	OFFSET $SG80783
	push	OFFSET $SG80784
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@SetSourceP:
	jmp	SHORT $LN4@SetSourceP
$LN6@SetSourceP:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@SetSourceP
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@SetSourceP
$LN4@SetSourceP:
; Line 1288
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1290
	mov	edx, DWORD PTR _Left$[ebp]
	mov	DWORD PTR _SourceRect$[ebp], edx
; Line 1291
	mov	eax, DWORD PTR _Top$[ebp]
	mov	DWORD PTR _SourceRect$[ebp+4], eax
; Line 1292
	mov	ecx, DWORD PTR _Left$[ebp]
	add	ecx, DWORD PTR _Width$[ebp]
	mov	DWORD PTR _SourceRect$[ebp+8], ecx
; Line 1293
	mov	edx, DWORD PTR _Top$[ebp]
	add	edx, DWORD PTR _Height$[ebp]
	mov	DWORD PTR _SourceRect$[ebp+12], edx
; Line 1297
	mov	esi, esp
	lea	eax, DWORD PTR _SourceRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1298
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@SetSourceP
; Line 1299
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82145[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82145[ebp]
	jmp	SHORT $LN7@SetSourceP
$LN2@SetSourceP:
; Line 1304
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1305
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@SetSourceP
; Line 1306
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82146[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82146[ebp]
	jmp	SHORT $LN7@SetSourceP
$LN1@SetSourceP:
; Line 1308
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82147[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82147[ebp]
$LN7@SetSourceP:
; Line 1309
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@SetSourceP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN14@SetSourceP:
	DD	2
	DD	$LN13@SetSourceP
$LN13@SetSourceP:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@SetSourceP
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@SetSourceP
$LN11@SetSourceP:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@SetSourceP:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetSourcePosition@CBaseControlVideo@@UAGJJJJJ@Z ENDP	; CBaseControlVideo::SetSourcePosition
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z$0
__ehfuncinfo$?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82159 = -56						; size = 4
_cInterfaceLock$ = -48					; size = 4
_SourceRect$ = -36					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pLeft$ = 12						; size = 4
_pTop$ = 16						; size = 4
_pWidth$ = 20						; size = 4
_pHeight$ = 24						; size = 4
?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z PROC	; CBaseControlVideo::GetSourcePosition
; Line 1318
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1319
	cmp	DWORD PTR _pLeft$[ebp], 0
	jne	SHORT $LN8@GetSourceP
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@GetSourceP
$LN8@GetSourceP:
; Line 1320
	cmp	DWORD PTR _pTop$[ebp], 0
	jne	SHORT $LN7@GetSourceP
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@GetSourceP
$LN7@GetSourceP:
; Line 1321
	cmp	DWORD PTR _pWidth$[ebp], 0
	jne	SHORT $LN6@GetSourceP
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@GetSourceP
$LN6@GetSourceP:
; Line 1322
	cmp	DWORD PTR _pHeight$[ebp], 0
	jne	SHORT $LN5@GetSourceP
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@GetSourceP
$LN5@GetSourceP:
; Line 1323
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@GetSourceP
	mov	ecx, OFFSET $SG80815
	test	ecx, ecx
	je	SHORT $LN3@GetSourceP
	push	1323					; 0000052bH
	push	OFFSET $SG80816
	push	OFFSET $SG80817
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@GetSourceP:
	jmp	SHORT $LN2@GetSourceP
$LN4@GetSourceP:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@GetSourceP
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN9@GetSourceP
$LN2@GetSourceP:
; Line 1326
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1327
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1329
	mov	ecx, DWORD PTR _pLeft$[ebp]
	mov	edx, DWORD PTR _SourceRect$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1330
	mov	eax, DWORD PTR _pTop$[ebp]
	mov	ecx, DWORD PTR _SourceRect$[ebp+4]
	mov	DWORD PTR [eax], ecx
; Line 1331
	mov	edx, DWORD PTR _SourceRect$[ebp+8]
	sub	edx, DWORD PTR _SourceRect$[ebp]
	mov	eax, DWORD PTR _pWidth$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1332
	mov	ecx, DWORD PTR _SourceRect$[ebp+12]
	sub	ecx, DWORD PTR _SourceRect$[ebp+4]
	mov	edx, DWORD PTR _pHeight$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1334
	mov	DWORD PTR $T82159[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82159[ebp]
$LN9@GetSourceP:
; Line 1335
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@GetSourceP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN16@GetSourceP:
	DD	2
	DD	$LN15@GetSourceP
$LN15@GetSourceP:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN12@GetSourceP
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN13@GetSourceP
$LN13@GetSourceP:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN12@GetSourceP:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetSourcePosition@CBaseControlVideo@@UAGJPAJ000@Z ENDP	; CBaseControlVideo::GetSourcePosition
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z$0
__ehfuncinfo$?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82173 = -68						; size = 4
$T82172 = -64						; size = 4
$T82171 = -60						; size = 4
_hr$ = -56						; size = 4
_DestinationRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_Left$ = 12						; size = 4
_Top$ = 16						; size = 4
_Width$ = 20						; size = 4
_Height$ = 24						; size = 4
?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z PROC ; CBaseControlVideo::SetDestinationPosition
; Line 1344
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1345
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@SetDestina
	mov	ecx, OFFSET $SG80833
	test	ecx, ecx
	je	SHORT $LN5@SetDestina
	push	1345					; 00000541H
	push	OFFSET $SG80834
	push	OFFSET $SG80835
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@SetDestina:
	jmp	SHORT $LN4@SetDestina
$LN6@SetDestina:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@SetDestina
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@SetDestina
$LN4@SetDestina:
; Line 1346
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1349
	mov	edx, DWORD PTR _Left$[ebp]
	mov	DWORD PTR _DestinationRect$[ebp], edx
; Line 1350
	mov	eax, DWORD PTR _Top$[ebp]
	mov	DWORD PTR _DestinationRect$[ebp+4], eax
; Line 1351
	mov	ecx, DWORD PTR _Left$[ebp]
	add	ecx, DWORD PTR _Width$[ebp]
	mov	DWORD PTR _DestinationRect$[ebp+8], ecx
; Line 1352
	mov	edx, DWORD PTR _Top$[ebp]
	add	edx, DWORD PTR _Height$[ebp]
	mov	DWORD PTR _DestinationRect$[ebp+12], edx
; Line 1356
	mov	esi, esp
	lea	eax, DWORD PTR _DestinationRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1357
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@SetDestina
; Line 1358
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82171[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82171[ebp]
	jmp	SHORT $LN7@SetDestina
$LN2@SetDestina:
; Line 1363
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1364
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@SetDestina
; Line 1365
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82172[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82172[ebp]
	jmp	SHORT $LN7@SetDestina
$LN1@SetDestina:
; Line 1367
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82173[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82173[ebp]
$LN7@SetDestina:
; Line 1368
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@SetDestina
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN14@SetDestina:
	DD	2
	DD	$LN13@SetDestina
$LN13@SetDestina:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@SetDestina
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@SetDestina
$LN11@SetDestina:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@SetDestina:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetDestinationPosition@CBaseControlVideo@@UAGJJJJJ@Z ENDP ; CBaseControlVideo::SetDestinationPosition
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z$0
__ehfuncinfo$?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82185 = -56						; size = 4
_cInterfaceLock$ = -48					; size = 4
_DestinationRect$ = -36					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pLeft$ = 12						; size = 4
_pTop$ = 16						; size = 4
_pWidth$ = 20						; size = 4
_pHeight$ = 24						; size = 4
?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z PROC ; CBaseControlVideo::GetDestinationPosition
; Line 1377
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1380
	cmp	DWORD PTR _pLeft$[ebp], 0
	jne	SHORT $LN8@GetDestina
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@GetDestina
$LN8@GetDestina:
; Line 1381
	cmp	DWORD PTR _pTop$[ebp], 0
	jne	SHORT $LN7@GetDestina
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@GetDestina
$LN7@GetDestina:
; Line 1382
	cmp	DWORD PTR _pWidth$[ebp], 0
	jne	SHORT $LN6@GetDestina
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@GetDestina
$LN6@GetDestina:
; Line 1383
	cmp	DWORD PTR _pHeight$[ebp], 0
	jne	SHORT $LN5@GetDestina
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@GetDestina
$LN5@GetDestina:
; Line 1384
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@GetDestina
	mov	ecx, OFFSET $SG80866
	test	ecx, ecx
	je	SHORT $LN3@GetDestina
	push	1384					; 00000568H
	push	OFFSET $SG80867
	push	OFFSET $SG80868
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@GetDestina:
	jmp	SHORT $LN2@GetDestina
$LN4@GetDestina:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@GetDestina
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN9@GetDestina
$LN2@GetDestina:
; Line 1387
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1388
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1390
	mov	ecx, DWORD PTR _pLeft$[ebp]
	mov	edx, DWORD PTR _DestinationRect$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1391
	mov	eax, DWORD PTR _pTop$[ebp]
	mov	ecx, DWORD PTR _DestinationRect$[ebp+4]
	mov	DWORD PTR [eax], ecx
; Line 1392
	mov	edx, DWORD PTR _DestinationRect$[ebp+8]
	sub	edx, DWORD PTR _DestinationRect$[ebp]
	mov	eax, DWORD PTR _pWidth$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1393
	mov	ecx, DWORD PTR _DestinationRect$[ebp+12]
	sub	ecx, DWORD PTR _DestinationRect$[ebp+4]
	mov	edx, DWORD PTR _pHeight$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1395
	mov	DWORD PTR $T82185[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82185[ebp]
$LN9@GetDestina:
; Line 1396
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@GetDestina
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN16@GetDestina:
	DD	2
	DD	$LN15@GetDestina
$LN15@GetDestina:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN12@GetDestina
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN13@GetDestina
$LN13@GetDestina:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN12@GetDestina:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDestinationPosition@CBaseControlVideo@@UAGJPAJ000@Z ENDP ; CBaseControlVideo::GetDestinationPosition
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z$0
__ehfuncinfo$?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82199 = -68						; size = 4
$T82198 = -64						; size = 4
$T82197 = -60						; size = 4
_hr$ = -56						; size = 4
_SourceRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_SourceLeft$ = 12					; size = 4
?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z PROC		; CBaseControlVideo::put_SourceLeft
; Line 1405
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1406
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@put_Source
	mov	ecx, OFFSET $SG80881
	test	ecx, ecx
	je	SHORT $LN5@put_Source
	push	1406					; 0000057eH
	push	OFFSET $SG80882
	push	OFFSET $SG80883
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_Source:
	jmp	SHORT $LN4@put_Source
$LN6@put_Source:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_Source
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@put_Source
$LN4@put_Source:
; Line 1407
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1409
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1410
	mov	ecx, DWORD PTR _SourceRect$[ebp+8]
	sub	ecx, DWORD PTR _SourceRect$[ebp]
	add	ecx, DWORD PTR _SourceLeft$[ebp]
	mov	DWORD PTR _SourceRect$[ebp+8], ecx
; Line 1411
	mov	edx, DWORD PTR _SourceLeft$[ebp]
	mov	DWORD PTR _SourceRect$[ebp], edx
; Line 1415
	mov	esi, esp
	lea	eax, DWORD PTR _SourceRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1416
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@put_Source
; Line 1417
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82197[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82197[ebp]
	jmp	SHORT $LN7@put_Source
$LN2@put_Source:
; Line 1422
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1423
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@put_Source
; Line 1424
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82198[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82198[ebp]
	jmp	SHORT $LN7@put_Source
$LN1@put_Source:
; Line 1426
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82199[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82199[ebp]
$LN7@put_Source:
; Line 1427
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@put_Source
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@put_Source:
	DD	2
	DD	$LN13@put_Source
$LN13@put_Source:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@put_Source
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@put_Source
$LN11@put_Source:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@put_Source:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?put_SourceLeft@CBaseControlVideo@@UAGJJ@Z ENDP		; CBaseControlVideo::put_SourceLeft
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82211 = -56						; size = 4
_SourceRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pSourceLeft$ = 12					; size = 4
?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z PROC	; CBaseControlVideo::get_SourceLeft
; Line 1433
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1434
	cmp	DWORD PTR _pSourceLeft$[ebp], 0
	jne	SHORT $LN5@get_Source
	mov	eax, -2147467261			; 80004003H
	jmp	$LN6@get_Source
$LN5@get_Source:
; Line 1435
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@get_Source
	mov	ecx, OFFSET $SG80905
	test	ecx, ecx
	je	SHORT $LN3@get_Source
	push	1435					; 0000059bH
	push	OFFSET $SG80906
	push	OFFSET $SG80907
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Source:
	jmp	SHORT $LN2@get_Source
$LN4@get_Source:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Source
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Source
$LN2@get_Source:
; Line 1436
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1439
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1440
	mov	ecx, DWORD PTR _pSourceLeft$[ebp]
	mov	edx, DWORD PTR _SourceRect$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1441
	mov	DWORD PTR $T82211[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82211[ebp]
$LN6@get_Source:
; Line 1442
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_Source
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@get_Source:
	DD	2
	DD	$LN12@get_Source
$LN12@get_Source:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@get_Source
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@get_Source
$LN10@get_Source:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN9@get_Source:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_SourceLeft@CBaseControlVideo@@UAGJPAJ@Z ENDP	; CBaseControlVideo::get_SourceLeft
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z$0
__ehfuncinfo$?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82225 = -68						; size = 4
$T82224 = -64						; size = 4
$T82223 = -60						; size = 4
_hr$ = -56						; size = 4
_SourceRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_SourceWidth$ = 12					; size = 4
?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z PROC	; CBaseControlVideo::put_SourceWidth
; Line 1450
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1451
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@put_Source@2
	mov	ecx, OFFSET $SG80920
	test	ecx, ecx
	je	SHORT $LN5@put_Source@2
	push	1451					; 000005abH
	push	OFFSET $SG80921
	push	OFFSET $SG80922
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_Source@2:
	jmp	SHORT $LN4@put_Source@2
$LN6@put_Source@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_Source@2
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@put_Source@2
$LN4@put_Source@2:
; Line 1452
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1454
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1455
	mov	ecx, DWORD PTR _SourceRect$[ebp]
	add	ecx, DWORD PTR _SourceWidth$[ebp]
	mov	DWORD PTR _SourceRect$[ebp+8], ecx
; Line 1459
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1460
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@put_Source@2
; Line 1461
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82223[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82223[ebp]
	jmp	SHORT $LN7@put_Source@2
$LN2@put_Source@2:
; Line 1466
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1467
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@put_Source@2
; Line 1468
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82224[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82224[ebp]
	jmp	SHORT $LN7@put_Source@2
$LN1@put_Source@2:
; Line 1470
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82225[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82225[ebp]
$LN7@put_Source@2:
; Line 1471
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@put_Source@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN14@put_Source@2:
	DD	2
	DD	$LN13@put_Source@2
$LN13@put_Source@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@put_Source@2
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@put_Source@2
$LN11@put_Source@2:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@put_Source@2:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?put_SourceWidth@CBaseControlVideo@@UAGJJ@Z ENDP	; CBaseControlVideo::put_SourceWidth
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82237 = -56						; size = 4
_SourceRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pSourceWidth$ = 12					; size = 4
?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z PROC	; CBaseControlVideo::get_SourceWidth
; Line 1477
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1478
	cmp	DWORD PTR _pSourceWidth$[ebp], 0
	jne	SHORT $LN5@get_Source@2
	mov	eax, -2147467261			; 80004003H
	jmp	$LN6@get_Source@2
$LN5@get_Source@2:
; Line 1479
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@get_Source@2
	mov	ecx, OFFSET $SG80944
	test	ecx, ecx
	je	SHORT $LN3@get_Source@2
	push	1479					; 000005c7H
	push	OFFSET $SG80945
	push	OFFSET $SG80946
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Source@2:
	jmp	SHORT $LN2@get_Source@2
$LN4@get_Source@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Source@2
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Source@2
$LN2@get_Source@2:
; Line 1480
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1483
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1484
	mov	ecx, DWORD PTR _SourceRect$[ebp+8]
	sub	ecx, DWORD PTR _SourceRect$[ebp]
	mov	edx, DWORD PTR _pSourceWidth$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1485
	mov	DWORD PTR $T82237[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82237[ebp]
$LN6@get_Source@2:
; Line 1486
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_Source@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN13@get_Source@2:
	DD	2
	DD	$LN12@get_Source@2
$LN12@get_Source@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@get_Source@2
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@get_Source@2
$LN10@get_Source@2:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN9@get_Source@2:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_SourceWidth@CBaseControlVideo@@UAGJPAJ@Z ENDP	; CBaseControlVideo::get_SourceWidth
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?put_SourceTop@CBaseControlVideo@@UAGJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put_SourceTop@CBaseControlVideo@@UAGJJ@Z$0
__ehfuncinfo$?put_SourceTop@CBaseControlVideo@@UAGJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?put_SourceTop@CBaseControlVideo@@UAGJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82251 = -68						; size = 4
$T82250 = -64						; size = 4
$T82249 = -60						; size = 4
_hr$ = -56						; size = 4
_SourceRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_SourceTop$ = 12					; size = 4
?put_SourceTop@CBaseControlVideo@@UAGJJ@Z PROC		; CBaseControlVideo::put_SourceTop
; Line 1495
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?put_SourceTop@CBaseControlVideo@@UAGJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1496
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@put_Source@3
	mov	ecx, OFFSET $SG80959
	test	ecx, ecx
	je	SHORT $LN5@put_Source@3
	push	1496					; 000005d8H
	push	OFFSET $SG80960
	push	OFFSET $SG80961
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_Source@3:
	jmp	SHORT $LN4@put_Source@3
$LN6@put_Source@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_Source@3
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@put_Source@3
$LN4@put_Source@3:
; Line 1497
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1499
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1500
	mov	ecx, DWORD PTR _SourceRect$[ebp+12]
	sub	ecx, DWORD PTR _SourceRect$[ebp+4]
	add	ecx, DWORD PTR _SourceTop$[ebp]
	mov	DWORD PTR _SourceRect$[ebp+12], ecx
; Line 1501
	mov	edx, DWORD PTR _SourceTop$[ebp]
	mov	DWORD PTR _SourceRect$[ebp+4], edx
; Line 1505
	mov	esi, esp
	lea	eax, DWORD PTR _SourceRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1506
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@put_Source@3
; Line 1507
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82249[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82249[ebp]
	jmp	SHORT $LN7@put_Source@3
$LN2@put_Source@3:
; Line 1512
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1513
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@put_Source@3
; Line 1514
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82250[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82250[ebp]
	jmp	SHORT $LN7@put_Source@3
$LN1@put_Source@3:
; Line 1516
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82251[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82251[ebp]
$LN7@put_Source@3:
; Line 1517
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@put_Source@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@put_Source@3:
	DD	2
	DD	$LN13@put_Source@3
$LN13@put_Source@3:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@put_Source@3
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@put_Source@3
$LN11@put_Source@3:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@put_Source@3:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?put_SourceTop@CBaseControlVideo@@UAGJJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?put_SourceTop@CBaseControlVideo@@UAGJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?put_SourceTop@CBaseControlVideo@@UAGJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?put_SourceTop@CBaseControlVideo@@UAGJJ@Z ENDP		; CBaseControlVideo::put_SourceTop
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82263 = -56						; size = 4
_SourceRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pSourceTop$ = 12					; size = 4
?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z PROC	; CBaseControlVideo::get_SourceTop
; Line 1523
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1524
	cmp	DWORD PTR _pSourceTop$[ebp], 0
	jne	SHORT $LN5@get_Source@3
	mov	eax, -2147467261			; 80004003H
	jmp	$LN6@get_Source@3
$LN5@get_Source@3:
; Line 1525
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@get_Source@3
	mov	ecx, OFFSET $SG80983
	test	ecx, ecx
	je	SHORT $LN3@get_Source@3
	push	1525					; 000005f5H
	push	OFFSET $SG80984
	push	OFFSET $SG80985
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Source@3:
	jmp	SHORT $LN2@get_Source@3
$LN4@get_Source@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Source@3
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Source@3
$LN2@get_Source@3:
; Line 1526
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1529
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1530
	mov	ecx, DWORD PTR _pSourceTop$[ebp]
	mov	edx, DWORD PTR _SourceRect$[ebp+4]
	mov	DWORD PTR [ecx], edx
; Line 1531
	mov	DWORD PTR $T82263[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82263[ebp]
$LN6@get_Source@3:
; Line 1532
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_Source@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@get_Source@3:
	DD	2
	DD	$LN12@get_Source@3
$LN12@get_Source@3:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@get_Source@3
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@get_Source@3
$LN10@get_Source@3:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN9@get_Source@3:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_SourceTop@CBaseControlVideo@@UAGJPAJ@Z ENDP	; CBaseControlVideo::get_SourceTop
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z$0
__ehfuncinfo$?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82277 = -68						; size = 4
$T82276 = -64						; size = 4
$T82275 = -60						; size = 4
_hr$ = -56						; size = 4
_SourceRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_SourceHeight$ = 12					; size = 4
?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z PROC	; CBaseControlVideo::put_SourceHeight
; Line 1538
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1539
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@put_Source@4
	mov	ecx, OFFSET $SG80998
	test	ecx, ecx
	je	SHORT $LN5@put_Source@4
	push	1539					; 00000603H
	push	OFFSET $SG80999
	push	OFFSET $SG81000
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_Source@4:
	jmp	SHORT $LN4@put_Source@4
$LN6@put_Source@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_Source@4
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@put_Source@4
$LN4@put_Source@4:
; Line 1540
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1542
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1543
	mov	ecx, DWORD PTR _SourceRect$[ebp+4]
	add	ecx, DWORD PTR _SourceHeight$[ebp]
	mov	DWORD PTR _SourceRect$[ebp+12], ecx
; Line 1547
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1548
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@put_Source@4
; Line 1549
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82275[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82275[ebp]
	jmp	SHORT $LN7@put_Source@4
$LN2@put_Source@4:
; Line 1554
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1555
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@put_Source@4
; Line 1556
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82276[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82276[ebp]
	jmp	SHORT $LN7@put_Source@4
$LN1@put_Source@4:
; Line 1558
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82277[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82277[ebp]
$LN7@put_Source@4:
; Line 1559
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@put_Source@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN14@put_Source@4:
	DD	2
	DD	$LN13@put_Source@4
$LN13@put_Source@4:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@put_Source@4
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@put_Source@4
$LN11@put_Source@4:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@put_Source@4:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?put_SourceHeight@CBaseControlVideo@@UAGJJ@Z ENDP	; CBaseControlVideo::put_SourceHeight
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82289 = -56						; size = 4
_SourceRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pSourceHeight$ = 12					; size = 4
?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z PROC	; CBaseControlVideo::get_SourceHeight
; Line 1565
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1566
	cmp	DWORD PTR _pSourceHeight$[ebp], 0
	jne	SHORT $LN5@get_Source@4
	mov	eax, -2147467261			; 80004003H
	jmp	$LN6@get_Source@4
$LN5@get_Source@4:
; Line 1567
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@get_Source@4
	mov	ecx, OFFSET $SG81022
	test	ecx, ecx
	je	SHORT $LN3@get_Source@4
	push	1567					; 0000061fH
	push	OFFSET $SG81023
	push	OFFSET $SG81024
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Source@4:
	jmp	SHORT $LN2@get_Source@4
$LN4@get_Source@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Source@4
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Source@4
$LN2@get_Source@4:
; Line 1568
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1571
	mov	esi, esp
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1572
	mov	ecx, DWORD PTR _SourceRect$[ebp+12]
	sub	ecx, DWORD PTR _SourceRect$[ebp+4]
	mov	edx, DWORD PTR _pSourceHeight$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1573
	mov	DWORD PTR $T82289[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82289[ebp]
$LN6@get_Source@4:
; Line 1574
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_Source@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN13@get_Source@4:
	DD	2
	DD	$LN12@get_Source@4
$LN12@get_Source@4:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@get_Source@4
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@get_Source@4
$LN10@get_Source@4:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN9@get_Source@4:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_SourceHeight@CBaseControlVideo@@UAGJPAJ@Z ENDP	; CBaseControlVideo::get_SourceHeight
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z$0
__ehfuncinfo$?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82303 = -68						; size = 4
$T82302 = -64						; size = 4
$T82301 = -60						; size = 4
_hr$ = -56						; size = 4
_DestinationRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_DestinationLeft$ = 12					; size = 4
?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z PROC	; CBaseControlVideo::put_DestinationLeft
; Line 1583
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1584
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@put_Destin
	mov	ecx, OFFSET $SG81037
	test	ecx, ecx
	je	SHORT $LN5@put_Destin
	push	1584					; 00000630H
	push	OFFSET $SG81038
	push	OFFSET $SG81039
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_Destin:
	jmp	SHORT $LN4@put_Destin
$LN6@put_Destin:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_Destin
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@put_Destin
$LN4@put_Destin:
; Line 1585
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1587
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1588
	mov	ecx, DWORD PTR _DestinationRect$[ebp+8]
	sub	ecx, DWORD PTR _DestinationRect$[ebp]
	add	ecx, DWORD PTR _DestinationLeft$[ebp]
	mov	DWORD PTR _DestinationRect$[ebp+8], ecx
; Line 1589
	mov	edx, DWORD PTR _DestinationLeft$[ebp]
	mov	DWORD PTR _DestinationRect$[ebp], edx
; Line 1593
	mov	esi, esp
	lea	eax, DWORD PTR _DestinationRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1594
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@put_Destin
; Line 1595
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82301[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82301[ebp]
	jmp	SHORT $LN7@put_Destin
$LN2@put_Destin:
; Line 1600
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1601
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@put_Destin
; Line 1602
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82302[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82302[ebp]
	jmp	SHORT $LN7@put_Destin
$LN1@put_Destin:
; Line 1604
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82303[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82303[ebp]
$LN7@put_Destin:
; Line 1605
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@put_Destin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@put_Destin:
	DD	2
	DD	$LN13@put_Destin
$LN13@put_Destin:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@put_Destin
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@put_Destin
$LN11@put_Destin:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@put_Destin:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?put_DestinationLeft@CBaseControlVideo@@UAGJJ@Z ENDP	; CBaseControlVideo::put_DestinationLeft
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82315 = -56						; size = 4
_DestinationRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pDestinationLeft$ = 12					; size = 4
?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z PROC	; CBaseControlVideo::get_DestinationLeft
; Line 1611
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1612
	cmp	DWORD PTR _pDestinationLeft$[ebp], 0
	jne	SHORT $LN5@get_Destin
	mov	eax, -2147467261			; 80004003H
	jmp	$LN6@get_Destin
$LN5@get_Destin:
; Line 1613
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@get_Destin
	mov	ecx, OFFSET $SG81061
	test	ecx, ecx
	je	SHORT $LN3@get_Destin
	push	1613					; 0000064dH
	push	OFFSET $SG81062
	push	OFFSET $SG81063
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Destin:
	jmp	SHORT $LN2@get_Destin
$LN4@get_Destin:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Destin
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Destin
$LN2@get_Destin:
; Line 1614
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1617
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1618
	mov	ecx, DWORD PTR _pDestinationLeft$[ebp]
	mov	edx, DWORD PTR _DestinationRect$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1619
	mov	DWORD PTR $T82315[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82315[ebp]
$LN6@get_Destin:
; Line 1620
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_Destin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@get_Destin:
	DD	2
	DD	$LN12@get_Destin
$LN12@get_Destin:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@get_Destin
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@get_Destin
$LN10@get_Destin:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN9@get_Destin:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_DestinationLeft@CBaseControlVideo@@UAGJPAJ@Z ENDP	; CBaseControlVideo::get_DestinationLeft
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z$0
__ehfuncinfo$?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82329 = -68						; size = 4
$T82328 = -64						; size = 4
$T82327 = -60						; size = 4
_hr$ = -56						; size = 4
_DestinationRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_DestinationWidth$ = 12					; size = 4
?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z PROC	; CBaseControlVideo::put_DestinationWidth
; Line 1626
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1627
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@put_Destin@2
	mov	ecx, OFFSET $SG81076
	test	ecx, ecx
	je	SHORT $LN5@put_Destin@2
	push	1627					; 0000065bH
	push	OFFSET $SG81077
	push	OFFSET $SG81078
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_Destin@2:
	jmp	SHORT $LN4@put_Destin@2
$LN6@put_Destin@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_Destin@2
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@put_Destin@2
$LN4@put_Destin@2:
; Line 1628
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1630
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1631
	mov	ecx, DWORD PTR _DestinationRect$[ebp]
	add	ecx, DWORD PTR _DestinationWidth$[ebp]
	mov	DWORD PTR _DestinationRect$[ebp+8], ecx
; Line 1635
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1636
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@put_Destin@2
; Line 1637
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82327[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82327[ebp]
	jmp	SHORT $LN7@put_Destin@2
$LN2@put_Destin@2:
; Line 1642
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1643
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@put_Destin@2
; Line 1644
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82328[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82328[ebp]
	jmp	SHORT $LN7@put_Destin@2
$LN1@put_Destin@2:
; Line 1646
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82329[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82329[ebp]
$LN7@put_Destin@2:
; Line 1647
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@put_Destin@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN14@put_Destin@2:
	DD	2
	DD	$LN13@put_Destin@2
$LN13@put_Destin@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@put_Destin@2
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@put_Destin@2
$LN11@put_Destin@2:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@put_Destin@2:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?put_DestinationWidth@CBaseControlVideo@@UAGJJ@Z ENDP	; CBaseControlVideo::put_DestinationWidth
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82341 = -56						; size = 4
_DestinationRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pDestinationWidth$ = 12				; size = 4
?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z PROC	; CBaseControlVideo::get_DestinationWidth
; Line 1653
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1654
	cmp	DWORD PTR _pDestinationWidth$[ebp], 0
	jne	SHORT $LN5@get_Destin@2
	mov	eax, -2147467261			; 80004003H
	jmp	$LN6@get_Destin@2
$LN5@get_Destin@2:
; Line 1655
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@get_Destin@2
	mov	ecx, OFFSET $SG81100
	test	ecx, ecx
	je	SHORT $LN3@get_Destin@2
	push	1655					; 00000677H
	push	OFFSET $SG81101
	push	OFFSET $SG81102
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Destin@2:
	jmp	SHORT $LN2@get_Destin@2
$LN4@get_Destin@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Destin@2
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Destin@2
$LN2@get_Destin@2:
; Line 1656
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1659
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1660
	mov	ecx, DWORD PTR _DestinationRect$[ebp+8]
	sub	ecx, DWORD PTR _DestinationRect$[ebp]
	mov	edx, DWORD PTR _pDestinationWidth$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1661
	mov	DWORD PTR $T82341[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82341[ebp]
$LN6@get_Destin@2:
; Line 1662
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_Destin@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN13@get_Destin@2:
	DD	2
	DD	$LN12@get_Destin@2
$LN12@get_Destin@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@get_Destin@2
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@get_Destin@2
$LN10@get_Destin@2:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN9@get_Destin@2:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_DestinationWidth@CBaseControlVideo@@UAGJPAJ@Z ENDP	; CBaseControlVideo::get_DestinationWidth
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z$0
__ehfuncinfo$?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82355 = -68						; size = 4
$T82354 = -64						; size = 4
$T82353 = -60						; size = 4
_hr$ = -56						; size = 4
_DestinationRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_DestinationTop$ = 12					; size = 4
?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z PROC	; CBaseControlVideo::put_DestinationTop
; Line 1671
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1672
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@put_Destin@3
	mov	ecx, OFFSET $SG81115
	test	ecx, ecx
	je	SHORT $LN5@put_Destin@3
	push	1672					; 00000688H
	push	OFFSET $SG81116
	push	OFFSET $SG81117
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_Destin@3:
	jmp	SHORT $LN4@put_Destin@3
$LN6@put_Destin@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_Destin@3
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@put_Destin@3
$LN4@put_Destin@3:
; Line 1673
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1675
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1676
	mov	ecx, DWORD PTR _DestinationRect$[ebp+12]
	sub	ecx, DWORD PTR _DestinationRect$[ebp+4]
	add	ecx, DWORD PTR _DestinationTop$[ebp]
	mov	DWORD PTR _DestinationRect$[ebp+12], ecx
; Line 1677
	mov	edx, DWORD PTR _DestinationTop$[ebp]
	mov	DWORD PTR _DestinationRect$[ebp+4], edx
; Line 1681
	mov	esi, esp
	lea	eax, DWORD PTR _DestinationRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1682
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@put_Destin@3
; Line 1683
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82353[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82353[ebp]
	jmp	SHORT $LN7@put_Destin@3
$LN2@put_Destin@3:
; Line 1688
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1689
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@put_Destin@3
; Line 1690
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82354[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82354[ebp]
	jmp	SHORT $LN7@put_Destin@3
$LN1@put_Destin@3:
; Line 1692
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82355[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82355[ebp]
$LN7@put_Destin@3:
; Line 1693
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@put_Destin@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@put_Destin@3:
	DD	2
	DD	$LN13@put_Destin@3
$LN13@put_Destin@3:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@put_Destin@3
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@put_Destin@3
$LN11@put_Destin@3:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@put_Destin@3:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?put_DestinationTop@CBaseControlVideo@@UAGJJ@Z ENDP	; CBaseControlVideo::put_DestinationTop
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82367 = -56						; size = 4
_DestinationRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pDestinationTop$ = 12					; size = 4
?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z PROC	; CBaseControlVideo::get_DestinationTop
; Line 1699
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1700
	cmp	DWORD PTR _pDestinationTop$[ebp], 0
	jne	SHORT $LN5@get_Destin@3
	mov	eax, -2147467261			; 80004003H
	jmp	$LN6@get_Destin@3
$LN5@get_Destin@3:
; Line 1701
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@get_Destin@3
	mov	ecx, OFFSET $SG81139
	test	ecx, ecx
	je	SHORT $LN3@get_Destin@3
	push	1701					; 000006a5H
	push	OFFSET $SG81140
	push	OFFSET $SG81141
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Destin@3:
	jmp	SHORT $LN2@get_Destin@3
$LN4@get_Destin@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Destin@3
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Destin@3
$LN2@get_Destin@3:
; Line 1702
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1705
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1706
	mov	ecx, DWORD PTR _pDestinationTop$[ebp]
	mov	edx, DWORD PTR _DestinationRect$[ebp+4]
	mov	DWORD PTR [ecx], edx
; Line 1707
	mov	DWORD PTR $T82367[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82367[ebp]
$LN6@get_Destin@3:
; Line 1708
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_Destin@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@get_Destin@3:
	DD	2
	DD	$LN12@get_Destin@3
$LN12@get_Destin@3:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@get_Destin@3
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@get_Destin@3
$LN10@get_Destin@3:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN9@get_Destin@3:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_DestinationTop@CBaseControlVideo@@UAGJPAJ@Z ENDP	; CBaseControlVideo::get_DestinationTop
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z$0
__ehfuncinfo$?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82381 = -68						; size = 4
$T82380 = -64						; size = 4
$T82379 = -60						; size = 4
_hr$ = -56						; size = 4
_DestinationRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_DestinationHeight$ = 12				; size = 4
?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z PROC	; CBaseControlVideo::put_DestinationHeight
; Line 1714
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1715
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@put_Destin@4
	mov	ecx, OFFSET $SG81154
	test	ecx, ecx
	je	SHORT $LN5@put_Destin@4
	push	1715					; 000006b3H
	push	OFFSET $SG81155
	push	OFFSET $SG81156
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@put_Destin@4:
	jmp	SHORT $LN4@put_Destin@4
$LN6@put_Destin@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@put_Destin@4
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@put_Destin@4
$LN4@put_Destin@4:
; Line 1716
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1718
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1719
	mov	ecx, DWORD PTR _DestinationRect$[ebp+4]
	add	ecx, DWORD PTR _DestinationHeight$[ebp]
	mov	DWORD PTR _DestinationRect$[ebp+12], ecx
; Line 1723
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1724
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@put_Destin@4
; Line 1725
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82379[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82379[ebp]
	jmp	SHORT $LN7@put_Destin@4
$LN2@put_Destin@4:
; Line 1730
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1731
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@put_Destin@4
; Line 1732
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82380[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82380[ebp]
	jmp	SHORT $LN7@put_Destin@4
$LN1@put_Destin@4:
; Line 1734
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82381[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82381[ebp]
$LN7@put_Destin@4:
; Line 1735
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@put_Destin@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN14@put_Destin@4:
	DD	2
	DD	$LN13@put_Destin@4
$LN13@put_Destin@4:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@put_Destin@4
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@put_Destin@4
$LN11@put_Destin@4:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@put_Destin@4:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?put_DestinationHeight@CBaseControlVideo@@UAGJJ@Z ENDP	; CBaseControlVideo::put_DestinationHeight
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z$0
__ehfuncinfo$?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82393 = -56						; size = 4
_DestinationRect$ = -48					; size = 16
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pDestinationHeight$ = 12				; size = 4
?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z PROC ; CBaseControlVideo::get_DestinationHeight
; Line 1741
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1742
	cmp	DWORD PTR _pDestinationHeight$[ebp], 0
	jne	SHORT $LN5@get_Destin@4
	mov	eax, -2147467261			; 80004003H
	jmp	$LN6@get_Destin@4
$LN5@get_Destin@4:
; Line 1743
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@get_Destin@4
	mov	ecx, OFFSET $SG81178
	test	ecx, ecx
	je	SHORT $LN3@get_Destin@4
	push	1743					; 000006cfH
	push	OFFSET $SG81179
	push	OFFSET $SG81180
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@get_Destin@4:
	jmp	SHORT $LN2@get_Destin@4
$LN4@get_Destin@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@get_Destin@4
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN6@get_Destin@4
$LN2@get_Destin@4:
; Line 1744
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1747
	mov	esi, esp
	lea	edx, DWORD PTR _DestinationRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1748
	mov	ecx, DWORD PTR _DestinationRect$[ebp+12]
	sub	ecx, DWORD PTR _DestinationRect$[ebp+4]
	mov	edx, DWORD PTR _pDestinationHeight$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1749
	mov	DWORD PTR $T82393[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82393[ebp]
$LN6@get_Destin@4:
; Line 1750
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_Destin@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN13@get_Destin@4:
	DD	2
	DD	$LN12@get_Destin@4
$LN12@get_Destin@4:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@get_Destin@4
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@get_Destin@4
$LN10@get_Destin@4:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN9@get_Destin@4:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_DestinationHeight@CBaseControlVideo@@UAGJPAJ@Z ENDP ; CBaseControlVideo::get_DestinationHeight
xdata$x	SEGMENT
__unwindtable$?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ$0
__ehfuncinfo$?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82405 = -36						; size = 4
$T82404 = -32						; size = 4
_hr$ = -28						; size = 4
_cInterfaceLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ PROC ; CBaseControlVideo::SetDefaultSourcePosition
; Line 1756
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1757
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@SetDefault
	mov	ecx, OFFSET $SG81192
	test	ecx, ecx
	je	SHORT $LN4@SetDefault
	push	1757					; 000006ddH
	push	OFFSET $SG81193
	push	OFFSET $SG81194
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@SetDefault:
	jmp	SHORT $LN3@SetDefault
$LN5@SetDefault:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@SetDefault
	mov	eax, -2147220983			; 80040209H
	jmp	$LN6@SetDefault
$LN3@SetDefault:
; Line 1758
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1759
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+180]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1760
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@SetDefault
; Line 1761
	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82404[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82404[ebp]
	jmp	SHORT $LN6@SetDefault
$LN1@SetDefault:
; Line 1763
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82405[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82405[ebp]
$LN6@SetDefault:
; Line 1764
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@SetDefault
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN12@SetDefault:
	DD	1
	DD	$LN11@SetDefault
$LN11@SetDefault:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@SetDefault
$LN9@SetDefault:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetDefaultSourcePosition@CBaseControlVideo@@UAGJXZ ENDP ; CBaseControlVideo::SetDefaultSourcePosition
xdata$x	SEGMENT
__unwindtable$?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ$0
__ehfuncinfo$?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82415 = -28						; size = 4
_cInterfaceLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ PROC	; CBaseControlVideo::IsUsingDefaultSource
; Line 1770
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1771
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@IsUsingDef
	mov	ecx, OFFSET $SG81209
	test	ecx, ecx
	je	SHORT $LN3@IsUsingDef
	push	1771					; 000006ebH
	push	OFFSET $SG81210
	push	OFFSET $SG81211
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@IsUsingDef:
	jmp	SHORT $LN2@IsUsingDef
$LN4@IsUsingDef:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@IsUsingDef
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN5@IsUsingDef
$LN2@IsUsingDef:
; Line 1772
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1773
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+176]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82415[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82415[ebp]
$LN5@IsUsingDef:
; Line 1774
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@IsUsingDef
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN11@IsUsingDef:
	DD	1
	DD	$LN10@IsUsingDef
$LN10@IsUsingDef:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@IsUsingDef
$LN8@IsUsingDef:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?IsUsingDefaultSource@CBaseControlVideo@@UAGJXZ ENDP	; CBaseControlVideo::IsUsingDefaultSource
xdata$x	SEGMENT
__unwindtable$?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ$0
__ehfuncinfo$?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82426 = -36						; size = 4
$T82425 = -32						; size = 4
_hr$ = -28						; size = 4
_cInterfaceLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ PROC ; CBaseControlVideo::SetDefaultDestinationPosition
; Line 1780
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1781
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@SetDefault@2
	mov	ecx, OFFSET $SG81222
	test	ecx, ecx
	je	SHORT $LN4@SetDefault@2
	push	1781					; 000006f5H
	push	OFFSET $SG81223
	push	OFFSET $SG81224
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@SetDefault@2:
	jmp	SHORT $LN3@SetDefault@2
$LN5@SetDefault@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN3@SetDefault@2
	mov	eax, -2147220983			; 80040209H
	jmp	$LN6@SetDefault@2
$LN3@SetDefault@2:
; Line 1782
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1783
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+164]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1784
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@SetDefault@2
; Line 1785
	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T82425[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82425[ebp]
	jmp	SHORT $LN6@SetDefault@2
$LN1@SetDefault@2:
; Line 1787
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82426[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82426[ebp]
$LN6@SetDefault@2:
; Line 1788
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@SetDefault@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN12@SetDefault@2:
	DD	1
	DD	$LN11@SetDefault@2
$LN11@SetDefault@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@SetDefault@2
$LN9@SetDefault@2:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetDefaultDestinationPosition@CBaseControlVideo@@UAGJXZ ENDP ; CBaseControlVideo::SetDefaultDestinationPosition
xdata$x	SEGMENT
__unwindtable$?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ$0
__ehfuncinfo$?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82436 = -28						; size = 4
_cInterfaceLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ PROC ; CBaseControlVideo::IsUsingDefaultDestination
; Line 1794
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1795
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@IsUsingDef@2
	mov	ecx, OFFSET $SG81239
	test	ecx, ecx
	je	SHORT $LN3@IsUsingDef@2
	push	1795					; 00000703H
	push	OFFSET $SG81240
	push	OFFSET $SG81241
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@IsUsingDef@2:
	jmp	SHORT $LN2@IsUsingDef@2
$LN4@IsUsingDef@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN2@IsUsingDef@2
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN5@IsUsingDef@2
$LN2@IsUsingDef@2:
; Line 1796
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1797
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82436[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82436[ebp]
$LN5@IsUsingDef@2:
; Line 1798
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@IsUsingDef@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN11@IsUsingDef@2:
	DD	1
	DD	$LN10@IsUsingDef@2
$LN10@IsUsingDef@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@IsUsingDef@2
$LN8@IsUsingDef@2:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?IsUsingDefaultDestination@CBaseControlVideo@@UAGJXZ ENDP ; CBaseControlVideo::IsUsingDefaultDestination
PUBLIC	?GetImageSize@CBaseControlVideo@@QAEJPAUtagVIDEOINFOHEADER@@PAJPAUtagRECT@@@Z ; CBaseControlVideo::GetImageSize
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z$0
__ehfuncinfo$?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T82450 = -84						; size = 4
$T82449 = -80						; size = 4
$T82448 = -76						; size = 4
$T82447 = -72						; size = 4
_SourceRect$ = -64					; size = 16
_pVideoInfo$ = -44					; size = 4
_State$ = -36						; size = 4
_cInterfaceLock$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pBufferSize$ = 12					; size = 4
_pVideoImage$ = 16					; size = 4
?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z PROC	; CBaseControlVideo::GetCurrentImage
; Line 1805
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1806
	cmp	DWORD PTR _pBufferSize$[ebp], 0
	jne	SHORT $LN8@GetCurrent
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@GetCurrent
$LN8@GetCurrent:
; Line 1807
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN7@GetCurrent
	mov	ecx, OFFSET $SG81256
	test	ecx, ecx
	je	SHORT $LN6@GetCurrent
	push	1807					; 0000070fH
	push	OFFSET $SG81257
	push	OFFSET $SG81258
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@GetCurrent:
	jmp	SHORT $LN5@GetCurrent
$LN7@GetCurrent:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN5@GetCurrent
	mov	eax, -2147220983			; 80040209H
	jmp	$LN9@GetCurrent
$LN5@GetCurrent:
; Line 1808
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1813
	cmp	DWORD PTR _pVideoImage$[ebp], 0
	je	$LN3@GetCurrent
; Line 1814
	mov	esi, esp
	lea	edx, DWORD PTR _State$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [ecx+16]
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1815
	cmp	DWORD PTR _State$[ebp], 1
	je	SHORT $LN2@GetCurrent
; Line 1816
	mov	DWORD PTR $T82447[ebp], -2147220955	; 80040225H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82447[ebp]
	jmp	$LN9@GetCurrent
$LN2@GetCurrent:
; Line 1818
	mov	esi, esp
	mov	eax, DWORD PTR _pVideoImage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T82448[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82448[ebp]
	jmp	$LN9@GetCurrent
$LN3@GetCurrent:
; Line 1823
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pVideoInfo$[ebp], eax
; Line 1824
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	jne	SHORT $LN1@GetCurrent
; Line 1825
	mov	DWORD PTR $T82449[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82449[ebp]
	jmp	SHORT $LN9@GetCurrent
$LN1@GetCurrent:
; Line 1827
	mov	esi, esp
	lea	ecx, DWORD PTR _SourceRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+188]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1828
	lea	eax, DWORD PTR _SourceRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetImageSize@CBaseControlVideo@@QAEJPAUtagVIDEOINFOHEADER@@PAJPAUtagRECT@@@Z ; CBaseControlVideo::GetImageSize
	mov	DWORD PTR $T82450[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82450[ebp]
$LN9@GetCurrent:
; Line 1829
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@GetCurrent
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN17@GetCurrent:
	DD	3
	DD	$LN16@GetCurrent
$LN16@GetCurrent:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN12@GetCurrent
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN13@GetCurrent
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN14@GetCurrent
$LN14@GetCurrent:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN13@GetCurrent:
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN12@GetCurrent:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z$0:
	lea	ecx, DWORD PTR _cInterfaceLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetCurrentImage@CBaseControlVideo@@UAGJPAJ0@Z ENDP	; CBaseControlVideo::GetCurrentImage
PUBLIC	__$ArrayPad$
EXTRN	_GetBitmapFormatSize@4:PROC
EXTRN	__imp__IsRectEmpty@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv139 = -64						; size = 4
_Size$ = -60						; size = 4
_bih$ = -52						; size = 40
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pVideoInfo$ = 8					; size = 4
_pBufferSize$ = 12					; size = 4
_pSourceRect$ = 16					; size = 4
?GetImageSize@CBaseControlVideo@@QAEJPAUtagVIDEOINFOHEADER@@PAJPAUtagRECT@@@Z PROC ; CBaseControlVideo::GetImageSize
; _this$ = ecx
; Line 1842
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1843
	push	OFFSET $SG81281
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1844
	cmp	DWORD PTR _pSourceRect$[ebp], 0
	jne	SHORT $LN6@GetImageSi
	push	1844					; 00000734H
	push	OFFSET $SG81283
	push	OFFSET $SG81284
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@GetImageSi:
; Line 1850
	cmp	DWORD PTR _pSourceRect$[ebp], 0
	je	SHORT $LN4@GetImageSi
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	je	SHORT $LN4@GetImageSi
	cmp	DWORD PTR _pBufferSize$[ebp], 0
	jne	SHORT $LN5@GetImageSi
$LN4@GetImageSi:
; Line 1852
	mov	eax, -2147418113			; 8000ffffH
	jmp	$LN7@GetImageSi
$LN5@GetImageSi:
; Line 1857
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN3@GetImageSi
; Line 1858
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	cmp	DWORD PTR [ecx+64], 3
	je	SHORT $LN3@GetImageSi
; Line 1859
	mov	eax, -2147024809			; 80070057H
	jmp	$LN7@GetImageSi
$LN3@GetImageSi:
; Line 1863
	mov	esi, esp
	mov	edx, DWORD PTR _pSourceRect$[ebp]
	push	edx
	call	DWORD PTR __imp__IsRectEmpty@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GetImageSi
	push	1863					; 00000747H
	push	OFFSET $SG81292
	push	OFFSET $SG81293
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetImageSi:
; Line 1866
	mov	eax, DWORD PTR _pSourceRect$[ebp]
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _bih$[ebp+4], edx
; Line 1867
	mov	eax, DWORD PTR _pSourceRect$[ebp]
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _bih$[ebp+8], edx
; Line 1868
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	mov	cx, WORD PTR [eax+62]
	mov	WORD PTR _bih$[ebp+14], cx
; Line 1869
	cmp	DWORD PTR _bih$[ebp+8], 0
	jge	SHORT $LN9@GetImageSi
	movzx	edx, WORD PTR _bih$[ebp+14]
	imul	edx, DWORD PTR _bih$[ebp+4]
	add	edx, 31					; 0000001fH
	and	edx, -32				; ffffffe0H
	shr	edx, 3
	imul	edx, DWORD PTR _bih$[ebp+8]
	imul	edx, -1
	mov	DWORD PTR tv139[ebp], edx
	jmp	SHORT $LN10@GetImageSi
$LN9@GetImageSi:
	movzx	eax, WORD PTR _bih$[ebp+14]
	imul	eax, DWORD PTR _bih$[ebp+4]
	add	eax, 31					; 0000001fH
	and	eax, -32				; ffffffe0H
	shr	eax, 3
	imul	eax, DWORD PTR _bih$[ebp+8]
	mov	DWORD PTR tv139[ebp], eax
$LN10@GetImageSi:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _Size$[ebp], ecx
; Line 1870
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	call	_GetBitmapFormatSize@4
	mov	ecx, DWORD PTR _Size$[ebp]
	lea	edx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _Size$[ebp], edx
; Line 1871
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1873
	xor	eax, eax
$LN7@GetImageSi:
; Line 1874
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetImageSi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN13@GetImageSi:
	DD	1
	DD	$LN12@GetImageSi
$LN12@GetImageSi:
	DD	-52					; ffffffccH
	DD	40					; 00000028H
	DD	$LN11@GetImageSi
$LN11@GetImageSi:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	104					; 00000068H
	DB	0
?GetImageSize@CBaseControlVideo@@QAEJPAUtagVIDEOINFOHEADER@@PAJPAUtagRECT@@@Z ENDP ; CBaseControlVideo::GetImageSize
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?CopyImage@CBaseControlVideo@@QAEJPAUIMediaSample@@PAUtagVIDEOINFOHEADER@@PAJPAEPAUtagRECT@@@Z ; CBaseControlVideo::CopyImage
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv174 = -104						; size = 4
tv145 = -100						; size = 4
_Line$81376 = -96					; size = 4
_LinesToSkip$ = -92					; size = 4
_ScanLine$ = -88					; size = 4
_hr$ = -84						; size = 4
_pImageData$ = -80					; size = 4
_Total$ = -76						; size = 4
_Size$ = -72						; size = 4
_bih$ = -64						; size = 40
_pCurrentImage$ = -16					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pMediaSample$ = 8					; size = 4
_pVideoInfo$ = 12					; size = 4
_pBufferSize$ = 16					; size = 4
_pVideoImage$ = 20					; size = 4
_pSourceRect$ = 24					; size = 4
?CopyImage@CBaseControlVideo@@QAEJPAUIMediaSample@@PAUtagVIDEOINFOHEADER@@PAJPAEPAUtagRECT@@@Z PROC ; CBaseControlVideo::CopyImage
; _this$ = ecx
; Line 1889
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1890
	push	OFFSET $SG81318
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1891
	cmp	DWORD PTR _pSourceRect$[ebp], 0
	jne	SHORT $LN11@CopyImage
	push	1891					; 00000763H
	push	OFFSET $SG81320
	push	OFFSET $SG81321
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN11@CopyImage:
; Line 1898
	cmp	DWORD PTR _pMediaSample$[ebp], 0
	je	SHORT $LN9@CopyImage
	cmp	DWORD PTR _pSourceRect$[ebp], 0
	je	SHORT $LN9@CopyImage
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	je	SHORT $LN9@CopyImage
	cmp	DWORD PTR _pVideoImage$[ebp], 0
	je	SHORT $LN9@CopyImage
	cmp	DWORD PTR _pBufferSize$[ebp], 0
	jne	SHORT $LN10@CopyImage
$LN9@CopyImage:
; Line 1900
	mov	eax, -2147418113			; 8000ffffH
	jmp	$LN12@CopyImage
$LN10@CopyImage:
; Line 1905
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN8@CopyImage
; Line 1906
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	cmp	DWORD PTR [ecx+64], 3
	je	SHORT $LN8@CopyImage
; Line 1907
	mov	eax, -2147024809			; 80070057H
	jmp	$LN12@CopyImage
$LN8@CopyImage:
; Line 1911
	mov	esi, esp
	mov	edx, DWORD PTR _pSourceRect$[ebp]
	push	edx
	call	DWORD PTR __imp__IsRectEmpty@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN6@CopyImage
	push	1911					; 00000777H
	push	OFFSET $SG81330
	push	OFFSET $SG81331
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@CopyImage:
; Line 1914
	mov	eax, DWORD PTR _pSourceRect$[ebp]
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _bih$[ebp+4], edx
; Line 1915
	mov	eax, DWORD PTR _pSourceRect$[ebp]
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _bih$[ebp+8], edx
; Line 1916
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	mov	cx, WORD PTR [eax+62]
	mov	WORD PTR _bih$[ebp+14], cx
; Line 1917
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	call	_GetBitmapFormatSize@4
	sub	eax, 48					; 00000030H
	mov	DWORD PTR _Size$[ebp], eax
; Line 1918
	cmp	DWORD PTR _bih$[ebp+8], 0
	jge	SHORT $LN14@CopyImage
	movzx	eax, WORD PTR _bih$[ebp+14]
	imul	eax, DWORD PTR _bih$[ebp+4]
	add	eax, 31					; 0000001fH
	and	eax, -32				; ffffffe0H
	shr	eax, 3
	imul	eax, DWORD PTR _bih$[ebp+8]
	imul	eax, -1
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN15@CopyImage
$LN14@CopyImage:
	movzx	ecx, WORD PTR _bih$[ebp+14]
	imul	ecx, DWORD PTR _bih$[ebp+4]
	add	ecx, 31					; 0000001fH
	and	ecx, -32				; ffffffe0H
	shr	ecx, 3
	imul	ecx, DWORD PTR _bih$[ebp+8]
	mov	DWORD PTR tv145[ebp], ecx
$LN15@CopyImage:
	mov	edx, DWORD PTR _Size$[ebp]
	add	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR _Total$[ebp], edx
; Line 1922
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _Total$[ebp]
	jge	SHORT $LN5@CopyImage
; Line 1923
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN12@CopyImage
$LN5@CopyImage:
; Line 1928
	mov	edx, DWORD PTR _Size$[ebp]
	push	edx
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _pVideoImage$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1929
	mov	edx, DWORD PTR _pSourceRect$[ebp]
	mov	eax, DWORD PTR _pSourceRect$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pVideoImage$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 1930
	mov	eax, DWORD PTR _pSourceRect$[ebp]
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _pVideoImage$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 1931
	cmp	DWORD PTR _bih$[ebp+8], 0
	jge	SHORT $LN16@CopyImage
	movzx	ecx, WORD PTR _bih$[ebp+14]
	imul	ecx, DWORD PTR _bih$[ebp+4]
	add	ecx, 31					; 0000001fH
	and	ecx, -32				; ffffffe0H
	shr	ecx, 3
	imul	ecx, DWORD PTR _bih$[ebp+8]
	imul	ecx, -1
	mov	DWORD PTR tv174[ebp], ecx
	jmp	SHORT $LN17@CopyImage
$LN16@CopyImage:
	movzx	edx, WORD PTR _bih$[ebp+14]
	imul	edx, DWORD PTR _bih$[ebp+4]
	add	edx, 31					; 0000001fH
	and	edx, -32				; ffffffe0H
	shr	edx, 3
	imul	edx, DWORD PTR _bih$[ebp+8]
	mov	DWORD PTR tv174[ebp], edx
$LN17@CopyImage:
	mov	eax, DWORD PTR _pVideoImage$[ebp]
	mov	ecx, DWORD PTR tv174[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 1932
	mov	edx, DWORD PTR _pVideoImage$[ebp]
	add	edx, DWORD PTR _Size$[ebp]
	mov	DWORD PTR _pImageData$[ebp], edx
; Line 1936
	mov	esi, esp
	lea	eax, DWORD PTR _pCurrentImage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMediaSample$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pMediaSample$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1937
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@CopyImage
; Line 1938
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN12@CopyImage
$LN4@CopyImage:
; Line 1943
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	movzx	eax, WORD PTR [edx+62]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR _pSourceRect$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	sub	ecx, DWORD PTR [edx]
	imul	eax, ecx
	mov	DWORD PTR _ScanLine$[ebp], eax
; Line 1944
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _LinesToSkip$[ebp], eax
; Line 1945
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR _pSourceRect$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	mov	eax, DWORD PTR _LinesToSkip$[ebp]
	sub	eax, edx
	mov	DWORD PTR _LinesToSkip$[ebp], eax
; Line 1946
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	movzx	edx, WORD PTR [ecx+62]
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	imul	edx, DWORD PTR [eax+52]
	add	edx, 31					; 0000001fH
	and	edx, -32				; ffffffe0H
	shr	edx, 3
	imul	edx, DWORD PTR _LinesToSkip$[ebp]
	add	edx, DWORD PTR _pCurrentImage$[ebp]
	mov	DWORD PTR _pCurrentImage$[ebp], edx
; Line 1947
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	movzx	eax, WORD PTR [ecx+62]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, DWORD PTR _pSourceRect$[ebp]
	imul	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _pCurrentImage$[ebp]
	mov	DWORD PTR _pCurrentImage$[ebp], eax
; Line 1951
	mov	DWORD PTR _Line$81376[ebp], 0
	jmp	SHORT $LN3@CopyImage
$LN2@CopyImage:
	mov	eax, DWORD PTR _Line$81376[ebp]
	add	eax, 1
	mov	DWORD PTR _Line$81376[ebp], eax
$LN3@CopyImage:
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR _pSourceRect$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR _Line$81376[ebp], eax
	jge	SHORT $LN1@CopyImage
; Line 1952
	mov	ecx, DWORD PTR _ScanLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pCurrentImage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pImageData$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1953
	mov	ecx, DWORD PTR _pVideoImage$[ebp]
	movzx	edx, WORD PTR [ecx+14]
	mov	eax, DWORD PTR _pVideoImage$[ebp]
	imul	edx, DWORD PTR [eax+4]
	add	edx, 31					; 0000001fH
	and	edx, -32				; ffffffe0H
	shr	edx, 3
	add	edx, DWORD PTR _pImageData$[ebp]
	mov	DWORD PTR _pImageData$[ebp], edx
; Line 1954
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	movzx	edx, WORD PTR [ecx+62]
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	imul	edx, DWORD PTR [eax+52]
	add	edx, 31					; 0000001fH
	and	edx, -32				; ffffffe0H
	shr	edx, 3
	add	edx, DWORD PTR _pCurrentImage$[ebp]
	mov	DWORD PTR _pCurrentImage$[ebp], edx
; Line 1955
	jmp	SHORT $LN2@CopyImage
$LN1@CopyImage:
; Line 1956
	xor	eax, eax
$LN12@CopyImage:
; Line 1957
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@CopyImage
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN21@CopyImage:
	DD	2
	DD	$LN20@CopyImage
$LN20@CopyImage:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN18@CopyImage
	DD	-64					; ffffffc0H
	DD	40					; 00000028H
	DD	$LN19@CopyImage
$LN19@CopyImage:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	104					; 00000068H
	DB	0
$LN18@CopyImage:
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
?CopyImage@CBaseControlVideo@@QAEJPAUIMediaSample@@PAUtagVIDEOINFOHEADER@@PAJPAEPAUtagRECT@@@Z ENDP ; CBaseControlVideo::CopyImage
_TEXT	ENDS
EXTRN	?NotifyEvent@CBaseFilter@@QAEJJJJ@Z:PROC	; CBaseFilter::NotifyEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_Height$ = -16						; size = 2
_Width$ = -12						; size = 2
_pVideoInfo$ = -8					; size = 4
_this$ = -4						; size = 4
?OnVideoSizeChange@CBaseControlVideo@@UAEJXZ PROC	; CBaseControlVideo::OnVideoSizeChange
; _this$ = ecx
; Line 1966
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1969
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pVideoInfo$[ebp], eax
; Line 1970
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	jne	SHORT $LN1@OnVideoSiz
; Line 1971
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN2@OnVideoSiz
$LN1@OnVideoSiz:
; Line 1972
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	dx, WORD PTR [ecx+52]
	mov	WORD PTR _Width$[ebp], dx
; Line 1973
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	mov	cx, WORD PTR [eax+56]
	mov	WORD PTR _Height$[ebp], cx
; Line 1977
	push	0
	movzx	edx, WORD PTR _Width$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	movzx	ecx, WORD PTR _Height$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	shl	edx, 16					; 00000010H
	or	eax, edx
	push	eax
	push	10					; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?NotifyEvent@CBaseFilter@@QAEJJJJ@Z	; CBaseFilter::NotifyEvent
$LN2@OnVideoSiz:
; Line 1978
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnVideoSizeChange@CBaseControlVideo@@UAEJXZ ENDP	; CBaseControlVideo::OnVideoSizeChange
; Function compile flags: /Odtp /RTCsu
_Height$ = -24						; size = 4
_Width$ = -12						; size = 4
_this$ = -4						; size = 4
_pSourceRect$ = 8					; size = 4
?CheckSourceRect@CBaseControlVideo@@UAEJPAUtagRECT@@@Z PROC ; CBaseControlVideo::CheckSourceRect
; _this$ = ecx
; Line 1990
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1991
	cmp	DWORD PTR _pSourceRect$[ebp], 0
	jne	SHORT $LN5@CheckSourc
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN6@CheckSourc
$LN5@CheckSourc:
; Line 1993
	mov	esi, esp
	lea	eax, DWORD PTR _Height$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2001
	mov	eax, DWORD PTR _pSourceRect$[ebp]
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN3@CheckSourc
	mov	eax, DWORD PTR _pSourceRect$[ebp]
	cmp	DWORD PTR [eax], 0
	jl	SHORT $LN3@CheckSourc
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR _pSourceRect$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+12]
	jge	SHORT $LN3@CheckSourc
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jge	SHORT $LN4@CheckSourc
$LN3@CheckSourc:
; Line 2003
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN6@CheckSourc
$LN4@CheckSourc:
; Line 2009
	mov	edx, DWORD PTR _pSourceRect$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _Width$[ebp]
	jg	SHORT $LN1@CheckSourc
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _Height$[ebp]
	jle	SHORT $LN2@CheckSourc
$LN1@CheckSourc:
; Line 2011
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN6@CheckSourc
$LN2@CheckSourc:
; Line 2013
	xor	eax, eax
$LN6@CheckSourc:
; Line 2014
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@CheckSourc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN11@CheckSourc:
	DD	2
	DD	$LN10@CheckSourc
$LN10@CheckSourc:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@CheckSourc
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@CheckSourc
$LN9@CheckSourc:
	DB	72					; 00000048H
	DB	101					; 00000065H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN8@CheckSourc:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?CheckSourceRect@CBaseControlVideo@@UAEJPAUtagRECT@@@Z ENDP ; CBaseControlVideo::CheckSourceRect
; Function compile flags: /Odtp /RTCsu
_this$ = -4						; size = 4
_pTargetRect$ = 8					; size = 4
?CheckTargetRect@CBaseControlVideo@@UAEJPAUtagRECT@@@Z PROC ; CBaseControlVideo::CheckTargetRect
; _this$ = ecx
; Line 2027
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2030
	cmp	DWORD PTR _pTargetRect$[ebp], 0
	jne	SHORT $LN6@CheckTarge
; Line 2031
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN7@CheckTarge
$LN6@CheckTarge:
; Line 2037
	mov	eax, DWORD PTR _pTargetRect$[ebp]
	mov	ecx, DWORD PTR _pTargetRect$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jg	SHORT $LN4@CheckTarge
	mov	eax, DWORD PTR _pTargetRect$[ebp]
	mov	ecx, DWORD PTR _pTargetRect$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+12]
	jle	SHORT $LN5@CheckTarge
$LN4@CheckTarge:
; Line 2038
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN7@CheckTarge
$LN5@CheckTarge:
; Line 2043
	mov	eax, DWORD PTR _pTargetRect$[ebp]
	mov	ecx, DWORD PTR _pTargetRect$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	test	edx, edx
	jle	SHORT $LN2@CheckTarge
	mov	eax, DWORD PTR _pTargetRect$[ebp]
	mov	ecx, DWORD PTR _pTargetRect$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	test	edx, edx
	jg	SHORT $LN3@CheckTarge
$LN2@CheckTarge:
; Line 2044
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN7@CheckTarge
$LN3@CheckTarge:
; Line 2047
	mov	esi, esp
	mov	eax, DWORD PTR _pTargetRect$[ebp]
	push	eax
	call	DWORD PTR __imp__IsRectEmpty@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@CheckTarge
	push	2047					; 000007ffH
	push	OFFSET $SG81445
	push	OFFSET $SG81446
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@CheckTarge:
; Line 2048
	xor	eax, eax
$LN7@CheckTarge:
; Line 2049
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckTargetRect@CBaseControlVideo@@UAEJPAUtagRECT@@@Z ENDP ; CBaseControlVideo::CheckTargetRect
_TEXT	ENDS
EXTRN	??_ECBaseControlWindow@@UAEPAXI@Z:PROC		; CBaseControlWindow::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECBaseControlWindow@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECBaseControlWindow@@W3AEPAXI@Z PROC			; [thunk]:CBaseControlWindow::`vector deleting destructor', COMDAT
	sub	ecx, 4
	jmp	??_ECBaseControlWindow@@UAEPAXI@Z
??_ECBaseControlWindow@@W3AEPAXI@Z ENDP			; [thunk]:CBaseControlWindow::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1CBaseControlWindow@@UAE@XZ			; CBaseControlWindow::~CBaseControlWindow
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCBaseControlWindow@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBaseControlWindow@@UAEPAXI@Z PROC			; CBaseControlWindow::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseControlWindow@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCBaseControlWindow@@UAEPAXI@Z ENDP			; CBaseControlWindow::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBaseControlWindow@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBaseControlWindow@@UAE@XZ$0
__ehfuncinfo$??1CBaseControlWindow@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CBaseControlWindow@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBaseControlWindow@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBaseControlWindow@@UAE@XZ PROC			; CBaseControlWindow::~CBaseControlWindow, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBaseControlWindow@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1CBaseWindow@@UAE@XZ			; CBaseWindow::~CBaseWindow
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseVideoWindow@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBaseControlWindow@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseVideoWindow@@UAE@XZ
__ehhandler$??1CBaseControlWindow@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBaseControlWindow@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBaseControlWindow@@UAE@XZ ENDP			; CBaseControlWindow::~CBaseControlWindow
EXTRN	??_ECBaseControlVideo@@UAEPAXI@Z:PROC		; CBaseControlVideo::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECBaseControlVideo@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECBaseControlVideo@@W3AEPAXI@Z PROC			; [thunk]:CBaseControlVideo::`vector deleting destructor', COMDAT
	sub	ecx, 4
	jmp	??_ECBaseControlVideo@@UAEPAXI@Z
??_ECBaseControlVideo@@W3AEPAXI@Z ENDP			; [thunk]:CBaseControlVideo::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1CBaseControlVideo@@UAE@XZ			; CBaseControlVideo::~CBaseControlVideo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCBaseControlVideo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBaseControlVideo@@UAEPAXI@Z PROC			; CBaseControlVideo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseControlVideo@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCBaseControlVideo@@UAEPAXI@Z ENDP			; CBaseControlVideo::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CBaseControlVideo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseControlVideo@@UAE@XZ PROC			; CBaseControlVideo::~CBaseControlVideo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseBasicVideo@@UAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseControlVideo@@UAE@XZ ENDP			; CBaseControlVideo::~CBaseControlVideo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_ECBaseControlWindow@@WBI@AEPAXI@Z
_TEXT	SEGMENT
??_ECBaseControlWindow@@WBI@AEPAXI@Z PROC		; [thunk]:CBaseControlWindow::`vector deleting destructor', COMDAT
	sub	ecx, 24					; 00000018H
	jmp	??_ECBaseControlWindow@@UAEPAXI@Z
??_ECBaseControlWindow@@WBI@AEPAXI@Z ENDP		; [thunk]:CBaseControlWindow::`vector deleting destructor'
_TEXT	ENDS
END
